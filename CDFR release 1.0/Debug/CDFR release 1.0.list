
CDFR release 1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002944  08018ebc  08018ebc  00028ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b800  0801b800  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801b800  0801b800  0002b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b808  0801b808  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b808  0801b808  0002b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b80c  0801b80c  0002b80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801b810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f78  200001f4  0801ba04  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000916c  0801ba04  0003916c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00063336  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009e1a  00000000  00000000  0009355a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002648  00000000  00000000  0009d378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002358  00000000  00000000  0009f9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038945  00000000  00000000  000a1d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000373ec  00000000  00000000  000da65d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f84c0  00000000  00000000  00111a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00209f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6d8  00000000  00000000  00209f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018ea4 	.word	0x08018ea4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08018ea4 	.word	0x08018ea4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <VL53L1X_SetI2CAddress>:
	pVersion->revision = VL53L1X_IMPLEMENTATION_VER_REVISION;
	return Status;
}

VL53L1X_ERROR VL53L1X_SetI2CAddress(VL53L1_Dev_t dev, uint8_t new_address)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	VL53L1X_ERROR status = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS, new_address >> 1);
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f99c 	bl	8001164 <VL53L1_WrByte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	return status;
 8000e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <VL53L1X_SensorInit>:

VL53L1X_ERROR VL53L1X_SensorInit(VL53L1_Dev_t dev)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73bb      	strb	r3, [r7, #14]
	uint8_t Addr = 0x00, tmp=0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	737b      	strb	r3, [r7, #13]

	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e50:	232d      	movs	r3, #45	; 0x2d
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e00e      	b.n	8000e74 <VL53L1X_SensorInit+0x38>
		status = VL53L1_WrByte(&dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	3b2d      	subs	r3, #45	; 0x2d
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <VL53L1X_SensorInit+0xa4>)
 8000e60:	5cd2      	ldrb	r2, [r2, r3]
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f97d 	bl	8001164 <VL53L1_WrByte>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73bb      	strb	r3, [r7, #14]
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2b87      	cmp	r3, #135	; 0x87
 8000e78:	d9ed      	bls.n	8000e56 <VL53L1X_SensorInit+0x1a>
	}
	status = VL53L1X_StartRanging(dev);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f86c 	bl	8000f58 <VL53L1X_StartRanging>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000e84:	e007      	b.n	8000e96 <VL53L1X_SensorInit+0x5a>
			status = VL53L1X_CheckForDataReady(dev, &tmp);
 8000e86:	f107 030d 	add.w	r3, r7, #13
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f88b 	bl	8000fa8 <VL53L1X_CheckForDataReady>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73bb      	strb	r3, [r7, #14]
	while(tmp==0){
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f4      	beq.n	8000e86 <VL53L1X_SensorInit+0x4a>
	}
	tmp  = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	737b      	strb	r3, [r7, #13]
	status = VL53L1X_ClearInterrupt(dev);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f81f 	bl	8000ee4 <VL53L1X_ClearInterrupt>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73bb      	strb	r3, [r7, #14]
	status = VL53L1X_StopRanging(dev);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f868 	bl	8000f80 <VL53L1X_StopRanging>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2209      	movs	r2, #9
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f952 	bl	8001164 <VL53L1_WrByte>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73bb      	strb	r3, [r7, #14]
	status = VL53L1_WrByte(&dev, 0x0B, 0); /* start VHV from the previous temperature */
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210b      	movs	r1, #11
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f94a 	bl	8001164 <VL53L1_WrByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73bb      	strb	r3, [r7, #14]
	return status;
 8000ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	0801b204 	.word	0x0801b204

08000ee4 <VL53L1X_ClearInterrupt>:

VL53L1X_ERROR VL53L1X_ClearInterrupt(VL53L1_Dev_t dev)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2186      	movs	r1, #134	; 0x86
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f934 	bl	8001164 <VL53L1_WrByte>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <VL53L1X_GetInterruptPolarity>:
	status = VL53L1_WrByte(&dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(VL53L1_Dev_t dev, uint8_t *pInterruptPolarity)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	VL53L1X_ERROR status = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_RdByte(&dev, GPIO_HV_MUX__CTRL, &Temp);
 8000f1a:	f107 020e 	add.w	r2, r7, #14
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2130      	movs	r1, #48	; 0x30
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f938 	bl	8001198 <VL53L1_RdByte>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	Temp = Temp & 0x10;
 8000f2c:	7bbb      	ldrb	r3, [r7, #14]
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73bb      	strb	r3, [r7, #14]
	*pInterruptPolarity = !(Temp>>4);
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
	return status;
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(VL53L1_Dev_t dev)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	2187      	movs	r1, #135	; 0x87
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f8fa 	bl	8001164 <VL53L1_WrByte>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(VL53L1_Dev_t dev)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	VL53L1X_ERROR status = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

	status = VL53L1_WrByte(&dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2187      	movs	r1, #135	; 0x87
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f8e6 	bl	8001164 <VL53L1_WrByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(VL53L1_Dev_t dev, uint8_t *isDataReady)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]

	status = VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8000fb6:	f107 030d 	add.w	r3, r7, #13
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffa5 	bl	8000f0c <VL53L1X_GetInterruptPolarity>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
	status = VL53L1_RdByte(&dev, GPIO__TIO_HV_STATUS, &Temp);
 8000fc6:	f107 020e 	add.w	r2, r7, #14
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2131      	movs	r1, #49	; 0x31
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f8e2 	bl	8001198 <VL53L1_RdByte>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
	/* Read in the register to check if a new value is available */
	if (status == 0){
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <VL53L1X_CheckForDataReady+0x52>
		if ((Temp & 1) == IntPol)
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	7b7a      	ldrb	r2, [r7, #13]
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d103      	bne.n	8000ff4 <VL53L1X_CheckForDataReady+0x4c>
			*isDataReady = 1;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e002      	b.n	8000ffa <VL53L1X_CheckForDataReady+0x52>
		else
			*isDataReady = 0;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(VL53L1_Dev_t dev, uint8_t *state)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	73bb      	strb	r3, [r7, #14]

	status = VL53L1_RdByte(&dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001018:	f107 020e 	add.w	r2, r7, #14
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	21e5      	movs	r1, #229	; 0xe5
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f8b9 	bl	8001198 <VL53L1_RdByte>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	*state = tmp;
 800102a:	7bba      	ldrb	r2, [r7, #14]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	701a      	strb	r2, [r3, #0]
	return status;
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(VL53L1_Dev_t dev, uint16_t *distance)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp;

	status = (VL53L1_RdWord(&dev,
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2196      	movs	r1, #150	; 0x96
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f8b9 	bl	80011ca <VL53L1_RdWord>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 800105c:	89ba      	ldrh	r2, [r7, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	801a      	strh	r2, [r3, #0]
	return status;
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <VL53L1X_GetRangeStatus>:
	*ambRate = tmp*8;
	return status;
}

VL53L1X_ERROR VL53L1X_GetRangeStatus(VL53L1_Dev_t dev, uint8_t *rangeStatus)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	VL53L1X_ERROR status = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
	uint8_t RgSt;

	status = VL53L1_RdByte(&dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 800107e:	f107 020e 	add.w	r2, r7, #14
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2189      	movs	r1, #137	; 0x89
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f886 	bl	8001198 <VL53L1_RdByte>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	RgSt = RgSt&0x1F;
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73bb      	strb	r3, [r7, #14]
	switch (RgSt) {
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	3b03      	subs	r3, #3
 800109e:	2b14      	cmp	r3, #20
 80010a0:	d853      	bhi.n	800114a <VL53L1X_GetRangeStatus+0xda>
 80010a2:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <VL53L1X_GetRangeStatus+0x38>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	0800111b 	.word	0x0800111b
 80010ac:	08001109 	.word	0x08001109
 80010b0:	08001115 	.word	0x08001115
 80010b4:	08001103 	.word	0x08001103
 80010b8:	08001127 	.word	0x08001127
 80010bc:	0800110f 	.word	0x0800110f
 80010c0:	080010fd 	.word	0x080010fd
 80010c4:	0800114b 	.word	0x0800114b
 80010c8:	0800114b 	.word	0x0800114b
 80010cc:	0800112d 	.word	0x0800112d
 80010d0:	08001145 	.word	0x08001145
 80010d4:	0800114b 	.word	0x0800114b
 80010d8:	0800114b 	.word	0x0800114b
 80010dc:	0800114b 	.word	0x0800114b
 80010e0:	0800114b 	.word	0x0800114b
 80010e4:	08001133 	.word	0x08001133
 80010e8:	08001121 	.word	0x08001121
 80010ec:	0800114b 	.word	0x0800114b
 80010f0:	0800114b 	.word	0x0800114b
 80010f4:	08001139 	.word	0x08001139
 80010f8:	0800113f 	.word	0x0800113f
	case 9:
		RgSt = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73bb      	strb	r3, [r7, #14]
		break;
 8001100:	e026      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 6:
		RgSt = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	73bb      	strb	r3, [r7, #14]
		break;
 8001106:	e023      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 4:
		RgSt = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	73bb      	strb	r3, [r7, #14]
		break;
 800110c:	e020      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 8:
		RgSt = 3;
 800110e:	2303      	movs	r3, #3
 8001110:	73bb      	strb	r3, [r7, #14]
		break;
 8001112:	e01d      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 5:
		RgSt = 4;
 8001114:	2304      	movs	r3, #4
 8001116:	73bb      	strb	r3, [r7, #14]
		break;
 8001118:	e01a      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 3:
		RgSt = 5;
 800111a:	2305      	movs	r3, #5
 800111c:	73bb      	strb	r3, [r7, #14]
		break;
 800111e:	e017      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 19:
		RgSt = 6;
 8001120:	2306      	movs	r3, #6
 8001122:	73bb      	strb	r3, [r7, #14]
		break;
 8001124:	e014      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 7:
		RgSt = 7;
 8001126:	2307      	movs	r3, #7
 8001128:	73bb      	strb	r3, [r7, #14]
		break;
 800112a:	e011      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 12:
		RgSt = 9;
 800112c:	2309      	movs	r3, #9
 800112e:	73bb      	strb	r3, [r7, #14]
		break;
 8001130:	e00e      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 18:
		RgSt = 10;
 8001132:	230a      	movs	r3, #10
 8001134:	73bb      	strb	r3, [r7, #14]
		break;
 8001136:	e00b      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 22:
		RgSt = 11;
 8001138:	230b      	movs	r3, #11
 800113a:	73bb      	strb	r3, [r7, #14]
		break;
 800113c:	e008      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 23:
		RgSt = 12;
 800113e:	230c      	movs	r3, #12
 8001140:	73bb      	strb	r3, [r7, #14]
		break;
 8001142:	e005      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	case 13:
		RgSt = 13;
 8001144:	230d      	movs	r3, #13
 8001146:	73bb      	strb	r3, [r7, #14]
		break;
 8001148:	e002      	b.n	8001150 <VL53L1X_GetRangeStatus+0xe0>
	default:
		RgSt = 255;
 800114a:	23ff      	movs	r3, #255	; 0xff
 800114c:	73bb      	strb	r3, [r7, #14]
		break;
 800114e:	bf00      	nop
	}
	*rangeStatus = RgSt;
 8001150:	7bba      	ldrb	r2, [r7, #14]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	701a      	strb	r2, [r3, #0]
	return status;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop

08001164 <VL53L1_WrByte>:
#include <math.h>


#include "i2c.h"

int8_t VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]

	uint8_t status = I2C_STATUS_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
	status = F_I2C2_WriteRegister(Dev->addr, index, &data, 1);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	b2d8      	uxtb	r0, r3
 800117e:	1c7a      	adds	r2, r7, #1
 8001180:	8879      	ldrh	r1, [r7, #2]
 8001182:	2301      	movs	r3, #1
 8001184:	f013 ff72 	bl	801506c <F_I2C2_WriteRegister>
 8001188:	4603      	mov	r3, r0
 800118a:	73fb      	strb	r3, [r7, #15]

	return status; // to be implemented
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <VL53L1_RdByte>:
	status = F_I2C2_WriteRegister(Dev->addr, index, &to_send[3], 1);

	return status; // to be implemented
}

int8_t VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	460b      	mov	r3, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	817b      	strh	r3, [r7, #10]

	uint8_t status = I2C_STATUS_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 1, data);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	8979      	ldrh	r1, [r7, #10]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f013 ffdd 	bl	8015174 <F_I2C2_ReadRegisterVL53L1X>
 80011ba:	4603      	mov	r3, r0
 80011bc:	75fb      	strb	r3, [r7, #23]

	return status; // to be implemented
 80011be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <VL53L1_RdWord>:

int8_t VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	460b      	mov	r3, r1
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	817b      	strh	r3, [r7, #10]

	uint8_t read_values[2] = {0,0};
 80011d8:	2300      	movs	r3, #0
 80011da:	753b      	strb	r3, [r7, #20]
 80011dc:	2300      	movs	r3, #0
 80011de:	757b      	strb	r3, [r7, #21]
	uint8_t status = I2C_STATUS_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	75fb      	strb	r3, [r7, #23]

	status = F_I2C2_ReadRegisterVL53L1X(Dev->addr, index, 2, read_values);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b2d8      	uxtb	r0, r3
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	8979      	ldrh	r1, [r7, #10]
 80011f0:	2202      	movs	r2, #2
 80011f2:	f013 ffbf 	bl	8015174 <F_I2C2_ReadRegisterVL53L1X>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]

	*data = (read_values[0] << 8) + read_values[1];
 80011fa:	7d3b      	ldrb	r3, [r7, #20]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b29a      	uxth	r2, r3
 8001202:	7d7b      	ldrb	r3, [r7, #21]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	801a      	strh	r2, [r3, #0]

	return status; // to be implemented
 800120e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94d 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f014 fa44 	bl	80156dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f965 	bl	800154e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f92d 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000128 	.word	0x20000128
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000004 	.word	0x20000004
 80012e4:	200003f8 	.word	0x200003f8

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200003f8 	.word	0x200003f8

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_Delay+0x40>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000004 	.word	0x20000004

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001578:	4baa      	ldr	r3, [pc, #680]	; (8001824 <HAL_ETH_Init+0x2bc>)
 800157a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e185      	b.n	800189a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d106      	bne.n	80015a8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f012 ff0c 	bl	80143c0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b9e      	ldr	r3, [pc, #632]	; (8001828 <HAL_ETH_Init+0x2c0>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	4a9d      	ldr	r2, [pc, #628]	; (8001828 <HAL_ETH_Init+0x2c0>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6453      	str	r3, [r2, #68]	; 0x44
 80015b8:	4b9b      	ldr	r3, [pc, #620]	; (8001828 <HAL_ETH_Init+0x2c0>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015c4:	4b99      	ldr	r3, [pc, #612]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a98      	ldr	r2, [pc, #608]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015ce:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015d0:	4b96      	ldr	r3, [pc, #600]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4994      	ldr	r1, [pc, #592]	; (800182c <HAL_ETH_Init+0x2c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015f6:	f7ff fe77 	bl	80012e8 <HAL_GetTick>
 80015fa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015fc:	e011      	b.n	8001622 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015fe:	f7ff fe73 	bl	80012e8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800160c:	d909      	bls.n	8001622 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e13b      	b.n	800189a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e4      	bne.n	80015fe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f023 031c 	bic.w	r3, r3, #28
 8001642:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001644:	f003 f812 	bl	800466c <HAL_RCC_GetHCLKFreq>
 8001648:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4a78      	ldr	r2, [pc, #480]	; (8001830 <HAL_ETH_Init+0x2c8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d908      	bls.n	8001664 <HAL_ETH_Init+0xfc>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4a77      	ldr	r2, [pc, #476]	; (8001834 <HAL_ETH_Init+0x2cc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d804      	bhi.n	8001664 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e027      	b.n	80016b4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	4a73      	ldr	r2, [pc, #460]	; (8001834 <HAL_ETH_Init+0x2cc>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d908      	bls.n	800167e <HAL_ETH_Init+0x116>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4a72      	ldr	r2, [pc, #456]	; (8001838 <HAL_ETH_Init+0x2d0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d804      	bhi.n	800167e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f043 030c 	orr.w	r3, r3, #12
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e01a      	b.n	80016b4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_ETH_Init+0x2d0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d903      	bls.n	800168e <HAL_ETH_Init+0x126>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4a6c      	ldr	r2, [pc, #432]	; (800183c <HAL_ETH_Init+0x2d4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d911      	bls.n	80016b2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_ETH_Init+0x2d4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d908      	bls.n	80016a8 <HAL_ETH_Init+0x140>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_ETH_Init+0x2d8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d804      	bhi.n	80016a8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e005      	b.n	80016b4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	e000      	b.n	80016b4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80016b2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fb9a 	bl	8001dfc <HAL_ETH_WritePHYRegister>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80016d2:	6939      	ldr	r1, [r7, #16]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fc27 	bl	8001f28 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0d9      	b.n	800189a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016e6:	20ff      	movs	r0, #255	; 0xff
 80016e8:	f7ff fe0a 	bl	8001300 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a7 	beq.w	8001844 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016f6:	f7ff fdf7 	bl	80012e8 <HAL_GetTick>
 80016fa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fb11 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800170a:	f7ff fded 	bl	80012e8 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d90f      	bls.n	800173c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001720:	6939      	ldr	r1, [r7, #16]
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fc00 	bl	8001f28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0ae      	b.n	800189a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0da      	beq.n	80016fc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174a:	2100      	movs	r1, #0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fb55 	bl	8001dfc <HAL_ETH_WritePHYRegister>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fbe2 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800176c:	2301      	movs	r3, #1
 800176e:	e094      	b.n	800189a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fdba 	bl	80012e8 <HAL_GetTick>
 8001774:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	461a      	mov	r2, r3
 800177c:	2101      	movs	r1, #1
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fad4 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001784:	f7ff fdb0 	bl	80012e8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4293      	cmp	r3, r2
 8001794:	d90f      	bls.n	80017b6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800179a:	6939      	ldr	r1, [r7, #16]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fbc3 	bl	8001f28 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e071      	b.n	800189a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0da      	beq.n	8001776 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	461a      	mov	r2, r3
 80017c6:	211f      	movs	r1, #31
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 faaf 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017d8:	6939      	ldr	r1, [r7, #16]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fba4 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017e8:	2301      	movs	r3, #1
 80017ea:	e056      	b.n	800189a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	e002      	b.n	8001806 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	e037      	b.n	8001888 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	e032      	b.n	8001888 <HAL_ETH_Init+0x320>
 8001822:	bf00      	nop
 8001824:	03938700 	.word	0x03938700
 8001828:	40023800 	.word	0x40023800
 800182c:	40013800 	.word	0x40013800
 8001830:	01312cff 	.word	0x01312cff
 8001834:	02160ebf 	.word	0x02160ebf
 8001838:	039386ff 	.word	0x039386ff
 800183c:	05f5e0ff 	.word	0x05f5e0ff
 8001840:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001854:	4313      	orrs	r3, r2
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 facd 	bl	8001dfc <HAL_ETH_WritePHYRegister>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fb5a 	bl	8001f28 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00c      	b.n	800189a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001880:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001884:	f7ff fd3c 	bl	8001300 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001888:	6939      	ldr	r1, [r7, #16]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fb4c 	bl	8001f28 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop

080018a4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_ETH_DMATxDescListInit+0x20>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e052      	b.n	800196a <HAL_ETH_DMATxDescListInit+0xc6>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e030      	b.n	8001942 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	015b      	lsls	r3, r3, #5
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018f0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3b01      	subs	r3, #1
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	d208      	bcs.n	8001936 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	015b      	lsls	r3, r3, #5
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4413      	add	r3, r2
 800192e:	461a      	mov	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	e002      	b.n	800193c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ca      	bcc.n	80018e0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001954:	3310      	adds	r3, #16
 8001956:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001976:	b480      	push	{r7}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_ETH_DMARxDescListInit+0x20>
 8001992:	2302      	movs	r3, #2
 8001994:	e056      	b.n	8001a44 <HAL_ETH_DMARxDescListInit+0xce>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e034      	b.n	8001a1c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019c2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019ca:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	461a      	mov	r2, r3
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d208      	bcs.n	8001a10 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4413      	add	r3, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	e002      	b.n	8001a16 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3c6      	bcc.n	80019b2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	330c      	adds	r3, #12
 8001a30:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ETH_TransmitFrame+0x24>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0cd      	b.n	8001c10 <HAL_ETH_TransmitFrame+0x1c0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0b8      	b.n	8001c10 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da09      	bge.n	8001abc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2212      	movs	r2, #18
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0a9      	b.n	8001c10 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d915      	bls.n	8001af2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4a54      	ldr	r2, [pc, #336]	; (8001c1c <HAL_ETH_TransmitFrame+0x1cc>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_ETH_TransmitFrame+0x1cc>)
 8001ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e001      	b.n	8001af6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001af2:	2301      	movs	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d11c      	bne.n	8001b36 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001b0a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b16:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b26:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b34:	e04b      	b.n	8001bce <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e044      	b.n	8001bc6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b60:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b6a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d116      	bne.n	8001ba4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b84:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b8a:	fb02 f203 	mul.w	r2, r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b96:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ba2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bb2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3b6      	bcc.n	8001b3c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	3314      	adds	r3, #20
 8001bec:	2204      	movs	r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	ac02b00b 	.word	0xac02b00b
 8001c20:	fffffa0c 	.word	0xfffffa0c

08001c24 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ETH_GetReceivedFrame+0x1a>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e070      	b.n	8001d20 <HAL_ETH_GetReceivedFrame+0xfc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db5a      	blt.n	8001d0e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d030      	beq.n	8001cc8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d103      	bne.n	8001c80 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c94:	3b04      	subs	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e02b      	b.n	8001d20 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cf6:	e00a      	b.n	8001d0e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	460b      	mov	r3, r1
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b82      	cmp	r3, #130	; 0x82
 8001d4c:	d101      	bne.n	8001d52 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e050      	b.n	8001df4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2282      	movs	r2, #130	; 0x82
 8001d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 031c 	and.w	r3, r3, #28
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8a1b      	ldrh	r3, [r3, #16]
 8001d6e:	02db      	lsls	r3, r3, #11
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d78:	897b      	ldrh	r3, [r7, #10]
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9e:	f7ff faa3 	bl	80012e8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da4:	e015      	b.n	8001dd2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001da6:	f7ff fa9f 	bl	80012e8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db4:	d309      	bcc.n	8001dca <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e014      	b.n	8001df4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e4      	bne.n	8001da6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	460b      	mov	r3, r1
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b42      	cmp	r3, #66	; 0x42
 8001e1c:	d101      	bne.n	8001e22 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e04e      	b.n	8001ec0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2242      	movs	r2, #66	; 0x42
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 031c 	and.w	r3, r3, #28
 8001e38:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8a1b      	ldrh	r3, [r3, #16]
 8001e3e:	02db      	lsls	r3, r3, #11
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e48:	897b      	ldrh	r3, [r7, #10]
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7ff fa36 	bl	80012e8 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e7e:	e015      	b.n	8001eac <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e80:	f7ff fa32 	bl	80012e8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d309      	bcc.n	8001ea4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e00d      	b.n	8001ec0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1e4      	bne.n	8001e80 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ETH_Start+0x16>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e01f      	b.n	8001f1e <HAL_ETH_Start+0x56>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa1c 	bl	800232c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 fa36 	bl	8002366 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa80 	bl	8002400 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fa4d 	bl	80023a0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fa62 	bl	80023d0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b0      	sub	sp, #192	; 0xc0
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f44:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f56:	2300      	movs	r3, #0
 8001f58:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f72:	663b      	str	r3, [r7, #96]	; 0x60
 8001f74:	e001      	b.n	8001f7a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f84:	2300      	movs	r3, #0
 8001f86:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002000:	4bac      	ldr	r3, [pc, #688]	; (80022b4 <ETH_MACDMAConfig+0x38c>)
 8002002:	4013      	ands	r3, r2
 8002004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002008:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800200c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002010:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002014:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800201a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800201c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800201e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002022:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002028:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800202a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800202c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800202e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002030:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002034:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002038:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800203c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002050:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff f94f 	bl	8001300 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800206c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800206e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002070:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002074:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800207a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800207c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002080:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002086:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800208c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002090:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002098:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800209a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff f92a 	bl	8001300 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020dc:	4013      	ands	r3, r2
 80020de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002104:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002106:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002118:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff f8eb 	bl	8001300 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002132:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002134:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002138:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff f8d6 	bl	8001300 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002162:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002166:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002182:	2304      	movs	r3, #4
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800218c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021a6:	2300      	movs	r3, #0
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b2:	3318      	adds	r3, #24
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021be:	4b3e      	ldr	r3, [pc, #248]	; (80022b8 <ETH_MACDMAConfig+0x390>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fa:	3318      	adds	r3, #24
 80021fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002200:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	3318      	adds	r3, #24
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002212:	2001      	movs	r0, #1
 8002214:	f7ff f874 	bl	8001300 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	3318      	adds	r3, #24
 8002222:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002226:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800222c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002230:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002234:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002238:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800223e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002242:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff f84d 	bl	8001300 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002272:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10f      	bne.n	800229c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	331c      	adds	r3, #28
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002298:	331c      	adds	r3, #28
 800229a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	461a      	mov	r2, r3
 80022a2:	2100      	movs	r1, #0
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f809 	bl	80022bc <ETH_MACAddressConfig>
}
 80022aa:	bf00      	nop
 80022ac:	37c0      	adds	r7, #192	; 0xc0
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	ff20810f 	.word	0xff20810f
 80022b8:	f8de3f23 	.word	0xf8de3f23

080022bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3305      	adds	r3, #5
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	3204      	adds	r2, #4
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <ETH_MACAddressConfig+0x68>)
 80022de:	4413      	add	r3, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3303      	adds	r3, #3
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	061a      	lsls	r2, r3, #24
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3302      	adds	r3, #2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3301      	adds	r3, #1
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4313      	orrs	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <ETH_MACAddressConfig+0x6c>)
 800230e:	4413      	add	r3, r2
 8002310:	461a      	mov	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40028040 	.word	0x40028040
 8002328:	40028044 	.word	0x40028044

0800232c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002350:	2001      	movs	r0, #1
 8002352:	f000 f87f 	bl	8002454 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	601a      	str	r2, [r3, #0]
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 f862 	bl	8002454 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	3318      	adds	r3, #24
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	3318      	adds	r3, #24
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	3318      	adds	r3, #24
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0202 	orr.w	r2, r2, #2
 80023ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f0:	3318      	adds	r3, #24
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	3318      	adds	r3, #24
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	3318      	adds	r3, #24
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002430:	3318      	adds	r3, #24
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f000 f80c 	bl	8002454 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	3318      	adds	r3, #24
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <ETH_Delay+0x34>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <ETH_Delay+0x38>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a5b      	lsrs	r3, r3, #9
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002470:	bf00      	nop
  } 
  while (Delay --);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	60fa      	str	r2, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f9      	bne.n	8002470 <ETH_Delay+0x1c>
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000128 	.word	0x20000128
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e177      	b.n	800279c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8166 	bne.w	8002796 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x4a>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b12      	cmp	r3, #18
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d00b      	beq.n	8002576 <HAL_GPIO_Init+0xe6>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256a:	2b11      	cmp	r3, #17
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b12      	cmp	r3, #18
 8002574:	d130      	bne.n	80025d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 0201 	and.w	r2, r3, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80c0 	beq.w	8002796 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_GPIO_Init+0x320>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a64      	ldr	r2, [pc, #400]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <HAL_GPIO_Init+0x320>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_GPIO_Init+0x324>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_GPIO_Init+0x328>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d037      	beq.n	80026ce <HAL_GPIO_Init+0x23e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_GPIO_Init+0x32c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_GPIO_Init+0x23a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a55      	ldr	r2, [pc, #340]	; (80027c0 <HAL_GPIO_Init+0x330>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_Init+0x236>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_GPIO_Init+0x334>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d025      	beq.n	80026c2 <HAL_GPIO_Init+0x232>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a53      	ldr	r2, [pc, #332]	; (80027c8 <HAL_GPIO_Init+0x338>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <HAL_GPIO_Init+0x22e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_GPIO_Init+0x33c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x22a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x340>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x226>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x344>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x222>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x348>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x21e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x34c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x21a>
 80026a6:	2309      	movs	r3, #9
 80026a8:	e012      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026aa:	230a      	movs	r3, #10
 80026ac:	e010      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ae:	2308      	movs	r3, #8
 80026b0:	e00e      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026b6:	2306      	movs	r3, #6
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4934      	ldr	r1, [pc, #208]	; (80027b4 <HAL_GPIO_Init+0x324>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ee:	4b3c      	ldr	r3, [pc, #240]	; (80027e0 <HAL_GPIO_Init+0x350>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002712:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273c:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b27      	ldr	r3, [pc, #156]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a1e      	ldr	r2, [pc, #120]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_GPIO_Init+0x350>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_GPIO_Init+0x350>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f ae84 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	3724      	adds	r7, #36	; 0x24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40020c00 	.word	0x40020c00
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40021400 	.word	0x40021400
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40021c00 	.word	0x40021c00
 80027d8:	40022000 	.word	0x40022000
 80027dc:	40022400 	.word	0x40022400
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002800:	e003      	b.n	800280a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	041a      	lsls	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	619a      	str	r2, [r3, #24]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e10f      	b.n	8002a4a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f012 fb96 	bl	8014f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800285c:	f001 ff12 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8002860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a7b      	ldr	r2, [pc, #492]	; (8002a54 <HAL_I2C_Init+0x23c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d807      	bhi.n	800287c <HAL_I2C_Init+0x64>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a7a      	ldr	r2, [pc, #488]	; (8002a58 <HAL_I2C_Init+0x240>)
 8002870:	4293      	cmp	r3, r2
 8002872:	bf94      	ite	ls
 8002874:	2301      	movls	r3, #1
 8002876:	2300      	movhi	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	e006      	b.n	800288a <HAL_I2C_Init+0x72>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a77      	ldr	r2, [pc, #476]	; (8002a5c <HAL_I2C_Init+0x244>)
 8002880:	4293      	cmp	r3, r2
 8002882:	bf94      	ite	ls
 8002884:	2301      	movls	r3, #1
 8002886:	2300      	movhi	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0db      	b.n	8002a4a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a72      	ldr	r2, [pc, #456]	; (8002a60 <HAL_I2C_Init+0x248>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a64      	ldr	r2, [pc, #400]	; (8002a54 <HAL_I2C_Init+0x23c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d802      	bhi.n	80028cc <HAL_I2C_Init+0xb4>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	3301      	adds	r3, #1
 80028ca:	e009      	b.n	80028e0 <HAL_I2C_Init+0xc8>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_I2C_Init+0x24c>)
 80028d8:	fba2 2303 	umull	r2, r3, r2, r3
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	3301      	adds	r3, #1
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4956      	ldr	r1, [pc, #344]	; (8002a54 <HAL_I2C_Init+0x23c>)
 80028fc:	428b      	cmp	r3, r1
 80028fe:	d80d      	bhi.n	800291c <HAL_I2C_Init+0x104>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e59      	subs	r1, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fbb1 f3f3 	udiv	r3, r1, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	bf38      	it	cc
 8002918:	2304      	movcc	r3, #4
 800291a:	e04f      	b.n	80029bc <HAL_I2C_Init+0x1a4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_I2C_Init+0x130>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_I2C_Init+0x156>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x15e>
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_I2C_Init+0x1a4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <HAL_I2C_Init+0x184>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e58      	subs	r0, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299a:	e00f      	b.n	80029bc <HAL_I2C_Init+0x1a4>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6809      	ldr	r1, [r1, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6911      	ldr	r1, [r2, #16]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	000186a0 	.word	0x000186a0
 8002a58:	001e847f 	.word	0x001e847f
 8002a5c:	003d08ff 	.word	0x003d08ff
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d129      	bne.n	8002ad2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2224      	movs	r2, #36	; 0x24
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0210 	bic.w	r2, r2, #16
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d12a      	bne.n	8002b50 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2224      	movs	r2, #36	; 0x24
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	f023 030f 	bic.w	r3, r3, #15
 8002b20:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	89fb      	ldrh	r3, [r7, #14]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	89fa      	ldrh	r2, [r7, #14]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e000      	b.n	8002b52 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b60:	b08f      	sub	sp, #60	; 0x3c
 8002b62:	af0a      	add	r7, sp, #40	; 0x28
 8002b64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e10f      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f013 fcfa 	bl	8016584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2203      	movs	r2, #3
 8002b94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fb17 	bl	80051e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	687e      	ldr	r6, [r7, #4]
 8002bbc:	466d      	mov	r5, sp
 8002bbe:	f106 0410 	add.w	r4, r6, #16
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd2:	1d33      	adds	r3, r6, #4
 8002bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd6:	6838      	ldr	r0, [r7, #0]
 8002bd8:	f002 f9ee 	bl	8004fb8 <USB_CoreInit>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0d0      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fb05 	bl	8005204 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e04a      	b.n	8002c96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	333d      	adds	r3, #61	; 0x3d
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	333c      	adds	r3, #60	; 0x3c
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	b298      	uxth	r0, r3
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3342      	adds	r3, #66	; 0x42
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	333f      	adds	r3, #63	; 0x3f
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3344      	adds	r3, #68	; 0x44
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3348      	adds	r3, #72	; 0x48
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3350      	adds	r3, #80	; 0x50
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	3301      	adds	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d3af      	bcc.n	8002c00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e044      	b.n	8002d30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3b5      	bcc.n	8002ca6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	687e      	ldr	r6, [r7, #4]
 8002d42:	466d      	mov	r5, sp
 8002d44:	f106 0410 	add.w	r4, r6, #16
 8002d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d58:	1d33      	adds	r3, r6, #4
 8002d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d5c:	6838      	ldr	r0, [r7, #0]
 8002d5e:	f002 fa7b 	bl	8005258 <USB_DevInit>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00d      	b.n	8002d90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fa70 	bl	800626e <USB_DevDisconnect>

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_Start+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e020      	b.n	8002df6 <HAL_PCD_Start+0x5e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d109      	bne.n	8002dd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f003 fa2e 	bl	800623e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 f9ea 	bl	80051c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dfe:	b590      	push	{r4, r7, lr}
 8002e00:	b08d      	sub	sp, #52	; 0x34
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fad5 	bl	80063c4 <USB_GetMode>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 838e 	bne.w	800353e <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fa39 	bl	800629e <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8384 	beq.w	800353c <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fa30 	bl	800629e <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d107      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f002 0202 	and.w	r2, r2, #2
 8002e56:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fa1e 	bl	800629e <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e6c:	d17b      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fa24 	bl	80062c4 <USB_ReadDevAllOutEpInterrupt>
 8002e7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e7e:	e06f      	b.n	8002f60 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d064      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fa49 	bl	800632c <USB_ReadDevOutEPInterrupt>
 8002e9a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fe0e 	bl	8003adc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 ff0d 	bl	8003cec <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2310      	movs	r3, #16
 8002efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2101      	movs	r1, #1
 8002f20:	f003 fa94 	bl	800644c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2320      	movs	r3, #32
 8002f34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	3301      	adds	r3, #1
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d18c      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 f997 	bl	800629e <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f7a:	f040 80c4 	bne.w	8003106 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 f9b8 	bl	80062f8 <USB_ReadDevAllInEpInterrupt>
 8002f88:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f8e:	e0b6      	b.n	80030fe <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80ab 	beq.w	80030f2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 f9de 	bl	8006368 <USB_ReadDevInEPInterrupt>
 8002fac:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05b      	beq.n	8003070 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69f9      	ldr	r1, [r7, #28]
 8002fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fd8:	4013      	ands	r3, r2
 8002fda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2301      	movs	r3, #1
 8002fec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d11b      	bne.n	800302e <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3348      	adds	r3, #72	; 0x48
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4403      	add	r3, r0
 8003016:	3344      	adds	r3, #68	; 0x44
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4419      	add	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	3348      	adds	r3, #72	; 0x48
 800302c:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	b2db      	uxtb	r3, r3
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f013 fb34 	bl	80166a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d116      	bne.n	8003070 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d113      	bne.n	8003070 <HAL_PCD_IRQHandler+0x272>
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3350      	adds	r3, #80	; 0x50
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003068:	461a      	mov	r2, r3
 800306a:	2101      	movs	r1, #1
 800306c:	f003 f9ee 	bl	800644c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003086:	461a      	mov	r2, r3
 8003088:	2308      	movs	r3, #8
 800308a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d008      	beq.n	80030a8 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a2:	461a      	mov	r2, r3
 80030a4:	2310      	movs	r3, #16
 80030a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030be:	461a      	mov	r2, r3
 80030c0:	2340      	movs	r3, #64	; 0x40
 80030c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030da:	461a      	mov	r2, r3
 80030dc:	2302      	movs	r3, #2
 80030de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fc67 	bl	80039c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	f47f af45 	bne.w	8002f90 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 f8c7 	bl	800629e <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800311a:	d122      	bne.n	8003162 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003136:	2b01      	cmp	r3, #1
 8003138:	d108      	bne.n	800314c <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003142:	2100      	movs	r1, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fe89 	bl	8003e5c <HAL_PCDEx_LPM_Callback>
 800314a:	e002      	b.n	8003152 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f013 fb1f 	bl	8016790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 f899 	bl	800629e <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d112      	bne.n	800319e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d102      	bne.n	800318e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f013 fadb 	bl	8016744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800319c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 f87b 	bl	800629e <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	f040 80a7 	bne.w	8003304 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2110      	movs	r1, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 f9b3 	bl	800553c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031da:	e036      	b.n	800324a <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003200:	0151      	lsls	r1, r2, #5
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	440a      	add	r2, r1
 8003206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800320a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800320e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003222:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003234:	0151      	lsls	r1, r2, #5
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	440a      	add	r2, r1
 800323a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800323e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	3301      	adds	r3, #1
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003250:	429a      	cmp	r2, r3
 8003252:	d3c3      	bcc.n	80031dc <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003262:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003266:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003280:	f043 030b 	orr.w	r3, r3, #11
 8003284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f043 030b 	orr.w	r3, r3, #11
 800329a:	6453      	str	r3, [r2, #68]	; 0x44
 800329c:	e015      	b.n	80032ca <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c4:	f043 030b 	orr.w	r3, r3, #11
 80032c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ee:	461a      	mov	r2, r3
 80032f0:	f003 f8ac 	bl	800644c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f002 ffc8 	bl	800629e <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003318:	d124      	bne.n	8003364 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f003 f85e 	bl	80063e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f002 f968 	bl	80055fe <USB_GetDevSpeed>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	f001 f997 	bl	800466c <HAL_RCC_GetHCLKFreq>
 800333e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	4620      	mov	r0, r4
 800334a:	f001 fe97 	bl	800507c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f013 f9cf 	bl	80166f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 ff98 	bl	800629e <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d161      	bne.n	800343c <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0210 	bic.w	r2, r2, #16
 8003386:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 020f 	and.w	r2, r3, #15
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	0c5b      	lsrs	r3, r3, #17
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d124      	bne.n	80033fe <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d035      	beq.n	800342c <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a38      	ldr	r0, [r7, #32]
 80033d4:	f002 fe10 	bl	8005ff8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	619a      	str	r2, [r3, #24]
 80033fc:	e016      	b.n	800342c <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	0c5b      	lsrs	r3, r3, #17
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	2b06      	cmp	r3, #6
 8003408:	d110      	bne.n	800342c <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003410:	2208      	movs	r2, #8
 8003412:	4619      	mov	r1, r3
 8003414:	6a38      	ldr	r0, [r7, #32]
 8003416:	f002 fdef 	bl	8005ff8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003426:	441a      	add	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0210 	orr.w	r2, r2, #16
 800343a:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f002 ff2c 	bl	800629e <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d10a      	bne.n	8003466 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f013 f940 	bl	80166d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 0208 	and.w	r2, r2, #8
 8003464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f002 ff17 	bl	800629e <USB_ReadInterrupts>
 8003470:	4603      	mov	r3, r0
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347a:	d10f      	bne.n	800349c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f013 f9a2 	bl	80167d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800349a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f002 fefc 	bl	800629e <USB_ReadInterrupts>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b0:	d10f      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f013 f975 	bl	80167ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80034d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f002 fee1 	bl	800629e <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d10a      	bne.n	80034fe <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f013 f983 	bl	80167f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f002 fecb 	bl	800629e <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d115      	bne.n	800353e <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f013 f973 	bl	8016810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e000      	b.n	800353e <HAL_PCD_IRQHandler+0x740>
      return;
 800353c:	bf00      	nop
    }
  }
}
 800353e:	3734      	adds	r7, #52	; 0x34
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_SetAddress+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e013      	b.n	8003586 <HAL_PCD_SetAddress+0x42>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fe3b 	bl	80061f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	4608      	mov	r0, r1
 8003598:	4611      	mov	r1, r2
 800359a:	461a      	mov	r2, r3
 800359c:	4603      	mov	r3, r0
 800359e:	70fb      	strb	r3, [r7, #3]
 80035a0:	460b      	mov	r3, r1
 80035a2:	803b      	strh	r3, [r7, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da0f      	bge.n	80035d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	3338      	adds	r3, #56	; 0x38
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	3304      	adds	r3, #4
 80035ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	705a      	strb	r2, [r3, #1]
 80035d2:	e00f      	b.n	80035f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	3304      	adds	r3, #4
 80035ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003600:	883a      	ldrh	r2, [r7, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	78ba      	ldrb	r2, [r7, #2]
 800360a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	785b      	ldrb	r3, [r3, #1]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800361e:	78bb      	ldrb	r3, [r7, #2]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d102      	bne.n	800362a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_PCD_EP_Open+0xaa>
 8003634:	2302      	movs	r3, #2
 8003636:	e00e      	b.n	8003656 <HAL_PCD_EP_Open+0xc8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f001 fffe 	bl	8005648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003654:	7afb      	ldrb	r3, [r7, #11]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800366a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da0f      	bge.n	8003692 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3338      	adds	r3, #56	; 0x38
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	e00f      	b.n	80036b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	3304      	adds	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_EP_Close+0x6e>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e00e      	b.n	80036ea <HAL_PCD_EP_Close+0x8c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 f83c 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	460b      	mov	r3, r1
 8003700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2200      	movs	r2, #0
 800372c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003734:	7afb      	ldrb	r3, [r7, #11]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	b2da      	uxtb	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d102      	bne.n	800374e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	f002 fabf 	bl	8005ce8 <USB_EP0StartXfer>
 800376a:	e008      	b.n	800377e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	6979      	ldr	r1, [r7, #20]
 800377a:	f002 f871 	bl	8005860 <USB_EPStartXfer>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	460b      	mov	r3, r1
 80037c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	7afb      	ldrb	r3, [r7, #11]
 80037ca:	f003 020f 	and.w	r2, r3, #15
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	3338      	adds	r3, #56	; 0x38
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2201      	movs	r2, #1
 80037f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	6979      	ldr	r1, [r7, #20]
 800382a:	f002 fa5d 	bl	8005ce8 <USB_EP0StartXfer>
 800382e:	e008      	b.n	8003842 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	6979      	ldr	r1, [r7, #20]
 800383e:	f002 f80f 	bl	8005860 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d901      	bls.n	800386a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e050      	b.n	800390c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800386a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386e:	2b00      	cmp	r3, #0
 8003870:	da0f      	bge.n	8003892 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	f003 020f 	and.w	r2, r3, #15
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	3338      	adds	r3, #56	; 0x38
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	705a      	strb	r2, [r3, #1]
 8003890:	e00d      	b.n	80038ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_PCD_EP_SetStall+0x82>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e01e      	b.n	800390c <HAL_PCD_EP_SetStall+0xc0>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fbb4 	bl	800604a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	b2d9      	uxtb	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038fc:	461a      	mov	r2, r3
 80038fe:	f002 fda5 	bl	800644c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d901      	bls.n	8003932 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e042      	b.n	80039b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	da0f      	bge.n	800395a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	705a      	strb	r2, [r3, #1]
 8003958:	e00f      	b.n	800397a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_EP_ClrStall+0x86>
 8003996:	2302      	movs	r3, #2
 8003998:	e00e      	b.n	80039b8 <HAL_PCD_EP_ClrStall+0xa4>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 fbbc 	bl	8006126 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3338      	adds	r3, #56	; 0x38
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d901      	bls.n	80039f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e06c      	b.n	8003ad2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d902      	bls.n	8003a14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3303      	adds	r3, #3
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a1c:	e02b      	b.n	8003a76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d902      	bls.n	8003a3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3303      	adds	r3, #3
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68d9      	ldr	r1, [r3, #12]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4603      	mov	r3, r0
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f002 fa98 	bl	8005f8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	441a      	add	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d809      	bhi.n	8003aa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d203      	bcs.n	8003aa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1be      	bne.n	8003a1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d811      	bhi.n	8003ad0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	6939      	ldr	r1, [r7, #16]
 8003ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003acc:	4013      	ands	r3, r2
 8003ace:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	333c      	adds	r3, #60	; 0x3c
 8003af4:	3304      	adds	r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f040 80b3 	bne.w	8003c7a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <PCD_EP_OutXfrComplete_int+0x208>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d90e      	bls.n	8003b44 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b42:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f012 fd7f 	bl	8016648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b54:	461a      	mov	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	f002 fc78 	bl	800644c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	6093      	str	r3, [r2, #8]
 8003b6e:	e0b3      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	461a      	mov	r2, r3
 8003b88:	2320      	movs	r3, #32
 8003b8a:	6093      	str	r3, [r2, #8]
 8003b8c:	e0a4      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 809f 	bne.w	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a51      	ldr	r2, [pc, #324]	; (8003ce4 <PCD_EP_OutXfrComplete_int+0x208>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d90f      	bls.n	8003bc2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbe:	6093      	str	r3, [r2, #8]
 8003bc0:	e08a      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bd4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	0159      	lsls	r1, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	440b      	add	r3, r1
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003be8:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4403      	add	r3, r0
 8003bf8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bfc:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c10:	6819      	ldr	r1, [r3, #0]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4403      	add	r3, r0
 8003c20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4419      	add	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4403      	add	r3, r0
 8003c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c3a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f012 fd12 	bl	801666c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d144      	bne.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d138      	bne.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c70:	461a      	mov	r2, r3
 8003c72:	2101      	movs	r1, #1
 8003c74:	f002 fbea 	bl	800644c <USB_EP0_OutStart>
 8003c78:	e02e      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d124      	bne.n	8003ccc <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	6093      	str	r3, [r2, #8]
 8003ca0:	e01a      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2320      	movs	r3, #32
 8003cbc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f012 fcd1 	bl	801666c <HAL_PCD_DataOutStageCallback>
 8003cca:	e005      	b.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f012 fcca 	bl	801666c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	4f54300a 	.word	0x4f54300a
 8003ce8:	4f54310a 	.word	0x4f54310a

08003cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	333c      	adds	r3, #60	; 0x3c
 8003d04:	3304      	adds	r3, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d113      	bne.n	8003d4a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d922      	bls.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01d      	beq.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	e012      	b.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10e      	bne.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d009      	beq.n	8003d70 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f012 fc69 	bl	8016648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	; (8003da4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d90c      	bls.n	8003d98 <PCD_EP_OutSetupPacket_int+0xac>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d90:	461a      	mov	r2, r3
 8003d92:	2101      	movs	r1, #1
 8003d94:	f002 fb5a 	bl	800644c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	4f54300a 	.word	0x4f54300a
 8003da8:	4f54310a 	.word	0x4f54310a

08003dac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
 8003db8:	4613      	mov	r3, r2
 8003dba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dca:	883b      	ldrh	r3, [r7, #0]
 8003dcc:	0419      	lsls	r1, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd8:	e028      	b.n	8003e2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	4413      	add	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
 8003dec:	e00d      	b.n	8003e0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	3340      	adds	r3, #64	; 0x40
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	3301      	adds	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	7bfa      	ldrb	r2, [r7, #15]
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d3ec      	bcc.n	8003dee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e14:	883b      	ldrh	r3, [r7, #0]
 8003e16:	0418      	lsls	r0, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4302      	orrs	r2, r0
 8003e24:	3340      	adds	r3, #64	; 0x40
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e22d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d075      	beq.n	8003f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e92:	4ba3      	ldr	r3, [pc, #652]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9e:	4ba0      	ldr	r3, [pc, #640]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d112      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b9d      	ldr	r3, [pc, #628]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	4b99      	ldr	r3, [pc, #612]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05b      	beq.n	8003f7c <HAL_RCC_OscConfig+0x108>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d157      	bne.n	8003f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e208      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d106      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x74>
 8003eda:	4b91      	ldr	r3, [pc, #580]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a90      	ldr	r2, [pc, #576]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e01d      	b.n	8003f24 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x98>
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a8a      	ldr	r2, [pc, #552]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b88      	ldr	r3, [pc, #544]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a87      	ldr	r2, [pc, #540]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCC_OscConfig+0xb0>
 8003f0c:	4b84      	ldr	r3, [pc, #528]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b81      	ldr	r3, [pc, #516]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a80      	ldr	r2, [pc, #512]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd f9dc 	bl	80012e8 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd f9d8 	bl	80012e8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	; 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e1cd      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0xc0>
 8003f52:	e014      	b.n	8003f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fd f9c8 	bl	80012e8 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd f9c4 	bl	80012e8 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e1b9      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0xe8>
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d063      	beq.n	8004052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b62      	ldr	r3, [pc, #392]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d11c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b5f      	ldr	r3, [pc, #380]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fae:	4b5c      	ldr	r3, [pc, #368]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x152>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e18d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4952      	ldr	r1, [pc, #328]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b4f      	ldr	r3, [pc, #316]	; (8004124 <HAL_RCC_OscConfig+0x2b0>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd f97d 	bl	80012e8 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fd f979 	bl	80012e8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e16e      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	4b46      	ldr	r3, [pc, #280]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4940      	ldr	r1, [pc, #256]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_OscConfig+0x2b0>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd f95c 	bl	80012e8 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004034:	f7fd f958 	bl	80012e8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e14d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	4b36      	ldr	r3, [pc, #216]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d030      	beq.n	80040c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_RCC_OscConfig+0x2b4>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd f93c 	bl	80012e8 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd f938 	bl	80012e8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e12d      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x200>
 8004092:	e015      	b.n	80040c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x2b4>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409a:	f7fd f925 	bl	80012e8 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fd f921 	bl	80012e8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e116      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80a0 	beq.w	800420e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10f      	bne.n	80040fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fe:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_OscConfig+0x2b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d121      	bne.n	800414e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x2b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a07      	ldr	r2, [pc, #28]	; (800412c <HAL_RCC_OscConfig+0x2b8>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004116:	f7fd f8e7 	bl	80012e8 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	e011      	b.n	8004142 <HAL_RCC_OscConfig+0x2ce>
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	42470000 	.word	0x42470000
 8004128:	42470e80 	.word	0x42470e80
 800412c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004130:	f7fd f8da 	bl	80012e8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0cf      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_OscConfig+0x478>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x2f0>
 8004156:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a65      	ldr	r2, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	e01c      	b.n	800419e <HAL_RCC_OscConfig+0x32a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b05      	cmp	r3, #5
 800416a:	d10c      	bne.n	8004186 <HAL_RCC_OscConfig+0x312>
 800416c:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004170:	4a5f      	ldr	r2, [pc, #380]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	6713      	str	r3, [r2, #112]	; 0x70
 8004178:	4b5d      	ldr	r3, [pc, #372]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	4a5c      	ldr	r2, [pc, #368]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6713      	str	r3, [r2, #112]	; 0x70
 8004184:	e00b      	b.n	800419e <HAL_RCC_OscConfig+0x32a>
 8004186:	4b5a      	ldr	r3, [pc, #360]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a59      	ldr	r2, [pc, #356]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6713      	str	r3, [r2, #112]	; 0x70
 8004192:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a56      	ldr	r2, [pc, #344]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d015      	beq.n	80041d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a6:	f7fd f89f 	bl	80012e8 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fd f89b 	bl	80012e8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e08e      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c4:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0ee      	beq.n	80041ae <HAL_RCC_OscConfig+0x33a>
 80041d0:	e014      	b.n	80041fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d2:	f7fd f889 	bl	80012e8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fd f885 	bl	80012e8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e078      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ee      	bne.n	80041da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a3a      	ldr	r2, [pc, #232]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d064      	beq.n	80042e0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b08      	cmp	r3, #8
 8004220:	d05c      	beq.n	80042dc <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d141      	bne.n	80042ae <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCC_OscConfig+0x480>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fd f85a 	bl	80012e8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd f856 	bl	80012e8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04b      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424a:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	019b      	lsls	r3, r3, #6
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	3b01      	subs	r3, #1
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	491d      	ldr	r1, [pc, #116]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <HAL_RCC_OscConfig+0x480>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004286:	f7fd f82f 	bl	80012e8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fd f82b 	bl	80012e8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e020      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x41a>
 80042ac:	e018      	b.n	80042e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_RCC_OscConfig+0x480>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fd f818 	bl	80012e8 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fd f814 	bl	80012e8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b08      	ldr	r3, [pc, #32]	; (80042f0 <HAL_RCC_OscConfig+0x47c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x448>
 80042da:	e001      	b.n	80042e0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40007000 	.word	0x40007000
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470060 	.word	0x42470060

080042f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0ca      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d90c      	bls.n	8004334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b64      	ldr	r3, [pc, #400]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b6      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4a57      	ldr	r2, [pc, #348]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4a51      	ldr	r2, [pc, #324]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800436a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	494c      	ldr	r1, [pc, #304]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d044      	beq.n	8004418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d119      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07d      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e06d      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e065      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4933      	ldr	r1, [pc, #204]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e8:	f7fc ff7e 	bl	80012e8 <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fc ff7a 	bl	80012e8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e04d      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2a      	ldr	r3, [pc, #168]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d20c      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442e:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <HAL_RCC_ClockConfig+0x1b4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e030      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4915      	ldr	r1, [pc, #84]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	490d      	ldr	r1, [pc, #52]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447e:	f000 f81d 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 8004482:	4601      	mov	r1, r0
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	5cd3      	ldrb	r3, [r2, r3]
 8004492:	fa21 f303 	lsr.w	r3, r1, r3
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800449a:	2000      	movs	r0, #0
 800449c:	f7fc fee0 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	0801b358 	.word	0x0801b358
 80044b8:	20000128 	.word	0x20000128

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	2300      	movs	r3, #0
 80044cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d2:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d007      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x32>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d008      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x38>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 80b4 	bne.w	8004650 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b5e      	ldr	r3, [pc, #376]	; (8004664 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044ea:	60bb      	str	r3, [r7, #8]
       break;
 80044ec:	e0b3      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ee:	4b5e      	ldr	r3, [pc, #376]	; (8004668 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80044f0:	60bb      	str	r3, [r7, #8]
      break;
 80044f2:	e0b0      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f4:	4b5a      	ldr	r3, [pc, #360]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04a      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	ea03 0501 	and.w	r5, r3, r1
 8004520:	ea04 0602 	and.w	r6, r4, r2
 8004524:	4629      	mov	r1, r5
 8004526:	4632      	mov	r2, r6
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	f04f 0400 	mov.w	r4, #0
 8004530:	0154      	lsls	r4, r2, #5
 8004532:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004536:	014b      	lsls	r3, r1, #5
 8004538:	4619      	mov	r1, r3
 800453a:	4622      	mov	r2, r4
 800453c:	1b49      	subs	r1, r1, r5
 800453e:	eb62 0206 	sbc.w	r2, r2, r6
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	f04f 0400 	mov.w	r4, #0
 800454a:	0194      	lsls	r4, r2, #6
 800454c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004550:	018b      	lsls	r3, r1, #6
 8004552:	1a5b      	subs	r3, r3, r1
 8004554:	eb64 0402 	sbc.w	r4, r4, r2
 8004558:	f04f 0100 	mov.w	r1, #0
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	00e2      	lsls	r2, r4, #3
 8004562:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004566:	00d9      	lsls	r1, r3, #3
 8004568:	460b      	mov	r3, r1
 800456a:	4614      	mov	r4, r2
 800456c:	195b      	adds	r3, r3, r5
 800456e:	eb44 0406 	adc.w	r4, r4, r6
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	0262      	lsls	r2, r4, #9
 800457c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004580:	0259      	lsls	r1, r3, #9
 8004582:	460b      	mov	r3, r1
 8004584:	4614      	mov	r4, r2
 8004586:	4618      	mov	r0, r3
 8004588:	4621      	mov	r1, r4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f04f 0400 	mov.w	r4, #0
 8004590:	461a      	mov	r2, r3
 8004592:	4623      	mov	r3, r4
 8004594:	f7fc faba 	bl	8000b0c <__aeabi_uldivmod>
 8004598:	4603      	mov	r3, r0
 800459a:	460c      	mov	r4, r1
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e049      	b.n	8004634 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	f04f 0400 	mov.w	r4, #0
 80045aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	ea03 0501 	and.w	r5, r3, r1
 80045b6:	ea04 0602 	and.w	r6, r4, r2
 80045ba:	4629      	mov	r1, r5
 80045bc:	4632      	mov	r2, r6
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	0154      	lsls	r4, r2, #5
 80045c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045cc:	014b      	lsls	r3, r1, #5
 80045ce:	4619      	mov	r1, r3
 80045d0:	4622      	mov	r2, r4
 80045d2:	1b49      	subs	r1, r1, r5
 80045d4:	eb62 0206 	sbc.w	r2, r2, r6
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	0194      	lsls	r4, r2, #6
 80045e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045e6:	018b      	lsls	r3, r1, #6
 80045e8:	1a5b      	subs	r3, r3, r1
 80045ea:	eb64 0402 	sbc.w	r4, r4, r2
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045fc:	00d9      	lsls	r1, r3, #3
 80045fe:	460b      	mov	r3, r1
 8004600:	4614      	mov	r4, r2
 8004602:	195b      	adds	r3, r3, r5
 8004604:	eb44 0406 	adc.w	r4, r4, r6
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	02a2      	lsls	r2, r4, #10
 8004612:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004616:	0299      	lsls	r1, r3, #10
 8004618:	460b      	mov	r3, r1
 800461a:	4614      	mov	r4, r2
 800461c:	4618      	mov	r0, r3
 800461e:	4621      	mov	r1, r4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f04f 0400 	mov.w	r4, #0
 8004626:	461a      	mov	r2, r3
 8004628:	4623      	mov	r3, r4
 800462a:	f7fc fa6f 	bl	8000b0c <__aeabi_uldivmod>
 800462e:	4603      	mov	r3, r0
 8004630:	460c      	mov	r4, r1
 8004632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	3301      	adds	r3, #1
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	60bb      	str	r3, [r7, #8]
      break;
 800464e:	e002      	b.n	8004656 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004652:	60bb      	str	r3, [r7, #8]
      break;
 8004654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004656:	68bb      	ldr	r3, [r7, #8]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	00f42400 	.word	0x00f42400
 8004668:	007a1200 	.word	0x007a1200

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCC_GetHCLKFreq+0x14>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000128 	.word	0x20000128

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004688:	f7ff fff0 	bl	800466c <HAL_RCC_GetHCLKFreq>
 800468c:	4601      	mov	r1, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0a9b      	lsrs	r3, r3, #10
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469a:	5cd3      	ldrb	r3, [r2, r3]
 800469c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0801b368 	.word	0x0801b368

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046b0:	f7ff ffdc 	bl	800466c <HAL_RCC_GetHCLKFreq>
 80046b4:	4601      	mov	r1, r0
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0b5b      	lsrs	r3, r3, #13
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4a03      	ldr	r2, [pc, #12]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c2:	5cd3      	ldrb	r3, [r2, r3]
 80046c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	0801b368 	.word	0x0801b368

080046d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e01d      	b.n	8004722 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f011 fd1e 	bl	801613c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 f944 	bl	80049a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d122      	bne.n	8004786 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d11b      	bne.n	8004786 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f06f 0202 	mvn.w	r2, #2
 8004756:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8f8 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 8004772:	e005      	b.n	8004780 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f8ea 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8fb 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d122      	bne.n	80047da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d11b      	bne.n	80047da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f06f 0204 	mvn.w	r2, #4
 80047aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8ce 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 80047c6:	e005      	b.n	80047d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f8c0 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8d1 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d122      	bne.n	800482e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d11b      	bne.n	800482e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0208 	mvn.w	r2, #8
 80047fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2204      	movs	r2, #4
 8004804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f8a4 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 800481a:	e005      	b.n	8004828 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f896 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8a7 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b10      	cmp	r3, #16
 800483a:	d122      	bne.n	8004882 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b10      	cmp	r3, #16
 8004848:	d11b      	bne.n	8004882 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0210 	mvn.w	r2, #16
 8004852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2208      	movs	r2, #8
 8004858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f87a 	bl	8004962 <HAL_TIM_IC_CaptureCallback>
 800486e:	e005      	b.n	800487c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f86c 	bl	800494e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f87d 	bl	8004976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10e      	bne.n	80048ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f06f 0201 	mvn.w	r2, #1
 80048a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f846 	bl	800493a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b8:	2b80      	cmp	r3, #128	; 0x80
 80048ba:	d10e      	bne.n	80048da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d107      	bne.n	80048da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f90d 	bl	8004af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d10e      	bne.n	8004906 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b40      	cmp	r3, #64	; 0x40
 80048f4:	d107      	bne.n	8004906 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f842 	bl	800498a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b20      	cmp	r3, #32
 8004912:	d10e      	bne.n	8004932 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b20      	cmp	r3, #32
 8004920:	d107      	bne.n	8004932 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f06f 0220 	mvn.w	r2, #32
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8d7 	bl	8004ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <TIM_Base_SetConfig+0x114>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d013      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049be:	d00f      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3d      	ldr	r2, [pc, #244]	; (8004ab8 <TIM_Base_SetConfig+0x118>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3c      	ldr	r2, [pc, #240]	; (8004abc <TIM_Base_SetConfig+0x11c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a3b      	ldr	r2, [pc, #236]	; (8004ac0 <TIM_Base_SetConfig+0x120>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_Base_SetConfig+0x40>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <TIM_Base_SetConfig+0x124>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d108      	bne.n	80049f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <TIM_Base_SetConfig+0x114>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02b      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d027      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <TIM_Base_SetConfig+0x118>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d023      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	; (8004abc <TIM_Base_SetConfig+0x11c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01f      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <TIM_Base_SetConfig+0x120>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01b      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <TIM_Base_SetConfig+0x124>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d017      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <TIM_Base_SetConfig+0x128>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a27      	ldr	r2, [pc, #156]	; (8004acc <TIM_Base_SetConfig+0x12c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00f      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a26      	ldr	r2, [pc, #152]	; (8004ad0 <TIM_Base_SetConfig+0x130>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a25      	ldr	r2, [pc, #148]	; (8004ad4 <TIM_Base_SetConfig+0x134>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a24      	ldr	r2, [pc, #144]	; (8004ad8 <TIM_Base_SetConfig+0x138>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d003      	beq.n	8004a52 <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a23      	ldr	r2, [pc, #140]	; (8004adc <TIM_Base_SetConfig+0x13c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d108      	bne.n	8004a64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <TIM_Base_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_Base_SetConfig+0xf8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <TIM_Base_SetConfig+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d103      	bne.n	8004aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	615a      	str	r2, [r3, #20]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40000800 	.word	0x40000800
 8004ac0:	40000c00 	.word	0x40000c00
 8004ac4:	40010400 	.word	0x40010400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800
 8004ad4:	40001800 	.word	0x40001800
 8004ad8:	40001c00 	.word	0x40001c00
 8004adc:	40002000 	.word	0x40002000

08004ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e03f      	b.n	8004b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f011 fbea 	bl	8016308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f829 	bl	8004ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004be4:	f023 030c 	bic.w	r3, r3, #12
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	68f9      	ldr	r1, [r7, #12]
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c10:	f040 80e4 	bne.w	8004ddc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4aab      	ldr	r2, [pc, #684]	; (8004ec8 <UART_SetConfig+0x324>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <UART_SetConfig+0x84>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4aaa      	ldr	r2, [pc, #680]	; (8004ecc <UART_SetConfig+0x328>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d16c      	bne.n	8004d02 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004c28:	f7ff fd40 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	441a      	add	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	4aa3      	ldr	r2, [pc, #652]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	011c      	lsls	r4, r3, #4
 8004c4c:	f7ff fd2e 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009a      	lsls	r2, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c66:	f7ff fd21 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009a      	lsls	r2, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	4a93      	ldr	r2, [pc, #588]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	2264      	movs	r2, #100	; 0x64
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	1aeb      	subs	r3, r5, r3
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	3332      	adds	r3, #50	; 0x32
 8004c94:	4a8e      	ldr	r2, [pc, #568]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca2:	441c      	add	r4, r3
 8004ca4:	f7ff fd02 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009a      	lsls	r2, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	fbb2 f5f3 	udiv	r5, r2, r3
 8004cbe:	f7ff fcf5 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009a      	lsls	r2, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	4a7d      	ldr	r2, [pc, #500]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2264      	movs	r2, #100	; 0x64
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	1aeb      	subs	r3, r5, r3
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	3332      	adds	r3, #50	; 0x32
 8004cec:	4a78      	ldr	r2, [pc, #480]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 0207 	and.w	r2, r3, #7
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4422      	add	r2, r4
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	e154      	b.n	8004fac <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004d02:	f7ff fcbf 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004d06:	4602      	mov	r2, r0
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009a      	lsls	r2, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	4a6c      	ldr	r2, [pc, #432]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	011c      	lsls	r4, r3, #4
 8004d26:	f7ff fcad 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d40:	f7ff fca0 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009a      	lsls	r2, r3, #2
 8004d4e:	441a      	add	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2264      	movs	r2, #100	; 0x64
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	1aeb      	subs	r3, r5, r3
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a58      	ldr	r2, [pc, #352]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f7ff fc81 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004d82:	4602      	mov	r2, r0
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d98:	f7ff fc74 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009a      	lsls	r2, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	2264      	movs	r2, #100	; 0x64
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	1aeb      	subs	r3, r5, r3
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	3332      	adds	r3, #50	; 0x32
 8004dc6:	4a42      	ldr	r2, [pc, #264]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	f003 0207 	and.w	r2, r3, #7
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4422      	add	r2, r4
 8004dd8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004dda:	e0e7      	b.n	8004fac <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a39      	ldr	r2, [pc, #228]	; (8004ec8 <UART_SetConfig+0x324>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <UART_SetConfig+0x24c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a38      	ldr	r2, [pc, #224]	; (8004ecc <UART_SetConfig+0x328>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d171      	bne.n	8004ed4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004df0:	f7ff fc5c 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009a      	lsls	r2, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	4a31      	ldr	r2, [pc, #196]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	011c      	lsls	r4, r3, #4
 8004e14:	f7ff fc4a 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	441a      	add	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e2e:	f7ff fc3d 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009a      	lsls	r2, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e48:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2264      	movs	r2, #100	; 0x64
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	1aeb      	subs	r3, r5, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e68:	441c      	add	r4, r3
 8004e6a:	f7ff fc1f 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f5f3 	udiv	r5, r2, r3
 8004e84:	f7ff fc12 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	009a      	lsls	r2, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2264      	movs	r2, #100	; 0x64
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	1aeb      	subs	r3, r5, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	3332      	adds	r3, #50	; 0x32
 8004eb2:	4a07      	ldr	r2, [pc, #28]	; (8004ed0 <UART_SetConfig+0x32c>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4422      	add	r2, r4
 8004ec4:	609a      	str	r2, [r3, #8]
 8004ec6:	e071      	b.n	8004fac <UART_SetConfig+0x408>
 8004ec8:	40011000 	.word	0x40011000
 8004ecc:	40011400 	.word	0x40011400
 8004ed0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ed4:	f7ff fbd6 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009a      	lsls	r2, r3, #2
 8004ee2:	441a      	add	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	4a31      	ldr	r2, [pc, #196]	; (8004fb4 <UART_SetConfig+0x410>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	011c      	lsls	r4, r3, #4
 8004ef8:	f7ff fbc4 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009a      	lsls	r2, r3, #2
 8004f06:	441a      	add	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f12:	f7ff fbb7 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004f16:	4602      	mov	r2, r0
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009a      	lsls	r2, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <UART_SetConfig+0x410>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2264      	movs	r2, #100	; 0x64
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	1aeb      	subs	r3, r5, r3
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	3332      	adds	r3, #50	; 0x32
 8004f40:	4a1c      	ldr	r2, [pc, #112]	; (8004fb4 <UART_SetConfig+0x410>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4c:	441c      	add	r4, r3
 8004f4e:	f7ff fb99 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009a      	lsls	r2, r3, #2
 8004f5c:	441a      	add	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f68:	f7ff fb8c 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009a      	lsls	r2, r3, #2
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <UART_SetConfig+0x410>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2264      	movs	r2, #100	; 0x64
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	1aeb      	subs	r3, r5, r3
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	3332      	adds	r3, #50	; 0x32
 8004f96:	4a07      	ldr	r2, [pc, #28]	; (8004fb4 <UART_SetConfig+0x410>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 020f 	and.w	r2, r3, #15
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4422      	add	r2, r4
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	e7ff      	b.n	8004fac <UART_SetConfig+0x408>
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fb4:	51eb851f 	.word	0x51eb851f

08004fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb8:	b084      	sub	sp, #16
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f107 001c 	add.w	r0, r7, #28
 8004fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d122      	bne.n	8005016 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d105      	bne.n	800500a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fa7c 	bl	8006508 <USB_CoreReset>
 8005010:	4603      	mov	r3, r0
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e01a      	b.n	800504c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 fa70 	bl	8006508 <USB_CoreReset>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	639a      	str	r2, [r3, #56]	; 0x38
 800503e:	e005      	b.n	800504c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10b      	bne.n	800506a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f043 0206 	orr.w	r2, r3, #6
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005076:	b004      	add	sp, #16
 8005078:	4770      	bx	lr
	...

0800507c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d165      	bne.n	800515c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a41      	ldr	r2, [pc, #260]	; (8005198 <USB_SetTurnaroundTime+0x11c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d906      	bls.n	80050a6 <USB_SetTurnaroundTime+0x2a>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <USB_SetTurnaroundTime+0x120>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d802      	bhi.n	80050a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80050a0:	230f      	movs	r3, #15
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e062      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a3c      	ldr	r2, [pc, #240]	; (800519c <USB_SetTurnaroundTime+0x120>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d906      	bls.n	80050bc <USB_SetTurnaroundTime+0x40>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a3b      	ldr	r2, [pc, #236]	; (80051a0 <USB_SetTurnaroundTime+0x124>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050b6:	230e      	movs	r3, #14
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e057      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a38      	ldr	r2, [pc, #224]	; (80051a0 <USB_SetTurnaroundTime+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d906      	bls.n	80050d2 <USB_SetTurnaroundTime+0x56>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a37      	ldr	r2, [pc, #220]	; (80051a4 <USB_SetTurnaroundTime+0x128>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d802      	bhi.n	80050d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050cc:	230d      	movs	r3, #13
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e04c      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4a33      	ldr	r2, [pc, #204]	; (80051a4 <USB_SetTurnaroundTime+0x128>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d906      	bls.n	80050e8 <USB_SetTurnaroundTime+0x6c>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a32      	ldr	r2, [pc, #200]	; (80051a8 <USB_SetTurnaroundTime+0x12c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d802      	bhi.n	80050e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050e2:	230c      	movs	r3, #12
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e041      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <USB_SetTurnaroundTime+0x12c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d906      	bls.n	80050fe <USB_SetTurnaroundTime+0x82>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a2e      	ldr	r2, [pc, #184]	; (80051ac <USB_SetTurnaroundTime+0x130>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d802      	bhi.n	80050fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050f8:	230b      	movs	r3, #11
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e036      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <USB_SetTurnaroundTime+0x130>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d906      	bls.n	8005114 <USB_SetTurnaroundTime+0x98>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <USB_SetTurnaroundTime+0x134>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d802      	bhi.n	8005114 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800510e:	230a      	movs	r3, #10
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	e02b      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <USB_SetTurnaroundTime+0x134>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d906      	bls.n	800512a <USB_SetTurnaroundTime+0xae>
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a25      	ldr	r2, [pc, #148]	; (80051b4 <USB_SetTurnaroundTime+0x138>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d802      	bhi.n	800512a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005124:	2309      	movs	r3, #9
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e020      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <USB_SetTurnaroundTime+0x138>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d906      	bls.n	8005140 <USB_SetTurnaroundTime+0xc4>
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <USB_SetTurnaroundTime+0x13c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d802      	bhi.n	8005140 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800513a:	2308      	movs	r3, #8
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e015      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <USB_SetTurnaroundTime+0x13c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d906      	bls.n	8005156 <USB_SetTurnaroundTime+0xda>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a1c      	ldr	r2, [pc, #112]	; (80051bc <USB_SetTurnaroundTime+0x140>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d802      	bhi.n	8005156 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005150:	2307      	movs	r3, #7
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e00a      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005156:	2306      	movs	r3, #6
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e007      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005162:	2309      	movs	r3, #9
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e001      	b.n	800516c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005168:	2309      	movs	r3, #9
 800516a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005184:	431a      	orrs	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	00d8acbf 	.word	0x00d8acbf
 800519c:	00e4e1bf 	.word	0x00e4e1bf
 80051a0:	00f423ff 	.word	0x00f423ff
 80051a4:	0106737f 	.word	0x0106737f
 80051a8:	011a499f 	.word	0x011a499f
 80051ac:	01312cff 	.word	0x01312cff
 80051b0:	014ca43f 	.word	0x014ca43f
 80051b4:	016e35ff 	.word	0x016e35ff
 80051b8:	01a6ab1f 	.word	0x01a6ab1f
 80051bc:	01e847ff 	.word	0x01e847ff

080051c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f043 0201 	orr.w	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d106      	bne.n	8005230 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	e00b      	b.n	8005248 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	e001      	b.n	8005248 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e003      	b.n	8005250 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005248:	2032      	movs	r0, #50	; 0x32
 800524a:	f7fc f859 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005258:	b084      	sub	sp, #16
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e009      	b.n	800528c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3340      	adds	r3, #64	; 0x40
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b0e      	cmp	r3, #14
 8005290:	d9f2      	bls.n	8005278 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d112      	bne.n	80052be <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
 80052bc:	e00b      	b.n	80052d6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052dc:	461a      	mov	r2, r3
 80052de:	2300      	movs	r3, #0
 80052e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e8:	4619      	mov	r1, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	461a      	mov	r2, r3
 80052f2:	680b      	ldr	r3, [r1, #0]
 80052f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d10c      	bne.n	8005316 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005302:	2100      	movs	r1, #0
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f961 	bl	80055cc <USB_SetDevSpeed>
 800530a:	e008      	b.n	800531e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800530c:	2101      	movs	r1, #1
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f95c 	bl	80055cc <USB_SetDevSpeed>
 8005314:	e003      	b.n	800531e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005316:	2103      	movs	r1, #3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f957 	bl	80055cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800531e:	2110      	movs	r1, #16
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f90b 	bl	800553c <USB_FlushTxFifo>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f929 	bl	8005588 <USB_FlushRxFifo>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	461a      	mov	r2, r3
 8005348:	2300      	movs	r3, #0
 800534a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535e:	461a      	mov	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	e043      	b.n	80053f2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005380:	d118      	bne.n	80053b4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e013      	b.n	80053c6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	461a      	mov	r2, r3
 80053ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e008      	b.n	80053c6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c0:	461a      	mov	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	461a      	mov	r2, r3
 80053e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	3301      	adds	r3, #1
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d3b7      	bcc.n	800536a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	e043      	b.n	8005488 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005416:	d118      	bne.n	800544a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542a:	461a      	mov	r2, r3
 800542c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e013      	b.n	800545c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	461a      	mov	r2, r3
 8005442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e008      	b.n	800545c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	2300      	movs	r3, #0
 800545a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	2300      	movs	r3, #0
 800546c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	461a      	mov	r2, r3
 800547c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	3301      	adds	r3, #1
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	429a      	cmp	r2, r3
 800548e:	d3b7      	bcc.n	8005400 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800549e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d111      	bne.n	80054ce <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b20      	ldr	r3, [pc, #128]	; (8005534 <USB_DevInit+0x2dc>)
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	f043 0303 	orr.w	r3, r3, #3
 80054cc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f043 0210 	orr.w	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <USB_DevInit+0x2e0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f043 0208 	orr.w	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800550c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551a:	f043 0304 	orr.w	r3, r3, #4
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552e:	b004      	add	sp, #16
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	00800100 	.word	0x00800100
 8005538:	803c3800 	.word	0x803c3800

0800553c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <USB_FlushTxFifo+0x48>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b20      	cmp	r3, #32
 8005572:	d0f0      	beq.n	8005556 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	00030d40 	.word	0x00030d40

08005588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2210      	movs	r2, #16
 8005598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <USB_FlushRxFifo+0x40>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d901      	bls.n	80055ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e006      	b.n	80055ba <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d0f0      	beq.n	800559a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	00030d40 	.word	0x00030d40

080055cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
 8005622:	e00a      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d002      	beq.n	8005630 <USB_GetDevSpeed+0x32>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d102      	bne.n	8005636 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005630:	2302      	movs	r3, #2
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e001      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005636:	230f      	movs	r3, #15
 8005638:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13a      	bne.n	80056da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d155      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	78db      	ldrb	r3, [r3, #3]
 80056b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e036      	b.n	8005748 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800572e:	430b      	orrs	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005746:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d135      	bne.n	80057e0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	b29b      	uxth	r3, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005794:	4013      	ands	r3, r2
 8005796:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	2101      	movs	r1, #1
 80057aa:	fa01 f303 	lsl.w	r3, r1, r3
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	43db      	mvns	r3, r3
 80057b2:	68f9      	ldr	r1, [r7, #12]
 80057b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b8:	4013      	ands	r3, r2
 80057ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	0159      	lsls	r1, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	440b      	add	r3, r1
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	4619      	mov	r1, r3
 80057d8:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <USB_DeactivateEndpoint+0x100>)
 80057da:	4013      	ands	r3, r2
 80057dc:	600b      	str	r3, [r1, #0]
 80057de:	e034      	b.n	800584a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 030f 	and.w	r3, r3, #15
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	43db      	mvns	r3, r3
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005800:	4013      	ands	r3, r2
 8005802:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	2101      	movs	r1, #1
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	43db      	mvns	r3, r3
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005824:	4013      	ands	r3, r2
 8005826:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	0159      	lsls	r1, r3, #5
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	440b      	add	r3, r1
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	4619      	mov	r1, r3
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <USB_DeactivateEndpoint+0x104>)
 8005846:	4013      	ands	r3, r2
 8005848:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	ec337800 	.word	0xec337800
 800585c:	eff37800 	.word	0xeff37800

08005860 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af02      	add	r7, sp, #8
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	2b01      	cmp	r3, #1
 800587e:	f040 815c 	bne.w	8005b3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d132      	bne.n	80058f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	0cdb      	lsrs	r3, r3, #19
 80058ea:	04db      	lsls	r3, r3, #19
 80058ec:	6113      	str	r3, [r2, #16]
 80058ee:	e074      	b.n	80059da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	0cdb      	lsrs	r3, r3, #19
 800590c:	04db      	lsls	r3, r3, #19
 800590e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800592e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6959      	ldr	r1, [r3, #20]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	440b      	add	r3, r1
 800594c:	1e59      	subs	r1, r3, #1
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	fbb1 f3f3 	udiv	r3, r1, r3
 8005956:	04d9      	lsls	r1, r3, #19
 8005958:	4b9d      	ldr	r3, [pc, #628]	; (8005bd0 <USB_EPStartXfer+0x370>)
 800595a:	400b      	ands	r3, r1
 800595c:	69b9      	ldr	r1, [r7, #24]
 800595e:	0148      	lsls	r0, r1, #5
 8005960:	69f9      	ldr	r1, [r7, #28]
 8005962:	4401      	add	r1, r0
 8005964:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005968:	4313      	orrs	r3, r2
 800596a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005982:	69b9      	ldr	r1, [r7, #24]
 8005984:	0148      	lsls	r0, r1, #5
 8005986:	69f9      	ldr	r1, [r7, #28]
 8005988:	4401      	add	r1, r0
 800598a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800598e:	4313      	orrs	r3, r2
 8005990:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	78db      	ldrb	r3, [r3, #3]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d11f      	bne.n	80059da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80059b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d14b      	bne.n	8005a78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	461a      	mov	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d128      	bne.n	8005a56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d110      	bne.n	8005a36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e00f      	b.n	8005a56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e12f      	b.n	8005cd8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	78db      	ldrb	r3, [r3, #3]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d015      	beq.n	8005acc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8117 	beq.w	8005cd8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	2101      	movs	r1, #1
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	634b      	str	r3, [r1, #52]	; 0x34
 8005aca:	e105      	b.n	8005cd8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d110      	bne.n	8005afe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	e00f      	b.n	8005b1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	68d9      	ldr	r1, [r3, #12]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	781a      	ldrb	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	b298      	uxth	r0, r3
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4603      	mov	r3, r0
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fa2b 	bl	8005f8e <USB_WritePacket>
 8005b38:	e0ce      	b.n	8005cd8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b54:	0cdb      	lsrs	r3, r3, #19
 8005b56:	04db      	lsls	r3, r3, #19
 8005b58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d126      	bne.n	8005bd4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	0148      	lsls	r0, r1, #5
 8005ba0:	69f9      	ldr	r1, [r7, #28]
 8005ba2:	4401      	add	r1, r0
 8005ba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bca:	6113      	str	r3, [r2, #16]
 8005bcc:	e036      	b.n	8005c3c <USB_EPStartXfer+0x3dc>
 8005bce:	bf00      	nop
 8005bd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	4413      	add	r3, r2
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	8afb      	ldrh	r3, [r7, #22]
 8005bfa:	04d9      	lsls	r1, r3, #19
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <USB_EPStartXfer+0x484>)
 8005bfe:	400b      	ands	r3, r1
 8005c00:	69b9      	ldr	r1, [r7, #24]
 8005c02:	0148      	lsls	r0, r1, #5
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	4401      	add	r1, r0
 8005c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	8af9      	ldrh	r1, [r7, #22]
 8005c24:	fb01 f303 	mul.w	r3, r1, r3
 8005c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	0148      	lsls	r0, r1, #5
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	4401      	add	r1, r0
 8005c34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d10d      	bne.n	8005c5e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	68d9      	ldr	r1, [r3, #12]
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	78db      	ldrb	r3, [r3, #3]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d128      	bne.n	8005cb8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d110      	bne.n	8005c98 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e00f      	b.n	8005cb8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	1ff80000 	.word	0x1ff80000

08005ce8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	f040 80cd 	bne.w	8005ea4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d132      	bne.n	8005d78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d70:	0cdb      	lsrs	r3, r3, #19
 8005d72:	04db      	lsls	r3, r3, #19
 8005d74:	6113      	str	r3, [r2, #16]
 8005d76:	e04e      	b.n	8005e16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	0cdb      	lsrs	r3, r3, #19
 8005d94:	04db      	lsls	r3, r3, #19
 8005d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005db6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	695a      	ldr	r2, [r3, #20]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d903      	bls.n	8005dd0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e06:	6939      	ldr	r1, [r7, #16]
 8005e08:	0148      	lsls	r0, r1, #5
 8005e0a:	6979      	ldr	r1, [r7, #20]
 8005e0c:	4401      	add	r1, r0
 8005e0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e12:	4313      	orrs	r3, r2
 8005e14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d11e      	bne.n	8005e5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e092      	b.n	8005f80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d07e      	beq.n	8005f80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	2101      	movs	r1, #1
 8005e94:	fa01 f303 	lsl.w	r3, r1, r3
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	634b      	str	r3, [r1, #52]	; 0x34
 8005ea2:	e06d      	b.n	8005f80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ebe:	0cdb      	lsrs	r3, r3, #19
 8005ec0:	04db      	lsls	r3, r3, #19
 8005ec2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ede:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ee2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ee6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2e:	6939      	ldr	r1, [r7, #16]
 8005f30:	0148      	lsls	r0, r1, #5
 8005f32:	6979      	ldr	r1, [r7, #20]
 8005f34:	4401      	add	r1, r0
 8005f36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d10d      	bne.n	8005f60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d009      	beq.n	8005f60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68d9      	ldr	r1, [r3, #12]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	460a      	mov	r2, r1
 8005f5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b089      	sub	sp, #36	; 0x24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	71fb      	strb	r3, [r7, #7]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005fac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11a      	bne.n	8005fea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fb4:	88bb      	ldrh	r3, [r7, #4]
 8005fb6:	3303      	adds	r3, #3
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	e00f      	b.n	8005fe2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	031a      	lsls	r2, r3, #12
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	461a      	mov	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d3eb      	bcc.n	8005fc2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3724      	adds	r7, #36	; 0x24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	; 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	3303      	adds	r3, #3
 8006012:	089b      	lsrs	r3, r3, #2
 8006014:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e00b      	b.n	8006034 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	601a      	str	r2, [r3, #0]
    pDest++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3304      	adds	r3, #4
 800602c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3301      	adds	r3, #1
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	429a      	cmp	r2, r3
 800603a:	d3ef      	bcc.n	800601c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800603c:	69fb      	ldr	r3, [r7, #28]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3724      	adds	r7, #36	; 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d12c      	bne.n	80060c0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	db12      	blt.n	800609e <USB_EPSetStall+0x54>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006098:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800609c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e02b      	b.n	8006118 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db12      	blt.n	80060f8 <USB_EPSetStall+0xae>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00f      	beq.n	80060f8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060f6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	785b      	ldrb	r3, [r3, #1]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d128      	bne.n	8006194 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d003      	beq.n	8006172 <USB_EPClearStall+0x4c>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d138      	bne.n	80061e4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e027      	b.n	80061e4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	78db      	ldrb	r3, [r3, #3]
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d003      	beq.n	80061c4 <USB_EPClearStall+0x9e>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	78db      	ldrb	r3, [r3, #3]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d10f      	bne.n	80061e4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b085      	sub	sp, #20
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006210:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006214:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006258:	f023 0302 	bic.w	r3, r3, #2
 800625c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800625e:	2003      	movs	r0, #3
 8006260:	f7fb f84e 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800628e:	2003      	movs	r0, #3
 8006290:	f7fb f836 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4013      	ands	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4013      	ands	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	0c1b      	lsrs	r3, r3, #16
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4013      	ands	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	b29b      	uxth	r3, r3
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	4013      	ands	r3, r2
 8006358:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800635a:	68bb      	ldr	r3, [r7, #8]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
 8006398:	01db      	lsls	r3, r3, #7
 800639a:	b2db      	uxtb	r3, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4013      	ands	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b6:	68bb      	ldr	r3, [r7, #8]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0301 	and.w	r3, r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0306 	and.w	r3, r3, #6
 8006410:	2b04      	cmp	r3, #4
 8006412:	d109      	bne.n	8006428 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006422:	f043 0303 	orr.w	r3, r3, #3
 8006426:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	460b      	mov	r3, r1
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	333c      	adds	r3, #60	; 0x3c
 8006462:	3304      	adds	r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4a26      	ldr	r2, [pc, #152]	; (8006504 <USB_EP0_OutStart+0xb8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d90a      	bls.n	8006486 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006480:	d101      	bne.n	8006486 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e037      	b.n	80064f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b4:	f043 0318 	orr.w	r3, r3, #24
 80064b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d10f      	bne.n	80064f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	4f54300a 	.word	0x4f54300a

08006508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <USB_CoreReset+0x64>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d901      	bls.n	8006526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e01b      	b.n	800655e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	daf2      	bge.n	8006514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f043 0201 	orr.w	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a09      	ldr	r2, [pc, #36]	; (800656c <USB_CoreReset+0x64>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d901      	bls.n	8006550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e006      	b.n	800655e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d0f0      	beq.n	800653e <USB_CoreReset+0x36>

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	00030d40 	.word	0x00030d40

08006570 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	7c1b      	ldrb	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d115      	bne.n	80065b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658c:	2202      	movs	r2, #2
 800658e:	2181      	movs	r1, #129	; 0x81
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f010 f9b2 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800659c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a0:	2202      	movs	r2, #2
 80065a2:	2101      	movs	r1, #1
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f010 f9a8 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80065b2:	e012      	b.n	80065da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065b4:	2340      	movs	r3, #64	; 0x40
 80065b6:	2202      	movs	r2, #2
 80065b8:	2181      	movs	r1, #129	; 0x81
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f010 f99d 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065c6:	2340      	movs	r3, #64	; 0x40
 80065c8:	2202      	movs	r2, #2
 80065ca:	2101      	movs	r1, #1
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f010 f994 	bl	80168fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065da:	2308      	movs	r3, #8
 80065dc:	2203      	movs	r2, #3
 80065de:	2182      	movs	r1, #130	; 0x82
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f010 f98a 	bl	80168fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80065ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065f0:	f010 fc32 	bl	8016e58 <malloc>
 80065f4:	4603      	mov	r3, r0
 80065f6:	461a      	mov	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	e026      	b.n	800665c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006614:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7c1b      	ldrb	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006642:	2101      	movs	r1, #1
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f010 fa49 	bl	8016adc <USBD_LL_PrepareReceive>
 800664a:	e007      	b.n	800665c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006652:	2340      	movs	r3, #64	; 0x40
 8006654:	2101      	movs	r1, #1
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f010 fa40 	bl	8016adc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006676:	2181      	movs	r1, #129	; 0x81
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f010 f964 	bl	8016946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006684:	2101      	movs	r1, #1
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f010 f95d 	bl	8016946 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006694:	2182      	movs	r1, #130	; 0x82
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f010 f955 	bl	8016946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066bc:	4618      	mov	r0, r3
 80066be:	f010 fbd3 	bl	8016e68 <free>
    pdev->pClassData = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d039      	beq.n	8006772 <USBD_CDC_Setup+0x9e>
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d17c      	bne.n	80067fc <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d029      	beq.n	800675e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	b25b      	sxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	da11      	bge.n	8006738 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006720:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	88d2      	ldrh	r2, [r2, #6]
 8006726:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006728:	6939      	ldr	r1, [r7, #16]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	88db      	ldrh	r3, [r3, #6]
 800672e:	461a      	mov	r2, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f9c9 	bl	8007ac8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006736:	e068      	b.n	800680a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785a      	ldrb	r2, [r3, #1]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	88db      	ldrh	r3, [r3, #6]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800674e:	6939      	ldr	r1, [r7, #16]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	461a      	mov	r2, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f9e4 	bl	8007b24 <USBD_CtlPrepareRx>
    break;
 800675c:	e055      	b.n	800680a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	7850      	ldrb	r0, [r2, #1]
 800676a:	2200      	movs	r2, #0
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	4798      	blx	r3
    break;
 8006770:	e04b      	b.n	800680a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b0a      	cmp	r3, #10
 8006778:	d017      	beq.n	80067aa <USBD_CDC_Setup+0xd6>
 800677a:	2b0b      	cmp	r3, #11
 800677c:	d029      	beq.n	80067d2 <USBD_CDC_Setup+0xfe>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d133      	bne.n	80067ea <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006788:	2b03      	cmp	r3, #3
 800678a:	d107      	bne.n	800679c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800678c:	f107 030c 	add.w	r3, r7, #12
 8006790:	2202      	movs	r2, #2
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 f997 	bl	8007ac8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800679a:	e02e      	b.n	80067fa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 f927 	bl	80079f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067a4:	2302      	movs	r3, #2
 80067a6:	75fb      	strb	r3, [r7, #23]
      break;
 80067a8:	e027      	b.n	80067fa <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d107      	bne.n	80067c4 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80067b4:	f107 030f 	add.w	r3, r7, #15
 80067b8:	2201      	movs	r2, #1
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 f983 	bl	8007ac8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80067c2:	e01a      	b.n	80067fa <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 f913 	bl	80079f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	75fb      	strb	r3, [r7, #23]
      break;
 80067d0:	e013      	b.n	80067fa <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d00d      	beq.n	80067f8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f907 	bl	80079f2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067e4:	2302      	movs	r3, #2
 80067e6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80067e8:	e006      	b.n	80067f8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f900 	bl	80079f2 <USBD_CtlError>
      ret = USBD_FAIL;
 80067f2:	2302      	movs	r3, #2
 80067f4:	75fb      	strb	r3, [r7, #23]
      break;
 80067f6:	e000      	b.n	80067fa <USBD_CDC_Setup+0x126>
      break;
 80067f8:	bf00      	nop
    }
    break;
 80067fa:	e006      	b.n	800680a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f8f7 	bl	80079f2 <USBD_CtlError>
    ret = USBD_FAIL;
 8006804:	2302      	movs	r3, #2
 8006806:	75fb      	strb	r3, [r7, #23]
    break;
 8006808:	bf00      	nop
  }

  return ret;
 800680a:	7dfb      	ldrb	r3, [r7, #23]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006826:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800682e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006836:	2b00      	cmp	r3, #0
 8006838:	d03a      	beq.n	80068b0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	331c      	adds	r3, #28
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d029      	beq.n	80068a4 <USBD_CDC_DataIn+0x90>
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	331c      	adds	r3, #28
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	78f9      	ldrb	r1, [r7, #3]
 8006864:	68b8      	ldr	r0, [r7, #8]
 8006866:	460b      	mov	r3, r1
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	1a5b      	subs	r3, r3, r1
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4403      	add	r3, r0
 8006870:	3344      	adds	r3, #68	; 0x44
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	fbb2 f1f3 	udiv	r1, r2, r3
 8006878:	fb03 f301 	mul.w	r3, r3, r1
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d110      	bne.n	80068a4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	331c      	adds	r3, #28
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006896:	78f9      	ldrb	r1, [r7, #3]
 8006898:	2300      	movs	r3, #0
 800689a:	2200      	movs	r2, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f010 f8fa 	bl	8016a96 <USBD_LL_Transmit>
 80068a2:	e003      	b.n	80068ac <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e000      	b.n	80068b2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80068b0:	2302      	movs	r3, #2
  }
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80068ce:	78fb      	ldrb	r3, [r7, #3]
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f010 f925 	bl	8016b22 <USBD_LL_GetRxDataSize>
 80068d8:	4602      	mov	r2, r0
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068fe:	4611      	mov	r1, r2
 8006900:	4798      	blx	r3

    return USBD_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e000      	b.n	8006908 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006906:	2302      	movs	r3, #2
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800691e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <USBD_CDC_EP0_RxReady+0x46>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006930:	2bff      	cmp	r3, #255	; 0xff
 8006932:	d010      	beq.n	8006956 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006942:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800694a:	b292      	uxth	r2, r2
 800694c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	22ff      	movs	r2, #255	; 0xff
 8006952:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2243      	movs	r2, #67	; 0x43
 800696c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000090 	.word	0x20000090

08006980 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2243      	movs	r2, #67	; 0x43
 800698c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800698e:	4b03      	ldr	r3, [pc, #12]	; (800699c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	2000004c 	.word	0x2000004c

080069a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2243      	movs	r2, #67	; 0x43
 80069ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	200000d4 	.word	0x200000d4

080069c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	220a      	movs	r2, #10
 80069cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000008 	.word	0x20000008

080069e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069ea:	2302      	movs	r3, #2
 80069ec:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b087      	sub	sp, #28
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a22:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a52:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a78:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d115      	bne.n	8006aba <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2181      	movs	r1, #129	; 0x81
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f00f fff0 	bl	8016a96 <USBD_LL_Transmit>

      return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e002      	b.n	8006ac0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d017      	beq.n	8006b12 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7c1b      	ldrb	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af4:	2101      	movs	r1, #1
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f00f fff0 	bl	8016adc <USBD_LL_PrepareReceive>
 8006afc:	e007      	b.n	8006b0e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	2101      	movs	r1, #1
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f00f ffe7 	bl	8016adc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e000      	b.n	8006b14 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006b12:	2302      	movs	r3, #2
  }
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b30:	2302      	movs	r3, #2
 8006b32:	e01a      	b.n	8006b6a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	79fa      	ldrb	r2, [r7, #7]
 8006b60:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f00f fe62 	bl	801682c <USBD_LL_Init>

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
 8006b92:	e001      	b.n	8006b98 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b94:	2302      	movs	r3, #2
 8006b96:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f00f fe88 	bl	80168c4 <USBD_LL_Start>

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fe94 	bl	8007978 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d00c      	beq.n	8006c8e <USBD_LL_SetupStage+0x56>
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d302      	bcc.n	8006c7e <USBD_LL_SetupStage+0x46>
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d010      	beq.n	8006c9e <USBD_LL_SetupStage+0x66>
 8006c7c:	e017      	b.n	8006cae <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa04 	bl	8007094 <USBD_StdDevReq>
    break;
 8006c8c:	e01a      	b.n	8006cc4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa66 	bl	8007168 <USBD_StdItfReq>
    break;
 8006c9c:	e012      	b.n	8006cc4 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 faa4 	bl	80071f4 <USBD_StdEPReq>
    break;
 8006cac:	e00a      	b.n	8006cc4 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006cb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f00f fe61 	bl	8016984 <USBD_LL_StallEP>
    break;
 8006cc2:	bf00      	nop
  }

  return USBD_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d14b      	bne.n	8006d7a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006ce8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d134      	bne.n	8006d5e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d919      	bls.n	8006d34 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	1ad2      	subs	r2, r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d203      	bcs.n	8006d22 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	e002      	b.n	8006d28 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 ff17 	bl	8007b60 <USBD_CtlContinueRx>
 8006d32:	e038      	b.n	8006da6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d105      	bne.n	8006d56 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 ff14 	bl	8007b84 <USBD_CtlSendStatus>
 8006d5c:	e023      	b.n	8006da6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	d11e      	bne.n	8006da6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006d70:	2100      	movs	r1, #0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f00f fe06 	bl	8016984 <USBD_LL_StallEP>
 8006d78:	e015      	b.n	8006da6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d108      	bne.n	8006da2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	7afa      	ldrb	r2, [r7, #11]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	4798      	blx	r3
 8006da0:	e001      	b.n	8006da6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006da2:	2302      	movs	r3, #2
 8006da4:	e000      	b.n	8006da8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	460b      	mov	r3, r1
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d17f      	bne.n	8006ec4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3314      	adds	r3, #20
 8006dc8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d15c      	bne.n	8006e8e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d915      	bls.n	8006e0c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fe81 	bl	8007b00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	2100      	movs	r1, #0
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f00f fe69 	bl	8016adc <USBD_LL_PrepareReceive>
 8006e0a:	e04e      	b.n	8006eaa <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	6912      	ldr	r2, [r2, #16]
 8006e14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e18:	fb02 f201 	mul.w	r2, r2, r1
 8006e1c:	1a9b      	subs	r3, r3, r2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d11c      	bne.n	8006e5c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d316      	bcc.n	8006e5c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d20f      	bcs.n	8006e5c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2100      	movs	r1, #0
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fe5d 	bl	8007b00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f00f fe41 	bl	8016adc <USBD_LL_PrepareReceive>
 8006e5a:	e026      	b.n	8006eaa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d105      	bne.n	8006e7e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f00f fd7f 	bl	8016984 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fe8f 	bl	8007baa <USBD_CtlReceiveStatus>
 8006e8c:	e00d      	b.n	8006eaa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d004      	beq.n	8006ea2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f00f fd6d 	bl	8016984 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d11d      	bne.n	8006ef0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fe82 	bl	8006bbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006ec2:	e015      	b.n	8006ef0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d108      	bne.n	8006eec <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	7afa      	ldrb	r2, [r7, #11]
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	4798      	blx	r3
 8006eea:	e001      	b.n	8006ef0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eec:	2302      	movs	r3, #2
 8006eee:	e000      	b.n	8006ef2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f02:	2340      	movs	r3, #64	; 0x40
 8006f04:	2200      	movs	r2, #0
 8006f06:	2100      	movs	r1, #0
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f00f fcf6 	bl	80168fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2240      	movs	r2, #64	; 0x40
 8006f1a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	2200      	movs	r2, #0
 8006f22:	2180      	movs	r1, #128	; 0x80
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f00f fce8 	bl	80168fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2240      	movs	r2, #64	; 0x40
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6852      	ldr	r2, [r2, #4]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
  }

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	78fa      	ldrb	r2, [r7, #3]
 8006f8c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d10b      	bne.n	8007012 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007036:	b480      	push	{r7}
 8007038:	b083      	sub	sp, #12
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	6852      	ldr	r2, [r2, #4]
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	4611      	mov	r1, r2
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d004      	beq.n	80070b8 <USBD_StdDevReq+0x24>
 80070ae:	2b40      	cmp	r3, #64	; 0x40
 80070b0:	d002      	beq.n	80070b8 <USBD_StdDevReq+0x24>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d008      	beq.n	80070c8 <USBD_StdDevReq+0x34>
 80070b6:	e04c      	b.n	8007152 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
    break;
 80070c6:	e049      	b.n	800715c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d83a      	bhi.n	8007146 <USBD_StdDevReq+0xb2>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <USBD_StdDevReq+0x44>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	08007129 	.word	0x08007129
 80070dc:	0800713d 	.word	0x0800713d
 80070e0:	08007147 	.word	0x08007147
 80070e4:	08007133 	.word	0x08007133
 80070e8:	08007147 	.word	0x08007147
 80070ec:	0800710b 	.word	0x0800710b
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007147 	.word	0x08007147
 80070f8:	0800711f 	.word	0x0800711f
 80070fc:	08007115 	.word	0x08007115
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9d2 	bl	80074ac <USBD_GetDescriptor>
      break;
 8007108:	e022      	b.n	8007150 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fac7 	bl	80076a0 <USBD_SetAddress>
      break;
 8007112:	e01d      	b.n	8007150 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fb04 	bl	8007724 <USBD_SetConfig>
      break;
 800711c:	e018      	b.n	8007150 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb8d 	bl	8007840 <USBD_GetConfig>
      break;
 8007126:	e013      	b.n	8007150 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fbbc 	bl	80078a8 <USBD_GetStatus>
      break;
 8007130:	e00e      	b.n	8007150 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fbea 	bl	800790e <USBD_SetFeature>
      break;
 800713a:	e009      	b.n	8007150 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fbf9 	bl	8007936 <USBD_ClrFeature>
      break;
 8007144:	e004      	b.n	8007150 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fc52 	bl	80079f2 <USBD_CtlError>
      break;
 800714e:	bf00      	nop
    }
    break;
 8007150:	e004      	b.n	800715c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fc4c 	bl	80079f2 <USBD_CtlError>
    break;
 800715a:	bf00      	nop
  }

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop

08007168 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800717e:	2b20      	cmp	r3, #32
 8007180:	d003      	beq.n	800718a <USBD_StdItfReq+0x22>
 8007182:	2b40      	cmp	r3, #64	; 0x40
 8007184:	d001      	beq.n	800718a <USBD_StdItfReq+0x22>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d12a      	bne.n	80071e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007190:	3b01      	subs	r3, #1
 8007192:	2b02      	cmp	r3, #2
 8007194:	d81d      	bhi.n	80071d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889b      	ldrh	r3, [r3, #4]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	d813      	bhi.n	80071c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	88db      	ldrh	r3, [r3, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d110      	bne.n	80071dc <USBD_StdItfReq+0x74>
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10d      	bne.n	80071dc <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fcdf 	bl	8007b84 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80071c6:	e009      	b.n	80071dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fc11 	bl	80079f2 <USBD_CtlError>
      break;
 80071d0:	e004      	b.n	80071dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc0c 	bl	80079f2 <USBD_CtlError>
      break;
 80071da:	e000      	b.n	80071de <USBD_StdItfReq+0x76>
      break;
 80071dc:	bf00      	nop
    }
    break;
 80071de:	e004      	b.n	80071ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc05 	bl	80079f2 <USBD_CtlError>
    break;
 80071e8:	bf00      	nop
  }

  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	889b      	ldrh	r3, [r3, #4]
 8007206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007210:	2b20      	cmp	r3, #32
 8007212:	d004      	beq.n	800721e <USBD_StdEPReq+0x2a>
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d002      	beq.n	800721e <USBD_StdEPReq+0x2a>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <USBD_StdEPReq+0x3a>
 800721c:	e13b      	b.n	8007496 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	4798      	blx	r3
    break;
 800722c:	e138      	b.n	80074a0 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007236:	2b20      	cmp	r3, #32
 8007238:	d10a      	bne.n	8007250 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]

      return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	e128      	b.n	80074a2 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d03e      	beq.n	80072d6 <USBD_StdEPReq+0xe2>
 8007258:	2b03      	cmp	r3, #3
 800725a:	d002      	beq.n	8007262 <USBD_StdEPReq+0x6e>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d070      	beq.n	8007342 <USBD_StdEPReq+0x14e>
 8007260:	e113      	b.n	800748a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007268:	2b02      	cmp	r3, #2
 800726a:	d002      	beq.n	8007272 <USBD_StdEPReq+0x7e>
 800726c:	2b03      	cmp	r3, #3
 800726e:	d015      	beq.n	800729c <USBD_StdEPReq+0xa8>
 8007270:	e02b      	b.n	80072ca <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <USBD_StdEPReq+0x9e>
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b80      	cmp	r3, #128	; 0x80
 800727c:	d009      	beq.n	8007292 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f00f fb7e 	bl	8016984 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007288:	2180      	movs	r1, #128	; 0x80
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f00f fb7a 	bl	8016984 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007290:	e020      	b.n	80072d4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fbac 	bl	80079f2 <USBD_CtlError>
        break;
 800729a:	e01b      	b.n	80072d4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	885b      	ldrh	r3, [r3, #2]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10e      	bne.n	80072c2 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <USBD_StdEPReq+0xce>
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d008      	beq.n	80072c2 <USBD_StdEPReq+0xce>
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	88db      	ldrh	r3, [r3, #6]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d104      	bne.n	80072c2 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f00f fb61 	bl	8016984 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc5e 	bl	8007b84 <USBD_CtlSendStatus>

        break;
 80072c8:	e004      	b.n	80072d4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb90 	bl	80079f2 <USBD_CtlError>
        break;
 80072d2:	bf00      	nop
      }
      break;
 80072d4:	e0de      	b.n	8007494 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d002      	beq.n	80072e6 <USBD_StdEPReq+0xf2>
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d015      	beq.n	8007310 <USBD_StdEPReq+0x11c>
 80072e4:	e026      	b.n	8007334 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <USBD_StdEPReq+0x112>
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	2b80      	cmp	r3, #128	; 0x80
 80072f0:	d009      	beq.n	8007306 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f00f fb44 	bl	8016984 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80072fc:	2180      	movs	r1, #128	; 0x80
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f00f fb40 	bl	8016984 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007304:	e01c      	b.n	8007340 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fb72 	bl	80079f2 <USBD_CtlError>
        break;
 800730e:	e017      	b.n	8007340 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	885b      	ldrh	r3, [r3, #2]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d112      	bne.n	800733e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731e:	2b00      	cmp	r3, #0
 8007320:	d004      	beq.n	800732c <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f00f fb4b 	bl	80169c2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc29 	bl	8007b84 <USBD_CtlSendStatus>
        }
        break;
 8007332:	e004      	b.n	800733e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb5b 	bl	80079f2 <USBD_CtlError>
        break;
 800733c:	e000      	b.n	8007340 <USBD_StdEPReq+0x14c>
        break;
 800733e:	bf00      	nop
      }
      break;
 8007340:	e0a8      	b.n	8007494 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007348:	2b02      	cmp	r3, #2
 800734a:	d002      	beq.n	8007352 <USBD_StdEPReq+0x15e>
 800734c:	2b03      	cmp	r3, #3
 800734e:	d031      	beq.n	80073b4 <USBD_StdEPReq+0x1c0>
 8007350:	e095      	b.n	800747e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007352:	7bbb      	ldrb	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <USBD_StdEPReq+0x174>
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b80      	cmp	r3, #128	; 0x80
 800735c:	d004      	beq.n	8007368 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fb46 	bl	80079f2 <USBD_CtlError>
          break;
 8007366:	e08f      	b.n	8007488 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007368:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736c:	2b00      	cmp	r3, #0
 800736e:	da0b      	bge.n	8007388 <USBD_StdEPReq+0x194>
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	3310      	adds	r3, #16
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	3304      	adds	r3, #4
 8007386:	e00a      	b.n	800739e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2202      	movs	r2, #2
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fb8b 	bl	8007ac8 <USBD_CtlSendData>
          break;
 80073b2:	e069      	b.n	8007488 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80073b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da11      	bge.n	80073e0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	f003 020f 	and.w	r2, r3, #15
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	3318      	adds	r3, #24
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d117      	bne.n	8007406 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fb0a 	bl	80079f2 <USBD_CtlError>
            break;
 80073de:	e053      	b.n	8007488 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	f003 020f 	and.w	r2, r3, #15
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d104      	bne.n	8007406 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 faf7 	bl	80079f2 <USBD_CtlError>
            break;
 8007404:	e040      	b.n	8007488 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da0b      	bge.n	8007426 <USBD_StdEPReq+0x232>
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	3310      	adds	r3, #16
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	3304      	adds	r3, #4
 8007424:	e00a      	b.n	800743c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	4413      	add	r3, r2
 800743c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <USBD_StdEPReq+0x256>
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d103      	bne.n	8007452 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	e00e      	b.n	8007470 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f00f fad2 	bl	8016a00 <USBD_LL_IsStallEP>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2201      	movs	r2, #1
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	e002      	b.n	8007470 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2202      	movs	r2, #2
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fb26 	bl	8007ac8 <USBD_CtlSendData>
          break;
 800747c:	e004      	b.n	8007488 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fab6 	bl	80079f2 <USBD_CtlError>
        break;
 8007486:	bf00      	nop
      }
      break;
 8007488:	e004      	b.n	8007494 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fab0 	bl	80079f2 <USBD_CtlError>
      break;
 8007492:	bf00      	nop
    }
    break;
 8007494:	e004      	b.n	80074a0 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 faaa 	bl	80079f2 <USBD_CtlError>
    break;
 800749e:	bf00      	nop
  }

  return ret;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	f200 80c9 	bhi.w	8007658 <USBD_GetDescriptor+0x1ac>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USBD_GetDescriptor+0x20>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074e9 	.word	0x080074e9
 80074d0:	08007501 	.word	0x08007501
 80074d4:	08007541 	.word	0x08007541
 80074d8:	08007659 	.word	0x08007659
 80074dc:	08007659 	.word	0x08007659
 80074e0:	08007605 	.word	0x08007605
 80074e4:	0800762b 	.word	0x0800762b
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	f107 010a 	add.w	r1, r7, #10
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	60f8      	str	r0, [r7, #12]
    break;
 80074fe:	e0b0      	b.n	8007662 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7c1b      	ldrb	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10d      	bne.n	8007524 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f107 020a 	add.w	r2, r7, #10
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	2202      	movs	r2, #2
 8007520:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007522:	e09e      	b.n	8007662 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	f107 020a 	add.w	r2, r7, #10
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	2202      	movs	r2, #2
 800753c:	701a      	strb	r2, [r3, #0]
    break;
 800753e:	e090      	b.n	8007662 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	885b      	ldrh	r3, [r3, #2]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b05      	cmp	r3, #5
 8007548:	d856      	bhi.n	80075f8 <USBD_GetDescriptor+0x14c>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBD_GetDescriptor+0xa4>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007569 	.word	0x08007569
 8007554:	08007581 	.word	0x08007581
 8007558:	08007599 	.word	0x08007599
 800755c:	080075b1 	.word	0x080075b1
 8007560:	080075c9 	.word	0x080075c9
 8007564:	080075e1 	.word	0x080075e1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 010a 	add.w	r1, r7, #10
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
      break;
 800757e:	e040      	b.n	8007602 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7c12      	ldrb	r2, [r2, #16]
 800758c:	f107 010a 	add.w	r1, r7, #10
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
 8007594:	60f8      	str	r0, [r7, #12]
      break;
 8007596:	e034      	b.n	8007602 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	7c12      	ldrb	r2, [r2, #16]
 80075a4:	f107 010a 	add.w	r1, r7, #10
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	60f8      	str	r0, [r7, #12]
      break;
 80075ae:	e028      	b.n	8007602 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	7c12      	ldrb	r2, [r2, #16]
 80075bc:	f107 010a 	add.w	r1, r7, #10
 80075c0:	4610      	mov	r0, r2
 80075c2:	4798      	blx	r3
 80075c4:	60f8      	str	r0, [r7, #12]
      break;
 80075c6:	e01c      	b.n	8007602 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	7c12      	ldrb	r2, [r2, #16]
 80075d4:	f107 010a 	add.w	r1, r7, #10
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3
 80075dc:	60f8      	str	r0, [r7, #12]
      break;
 80075de:	e010      	b.n	8007602 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 010a 	add.w	r1, r7, #10
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
      break;
 80075f6:	e004      	b.n	8007602 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9f9 	bl	80079f2 <USBD_CtlError>
      return;
 8007600:	e04b      	b.n	800769a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007602:	e02e      	b.n	8007662 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7c1b      	ldrb	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	f107 020a 	add.w	r2, r7, #10
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	60f8      	str	r0, [r7, #12]
      break;
 800761e:	e020      	b.n	8007662 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9e5 	bl	80079f2 <USBD_CtlError>
      return;
 8007628:	e037      	b.n	800769a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7c1b      	ldrb	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10d      	bne.n	800764e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f107 020a 	add.w	r2, r7, #10
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
 8007642:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3301      	adds	r3, #1
 8007648:	2207      	movs	r2, #7
 800764a:	701a      	strb	r2, [r3, #0]
      break;
 800764c:	e009      	b.n	8007662 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9ce 	bl	80079f2 <USBD_CtlError>
      return;
 8007656:	e020      	b.n	800769a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9c9 	bl	80079f2 <USBD_CtlError>
    return;
 8007660:	e01b      	b.n	800769a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007662:	897b      	ldrh	r3, [r7, #10]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <USBD_GetDescriptor+0x1e0>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	88db      	ldrh	r3, [r3, #6]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00d      	beq.n	800768c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	88da      	ldrh	r2, [r3, #6]
 8007674:	897b      	ldrh	r3, [r7, #10]
 8007676:	4293      	cmp	r3, r2
 8007678:	bf28      	it	cs
 800767a:	4613      	movcs	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007680:	897b      	ldrh	r3, [r7, #10]
 8007682:	461a      	mov	r2, r3
 8007684:	68f9      	ldr	r1, [r7, #12]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa1e 	bl	8007ac8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	88db      	ldrh	r3, [r3, #6]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa75 	bl	8007b84 <USBD_CtlSendStatus>
  }
}
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	889b      	ldrh	r3, [r3, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d130      	bne.n	8007714 <USBD_SetAddress+0x74>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88db      	ldrh	r3, [r3, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d12c      	bne.n	8007714 <USBD_SetAddress+0x74>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	885b      	ldrh	r3, [r3, #2]
 80076be:	2b7f      	cmp	r3, #127	; 0x7f
 80076c0:	d828      	bhi.n	8007714 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	885b      	ldrh	r3, [r3, #2]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d104      	bne.n	80076e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f989 	bl	80079f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e0:	e01c      	b.n	800771c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7bfa      	ldrb	r2, [r7, #15]
 80076e6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f00f f9b2 	bl	8016a58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa45 	bl	8007b84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007708:	e008      	b.n	800771c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	e003      	b.n	800771c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f96b 	bl	80079f2 <USBD_CtlError>
  }
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	885b      	ldrh	r3, [r3, #2]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	4b41      	ldr	r3, [pc, #260]	; (800783c <USBD_SetConfig+0x118>)
 8007736:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007738:	4b40      	ldr	r3, [pc, #256]	; (800783c <USBD_SetConfig+0x118>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d904      	bls.n	800774a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f955 	bl	80079f2 <USBD_CtlError>
 8007748:	e075      	b.n	8007836 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007750:	2b02      	cmp	r3, #2
 8007752:	d002      	beq.n	800775a <USBD_SetConfig+0x36>
 8007754:	2b03      	cmp	r3, #3
 8007756:	d023      	beq.n	80077a0 <USBD_SetConfig+0x7c>
 8007758:	e062      	b.n	8007820 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800775a:	4b38      	ldr	r3, [pc, #224]	; (800783c <USBD_SetConfig+0x118>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01a      	beq.n	8007798 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007762:	4b36      	ldr	r3, [pc, #216]	; (800783c <USBD_SetConfig+0x118>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2203      	movs	r2, #3
 8007770:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007774:	4b31      	ldr	r3, [pc, #196]	; (800783c <USBD_SetConfig+0x118>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7ff fa2a 	bl	8006bd4 <USBD_SetClassConfig>
 8007780:	4603      	mov	r3, r0
 8007782:	2b02      	cmp	r3, #2
 8007784:	d104      	bne.n	8007790 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f932 	bl	80079f2 <USBD_CtlError>
          return;
 800778e:	e052      	b.n	8007836 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f9f7 	bl	8007b84 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007796:	e04e      	b.n	8007836 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f9f3 	bl	8007b84 <USBD_CtlSendStatus>
      break;
 800779e:	e04a      	b.n	8007836 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077a0:	4b26      	ldr	r3, [pc, #152]	; (800783c <USBD_SetConfig+0x118>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d112      	bne.n	80077ce <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80077b0:	4b22      	ldr	r3, [pc, #136]	; (800783c <USBD_SetConfig+0x118>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80077ba:	4b20      	ldr	r3, [pc, #128]	; (800783c <USBD_SetConfig+0x118>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fa26 	bl	8006c12 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f9dc 	bl	8007b84 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80077cc:	e033      	b.n	8007836 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80077ce:	4b1b      	ldr	r3, [pc, #108]	; (800783c <USBD_SetConfig+0x118>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d01d      	beq.n	8007818 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff fa14 	bl	8006c12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <USBD_SetConfig+0x118>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <USBD_SetConfig+0x118>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff f9ea 	bl	8006bd4 <USBD_SetClassConfig>
 8007800:	4603      	mov	r3, r0
 8007802:	2b02      	cmp	r3, #2
 8007804:	d104      	bne.n	8007810 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f8f2 	bl	80079f2 <USBD_CtlError>
          return;
 800780e:	e012      	b.n	8007836 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f9b7 	bl	8007b84 <USBD_CtlSendStatus>
      break;
 8007816:	e00e      	b.n	8007836 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f9b3 	bl	8007b84 <USBD_CtlSendStatus>
      break;
 800781e:	e00a      	b.n	8007836 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f8e5 	bl	80079f2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <USBD_SetConfig+0x118>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff f9ef 	bl	8006c12 <USBD_ClrClassConfig>
      break;
 8007834:	bf00      	nop
    }
  }
}
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20000210 	.word	0x20000210

08007840 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88db      	ldrh	r3, [r3, #6]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d004      	beq.n	800785c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f8cc 	bl	80079f2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800785a:	e021      	b.n	80078a0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007862:	2b01      	cmp	r3, #1
 8007864:	db17      	blt.n	8007896 <USBD_GetConfig+0x56>
 8007866:	2b02      	cmp	r3, #2
 8007868:	dd02      	ble.n	8007870 <USBD_GetConfig+0x30>
 800786a:	2b03      	cmp	r3, #3
 800786c:	d00b      	beq.n	8007886 <USBD_GetConfig+0x46>
 800786e:	e012      	b.n	8007896 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	3308      	adds	r3, #8
 800787a:	2201      	movs	r2, #1
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f922 	bl	8007ac8 <USBD_CtlSendData>
      break;
 8007884:	e00c      	b.n	80078a0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3304      	adds	r3, #4
 800788a:	2201      	movs	r2, #1
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f91a 	bl	8007ac8 <USBD_CtlSendData>
      break;
 8007894:	e004      	b.n	80078a0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f8aa 	bl	80079f2 <USBD_CtlError>
      break;
 800789e:	bf00      	nop
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078b8:	3b01      	subs	r3, #1
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d81e      	bhi.n	80078fc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	88db      	ldrh	r3, [r3, #6]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d004      	beq.n	80078d0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f892 	bl	80079f2 <USBD_CtlError>
      break;
 80078ce:	e01a      	b.n	8007906 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f043 0202 	orr.w	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	330c      	adds	r3, #12
 80078f0:	2202      	movs	r2, #2
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f8e7 	bl	8007ac8 <USBD_CtlSendData>
    break;
 80078fa:	e004      	b.n	8007906 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f877 	bl	80079f2 <USBD_CtlError>
    break;
 8007904:	bf00      	nop
  }
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d106      	bne.n	800792e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f92b 	bl	8007b84 <USBD_CtlSendStatus>
  }

}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b082      	sub	sp, #8
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007946:	3b01      	subs	r3, #1
 8007948:	2b02      	cmp	r3, #2
 800794a:	d80b      	bhi.n	8007964 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	885b      	ldrh	r3, [r3, #2]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d10c      	bne.n	800796e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f911 	bl	8007b84 <USBD_CtlSendStatus>
    }
    break;
 8007962:	e004      	b.n	800796e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f843 	bl	80079f2 <USBD_CtlError>
    break;
 800796c:	e000      	b.n	8007970 <USBD_ClrFeature+0x3a>
    break;
 800796e:	bf00      	nop
  }
}
 8007970:	bf00      	nop
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	785a      	ldrb	r2, [r3, #1]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	3302      	adds	r3, #2
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b29a      	uxth	r2, r3
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	3303      	adds	r3, #3
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	3304      	adds	r3, #4
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	3305      	adds	r3, #5
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	4413      	add	r3, r2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	3306      	adds	r3, #6
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	3307      	adds	r3, #7
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4413      	add	r3, r2
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	80da      	strh	r2, [r3, #6]

}
 80079e6:	bf00      	nop
 80079e8:	370c      	adds	r7, #12
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80079fc:	2180      	movs	r1, #128	; 0x80
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f00e ffc0 	bl	8016984 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007a04:	2100      	movs	r1, #0
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f00e ffbc 	bl	8016984 <USBD_LL_StallEP>
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d032      	beq.n	8007a90 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f834 	bl	8007a98 <USBD_GetLen>
 8007a30:	4603      	mov	r3, r0
 8007a32:	3301      	adds	r3, #1
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	75fa      	strb	r2, [r7, #23]
 8007a44:	461a      	mov	r2, r3
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	7812      	ldrb	r2, [r2, #0]
 8007a4e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	75fa      	strb	r2, [r7, #23]
 8007a56:	461a      	mov	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007a60:	e012      	b.n	8007a88 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	60fa      	str	r2, [r7, #12]
 8007a68:	7dfa      	ldrb	r2, [r7, #23]
 8007a6a:	1c51      	adds	r1, r2, #1
 8007a6c:	75f9      	strb	r1, [r7, #23]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	440a      	add	r2, r1
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	75fa      	strb	r2, [r7, #23]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4413      	add	r3, r2
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e8      	bne.n	8007a62 <USBD_GetString+0x4e>
    }
  }
}
 8007a90:	bf00      	nop
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007aa4:	e005      	b.n	8007ab2 <USBD_GetLen+0x1a>
    {
        len++;
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f5      	bne.n	8007aa6 <USBD_GetLen+0xe>
    }

    return len;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	2100      	movs	r1, #0
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f00e ffd0 	bl	8016a96 <USBD_LL_Transmit>

  return USBD_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	2100      	movs	r1, #0
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f00e ffbe 	bl	8016a96 <USBD_LL_Transmit>

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2203      	movs	r2, #3
 8007b36:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007b3a:	88fa      	ldrh	r2, [r7, #6]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007b4a:	88fb      	ldrh	r3, [r7, #6]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	2100      	movs	r1, #0
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f00e ffc3 	bl	8016adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f00e ffb1 	bl	8016adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b94:	2300      	movs	r3, #0
 8007b96:	2200      	movs	r2, #0
 8007b98:	2100      	movs	r1, #0
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f00e ff7b 	bl	8016a96 <USBD_LL_Transmit>

  return USBD_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f00e ff8b 	bl	8016adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	ba5b      	rev16	r3, r3
 8007bde:	b29b      	uxth	r3, r3
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	061a      	lsls	r2, r3, #24
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	0a1b      	lsrs	r3, r3, #8
 8007c06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	4313      	orrs	r3, r2
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007c28:	f000 f8a6 	bl	8007d78 <mem_init>
  memp_init();
 8007c2c:	f000 fb3a 	bl	80082a4 <memp_init>
  pbuf_init();
  netif_init();
 8007c30:	f000 fbf2 	bl	8008418 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007c34:	f006 feac 	bl	800e990 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007c38:	f001 fb70 	bl	800931c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8007c3c:	f006 fd8a 	bl	800e754 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007c50:	4b40      	ldr	r3, [pc, #256]	; (8007d54 <plug_holes+0x10c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d206      	bcs.n	8007c68 <plug_holes+0x20>
 8007c5a:	4b3f      	ldr	r3, [pc, #252]	; (8007d58 <plug_holes+0x110>)
 8007c5c:	f240 125d 	movw	r2, #349	; 0x15d
 8007c60:	493e      	ldr	r1, [pc, #248]	; (8007d5c <plug_holes+0x114>)
 8007c62:	483f      	ldr	r0, [pc, #252]	; (8007d60 <plug_holes+0x118>)
 8007c64:	f00f f9d2 	bl	801700c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007c68:	4b3e      	ldr	r3, [pc, #248]	; (8007d64 <plug_holes+0x11c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d306      	bcc.n	8007c80 <plug_holes+0x38>
 8007c72:	4b39      	ldr	r3, [pc, #228]	; (8007d58 <plug_holes+0x110>)
 8007c74:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007c78:	493b      	ldr	r1, [pc, #236]	; (8007d68 <plug_holes+0x120>)
 8007c7a:	4839      	ldr	r0, [pc, #228]	; (8007d60 <plug_holes+0x118>)
 8007c7c:	f00f f9c6 	bl	801700c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	791b      	ldrb	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d006      	beq.n	8007c96 <plug_holes+0x4e>
 8007c88:	4b33      	ldr	r3, [pc, #204]	; (8007d58 <plug_holes+0x110>)
 8007c8a:	f240 125f 	movw	r2, #351	; 0x15f
 8007c8e:	4937      	ldr	r1, [pc, #220]	; (8007d6c <plug_holes+0x124>)
 8007c90:	4833      	ldr	r0, [pc, #204]	; (8007d60 <plug_holes+0x118>)
 8007c92:	f00f f9bb 	bl	801700c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c9e:	d906      	bls.n	8007cae <plug_holes+0x66>
 8007ca0:	4b2d      	ldr	r3, [pc, #180]	; (8007d58 <plug_holes+0x110>)
 8007ca2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007ca6:	4932      	ldr	r1, [pc, #200]	; (8007d70 <plug_holes+0x128>)
 8007ca8:	482d      	ldr	r0, [pc, #180]	; (8007d60 <plug_holes+0x118>)
 8007caa:	f00f f9af 	bl	801700c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8007cae:	4b29      	ldr	r3, [pc, #164]	; (8007d54 <plug_holes+0x10c>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	8812      	ldrh	r2, [r2, #0]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d01f      	beq.n	8007d02 <plug_holes+0xba>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	791b      	ldrb	r3, [r3, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d11b      	bne.n	8007d02 <plug_holes+0xba>
 8007cca:	4b26      	ldr	r3, [pc, #152]	; (8007d64 <plug_holes+0x11c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d016      	beq.n	8007d02 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007cd4:	4b27      	ldr	r3, [pc, #156]	; (8007d74 <plug_holes+0x12c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d102      	bne.n	8007ce4 <plug_holes+0x9c>
      lfree = mem;
 8007cde:	4a25      	ldr	r2, [pc, #148]	; (8007d74 <plug_holes+0x12c>)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	881a      	ldrh	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a19      	ldr	r2, [pc, #100]	; (8007d54 <plug_holes+0x10c>)
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	1a99      	subs	r1, r3, r2
 8007cf4:	4b17      	ldr	r3, [pc, #92]	; (8007d54 <plug_holes+0x10c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	8812      	ldrh	r2, [r2, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	b28a      	uxth	r2, r1
 8007d00:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8007d02:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <plug_holes+0x10c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	8852      	ldrh	r2, [r2, #2]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d01a      	beq.n	8007d4c <plug_holes+0x104>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	791b      	ldrb	r3, [r3, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d116      	bne.n	8007d4c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007d1e:	4b15      	ldr	r3, [pc, #84]	; (8007d74 <plug_holes+0x12c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d102      	bne.n	8007d2e <plug_holes+0xe6>
      lfree = pmem;
 8007d28:	4a12      	ldr	r2, [pc, #72]	; (8007d74 <plug_holes+0x12c>)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	881a      	ldrh	r2, [r3, #0]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	4a06      	ldr	r2, [pc, #24]	; (8007d54 <plug_holes+0x10c>)
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	1a99      	subs	r1, r3, r2
 8007d3e:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <plug_holes+0x10c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	8812      	ldrh	r2, [r2, #0]
 8007d46:	4413      	add	r3, r2
 8007d48:	b28a      	uxth	r2, r1
 8007d4a:	805a      	strh	r2, [r3, #2]
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000214 	.word	0x20000214
 8007d58:	08018ebc 	.word	0x08018ebc
 8007d5c:	08018eec 	.word	0x08018eec
 8007d60:	08018f04 	.word	0x08018f04
 8007d64:	20000218 	.word	0x20000218
 8007d68:	08018f2c 	.word	0x08018f2c
 8007d6c:	08018f48 	.word	0x08018f48
 8007d70:	08018f64 	.word	0x08018f64
 8007d74:	2000021c 	.word	0x2000021c

08007d78 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007d7e:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <mem_init+0x6c>)
 8007d80:	3303      	adds	r3, #3
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	461a      	mov	r2, r3
 8007d88:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <mem_init+0x70>)
 8007d8a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007d8c:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <mem_init+0x70>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007d98:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007da6:	4b10      	ldr	r3, [pc, #64]	; (8007de8 <mem_init+0x70>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8007dae:	4a0f      	ldr	r2, [pc, #60]	; (8007dec <mem_init+0x74>)
 8007db0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007db2:	4b0e      	ldr	r3, [pc, #56]	; (8007dec <mem_init+0x74>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2201      	movs	r2, #1
 8007db8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007dba:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <mem_init+0x74>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007dc2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007dc4:	4b09      	ldr	r3, [pc, #36]	; (8007dec <mem_init+0x74>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007dcc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007dce:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <mem_init+0x70>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a07      	ldr	r2, [pc, #28]	; (8007df0 <mem_init+0x78>)
 8007dd4:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000414 	.word	0x20000414
 8007de8:	20000214 	.word	0x20000214
 8007dec:	20000218 	.word	0x20000218
 8007df0:	2000021c 	.word	0x2000021c

08007df4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d043      	beq.n	8007e8a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <mem_free+0x26>
 8007e0c:	4b22      	ldr	r3, [pc, #136]	; (8007e98 <mem_free+0xa4>)
 8007e0e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8007e12:	4922      	ldr	r1, [pc, #136]	; (8007e9c <mem_free+0xa8>)
 8007e14:	4822      	ldr	r0, [pc, #136]	; (8007ea0 <mem_free+0xac>)
 8007e16:	f00f f8f9 	bl	801700c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007e1a:	4b22      	ldr	r3, [pc, #136]	; (8007ea4 <mem_free+0xb0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d304      	bcc.n	8007e2e <mem_free+0x3a>
 8007e24:	4b20      	ldr	r3, [pc, #128]	; (8007ea8 <mem_free+0xb4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d306      	bcc.n	8007e3c <mem_free+0x48>
 8007e2e:	4b1a      	ldr	r3, [pc, #104]	; (8007e98 <mem_free+0xa4>)
 8007e30:	f240 12af 	movw	r2, #431	; 0x1af
 8007e34:	491d      	ldr	r1, [pc, #116]	; (8007eac <mem_free+0xb8>)
 8007e36:	481a      	ldr	r0, [pc, #104]	; (8007ea0 <mem_free+0xac>)
 8007e38:	f00f f8e8 	bl	801700c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <mem_free+0xb0>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d323      	bcc.n	8007e8e <mem_free+0x9a>
 8007e46:	4b18      	ldr	r3, [pc, #96]	; (8007ea8 <mem_free+0xb4>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d21e      	bcs.n	8007e8e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3b08      	subs	r3, #8
 8007e54:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	791b      	ldrb	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <mem_free+0x78>
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <mem_free+0xa4>)
 8007e60:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007e64:	4912      	ldr	r1, [pc, #72]	; (8007eb0 <mem_free+0xbc>)
 8007e66:	480e      	ldr	r0, [pc, #56]	; (8007ea0 <mem_free+0xac>)
 8007e68:	f00f f8d0 	bl	801700c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <mem_free+0xc0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d202      	bcs.n	8007e82 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007e7c:	4a0d      	ldr	r2, [pc, #52]	; (8007eb4 <mem_free+0xc0>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff fee0 	bl	8007c48 <plug_holes>
 8007e88:	e002      	b.n	8007e90 <mem_free+0x9c>
    return;
 8007e8a:	bf00      	nop
 8007e8c:	e000      	b.n	8007e90 <mem_free+0x9c>
    return;
 8007e8e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	08018ebc 	.word	0x08018ebc
 8007e9c:	08018f90 	.word	0x08018f90
 8007ea0:	08018f04 	.word	0x08018f04
 8007ea4:	20000214 	.word	0x20000214
 8007ea8:	20000218 	.word	0x20000218
 8007eac:	08018fb4 	.word	0x08018fb4
 8007eb0:	08018fcc 	.word	0x08018fcc
 8007eb4:	2000021c 	.word	0x2000021c

08007eb8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007ec4:	887b      	ldrh	r3, [r7, #2]
 8007ec6:	3303      	adds	r3, #3
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8007ed0:	887b      	ldrh	r3, [r7, #2]
 8007ed2:	2b0b      	cmp	r3, #11
 8007ed4:	d801      	bhi.n	8007eda <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ee0:	d901      	bls.n	8007ee6 <mem_trim+0x2e>
    return NULL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e0b1      	b.n	800804a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007ee6:	4b5b      	ldr	r3, [pc, #364]	; (8008054 <mem_trim+0x19c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d304      	bcc.n	8007efa <mem_trim+0x42>
 8007ef0:	4b59      	ldr	r3, [pc, #356]	; (8008058 <mem_trim+0x1a0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d306      	bcc.n	8007f08 <mem_trim+0x50>
 8007efa:	4b58      	ldr	r3, [pc, #352]	; (800805c <mem_trim+0x1a4>)
 8007efc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f00:	4957      	ldr	r1, [pc, #348]	; (8008060 <mem_trim+0x1a8>)
 8007f02:	4858      	ldr	r0, [pc, #352]	; (8008064 <mem_trim+0x1ac>)
 8007f04:	f00f f882 	bl	801700c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007f08:	4b52      	ldr	r3, [pc, #328]	; (8008054 <mem_trim+0x19c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d304      	bcc.n	8007f1c <mem_trim+0x64>
 8007f12:	4b51      	ldr	r3, [pc, #324]	; (8008058 <mem_trim+0x1a0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d301      	bcc.n	8007f20 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	e094      	b.n	800804a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3b08      	subs	r3, #8
 8007f24:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	4a4a      	ldr	r2, [pc, #296]	; (8008054 <mem_trim+0x19c>)
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	881a      	ldrh	r2, [r3, #0]
 8007f34:	8a7b      	ldrh	r3, [r7, #18]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b08      	subs	r3, #8
 8007f3c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007f3e:	887a      	ldrh	r2, [r7, #2]
 8007f40:	8a3b      	ldrh	r3, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d906      	bls.n	8007f54 <mem_trim+0x9c>
 8007f46:	4b45      	ldr	r3, [pc, #276]	; (800805c <mem_trim+0x1a4>)
 8007f48:	f240 2206 	movw	r2, #518	; 0x206
 8007f4c:	4946      	ldr	r1, [pc, #280]	; (8008068 <mem_trim+0x1b0>)
 8007f4e:	4845      	ldr	r0, [pc, #276]	; (8008064 <mem_trim+0x1ac>)
 8007f50:	f00f f85c 	bl	801700c <iprintf>
  if (newsize > size) {
 8007f54:	887a      	ldrh	r2, [r7, #2]
 8007f56:	8a3b      	ldrh	r3, [r7, #16]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d901      	bls.n	8007f60 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	e074      	b.n	800804a <mem_trim+0x192>
  }
  if (newsize == size) {
 8007f60:	887a      	ldrh	r2, [r7, #2]
 8007f62:	8a3b      	ldrh	r3, [r7, #16]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d101      	bne.n	8007f6c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	e06e      	b.n	800804a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007f6c:	4b39      	ldr	r3, [pc, #228]	; (8008054 <mem_trim+0x19c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	8812      	ldrh	r2, [r2, #0]
 8007f74:	4413      	add	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	791b      	ldrb	r3, [r3, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d131      	bne.n	8007fe4 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007f86:	8a7a      	ldrh	r2, [r7, #18]
 8007f88:	887b      	ldrh	r3, [r7, #2]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3308      	adds	r3, #8
 8007f90:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8007f92:	4b36      	ldr	r3, [pc, #216]	; (800806c <mem_trim+0x1b4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d105      	bne.n	8007fa8 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007f9c:	4b2d      	ldr	r3, [pc, #180]	; (8008054 <mem_trim+0x19c>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	897b      	ldrh	r3, [r7, #10]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	4a31      	ldr	r2, [pc, #196]	; (800806c <mem_trim+0x1b4>)
 8007fa6:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007fa8:	4b2a      	ldr	r3, [pc, #168]	; (8008054 <mem_trim+0x19c>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	897b      	ldrh	r3, [r7, #10]
 8007fae:	4413      	add	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	893a      	ldrh	r2, [r7, #8]
 8007fbc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	8a7a      	ldrh	r2, [r7, #18]
 8007fc2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	897a      	ldrh	r2, [r7, #10]
 8007fc8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fd2:	d039      	beq.n	8008048 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007fd4:	4b1f      	ldr	r3, [pc, #124]	; (8008054 <mem_trim+0x19c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	8812      	ldrh	r2, [r2, #0]
 8007fdc:	4413      	add	r3, r2
 8007fde:	897a      	ldrh	r2, [r7, #10]
 8007fe0:	805a      	strh	r2, [r3, #2]
 8007fe2:	e031      	b.n	8008048 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007fe4:	887b      	ldrh	r3, [r7, #2]
 8007fe6:	f103 0214 	add.w	r2, r3, #20
 8007fea:	8a3b      	ldrh	r3, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d82b      	bhi.n	8008048 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007ff0:	8a7a      	ldrh	r2, [r7, #18]
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007ffc:	4b15      	ldr	r3, [pc, #84]	; (8008054 <mem_trim+0x19c>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	897b      	ldrh	r3, [r7, #10]
 8008002:	4413      	add	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <mem_trim+0x1b4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	d202      	bcs.n	8008016 <mem_trim+0x15e>
      lfree = mem2;
 8008010:	4a16      	ldr	r2, [pc, #88]	; (800806c <mem_trim+0x1b4>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	881a      	ldrh	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8a7a      	ldrh	r2, [r7, #18]
 8008028:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	897a      	ldrh	r2, [r7, #10]
 800802e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008038:	d006      	beq.n	8008048 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800803a:	4b06      	ldr	r3, [pc, #24]	; (8008054 <mem_trim+0x19c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	8812      	ldrh	r2, [r2, #0]
 8008042:	4413      	add	r3, r2
 8008044:	897a      	ldrh	r2, [r7, #10]
 8008046:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008048:	687b      	ldr	r3, [r7, #4]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000214 	.word	0x20000214
 8008058:	20000218 	.word	0x20000218
 800805c:	08018ebc 	.word	0x08018ebc
 8008060:	08018fe0 	.word	0x08018fe0
 8008064:	08018f04 	.word	0x08018f04
 8008068:	08018ff8 	.word	0x08018ff8
 800806c:	2000021c 	.word	0x2000021c

08008070 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <mem_malloc+0x14>
    return NULL;
 8008080:	2300      	movs	r3, #0
 8008082:	e0c8      	b.n	8008216 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	3303      	adds	r3, #3
 8008088:	b29b      	uxth	r3, r3
 800808a:	f023 0303 	bic.w	r3, r3, #3
 800808e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	2b0b      	cmp	r3, #11
 8008094:	d801      	bhi.n	800809a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008096:	230c      	movs	r3, #12
 8008098:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80080a0:	d901      	bls.n	80080a6 <mem_malloc+0x36>
    return NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e0b7      	b.n	8008216 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80080a6:	4b5e      	ldr	r3, [pc, #376]	; (8008220 <mem_malloc+0x1b0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	4b5d      	ldr	r3, [pc, #372]	; (8008224 <mem_malloc+0x1b4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	83fb      	strh	r3, [r7, #30]
 80080b4:	e0a7      	b.n	8008206 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80080b6:	4b5b      	ldr	r3, [pc, #364]	; (8008224 <mem_malloc+0x1b4>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	8bfb      	ldrh	r3, [r7, #30]
 80080bc:	4413      	add	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	791b      	ldrb	r3, [r3, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 8098 	bne.w	80081fa <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	8bfb      	ldrh	r3, [r7, #30]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f1a3 0208 	sub.w	r2, r3, #8
 80080d8:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80080da:	429a      	cmp	r2, r3
 80080dc:	f0c0 808d 	bcc.w	80081fa <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	8bfb      	ldrh	r3, [r7, #30]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f1a3 0208 	sub.w	r2, r3, #8
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	3314      	adds	r3, #20
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d327      	bcc.n	8008146 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80080f6:	8bfa      	ldrh	r2, [r7, #30]
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	4413      	add	r3, r2
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3308      	adds	r3, #8
 8008100:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8008102:	4b48      	ldr	r3, [pc, #288]	; (8008224 <mem_malloc+0x1b4>)
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	8a7b      	ldrh	r3, [r7, #18]
 8008108:	4413      	add	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	881a      	ldrh	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8bfa      	ldrh	r2, [r7, #30]
 800811e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	8a7a      	ldrh	r2, [r7, #18]
 8008124:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008134:	d00a      	beq.n	800814c <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <mem_malloc+0x1b4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	8812      	ldrh	r2, [r2, #0]
 800813e:	4413      	add	r3, r2
 8008140:	8a7a      	ldrh	r2, [r7, #18]
 8008142:	805a      	strh	r2, [r3, #2]
 8008144:	e002      	b.n	800814c <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2201      	movs	r2, #1
 800814a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800814c:	4b34      	ldr	r3, [pc, #208]	; (8008220 <mem_malloc+0x1b0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	429a      	cmp	r2, r3
 8008154:	d127      	bne.n	80081a6 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8008156:	4b32      	ldr	r3, [pc, #200]	; (8008220 <mem_malloc+0x1b0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800815c:	e005      	b.n	800816a <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800815e:	4b31      	ldr	r3, [pc, #196]	; (8008224 <mem_malloc+0x1b4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	8812      	ldrh	r2, [r2, #0]
 8008166:	4413      	add	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <mem_malloc+0x10c>
 8008172:	4b2d      	ldr	r3, [pc, #180]	; (8008228 <mem_malloc+0x1b8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	429a      	cmp	r2, r3
 800817a:	d1f0      	bne.n	800815e <mem_malloc+0xee>
          }
          lfree = cur;
 800817c:	4a28      	ldr	r2, [pc, #160]	; (8008220 <mem_malloc+0x1b0>)
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008182:	4b27      	ldr	r3, [pc, #156]	; (8008220 <mem_malloc+0x1b0>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b28      	ldr	r3, [pc, #160]	; (8008228 <mem_malloc+0x1b8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d00b      	beq.n	80081a6 <mem_malloc+0x136>
 800818e:	4b24      	ldr	r3, [pc, #144]	; (8008220 <mem_malloc+0x1b0>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	791b      	ldrb	r3, [r3, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <mem_malloc+0x136>
 8008198:	4b24      	ldr	r3, [pc, #144]	; (800822c <mem_malloc+0x1bc>)
 800819a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800819e:	4924      	ldr	r1, [pc, #144]	; (8008230 <mem_malloc+0x1c0>)
 80081a0:	4824      	ldr	r0, [pc, #144]	; (8008234 <mem_malloc+0x1c4>)
 80081a2:	f00e ff33 	bl	801700c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80081a6:	88fa      	ldrh	r2, [r7, #6]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	4413      	add	r3, r2
 80081ac:	3308      	adds	r3, #8
 80081ae:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <mem_malloc+0x1b8>)
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d906      	bls.n	80081c4 <mem_malloc+0x154>
 80081b6:	4b1d      	ldr	r3, [pc, #116]	; (800822c <mem_malloc+0x1bc>)
 80081b8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80081bc:	491e      	ldr	r1, [pc, #120]	; (8008238 <mem_malloc+0x1c8>)
 80081be:	481d      	ldr	r0, [pc, #116]	; (8008234 <mem_malloc+0x1c4>)
 80081c0:	f00e ff24 	bl	801700c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d006      	beq.n	80081dc <mem_malloc+0x16c>
 80081ce:	4b17      	ldr	r3, [pc, #92]	; (800822c <mem_malloc+0x1bc>)
 80081d0:	f240 22d6 	movw	r2, #726	; 0x2d6
 80081d4:	4919      	ldr	r1, [pc, #100]	; (800823c <mem_malloc+0x1cc>)
 80081d6:	4817      	ldr	r0, [pc, #92]	; (8008234 <mem_malloc+0x1c4>)
 80081d8:	f00e ff18 	bl	801700c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f003 0303 	and.w	r3, r3, #3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d006      	beq.n	80081f4 <mem_malloc+0x184>
 80081e6:	4b11      	ldr	r3, [pc, #68]	; (800822c <mem_malloc+0x1bc>)
 80081e8:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80081ec:	4914      	ldr	r1, [pc, #80]	; (8008240 <mem_malloc+0x1d0>)
 80081ee:	4811      	ldr	r0, [pc, #68]	; (8008234 <mem_malloc+0x1c4>)
 80081f0:	f00e ff0c 	bl	801700c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	3308      	adds	r3, #8
 80081f8:	e00d      	b.n	8008216 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80081fa:	4b0a      	ldr	r3, [pc, #40]	; (8008224 <mem_malloc+0x1b4>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	8bfb      	ldrh	r3, [r7, #30]
 8008200:	4413      	add	r3, r2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008206:	8bfa      	ldrh	r2, [r7, #30]
 8008208:	88fb      	ldrh	r3, [r7, #6]
 800820a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800820e:	429a      	cmp	r2, r3
 8008210:	f4ff af51 	bcc.w	80080b6 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	2000021c 	.word	0x2000021c
 8008224:	20000214 	.word	0x20000214
 8008228:	20000218 	.word	0x20000218
 800822c:	08018ebc 	.word	0x08018ebc
 8008230:	08019018 	.word	0x08019018
 8008234:	08018f04 	.word	0x08018f04
 8008238:	08019034 	.word	0x08019034
 800823c:	08019064 	.word	0x08019064
 8008240:	08019094 	.word	0x08019094

08008244 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	3303      	adds	r3, #3
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e011      	b.n	800828a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	4413      	add	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	461a      	mov	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4293      	cmp	r3, r2
 8008294:	dbe7      	blt.n	8008266 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	80fb      	strh	r3, [r7, #6]
 80082ae:	e009      	b.n	80082c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <memp_init+0x30>)
 80082b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7ff ffc3 	bl	8008244 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	3301      	adds	r3, #1
 80082c2:	80fb      	strh	r3, [r7, #6]
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d9f2      	bls.n	80082b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	0801b2cc 	.word	0x0801b2cc

080082d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d012      	beq.n	8008314 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d006      	beq.n	8008310 <do_memp_malloc_pool+0x38>
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <do_memp_malloc_pool+0x48>)
 8008304:	f240 1249 	movw	r2, #329	; 0x149
 8008308:	4906      	ldr	r1, [pc, #24]	; (8008324 <do_memp_malloc_pool+0x4c>)
 800830a:	4807      	ldr	r0, [pc, #28]	; (8008328 <do_memp_malloc_pool+0x50>)
 800830c:	f00e fe7e 	bl	801700c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	e000      	b.n	8008316 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	080190b8 	.word	0x080190b8
 8008324:	080190e8 	.word	0x080190e8
 8008328:	0801910c 	.word	0x0801910c

0800832c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d908      	bls.n	800834e <memp_malloc+0x22>
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <memp_malloc+0x3c>)
 800833e:	f240 1287 	movw	r2, #391	; 0x187
 8008342:	490a      	ldr	r1, [pc, #40]	; (800836c <memp_malloc+0x40>)
 8008344:	480a      	ldr	r0, [pc, #40]	; (8008370 <memp_malloc+0x44>)
 8008346:	f00e fe61 	bl	801700c <iprintf>
 800834a:	2300      	movs	r3, #0
 800834c:	e008      	b.n	8008360 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	4a08      	ldr	r2, [pc, #32]	; (8008374 <memp_malloc+0x48>)
 8008352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff ffbe 	bl	80082d8 <do_memp_malloc_pool>
 800835c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800835e:	68fb      	ldr	r3, [r7, #12]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	080190b8 	.word	0x080190b8
 800836c:	08019148 	.word	0x08019148
 8008370:	0801910c 	.word	0x0801910c
 8008374:	0801b2cc 	.word	0x0801b2cc

08008378 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d006      	beq.n	800839a <do_memp_free_pool+0x22>
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <do_memp_free_pool+0x40>)
 800838e:	f240 129d 	movw	r2, #413	; 0x19d
 8008392:	490a      	ldr	r1, [pc, #40]	; (80083bc <do_memp_free_pool+0x44>)
 8008394:	480a      	ldr	r0, [pc, #40]	; (80083c0 <do_memp_free_pool+0x48>)
 8008396:	f00e fe39 	bl	801700c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	080190b8 	.word	0x080190b8
 80083bc:	08019168 	.word	0x08019168
 80083c0:	0801910c 	.word	0x0801910c

080083c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d907      	bls.n	80083e6 <memp_free+0x22>
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <memp_free+0x44>)
 80083d8:	f240 12db 	movw	r2, #475	; 0x1db
 80083dc:	490b      	ldr	r1, [pc, #44]	; (800840c <memp_free+0x48>)
 80083de:	480c      	ldr	r0, [pc, #48]	; (8008410 <memp_free+0x4c>)
 80083e0:	f00e fe14 	bl	801700c <iprintf>
 80083e4:	e00c      	b.n	8008400 <memp_free+0x3c>

  if (mem == NULL) {
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	4a09      	ldr	r2, [pc, #36]	; (8008414 <memp_free+0x50>)
 80083f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff ffbe 	bl	8008378 <do_memp_free_pool>
 80083fc:	e000      	b.n	8008400 <memp_free+0x3c>
    return;
 80083fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	080190b8 	.word	0x080190b8
 800840c:	08019188 	.word	0x08019188
 8008410:	0801910c 	.word	0x0801910c
 8008414:	0801b2cc 	.word	0x0801b2cc

08008418 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d105      	bne.n	8008448 <netif_add+0x20>
 800843c:	4b23      	ldr	r3, [pc, #140]	; (80084cc <netif_add+0xa4>)
 800843e:	22fb      	movs	r2, #251	; 0xfb
 8008440:	4923      	ldr	r1, [pc, #140]	; (80084d0 <netif_add+0xa8>)
 8008442:	4824      	ldr	r0, [pc, #144]	; (80084d4 <netif_add+0xac>)
 8008444:	f00e fde2 	bl	801700c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3320      	adds	r3, #32
 8008466:	2204      	movs	r2, #4
 8008468:	2100      	movs	r1, #0
 800846a:	4618      	mov	r0, r3
 800846c:	f00e fd1e 	bl	8016eac <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2203      	movs	r2, #3
 8008474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800847e:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <netif_add+0xb0>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	b2d1      	uxtb	r1, r2
 8008486:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <netif_add+0xb0>)
 8008488:	7011      	strb	r1, [r2, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a3a      	ldr	r2, [r7, #32]
 8008494:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 f81f 	bl	80084e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <netif_add+0x8a>
    return NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	e007      	b.n	80084c2 <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <netif_add+0xb4>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80084ba:	4a08      	ldr	r2, [pc, #32]	; (80084dc <netif_add+0xb4>)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	080191a4 	.word	0x080191a4
 80084d0:	080191d8 	.word	0x080191d8
 80084d4:	080191f0 	.word	0x080191f0
 80084d8:	20000244 	.word	0x20000244
 80084dc:	2000393c 	.word	0x2000393c

080084e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <netif_set_addr+0x1c>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10c      	bne.n	8008516 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f000 f81a 	bl	8008538 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f862 	bl	80085d0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f84a 	bl	80085a8 <netif_set_gw>
 8008514:	e00b      	b.n	800852e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f000 f859 	bl	80085d0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f841 	bl	80085a8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f805 	bl	8008538 <netif_set_ipaddr>
  }
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <netif_set_ipaddr+0x18>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e002      	b.n	8008556 <netif_set_ipaddr+0x1e>
 8008550:	4b14      	ldr	r3, [pc, #80]	; (80085a4 <netif_set_ipaddr+0x6c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d01c      	beq.n	800859c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	3304      	adds	r3, #4
 8008566:	f107 020c 	add.w	r2, r7, #12
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f002 fabb 	bl	800aae8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	f107 020c 	add.w	r2, r7, #12
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f006 fcb1 	bl	800eee4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <netif_set_ipaddr+0x56>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	e000      	b.n	8008590 <netif_set_ipaddr+0x58>
 800858e:	2300      	movs	r3, #0
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008594:	2101      	movs	r1, #1
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f861 	bl	800865e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800859c:	bf00      	nop
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	0801b340 	.word	0x0801b340

080085a8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <netif_set_gw+0x16>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	e000      	b.n	80085c0 <netif_set_gw+0x18>
 80085be:	2300      	movs	r3, #0
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <netif_set_netmask+0x16>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	e000      	b.n	80085e8 <netif_set_netmask+0x18>
 80085e6:	2300      	movs	r3, #0
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008600:	4a04      	ldr	r2, [pc, #16]	; (8008614 <netif_set_default+0x1c>)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20003940 	.word	0x20003940

08008618 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d113      	bne.n	8008656 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008634:	f043 0301 	orr.w	r3, r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800864e:	2103      	movs	r1, #3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f804 	bl	800865e <netif_issue_reports>
    }
  }
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d011      	beq.n	8008698 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00c      	beq.n	8008698 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b00      	cmp	r3, #0
 800868a:	d005      	beq.n	8008698 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f008 fcbc 	bl	8011010 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d012      	beq.n	80086dc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f008 f85c 	bl	8010794 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80086ea:	4b0e      	ldr	r3, [pc, #56]	; (8008724 <pbuf_free_ooseq+0x40>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80086f0:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <pbuf_free_ooseq+0x44>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	607b      	str	r3, [r7, #4]
 80086f6:	e00f      	b.n	8008718 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fe62 	bl	800a3ce <tcp_segs_free>
      pcb->ooseq = NULL;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8008710:	e005      	b.n	800871e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	607b      	str	r3, [r7, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1ec      	bne.n	80086f8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20003944 	.word	0x20003944
 8008728:	2000394c 	.word	0x2000394c

0800872c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008730:	4b03      	ldr	r3, [pc, #12]	; (8008740 <pbuf_pool_is_empty+0x14>)
 8008732:	2201      	movs	r2, #1
 8008734:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008736:	bf00      	nop
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	20003944 	.word	0x20003944

08008744 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	71fb      	strb	r3, [r7, #7]
 800874e:	460b      	mov	r3, r1
 8008750:	80bb      	strh	r3, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b04      	cmp	r3, #4
 800875a:	d81c      	bhi.n	8008796 <pbuf_alloc+0x52>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <pbuf_alloc+0x20>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008779 	.word	0x08008779
 8008768:	0800877f 	.word	0x0800877f
 800876c:	08008785 	.word	0x08008785
 8008770:	0800878b 	.word	0x0800878b
 8008774:	08008791 	.word	0x08008791
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008778:	2336      	movs	r3, #54	; 0x36
 800877a:	82fb      	strh	r3, [r7, #22]
    break;
 800877c:	e014      	b.n	80087a8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800877e:	2322      	movs	r3, #34	; 0x22
 8008780:	82fb      	strh	r3, [r7, #22]
    break;
 8008782:	e011      	b.n	80087a8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008784:	230e      	movs	r3, #14
 8008786:	82fb      	strh	r3, [r7, #22]
    break;
 8008788:	e00e      	b.n	80087a8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800878a:	2300      	movs	r3, #0
 800878c:	82fb      	strh	r3, [r7, #22]
    break;
 800878e:	e00b      	b.n	80087a8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	82fb      	strh	r3, [r7, #22]
    break;
 8008794:	e008      	b.n	80087a8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8008796:	4ba5      	ldr	r3, [pc, #660]	; (8008a2c <pbuf_alloc+0x2e8>)
 8008798:	f44f 728b 	mov.w	r2, #278	; 0x116
 800879c:	49a4      	ldr	r1, [pc, #656]	; (8008a30 <pbuf_alloc+0x2ec>)
 800879e:	48a5      	ldr	r0, [pc, #660]	; (8008a34 <pbuf_alloc+0x2f0>)
 80087a0:	f00e fc34 	bl	801700c <iprintf>
    return NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e15d      	b.n	8008a64 <pbuf_alloc+0x320>
  }

  switch (type) {
 80087a8:	79bb      	ldrb	r3, [r7, #6]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	f200 8134 	bhi.w	8008a18 <pbuf_alloc+0x2d4>
 80087b0:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <pbuf_alloc+0x74>)
 80087b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b6:	bf00      	nop
 80087b8:	08008959 	.word	0x08008959
 80087bc:	080089e5 	.word	0x080089e5
 80087c0:	080089e5 	.word	0x080089e5
 80087c4:	080087c9 	.word	0x080087c9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80087c8:	2008      	movs	r0, #8
 80087ca:	f7ff fdaf 	bl	800832c <memp_malloc>
 80087ce:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80087d6:	f7ff ffa9 	bl	800872c <pbuf_pool_is_empty>
      return NULL;
 80087da:	2300      	movs	r3, #0
 80087dc:	e142      	b.n	8008a64 <pbuf_alloc+0x320>
    }
    p->type = type;
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	79ba      	ldrb	r2, [r7, #6]
 80087e2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80087ea:	8afb      	ldrh	r3, [r7, #22]
 80087ec:	3310      	adds	r3, #16
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	4413      	add	r3, r2
 80087f2:	3303      	adds	r3, #3
 80087f4:	f023 0303 	bic.w	r3, r3, #3
 80087f8:	461a      	mov	r2, r3
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d006      	beq.n	8008818 <pbuf_alloc+0xd4>
 800880a:	4b88      	ldr	r3, [pc, #544]	; (8008a2c <pbuf_alloc+0x2e8>)
 800880c:	f240 1229 	movw	r2, #297	; 0x129
 8008810:	4989      	ldr	r1, [pc, #548]	; (8008a38 <pbuf_alloc+0x2f4>)
 8008812:	4888      	ldr	r0, [pc, #544]	; (8008a34 <pbuf_alloc+0x2f0>)
 8008814:	f00e fbfa 	bl	801700c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	88ba      	ldrh	r2, [r7, #4]
 800881c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800881e:	8afb      	ldrh	r3, [r7, #22]
 8008820:	3303      	adds	r3, #3
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800882a:	88bb      	ldrh	r3, [r7, #4]
 800882c:	4293      	cmp	r3, r2
 800882e:	bf28      	it	cs
 8008830:	4613      	movcs	r3, r2
 8008832:	b29a      	uxth	r2, r3
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	8952      	ldrh	r2, [r2, #10]
 8008840:	441a      	add	r2, r3
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008848:	429a      	cmp	r2, r3
 800884a:	d906      	bls.n	800885a <pbuf_alloc+0x116>
 800884c:	4b77      	ldr	r3, [pc, #476]	; (8008a2c <pbuf_alloc+0x2e8>)
 800884e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008852:	497a      	ldr	r1, [pc, #488]	; (8008a3c <pbuf_alloc+0x2f8>)
 8008854:	4877      	ldr	r0, [pc, #476]	; (8008a34 <pbuf_alloc+0x2f0>)
 8008856:	f00e fbd9 	bl	801700c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800885a:	8afb      	ldrh	r3, [r7, #22]
 800885c:	3303      	adds	r3, #3
 800885e:	f023 0303 	bic.w	r3, r3, #3
 8008862:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008866:	d106      	bne.n	8008876 <pbuf_alloc+0x132>
 8008868:	4b70      	ldr	r3, [pc, #448]	; (8008a2c <pbuf_alloc+0x2e8>)
 800886a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800886e:	4974      	ldr	r1, [pc, #464]	; (8008a40 <pbuf_alloc+0x2fc>)
 8008870:	4870      	ldr	r0, [pc, #448]	; (8008a34 <pbuf_alloc+0x2f0>)
 8008872:	f00e fbcb 	bl	801700c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	2201      	movs	r2, #1
 800887a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8008880:	88bb      	ldrh	r3, [r7, #4]
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	8952      	ldrh	r2, [r2, #10]
 8008886:	1a9b      	subs	r3, r3, r2
 8008888:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800888a:	e061      	b.n	8008950 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800888c:	2008      	movs	r0, #8
 800888e:	f7ff fd4d 	bl	800832c <memp_malloc>
 8008892:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800889a:	f7ff ff47 	bl	800872c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800889e:	69f8      	ldr	r0, [r7, #28]
 80088a0:	f000 fac2 	bl	8008e28 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80088a4:	2300      	movs	r3, #0
 80088a6:	e0dd      	b.n	8008a64 <pbuf_alloc+0x320>
      }
      q->type = type;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	79ba      	ldrb	r2, [r7, #6]
 80088ac:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dd06      	ble.n	80088d8 <pbuf_alloc+0x194>
 80088ca:	4b58      	ldr	r3, [pc, #352]	; (8008a2c <pbuf_alloc+0x2e8>)
 80088cc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80088d0:	495c      	ldr	r1, [pc, #368]	; (8008a44 <pbuf_alloc+0x300>)
 80088d2:	4858      	ldr	r0, [pc, #352]	; (8008a34 <pbuf_alloc+0x2f0>)
 80088d4:	f00e fb9a 	bl	801700c <iprintf>
      q->tot_len = (u16_t)rem_len;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80088e8:	bf28      	it	cs
 80088ea:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f103 0210 	add.w	r2, r3, #16
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d006      	beq.n	8008918 <pbuf_alloc+0x1d4>
 800890a:	4b48      	ldr	r3, [pc, #288]	; (8008a2c <pbuf_alloc+0x2e8>)
 800890c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008910:	494d      	ldr	r1, [pc, #308]	; (8008a48 <pbuf_alloc+0x304>)
 8008912:	4848      	ldr	r0, [pc, #288]	; (8008a34 <pbuf_alloc+0x2f0>)
 8008914:	f00e fb7a 	bl	801700c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	69fa      	ldr	r2, [r7, #28]
 800891e:	8952      	ldrh	r2, [r2, #10]
 8008920:	441a      	add	r2, r3
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008928:	429a      	cmp	r2, r3
 800892a:	d906      	bls.n	800893a <pbuf_alloc+0x1f6>
 800892c:	4b3f      	ldr	r3, [pc, #252]	; (8008a2c <pbuf_alloc+0x2e8>)
 800892e:	f240 1255 	movw	r2, #341	; 0x155
 8008932:	4942      	ldr	r1, [pc, #264]	; (8008a3c <pbuf_alloc+0x2f8>)
 8008934:	483f      	ldr	r0, [pc, #252]	; (8008a34 <pbuf_alloc+0x2f0>)
 8008936:	f00e fb69 	bl	801700c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	895b      	ldrh	r3, [r3, #10]
 8008944:	461a      	mov	r2, r3
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	dc9a      	bgt.n	800888c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8008956:	e07e      	b.n	8008a56 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8008958:	8afb      	ldrh	r3, [r7, #22]
 800895a:	3313      	adds	r3, #19
 800895c:	b29b      	uxth	r3, r3
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	b29a      	uxth	r2, r3
 8008964:	88bb      	ldrh	r3, [r7, #4]
 8008966:	3303      	adds	r3, #3
 8008968:	b29b      	uxth	r3, r3
 800896a:	f023 0303 	bic.w	r3, r3, #3
 800896e:	b29b      	uxth	r3, r3
 8008970:	4413      	add	r3, r2
 8008972:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8008974:	897a      	ldrh	r2, [r7, #10]
 8008976:	88bb      	ldrh	r3, [r7, #4]
 8008978:	3303      	adds	r3, #3
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	429a      	cmp	r2, r3
 8008980:	d201      	bcs.n	8008986 <pbuf_alloc+0x242>
        return NULL;
 8008982:	2300      	movs	r3, #0
 8008984:	e06e      	b.n	8008a64 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8008986:	897b      	ldrh	r3, [r7, #10]
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fb71 	bl	8008070 <mem_malloc>
 800898e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <pbuf_alloc+0x256>
      return NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	e064      	b.n	8008a64 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800899a:	8afb      	ldrh	r3, [r7, #22]
 800899c:	3310      	adds	r3, #16
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	3303      	adds	r3, #3
 80089a4:	f023 0303 	bic.w	r3, r3, #3
 80089a8:	461a      	mov	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	88ba      	ldrh	r2, [r7, #4]
 80089b2:	811a      	strh	r2, [r3, #8]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	891a      	ldrh	r2, [r3, #8]
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	79ba      	ldrb	r2, [r7, #6]
 80089c6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d03f      	beq.n	8008a54 <pbuf_alloc+0x310>
 80089d4:	4b15      	ldr	r3, [pc, #84]	; (8008a2c <pbuf_alloc+0x2e8>)
 80089d6:	f240 1277 	movw	r2, #375	; 0x177
 80089da:	491c      	ldr	r1, [pc, #112]	; (8008a4c <pbuf_alloc+0x308>)
 80089dc:	4815      	ldr	r0, [pc, #84]	; (8008a34 <pbuf_alloc+0x2f0>)
 80089de:	f00e fb15 	bl	801700c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80089e2:	e037      	b.n	8008a54 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80089e4:	2007      	movs	r0, #7
 80089e6:	f7ff fca1 	bl	800832c <memp_malloc>
 80089ea:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e036      	b.n	8008a64 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2200      	movs	r2, #0
 80089fa:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	88ba      	ldrh	r2, [r7, #4]
 8008a00:	811a      	strh	r2, [r3, #8]
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	891a      	ldrh	r2, [r3, #8]
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	79ba      	ldrb	r2, [r7, #6]
 8008a14:	731a      	strb	r2, [r3, #12]
    break;
 8008a16:	e01e      	b.n	8008a56 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <pbuf_alloc+0x2e8>)
 8008a1a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008a1e:	490c      	ldr	r1, [pc, #48]	; (8008a50 <pbuf_alloc+0x30c>)
 8008a20:	4804      	ldr	r0, [pc, #16]	; (8008a34 <pbuf_alloc+0x2f0>)
 8008a22:	f00e faf3 	bl	801700c <iprintf>
    return NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e01c      	b.n	8008a64 <pbuf_alloc+0x320>
 8008a2a:	bf00      	nop
 8008a2c:	08019218 	.word	0x08019218
 8008a30:	08019248 	.word	0x08019248
 8008a34:	08019264 	.word	0x08019264
 8008a38:	0801928c 	.word	0x0801928c
 8008a3c:	080192bc 	.word	0x080192bc
 8008a40:	080192f0 	.word	0x080192f0
 8008a44:	08019324 	.word	0x08019324
 8008a48:	08019338 	.word	0x08019338
 8008a4c:	08019368 	.word	0x08019368
 8008a50:	08019394 	.word	0x08019394
    break;
 8008a54:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008a62:	69fb      	ldr	r3, [r7, #28]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3720      	adds	r7, #32
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	4603      	mov	r3, r0
 8008a76:	71fb      	strb	r3, [r7, #7]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	80bb      	strh	r3, [r7, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d81b      	bhi.n	8008abe <pbuf_alloced_custom+0x52>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <pbuf_alloced_custom+0x20>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008aa1 	.word	0x08008aa1
 8008a90:	08008aa7 	.word	0x08008aa7
 8008a94:	08008aad 	.word	0x08008aad
 8008a98:	08008ab3 	.word	0x08008ab3
 8008a9c:	08008ab9 	.word	0x08008ab9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008aa0:	2336      	movs	r3, #54	; 0x36
 8008aa2:	81fb      	strh	r3, [r7, #14]
    break;
 8008aa4:	e014      	b.n	8008ad0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008aa6:	2322      	movs	r3, #34	; 0x22
 8008aa8:	81fb      	strh	r3, [r7, #14]
    break;
 8008aaa:	e011      	b.n	8008ad0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008aac:	230e      	movs	r3, #14
 8008aae:	81fb      	strh	r3, [r7, #14]
    break;
 8008ab0:	e00e      	b.n	8008ad0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	81fb      	strh	r3, [r7, #14]
    break;
 8008ab6:	e00b      	b.n	8008ad0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	81fb      	strh	r3, [r7, #14]
    break;
 8008abc:	e008      	b.n	8008ad0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <pbuf_alloced_custom+0xc8>)
 8008ac0:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008ac4:	491c      	ldr	r1, [pc, #112]	; (8008b38 <pbuf_alloced_custom+0xcc>)
 8008ac6:	481d      	ldr	r0, [pc, #116]	; (8008b3c <pbuf_alloced_custom+0xd0>)
 8008ac8:	f00e faa0 	bl	801700c <iprintf>
    return NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e02d      	b.n	8008b2c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008ad0:	89fb      	ldrh	r3, [r7, #14]
 8008ad2:	3303      	adds	r3, #3
 8008ad4:	f023 0203 	bic.w	r2, r3, #3
 8008ad8:	88bb      	ldrh	r3, [r7, #4]
 8008ada:	441a      	add	r2, r3
 8008adc:	8bbb      	ldrh	r3, [r7, #28]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d901      	bls.n	8008ae6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e022      	b.n	8008b2c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008af2:	89fb      	ldrh	r3, [r7, #14]
 8008af4:	3303      	adds	r3, #3
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	441a      	add	r2, r3
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	e002      	b.n	8008b0a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2200      	movs	r2, #0
 8008b08:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88ba      	ldrh	r2, [r7, #4]
 8008b14:	811a      	strh	r2, [r3, #8]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	891a      	ldrh	r2, [r3, #8]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	79ba      	ldrb	r2, [r7, #6]
 8008b22:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2201      	movs	r2, #1
 8008b28:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8008b2a:	683b      	ldr	r3, [r7, #0]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	08019218 	.word	0x08019218
 8008b38:	080193b0 	.word	0x080193b0
 8008b3c:	08019264 	.word	0x08019264

08008b40 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <pbuf_realloc+0x20>
 8008b52:	4b4b      	ldr	r3, [pc, #300]	; (8008c80 <pbuf_realloc+0x140>)
 8008b54:	f240 12f3 	movw	r2, #499	; 0x1f3
 8008b58:	494a      	ldr	r1, [pc, #296]	; (8008c84 <pbuf_realloc+0x144>)
 8008b5a:	484b      	ldr	r0, [pc, #300]	; (8008c88 <pbuf_realloc+0x148>)
 8008b5c:	f00e fa56 	bl	801700c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7b1b      	ldrb	r3, [r3, #12]
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	d012      	beq.n	8008b8e <pbuf_realloc+0x4e>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	7b1b      	ldrb	r3, [r3, #12]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d00e      	beq.n	8008b8e <pbuf_realloc+0x4e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7b1b      	ldrb	r3, [r3, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00a      	beq.n	8008b8e <pbuf_realloc+0x4e>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	7b1b      	ldrb	r3, [r3, #12]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d006      	beq.n	8008b8e <pbuf_realloc+0x4e>
 8008b80:	4b3f      	ldr	r3, [pc, #252]	; (8008c80 <pbuf_realloc+0x140>)
 8008b82:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008b86:	4941      	ldr	r1, [pc, #260]	; (8008c8c <pbuf_realloc+0x14c>)
 8008b88:	483f      	ldr	r0, [pc, #252]	; (8008c88 <pbuf_realloc+0x148>)
 8008b8a:	f00e fa3f 	bl	801700c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	891b      	ldrh	r3, [r3, #8]
 8008b92:	887a      	ldrh	r2, [r7, #2]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d26f      	bcs.n	8008c78 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8008b98:	887b      	ldrh	r3, [r7, #2]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	8912      	ldrh	r2, [r2, #8]
 8008b9e:	1a9b      	subs	r3, r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008ba2:	887b      	ldrh	r3, [r7, #2]
 8008ba4:	827b      	strh	r3, [r7, #18]
  q = p;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008baa:	e025      	b.n	8008bf8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	895b      	ldrh	r3, [r3, #10]
 8008bb0:	8a7a      	ldrh	r2, [r7, #18]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	dd06      	ble.n	8008bce <pbuf_realloc+0x8e>
 8008bc0:	4b2f      	ldr	r3, [pc, #188]	; (8008c80 <pbuf_realloc+0x140>)
 8008bc2:	f240 220b 	movw	r2, #523	; 0x20b
 8008bc6:	4932      	ldr	r1, [pc, #200]	; (8008c90 <pbuf_realloc+0x150>)
 8008bc8:	482f      	ldr	r0, [pc, #188]	; (8008c88 <pbuf_realloc+0x148>)
 8008bca:	f00e fa1f 	bl	801700c <iprintf>
    q->tot_len += (u16_t)grow;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	891a      	ldrh	r2, [r3, #8]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d106      	bne.n	8008bf8 <pbuf_realloc+0xb8>
 8008bea:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <pbuf_realloc+0x140>)
 8008bec:	f240 220f 	movw	r2, #527	; 0x20f
 8008bf0:	4928      	ldr	r1, [pc, #160]	; (8008c94 <pbuf_realloc+0x154>)
 8008bf2:	4825      	ldr	r0, [pc, #148]	; (8008c88 <pbuf_realloc+0x148>)
 8008bf4:	f00e fa0a 	bl	801700c <iprintf>
  while (rem_len > q->len) {
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	895b      	ldrh	r3, [r3, #10]
 8008bfc:	8a7a      	ldrh	r2, [r7, #18]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d8d4      	bhi.n	8008bac <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	7b1b      	ldrb	r3, [r3, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d122      	bne.n	8008c50 <pbuf_realloc+0x110>
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	895b      	ldrh	r3, [r3, #10]
 8008c0e:	8a7a      	ldrh	r2, [r7, #18]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d01d      	beq.n	8008c50 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	7b5b      	ldrb	r3, [r3, #13]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d117      	bne.n	8008c50 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	461a      	mov	r2, r3
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	8a7b      	ldrh	r3, [r7, #18]
 8008c2e:	4413      	add	r3, r2
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	4619      	mov	r1, r3
 8008c34:	6978      	ldr	r0, [r7, #20]
 8008c36:	f7ff f93f 	bl	8007eb8 <mem_trim>
 8008c3a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <pbuf_realloc+0x110>
 8008c42:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <pbuf_realloc+0x140>)
 8008c44:	f240 221d 	movw	r2, #541	; 0x21d
 8008c48:	4913      	ldr	r1, [pc, #76]	; (8008c98 <pbuf_realloc+0x158>)
 8008c4a:	480f      	ldr	r0, [pc, #60]	; (8008c88 <pbuf_realloc+0x148>)
 8008c4c:	f00e f9de 	bl	801700c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	8a7a      	ldrh	r2, [r7, #18]
 8008c54:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	895a      	ldrh	r2, [r3, #10]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d004      	beq.n	8008c70 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f8dc 	bl	8008e28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	e000      	b.n	8008c7a <pbuf_realloc+0x13a>
    return;
 8008c78:	bf00      	nop

}
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	08019218 	.word	0x08019218
 8008c84:	080193d4 	.word	0x080193d4
 8008c88:	08019264 	.word	0x08019264
 8008c8c:	080193ec 	.word	0x080193ec
 8008c90:	08019408 	.word	0x08019408
 8008c94:	0801941c 	.word	0x0801941c
 8008c98:	08019434 	.word	0x08019434

08008c9c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <pbuf_header_impl+0x24>
 8008cb2:	4b46      	ldr	r3, [pc, #280]	; (8008dcc <pbuf_header_impl+0x130>)
 8008cb4:	f240 223f 	movw	r2, #575	; 0x23f
 8008cb8:	4945      	ldr	r1, [pc, #276]	; (8008dd0 <pbuf_header_impl+0x134>)
 8008cba:	4846      	ldr	r0, [pc, #280]	; (8008dd4 <pbuf_header_impl+0x138>)
 8008cbc:	f00e f9a6 	bl	801700c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8008cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <pbuf_header_impl+0x32>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <pbuf_header_impl+0x36>
    return 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e078      	b.n	8008dc4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8008cd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	da10      	bge.n	8008cfc <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8008cda:	887b      	ldrh	r3, [r7, #2]
 8008cdc:	425b      	negs	r3, r3
 8008cde:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	895b      	ldrh	r3, [r3, #10]
 8008ce4:	89fa      	ldrh	r2, [r7, #14]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d90a      	bls.n	8008d00 <pbuf_header_impl+0x64>
 8008cea:	4b38      	ldr	r3, [pc, #224]	; (8008dcc <pbuf_header_impl+0x130>)
 8008cec:	f240 2247 	movw	r2, #583	; 0x247
 8008cf0:	4939      	ldr	r1, [pc, #228]	; (8008dd8 <pbuf_header_impl+0x13c>)
 8008cf2:	4838      	ldr	r0, [pc, #224]	; (8008dd4 <pbuf_header_impl+0x138>)
 8008cf4:	f00e f98a 	bl	801700c <iprintf>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e063      	b.n	8008dc4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8008cfc:	887b      	ldrh	r3, [r7, #2]
 8008cfe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7b1b      	ldrb	r3, [r3, #12]
 8008d04:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8008d0c:	89bb      	ldrh	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <pbuf_header_impl+0x7c>
 8008d12:	89bb      	ldrh	r3, [r7, #12]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d112      	bne.n	8008d3e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d20:	425b      	negs	r3, r3
 8008d22:	441a      	add	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3310      	adds	r3, #16
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d238      	bcs.n	8008da6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e042      	b.n	8008dc4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8008d3e:	89bb      	ldrh	r3, [r7, #12]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d002      	beq.n	8008d4a <pbuf_header_impl+0xae>
 8008d44:	89bb      	ldrh	r3, [r7, #12]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d124      	bne.n	8008d94 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da0d      	bge.n	8008d6e <pbuf_header_impl+0xd2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	895b      	ldrh	r3, [r3, #10]
 8008d56:	89fa      	ldrh	r2, [r7, #14]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d808      	bhi.n	8008d6e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d64:	425b      	negs	r3, r3
 8008d66:	441a      	add	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	e011      	b.n	8008d92 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8008d6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd0b      	ble.n	8008d8e <pbuf_header_impl+0xf2>
 8008d76:	787b      	ldrb	r3, [r7, #1]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d84:	425b      	negs	r3, r3
 8008d86:	441a      	add	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	605a      	str	r2, [r3, #4]
 8008d8c:	e001      	b.n	8008d92 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e018      	b.n	8008dc4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8008d92:	e008      	b.n	8008da6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <pbuf_header_impl+0x130>)
 8008d96:	f240 2277 	movw	r2, #631	; 0x277
 8008d9a:	4910      	ldr	r1, [pc, #64]	; (8008ddc <pbuf_header_impl+0x140>)
 8008d9c:	480d      	ldr	r0, [pc, #52]	; (8008dd4 <pbuf_header_impl+0x138>)
 8008d9e:	f00e f935 	bl	801700c <iprintf>
    return 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e00e      	b.n	8008dc4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	895a      	ldrh	r2, [r3, #10]
 8008daa:	887b      	ldrh	r3, [r7, #2]
 8008dac:	4413      	add	r3, r2
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	891a      	ldrh	r2, [r3, #8]
 8008db8:	887b      	ldrh	r3, [r7, #2]
 8008dba:	4413      	add	r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	08019218 	.word	0x08019218
 8008dd0:	08019450 	.word	0x08019450
 8008dd4:	08019264 	.word	0x08019264
 8008dd8:	0801945c 	.word	0x0801945c
 8008ddc:	0801947c 	.word	0x0801947c

08008de0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8008dec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008df0:	2200      	movs	r2, #0
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff ff51 	bl	8008c9c <pbuf_header_impl>
 8008dfa:	4603      	mov	r3, r0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8008e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e14:	2201      	movs	r2, #1
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff3f 	bl	8008c9c <pbuf_header_impl>
 8008e1e:	4603      	mov	r3, r0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10b      	bne.n	8008e4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <pbuf_free+0x22>
 8008e3c:	4b3e      	ldr	r3, [pc, #248]	; (8008f38 <pbuf_free+0x110>)
 8008e3e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008e42:	493e      	ldr	r1, [pc, #248]	; (8008f3c <pbuf_free+0x114>)
 8008e44:	483e      	ldr	r0, [pc, #248]	; (8008f40 <pbuf_free+0x118>)
 8008e46:	f00e f8e1 	bl	801700c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e070      	b.n	8008f30 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7b1b      	ldrb	r3, [r3, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d012      	beq.n	8008e7c <pbuf_free+0x54>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7b1b      	ldrb	r3, [r3, #12]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d00e      	beq.n	8008e7c <pbuf_free+0x54>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	7b1b      	ldrb	r3, [r3, #12]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d00a      	beq.n	8008e7c <pbuf_free+0x54>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	7b1b      	ldrb	r3, [r3, #12]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d006      	beq.n	8008e7c <pbuf_free+0x54>
 8008e6e:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <pbuf_free+0x110>)
 8008e70:	f240 22de 	movw	r2, #734	; 0x2de
 8008e74:	4933      	ldr	r1, [pc, #204]	; (8008f44 <pbuf_free+0x11c>)
 8008e76:	4832      	ldr	r0, [pc, #200]	; (8008f40 <pbuf_free+0x118>)
 8008e78:	f00e f8c8 	bl	801700c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008e80:	e052      	b.n	8008f28 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	89db      	ldrh	r3, [r3, #14]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <pbuf_free+0x70>
 8008e8a:	4b2b      	ldr	r3, [pc, #172]	; (8008f38 <pbuf_free+0x110>)
 8008e8c:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008e90:	492d      	ldr	r1, [pc, #180]	; (8008f48 <pbuf_free+0x120>)
 8008e92:	482b      	ldr	r0, [pc, #172]	; (8008f40 <pbuf_free+0x118>)
 8008e94:	f00e f8ba 	bl	801700c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	89db      	ldrh	r3, [r3, #14]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	81da      	strh	r2, [r3, #14]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	89db      	ldrh	r3, [r3, #14]
 8008ea8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008eaa:	8abb      	ldrh	r3, [r7, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d139      	bne.n	8008f24 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7b1b      	ldrb	r3, [r3, #12]
 8008eba:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7b5b      	ldrb	r3, [r3, #13]
 8008ec0:	f003 0302 	and.w	r3, r3, #2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d011      	beq.n	8008eec <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <pbuf_free+0xba>
 8008ed4:	4b18      	ldr	r3, [pc, #96]	; (8008f38 <pbuf_free+0x110>)
 8008ed6:	f240 22f9 	movw	r2, #761	; 0x2f9
 8008eda:	491c      	ldr	r1, [pc, #112]	; (8008f4c <pbuf_free+0x124>)
 8008edc:	4818      	ldr	r0, [pc, #96]	; (8008f40 <pbuf_free+0x118>)
 8008ede:	f00e f895 	bl	801700c <iprintf>
        pc->custom_free_function(p);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	4798      	blx	r3
 8008eea:	e015      	b.n	8008f18 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8008eec:	89fb      	ldrh	r3, [r7, #14]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d104      	bne.n	8008efc <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	2008      	movs	r0, #8
 8008ef6:	f7ff fa65 	bl	80083c4 <memp_free>
 8008efa:	e00d      	b.n	8008f18 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8008efc:	89fb      	ldrh	r3, [r7, #14]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d002      	beq.n	8008f08 <pbuf_free+0xe0>
 8008f02:	89fb      	ldrh	r3, [r7, #14]
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d104      	bne.n	8008f12 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	2007      	movs	r0, #7
 8008f0c:	f7ff fa5a 	bl	80083c4 <memp_free>
 8008f10:	e002      	b.n	8008f18 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fe ff6e 	bl	8007df4 <mem_free>
        }
      }
      count++;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	607b      	str	r3, [r7, #4]
 8008f22:	e001      	b.n	8008f28 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8008f24:	2300      	movs	r3, #0
 8008f26:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1a9      	bne.n	8008e82 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	08019218 	.word	0x08019218
 8008f3c:	08019450 	.word	0x08019450
 8008f40:	08019264 	.word	0x08019264
 8008f44:	0801948c 	.word	0x0801948c
 8008f48:	080194a4 	.word	0x080194a4
 8008f4c:	080194bc 	.word	0x080194bc

08008f50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008f5c:	e005      	b.n	8008f6a <pbuf_clen+0x1a>
    ++len;
 8008f5e:	89fb      	ldrh	r3, [r7, #14]
 8008f60:	3301      	adds	r3, #1
 8008f62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1f6      	bne.n	8008f5e <pbuf_clen+0xe>
  }
  return len;
 8008f70:	89fb      	ldrh	r3, [r7, #14]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d010      	beq.n	8008fb0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	89db      	ldrh	r3, [r3, #14]
 8008f92:	3301      	adds	r3, #1
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	89db      	ldrh	r3, [r3, #14]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <pbuf_ref+0x30>
 8008fa2:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <pbuf_ref+0x38>)
 8008fa4:	f240 3239 	movw	r2, #825	; 0x339
 8008fa8:	4904      	ldr	r1, [pc, #16]	; (8008fbc <pbuf_ref+0x3c>)
 8008faa:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <pbuf_ref+0x40>)
 8008fac:	f00e f82e 	bl	801700c <iprintf>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	08019218 	.word	0x08019218
 8008fbc:	080194e0 	.word	0x080194e0
 8008fc0:	08019264 	.word	0x08019264

08008fc4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <pbuf_cat+0x16>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d107      	bne.n	8008fea <pbuf_cat+0x26>
 8008fda:	4b20      	ldr	r3, [pc, #128]	; (800905c <pbuf_cat+0x98>)
 8008fdc:	f240 324d 	movw	r2, #845	; 0x34d
 8008fe0:	491f      	ldr	r1, [pc, #124]	; (8009060 <pbuf_cat+0x9c>)
 8008fe2:	4820      	ldr	r0, [pc, #128]	; (8009064 <pbuf_cat+0xa0>)
 8008fe4:	f00e f812 	bl	801700c <iprintf>
 8008fe8:	e034      	b.n	8009054 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	e00a      	b.n	8009006 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	891a      	ldrh	r2, [r3, #8]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	891b      	ldrh	r3, [r3, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1f0      	bne.n	8008ff0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	891a      	ldrh	r2, [r3, #8]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	895b      	ldrh	r3, [r3, #10]
 8009016:	429a      	cmp	r2, r3
 8009018:	d006      	beq.n	8009028 <pbuf_cat+0x64>
 800901a:	4b10      	ldr	r3, [pc, #64]	; (800905c <pbuf_cat+0x98>)
 800901c:	f240 3255 	movw	r2, #853	; 0x355
 8009020:	4911      	ldr	r1, [pc, #68]	; (8009068 <pbuf_cat+0xa4>)
 8009022:	4810      	ldr	r0, [pc, #64]	; (8009064 <pbuf_cat+0xa0>)
 8009024:	f00d fff2 	bl	801700c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d006      	beq.n	800903e <pbuf_cat+0x7a>
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <pbuf_cat+0x98>)
 8009032:	f240 3256 	movw	r2, #854	; 0x356
 8009036:	490d      	ldr	r1, [pc, #52]	; (800906c <pbuf_cat+0xa8>)
 8009038:	480a      	ldr	r0, [pc, #40]	; (8009064 <pbuf_cat+0xa0>)
 800903a:	f00d ffe7 	bl	801700c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	891a      	ldrh	r2, [r3, #8]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	891b      	ldrh	r3, [r3, #8]
 8009046:	4413      	add	r3, r2
 8009048:	b29a      	uxth	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	08019218 	.word	0x08019218
 8009060:	080194f4 	.word	0x080194f4
 8009064:	08019264 	.word	0x08019264
 8009068:	0801952c 	.word	0x0801952c
 800906c:	0801955c 	.word	0x0801955c

08009070 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff ffa1 	bl	8008fc4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009082:	6838      	ldr	r0, [r7, #0]
 8009084:	f7ff ff7c 	bl	8008f80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800909a:	2300      	movs	r3, #0
 800909c:	81fb      	strh	r3, [r7, #14]
 800909e:	2300      	movs	r3, #0
 80090a0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d008      	beq.n	80090ba <pbuf_copy+0x2a>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <pbuf_copy+0x2a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	891a      	ldrh	r2, [r3, #8]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	891b      	ldrh	r3, [r3, #8]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d209      	bcs.n	80090ce <pbuf_copy+0x3e>
 80090ba:	4b54      	ldr	r3, [pc, #336]	; (800920c <pbuf_copy+0x17c>)
 80090bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80090c0:	4953      	ldr	r1, [pc, #332]	; (8009210 <pbuf_copy+0x180>)
 80090c2:	4854      	ldr	r0, [pc, #336]	; (8009214 <pbuf_copy+0x184>)
 80090c4:	f00d ffa2 	bl	801700c <iprintf>
 80090c8:	f06f 030f 	mvn.w	r3, #15
 80090cc:	e099      	b.n	8009202 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	895b      	ldrh	r3, [r3, #10]
 80090d2:	461a      	mov	r2, r3
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	895b      	ldrh	r3, [r3, #10]
 80090dc:	4619      	mov	r1, r3
 80090de:	89bb      	ldrh	r3, [r7, #12]
 80090e0:	1acb      	subs	r3, r1, r3
 80090e2:	429a      	cmp	r2, r3
 80090e4:	db05      	blt.n	80090f2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	895a      	ldrh	r2, [r3, #10]
 80090ea:	89bb      	ldrh	r3, [r7, #12]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	817b      	strh	r3, [r7, #10]
 80090f0:	e004      	b.n	80090fc <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	895a      	ldrh	r2, [r3, #10]
 80090f6:	89fb      	ldrh	r3, [r7, #14]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	18d0      	adds	r0, r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	89bb      	ldrh	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	897a      	ldrh	r2, [r7, #10]
 800910e:	4619      	mov	r1, r3
 8009110:	f00d fec1 	bl	8016e96 <memcpy>
    offset_to += len;
 8009114:	89fa      	ldrh	r2, [r7, #14]
 8009116:	897b      	ldrh	r3, [r7, #10]
 8009118:	4413      	add	r3, r2
 800911a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800911c:	89ba      	ldrh	r2, [r7, #12]
 800911e:	897b      	ldrh	r3, [r7, #10]
 8009120:	4413      	add	r3, r2
 8009122:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	895b      	ldrh	r3, [r3, #10]
 8009128:	89fa      	ldrh	r2, [r7, #14]
 800912a:	429a      	cmp	r2, r3
 800912c:	d906      	bls.n	800913c <pbuf_copy+0xac>
 800912e:	4b37      	ldr	r3, [pc, #220]	; (800920c <pbuf_copy+0x17c>)
 8009130:	f240 32cd 	movw	r2, #973	; 0x3cd
 8009134:	4938      	ldr	r1, [pc, #224]	; (8009218 <pbuf_copy+0x188>)
 8009136:	4837      	ldr	r0, [pc, #220]	; (8009214 <pbuf_copy+0x184>)
 8009138:	f00d ff68 	bl	801700c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	895b      	ldrh	r3, [r3, #10]
 8009140:	89ba      	ldrh	r2, [r7, #12]
 8009142:	429a      	cmp	r2, r3
 8009144:	d906      	bls.n	8009154 <pbuf_copy+0xc4>
 8009146:	4b31      	ldr	r3, [pc, #196]	; (800920c <pbuf_copy+0x17c>)
 8009148:	f240 32ce 	movw	r2, #974	; 0x3ce
 800914c:	4933      	ldr	r1, [pc, #204]	; (800921c <pbuf_copy+0x18c>)
 800914e:	4831      	ldr	r0, [pc, #196]	; (8009214 <pbuf_copy+0x184>)
 8009150:	f00d ff5c 	bl	801700c <iprintf>
    if (offset_from >= p_from->len) {
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	895b      	ldrh	r3, [r3, #10]
 8009158:	89ba      	ldrh	r2, [r7, #12]
 800915a:	429a      	cmp	r2, r3
 800915c:	d304      	bcc.n	8009168 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	895b      	ldrh	r3, [r3, #10]
 800916c:	89fa      	ldrh	r2, [r7, #14]
 800916e:	429a      	cmp	r2, r3
 8009170:	d114      	bne.n	800919c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10c      	bne.n	800919c <pbuf_copy+0x10c>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d009      	beq.n	800919c <pbuf_copy+0x10c>
 8009188:	4b20      	ldr	r3, [pc, #128]	; (800920c <pbuf_copy+0x17c>)
 800918a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800918e:	4924      	ldr	r1, [pc, #144]	; (8009220 <pbuf_copy+0x190>)
 8009190:	4820      	ldr	r0, [pc, #128]	; (8009214 <pbuf_copy+0x184>)
 8009192:	f00d ff3b 	bl	801700c <iprintf>
 8009196:	f06f 030f 	mvn.w	r3, #15
 800919a:	e032      	b.n	8009202 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d013      	beq.n	80091ca <pbuf_copy+0x13a>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	895a      	ldrh	r2, [r3, #10]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	891b      	ldrh	r3, [r3, #8]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d10d      	bne.n	80091ca <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <pbuf_copy+0x13a>
 80091b6:	4b15      	ldr	r3, [pc, #84]	; (800920c <pbuf_copy+0x17c>)
 80091b8:	f240 32de 	movw	r2, #990	; 0x3de
 80091bc:	4919      	ldr	r1, [pc, #100]	; (8009224 <pbuf_copy+0x194>)
 80091be:	4815      	ldr	r0, [pc, #84]	; (8009214 <pbuf_copy+0x184>)
 80091c0:	f00d ff24 	bl	801700c <iprintf>
 80091c4:	f06f 0305 	mvn.w	r3, #5
 80091c8:	e01b      	b.n	8009202 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d013      	beq.n	80091f8 <pbuf_copy+0x168>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	895a      	ldrh	r2, [r3, #10]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	891b      	ldrh	r3, [r3, #8]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d10d      	bne.n	80091f8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <pbuf_copy+0x168>
 80091e4:	4b09      	ldr	r3, [pc, #36]	; (800920c <pbuf_copy+0x17c>)
 80091e6:	f240 32e3 	movw	r2, #995	; 0x3e3
 80091ea:	490e      	ldr	r1, [pc, #56]	; (8009224 <pbuf_copy+0x194>)
 80091ec:	4809      	ldr	r0, [pc, #36]	; (8009214 <pbuf_copy+0x184>)
 80091ee:	f00d ff0d 	bl	801700c <iprintf>
 80091f2:	f06f 0305 	mvn.w	r3, #5
 80091f6:	e004      	b.n	8009202 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f47f af67 	bne.w	80090ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	08019218 	.word	0x08019218
 8009210:	080195a8 	.word	0x080195a8
 8009214:	08019264 	.word	0x08019264
 8009218:	080195d8 	.word	0x080195d8
 800921c:	080195f0 	.word	0x080195f0
 8009220:	0801960c 	.word	0x0801960c
 8009224:	0801961c 	.word	0x0801961c

08009228 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	4611      	mov	r1, r2
 8009234:	461a      	mov	r2, r3
 8009236:	460b      	mov	r3, r1
 8009238:	80fb      	strh	r3, [r7, #6]
 800923a:	4613      	mov	r3, r2
 800923c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d108      	bne.n	800925a <pbuf_copy_partial+0x32>
 8009248:	4b30      	ldr	r3, [pc, #192]	; (800930c <pbuf_copy_partial+0xe4>)
 800924a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800924e:	4930      	ldr	r1, [pc, #192]	; (8009310 <pbuf_copy_partial+0xe8>)
 8009250:	4830      	ldr	r0, [pc, #192]	; (8009314 <pbuf_copy_partial+0xec>)
 8009252:	f00d fedb 	bl	801700c <iprintf>
 8009256:	2300      	movs	r3, #0
 8009258:	e054      	b.n	8009304 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d108      	bne.n	8009272 <pbuf_copy_partial+0x4a>
 8009260:	4b2a      	ldr	r3, [pc, #168]	; (800930c <pbuf_copy_partial+0xe4>)
 8009262:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009266:	492c      	ldr	r1, [pc, #176]	; (8009318 <pbuf_copy_partial+0xf0>)
 8009268:	482a      	ldr	r0, [pc, #168]	; (8009314 <pbuf_copy_partial+0xec>)
 800926a:	f00d fecf 	bl	801700c <iprintf>
 800926e:	2300      	movs	r3, #0
 8009270:	e048      	b.n	8009304 <pbuf_copy_partial+0xdc>

  left = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <pbuf_copy_partial+0x5a>
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <pbuf_copy_partial+0x5e>
    return 0;
 8009282:	2300      	movs	r3, #0
 8009284:	e03e      	b.n	8009304 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	61fb      	str	r3, [r7, #28]
 800928a:	e034      	b.n	80092f6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800928c:	88bb      	ldrh	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <pbuf_copy_partial+0x80>
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	895b      	ldrh	r3, [r3, #10]
 8009296:	88ba      	ldrh	r2, [r7, #4]
 8009298:	429a      	cmp	r2, r3
 800929a:	d305      	bcc.n	80092a8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	895b      	ldrh	r3, [r3, #10]
 80092a0:	88ba      	ldrh	r2, [r7, #4]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	80bb      	strh	r3, [r7, #4]
 80092a6:	e023      	b.n	80092f0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	895a      	ldrh	r2, [r3, #10]
 80092ac:	88bb      	ldrh	r3, [r7, #4]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80092b2:	8b3a      	ldrh	r2, [r7, #24]
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d901      	bls.n	80092be <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80092be:	8b7b      	ldrh	r3, [r7, #26]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	18d0      	adds	r0, r2, r3
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	88bb      	ldrh	r3, [r7, #4]
 80092ca:	4413      	add	r3, r2
 80092cc:	8b3a      	ldrh	r2, [r7, #24]
 80092ce:	4619      	mov	r1, r3
 80092d0:	f00d fde1 	bl	8016e96 <memcpy>
      copied_total += buf_copy_len;
 80092d4:	8afa      	ldrh	r2, [r7, #22]
 80092d6:	8b3b      	ldrh	r3, [r7, #24]
 80092d8:	4413      	add	r3, r2
 80092da:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80092dc:	8b7a      	ldrh	r2, [r7, #26]
 80092de:	8b3b      	ldrh	r3, [r7, #24]
 80092e0:	4413      	add	r3, r2
 80092e2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80092e4:	88fa      	ldrh	r2, [r7, #6]
 80092e6:	8b3b      	ldrh	r3, [r7, #24]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	61fb      	str	r3, [r7, #28]
 80092f6:	88fb      	ldrh	r3, [r7, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <pbuf_copy_partial+0xda>
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1c4      	bne.n	800928c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8009302:	8afb      	ldrh	r3, [r7, #22]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3720      	adds	r7, #32
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	08019218 	.word	0x08019218
 8009310:	08019648 	.word	0x08019648
 8009314:	08019264 	.word	0x08019264
 8009318:	08019668 	.word	0x08019668

0800931c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009320:	bf00      	nop
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
	...

0800932c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009330:	f000 ff80 	bl	800a234 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009334:	4b07      	ldr	r3, [pc, #28]	; (8009354 <tcp_tmr+0x28>)
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	3301      	adds	r3, #1
 800933a:	b2da      	uxtb	r2, r3
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <tcp_tmr+0x28>)
 800933e:	701a      	strb	r2, [r3, #0]
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <tcp_tmr+0x28>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800934c:	f000 fcb2 	bl	8009cb4 <tcp_slowtmr>
  }
}
 8009350:	bf00      	nop
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20000245 	.word	0x20000245

08009358 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60fb      	str	r3, [r7, #12]
 8009366:	e00a      	b.n	800937e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d102      	bne.n	8009378 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f1      	bne.n	8009368 <tcp_remove_listener+0x10>
      }
   }
}
 8009384:	bf00      	nop
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d105      	bne.n	80093aa <tcp_listen_closed+0x1a>
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <tcp_listen_closed+0x5c>)
 80093a0:	22c0      	movs	r2, #192	; 0xc0
 80093a2:	4913      	ldr	r1, [pc, #76]	; (80093f0 <tcp_listen_closed+0x60>)
 80093a4:	4813      	ldr	r0, [pc, #76]	; (80093f4 <tcp_listen_closed+0x64>)
 80093a6:	f00d fe31 	bl	801700c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7d1b      	ldrb	r3, [r3, #20]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d005      	beq.n	80093be <tcp_listen_closed+0x2e>
 80093b2:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <tcp_listen_closed+0x5c>)
 80093b4:	22c1      	movs	r2, #193	; 0xc1
 80093b6:	4910      	ldr	r1, [pc, #64]	; (80093f8 <tcp_listen_closed+0x68>)
 80093b8:	480e      	ldr	r0, [pc, #56]	; (80093f4 <tcp_listen_closed+0x64>)
 80093ba:	f00d fe27 	bl	801700c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80093be:	2301      	movs	r3, #1
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	e00b      	b.n	80093dc <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80093c4:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <tcp_listen_closed+0x6c>)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff ffc1 	bl	8009358 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d9f0      	bls.n	80093c4 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	0801979c 	.word	0x0801979c
 80093f0:	080197cc 	.word	0x080197cc
 80093f4:	080197d8 	.word	0x080197d8
 80093f8:	08019800 	.word	0x08019800
 80093fc:	0801b308 	.word	0x0801b308

08009400 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009400:	b5b0      	push	{r4, r5, r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af02      	add	r7, sp, #8
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d075      	beq.n	80094fe <tcp_close_shutdown+0xfe>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	7d1b      	ldrb	r3, [r3, #20]
 8009416:	2b04      	cmp	r3, #4
 8009418:	d003      	beq.n	8009422 <tcp_close_shutdown+0x22>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7d1b      	ldrb	r3, [r3, #20]
 800941e:	2b07      	cmp	r3, #7
 8009420:	d16d      	bne.n	80094fe <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009426:	2b00      	cmp	r3, #0
 8009428:	d104      	bne.n	8009434 <tcp_close_shutdown+0x34>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009432:	d064      	beq.n	80094fe <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7e9b      	ldrb	r3, [r3, #26]
 8009438:	f003 0310 	and.w	r3, r3, #16
 800943c:	2b00      	cmp	r3, #0
 800943e:	d106      	bne.n	800944e <tcp_close_shutdown+0x4e>
 8009440:	4b59      	ldr	r3, [pc, #356]	; (80095a8 <tcp_close_shutdown+0x1a8>)
 8009442:	f240 120f 	movw	r2, #271	; 0x10f
 8009446:	4959      	ldr	r1, [pc, #356]	; (80095ac <tcp_close_shutdown+0x1ac>)
 8009448:	4859      	ldr	r0, [pc, #356]	; (80095b0 <tcp_close_shutdown+0x1b0>)
 800944a:	f00d fddf 	bl	801700c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009456:	687c      	ldr	r4, [r7, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	1d1d      	adds	r5, r3, #4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8adb      	ldrh	r3, [r3, #22]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	8b12      	ldrh	r2, [r2, #24]
 8009464:	9201      	str	r2, [sp, #4]
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	462b      	mov	r3, r5
 800946a:	4622      	mov	r2, r4
 800946c:	f004 feec 	bl	800e248 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f001 fa1d 	bl	800a8b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009476:	4b4f      	ldr	r3, [pc, #316]	; (80095b4 <tcp_close_shutdown+0x1b4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	429a      	cmp	r2, r3
 800947e:	d105      	bne.n	800948c <tcp_close_shutdown+0x8c>
 8009480:	4b4c      	ldr	r3, [pc, #304]	; (80095b4 <tcp_close_shutdown+0x1b4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	4a4b      	ldr	r2, [pc, #300]	; (80095b4 <tcp_close_shutdown+0x1b4>)
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	e013      	b.n	80094b4 <tcp_close_shutdown+0xb4>
 800948c:	4b49      	ldr	r3, [pc, #292]	; (80095b4 <tcp_close_shutdown+0x1b4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	e00c      	b.n	80094ae <tcp_close_shutdown+0xae>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	429a      	cmp	r2, r3
 800949c:	d104      	bne.n	80094a8 <tcp_close_shutdown+0xa8>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68da      	ldr	r2, [r3, #12]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	60da      	str	r2, [r3, #12]
 80094a6:	e005      	b.n	80094b4 <tcp_close_shutdown+0xb4>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1ef      	bne.n	8009494 <tcp_close_shutdown+0x94>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	60da      	str	r2, [r3, #12]
 80094ba:	4b3f      	ldr	r3, [pc, #252]	; (80095b8 <tcp_close_shutdown+0x1b8>)
 80094bc:	2201      	movs	r2, #1
 80094be:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7d1b      	ldrb	r3, [r3, #20]
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	d10c      	bne.n	80094e2 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	220a      	movs	r2, #10
 80094cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80094ce:	4b3b      	ldr	r3, [pc, #236]	; (80095bc <tcp_close_shutdown+0x1bc>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60da      	str	r2, [r3, #12]
 80094d6:	4a39      	ldr	r2, [pc, #228]	; (80095bc <tcp_close_shutdown+0x1bc>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	f005 f904 	bl	800e6e8 <tcp_timer_needed>
 80094e0:	e00b      	b.n	80094fa <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80094e2:	4b37      	ldr	r3, [pc, #220]	; (80095c0 <tcp_close_shutdown+0x1c0>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d102      	bne.n	80094f2 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80094ec:	f003 fd44 	bl	800cf78 <tcp_trigger_input_pcb_close>
 80094f0:	e003      	b.n	80094fa <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	2001      	movs	r0, #1
 80094f6:	f7fe ff65 	bl	80083c4 <memp_free>
        }
      }
      return ERR_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	e050      	b.n	80095a0 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7d1b      	ldrb	r3, [r3, #20]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d02e      	beq.n	8009564 <tcp_close_shutdown+0x164>
 8009506:	2b02      	cmp	r3, #2
 8009508:	d038      	beq.n	800957c <tcp_close_shutdown+0x17c>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d142      	bne.n	8009594 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	8adb      	ldrh	r3, [r3, #22]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d021      	beq.n	800955a <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009516:	4b2b      	ldr	r3, [pc, #172]	; (80095c4 <tcp_close_shutdown+0x1c4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d105      	bne.n	800952c <tcp_close_shutdown+0x12c>
 8009520:	4b28      	ldr	r3, [pc, #160]	; (80095c4 <tcp_close_shutdown+0x1c4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	4a27      	ldr	r2, [pc, #156]	; (80095c4 <tcp_close_shutdown+0x1c4>)
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	e013      	b.n	8009554 <tcp_close_shutdown+0x154>
 800952c:	4b25      	ldr	r3, [pc, #148]	; (80095c4 <tcp_close_shutdown+0x1c4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	e00c      	b.n	800954e <tcp_close_shutdown+0x14e>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	429a      	cmp	r2, r3
 800953c:	d104      	bne.n	8009548 <tcp_close_shutdown+0x148>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	60da      	str	r2, [r3, #12]
 8009546:	e005      	b.n	8009554 <tcp_close_shutdown+0x154>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	60bb      	str	r3, [r7, #8]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ef      	bne.n	8009534 <tcp_close_shutdown+0x134>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	2001      	movs	r0, #1
 800955e:	f7fe ff31 	bl	80083c4 <memp_free>
    break;
 8009562:	e01c      	b.n	800959e <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff ff13 	bl	8009390 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	4816      	ldr	r0, [pc, #88]	; (80095c8 <tcp_close_shutdown+0x1c8>)
 800956e:	f001 f9e1 	bl	800a934 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	2002      	movs	r0, #2
 8009576:	f7fe ff25 	bl	80083c4 <memp_free>
    break;
 800957a:	e010      	b.n	800959e <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	480d      	ldr	r0, [pc, #52]	; (80095b4 <tcp_close_shutdown+0x1b4>)
 8009580:	f001 f9d8 	bl	800a934 <tcp_pcb_remove>
 8009584:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <tcp_close_shutdown+0x1b8>)
 8009586:	2201      	movs	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	2001      	movs	r0, #1
 800958e:	f7fe ff19 	bl	80083c4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8009592:	e004      	b.n	800959e <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f819 	bl	80095cc <tcp_close_shutdown_fin>
 800959a:	4603      	mov	r3, r0
 800959c:	e000      	b.n	80095a0 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bdb0      	pop	{r4, r5, r7, pc}
 80095a8:	0801979c 	.word	0x0801979c
 80095ac:	08019818 	.word	0x08019818
 80095b0:	080197d8 	.word	0x080197d8
 80095b4:	2000394c 	.word	0x2000394c
 80095b8:	20003948 	.word	0x20003948
 80095bc:	2000395c 	.word	0x2000395c
 80095c0:	20003960 	.word	0x20003960
 80095c4:	20003958 	.word	0x20003958
 80095c8:	20003954 	.word	0x20003954

080095cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <tcp_close_shutdown_fin+0x1c>
 80095da:	4b2c      	ldr	r3, [pc, #176]	; (800968c <tcp_close_shutdown_fin+0xc0>)
 80095dc:	f240 124d 	movw	r2, #333	; 0x14d
 80095e0:	492b      	ldr	r1, [pc, #172]	; (8009690 <tcp_close_shutdown_fin+0xc4>)
 80095e2:	482c      	ldr	r0, [pc, #176]	; (8009694 <tcp_close_shutdown_fin+0xc8>)
 80095e4:	f00d fd12 	bl	801700c <iprintf>

  switch (pcb->state) {
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	7d1b      	ldrb	r3, [r3, #20]
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d010      	beq.n	8009612 <tcp_close_shutdown_fin+0x46>
 80095f0:	2b07      	cmp	r3, #7
 80095f2:	d01b      	beq.n	800962c <tcp_close_shutdown_fin+0x60>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d126      	bne.n	8009646 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f003 fd49 	bl	800d090 <tcp_send_fin>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d11f      	bne.n	800964a <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2205      	movs	r2, #5
 800960e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009610:	e01b      	b.n	800964a <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f003 fd3c 	bl	800d090 <tcp_send_fin>
 8009618:	4603      	mov	r3, r0
 800961a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800961c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d114      	bne.n	800964e <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2205      	movs	r2, #5
 8009628:	751a      	strb	r2, [r3, #20]
    }
    break;
 800962a:	e010      	b.n	800964e <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f003 fd2f 	bl	800d090 <tcp_send_fin>
 8009632:	4603      	mov	r3, r0
 8009634:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2209      	movs	r2, #9
 8009642:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009644:	e005      	b.n	8009652 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	e01c      	b.n	8009684 <tcp_close_shutdown_fin+0xb8>
    break;
 800964a:	bf00      	nop
 800964c:	e002      	b.n	8009654 <tcp_close_shutdown_fin+0x88>
    break;
 800964e:	bf00      	nop
 8009650:	e000      	b.n	8009654 <tcp_close_shutdown_fin+0x88>
    break;
 8009652:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d103      	bne.n	8009664 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f004 fb69 	bl	800dd34 <tcp_output>
 8009662:	e00d      	b.n	8009680 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966c:	d108      	bne.n	8009680 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7e9b      	ldrb	r3, [r3, #26]
 8009672:	f043 0308 	orr.w	r3, r3, #8
 8009676:	b2da      	uxtb	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e001      	b.n	8009684 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8009680:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	0801979c 	.word	0x0801979c
 8009690:	080197cc 	.word	0x080197cc
 8009694:	080197d8 	.word	0x080197d8

08009698 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7d1b      	ldrb	r3, [r3, #20]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d006      	beq.n	80096b6 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	7e9b      	ldrb	r3, [r3, #26]
 80096ac:	f043 0310 	orr.w	r3, r3, #16
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80096b6:	2101      	movs	r1, #1
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff fea1 	bl	8009400 <tcp_close_shutdown>
 80096be:	4603      	mov	r3, r0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08c      	sub	sp, #48	; 0x30
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	7d1b      	ldrb	r3, [r3, #20]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d106      	bne.n	80096e8 <tcp_abandon+0x20>
 80096da:	4b4d      	ldr	r3, [pc, #308]	; (8009810 <tcp_abandon+0x148>)
 80096dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80096e0:	494c      	ldr	r1, [pc, #304]	; (8009814 <tcp_abandon+0x14c>)
 80096e2:	484d      	ldr	r0, [pc, #308]	; (8009818 <tcp_abandon+0x150>)
 80096e4:	f00d fc92 	bl	801700c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	7d1b      	ldrb	r3, [r3, #20]
 80096ec:	2b0a      	cmp	r3, #10
 80096ee:	d108      	bne.n	8009702 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	484a      	ldr	r0, [pc, #296]	; (800981c <tcp_abandon+0x154>)
 80096f4:	f001 f91e 	bl	800a934 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	2001      	movs	r0, #1
 80096fc:	f7fe fe62 	bl	80083c4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8009700:	e081      	b.n	8009806 <tcp_abandon+0x13e>
    int send_rst = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800970e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7d1b      	ldrb	r3, [r3, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d126      	bne.n	800977a <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8adb      	ldrh	r3, [r3, #22]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d02e      	beq.n	8009792 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009734:	4b3a      	ldr	r3, [pc, #232]	; (8009820 <tcp_abandon+0x158>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	429a      	cmp	r2, r3
 800973c:	d105      	bne.n	800974a <tcp_abandon+0x82>
 800973e:	4b38      	ldr	r3, [pc, #224]	; (8009820 <tcp_abandon+0x158>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	4a36      	ldr	r2, [pc, #216]	; (8009820 <tcp_abandon+0x158>)
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e013      	b.n	8009772 <tcp_abandon+0xaa>
 800974a:	4b35      	ldr	r3, [pc, #212]	; (8009820 <tcp_abandon+0x158>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e00c      	b.n	800976c <tcp_abandon+0xa4>
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	429a      	cmp	r2, r3
 800975a:	d104      	bne.n	8009766 <tcp_abandon+0x9e>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	60da      	str	r2, [r3, #12]
 8009764:	e005      	b.n	8009772 <tcp_abandon+0xaa>
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1ef      	bne.n	8009752 <tcp_abandon+0x8a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	60da      	str	r2, [r3, #12]
 8009778:	e00b      	b.n	8009792 <tcp_abandon+0xca>
      send_rst = reset;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	8adb      	ldrh	r3, [r3, #22]
 8009782:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009784:	6879      	ldr	r1, [r7, #4]
 8009786:	4827      	ldr	r0, [pc, #156]	; (8009824 <tcp_abandon+0x15c>)
 8009788:	f001 f8d4 	bl	800a934 <tcp_pcb_remove>
 800978c:	4b26      	ldr	r3, [pc, #152]	; (8009828 <tcp_abandon+0x160>)
 800978e:	2201      	movs	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d004      	beq.n	80097a4 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fe15 	bl	800a3ce <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fe0c 	bl	800a3ce <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d004      	beq.n	80097c8 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fe03 	bl	800a3ce <tcp_segs_free>
    if (send_rst) {
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	1d19      	adds	r1, r3, #4
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	8b1b      	ldrh	r3, [r3, #24]
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	460b      	mov	r3, r1
 80097e0:	6979      	ldr	r1, [r7, #20]
 80097e2:	69b8      	ldr	r0, [r7, #24]
 80097e4:	f004 fd30 	bl	800e248 <tcp_rst>
    last_state = pcb->state;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	7d1b      	ldrb	r3, [r3, #20]
 80097ec:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	2001      	movs	r0, #1
 80097f2:	f7fe fde7 	bl	80083c4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d004      	beq.n	8009806 <tcp_abandon+0x13e>
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f06f 010c 	mvn.w	r1, #12
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	4798      	blx	r3
}
 8009806:	bf00      	nop
 8009808:	3728      	adds	r7, #40	; 0x28
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	0801979c 	.word	0x0801979c
 8009814:	08019834 	.word	0x08019834
 8009818:	080197d8 	.word	0x080197d8
 800981c:	2000395c 	.word	0x2000395c
 8009820:	20003958 	.word	0x20003958
 8009824:	2000394c 	.word	0x2000394c
 8009828:	20003948 	.word	0x20003948

0800982c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009834:	2101      	movs	r1, #1
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ff46 	bl	80096c8 <tcp_abandon>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8009852:	2304      	movs	r3, #4
 8009854:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800985c:	4b3c      	ldr	r3, [pc, #240]	; (8009950 <tcp_bind+0x10c>)
 800985e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <tcp_bind+0x28>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <tcp_bind+0x2e>
    return ERR_VAL;
 800986c:	f06f 0305 	mvn.w	r3, #5
 8009870:	e06a      	b.n	8009948 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	7d1b      	ldrb	r3, [r3, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d009      	beq.n	800988e <tcp_bind+0x4a>
 800987a:	4b36      	ldr	r3, [pc, #216]	; (8009954 <tcp_bind+0x110>)
 800987c:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009880:	4935      	ldr	r1, [pc, #212]	; (8009958 <tcp_bind+0x114>)
 8009882:	4836      	ldr	r0, [pc, #216]	; (800995c <tcp_bind+0x118>)
 8009884:	f00d fbc2 	bl	801700c <iprintf>
 8009888:	f06f 0305 	mvn.w	r3, #5
 800988c:	e05c      	b.n	8009948 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800988e:	88fb      	ldrh	r3, [r7, #6]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <tcp_bind+0x64>
    port = tcp_new_port();
 8009894:	f000 f9ca 	bl	8009c2c <tcp_new_port>
 8009898:	4603      	mov	r3, r0
 800989a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800989c:	88fb      	ldrh	r3, [r7, #6]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d135      	bne.n	800990e <tcp_bind+0xca>
      return ERR_BUF;
 80098a2:	f06f 0301 	mvn.w	r3, #1
 80098a6:	e04f      	b.n	8009948 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80098a8:	2300      	movs	r3, #0
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	e02b      	b.n	8009906 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80098ae:	4a2c      	ldr	r2, [pc, #176]	; (8009960 <tcp_bind+0x11c>)
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	e01e      	b.n	80098fa <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	8adb      	ldrh	r3, [r3, #22]
 80098c0:	88fa      	ldrh	r2, [r7, #6]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d116      	bne.n	80098f4 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80098c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d010      	beq.n	80098ee <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00c      	beq.n	80098ee <tcp_bind+0xaa>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d009      	beq.n	80098ee <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d102      	bne.n	80098f4 <tcp_bind+0xb0>
              return ERR_USE;
 80098ee:	f06f 0307 	mvn.w	r3, #7
 80098f2:	e029      	b.n	8009948 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	61bb      	str	r3, [r7, #24]
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1dd      	bne.n	80098bc <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	3301      	adds	r3, #1
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	429a      	cmp	r2, r3
 800990c:	dbcf      	blt.n	80098ae <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00c      	beq.n	800992e <tcp_bind+0xea>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d008      	beq.n	800992e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <tcp_bind+0xe4>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	e000      	b.n	800992a <tcp_bind+0xe6>
 8009928:	2300      	movs	r3, #0
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	88fa      	ldrh	r2, [r7, #6]
 8009932:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <tcp_bind+0x120>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	60da      	str	r2, [r3, #12]
 800993c:	4a09      	ldr	r2, [pc, #36]	; (8009964 <tcp_bind+0x120>)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	f004 fed1 	bl	800e6e8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3720      	adds	r7, #32
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	0801b340 	.word	0x0801b340
 8009954:	0801979c 	.word	0x0801979c
 8009958:	08019868 	.word	0x08019868
 800995c:	080197d8 	.word	0x080197d8
 8009960:	0801b308 	.word	0x0801b308
 8009964:	20003958 	.word	0x20003958

08009968 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8009976:	68b8      	ldr	r0, [r7, #8]
 8009978:	f7ff ff58 	bl	800982c <tcp_abort>

  return ERR_ABRT;
 800997c:	f06f 030c 	mvn.w	r3, #12
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	2200      	movs	r2, #0
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f806 	bl	80099ac <tcp_listen_with_backlog_and_err>
 80099a0:	4603      	mov	r3, r0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	460b      	mov	r3, r1
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	7d1b      	ldrb	r3, [r3, #20]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d009      	beq.n	80099da <tcp_listen_with_backlog_and_err+0x2e>
 80099c6:	4b3f      	ldr	r3, [pc, #252]	; (8009ac4 <tcp_listen_with_backlog_and_err+0x118>)
 80099c8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 80099cc:	493e      	ldr	r1, [pc, #248]	; (8009ac8 <tcp_listen_with_backlog_and_err+0x11c>)
 80099ce:	483f      	ldr	r0, [pc, #252]	; (8009acc <tcp_listen_with_backlog_and_err+0x120>)
 80099d0:	f00d fb1c 	bl	801700c <iprintf>
 80099d4:	23f1      	movs	r3, #241	; 0xf1
 80099d6:	76fb      	strb	r3, [r7, #27]
 80099d8:	e069      	b.n	8009aae <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	7d1b      	ldrb	r3, [r3, #20]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d104      	bne.n	80099ec <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80099e6:	23f7      	movs	r3, #247	; 0xf7
 80099e8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80099ea:	e060      	b.n	8009aae <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80099ec:	2002      	movs	r0, #2
 80099ee:	f7fe fc9d 	bl	800832c <memp_malloc>
 80099f2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80099fa:	23ff      	movs	r3, #255	; 0xff
 80099fc:	76fb      	strb	r3, [r7, #27]
    goto done;
 80099fe:	e056      	b.n	8009aae <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	691a      	ldr	r2, [r3, #16]
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8ada      	ldrh	r2, [r3, #22]
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	2201      	movs	r2, #1
 8009a14:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	7d5a      	ldrb	r2, [r3, #21]
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	7a1a      	ldrb	r2, [r3, #8]
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	7a9a      	ldrb	r2, [r3, #10]
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	7a5a      	ldrb	r2, [r3, #9]
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	8adb      	ldrh	r3, [r3, #22]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d021      	beq.n	8009a8a <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009a46:	4b22      	ldr	r3, [pc, #136]	; (8009ad0 <tcp_listen_with_backlog_and_err+0x124>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d105      	bne.n	8009a5c <tcp_listen_with_backlog_and_err+0xb0>
 8009a50:	4b1f      	ldr	r3, [pc, #124]	; (8009ad0 <tcp_listen_with_backlog_and_err+0x124>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	4a1e      	ldr	r2, [pc, #120]	; (8009ad0 <tcp_listen_with_backlog_and_err+0x124>)
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	e013      	b.n	8009a84 <tcp_listen_with_backlog_and_err+0xd8>
 8009a5c:	4b1c      	ldr	r3, [pc, #112]	; (8009ad0 <tcp_listen_with_backlog_and_err+0x124>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e00c      	b.n	8009a7e <tcp_listen_with_backlog_and_err+0xd2>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d104      	bne.n	8009a78 <tcp_listen_with_backlog_and_err+0xcc>
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	60da      	str	r2, [r3, #12]
 8009a76:	e005      	b.n	8009a84 <tcp_listen_with_backlog_and_err+0xd8>
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1ef      	bne.n	8009a64 <tcp_listen_with_backlog_and_err+0xb8>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	f7fe fc99 	bl	80083c4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <tcp_listen_with_backlog_and_err+0x128>)
 8009a96:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009a98:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <tcp_listen_with_backlog_and_err+0x12c>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	60da      	str	r2, [r3, #12]
 8009aa0:	4a0d      	ldr	r2, [pc, #52]	; (8009ad8 <tcp_listen_with_backlog_and_err+0x12c>)
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	f004 fe1f 	bl	800e6e8 <tcp_timer_needed>
  res = ERR_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	7efa      	ldrb	r2, [r7, #27]
 8009ab8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009aba:	69fb      	ldr	r3, [r7, #28]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3720      	adds	r7, #32
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	0801979c 	.word	0x0801979c
 8009ac8:	08019890 	.word	0x08019890
 8009acc:	080197d8 	.word	0x080197d8
 8009ad0:	20003958 	.word	0x20003958
 8009ad4:	08009969 	.word	0x08009969
 8009ad8:	20003954 	.word	0x20003954

08009adc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009aec:	4413      	add	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009af8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009afc:	bf28      	it	cs
 8009afe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009b02:	b292      	uxth	r2, r2
 8009b04:	4413      	add	r3, r2
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	db08      	blt.n	8009b20 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	e020      	b.n	8009b62 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dd03      	ble.n	8009b36 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b34:	e014      	b.n	8009b60 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b48:	d306      	bcc.n	8009b58 <tcp_update_rcv_ann_wnd+0x7c>
 8009b4a:	4b08      	ldr	r3, [pc, #32]	; (8009b6c <tcp_update_rcv_ann_wnd+0x90>)
 8009b4c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8009b50:	4907      	ldr	r1, [pc, #28]	; (8009b70 <tcp_update_rcv_ann_wnd+0x94>)
 8009b52:	4808      	ldr	r0, [pc, #32]	; (8009b74 <tcp_update_rcv_ann_wnd+0x98>)
 8009b54:	f00d fa5a 	bl	801700c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009b60:	2300      	movs	r3, #0
  }
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0801979c 	.word	0x0801979c
 8009b70:	080198b4 	.word	0x080198b4
 8009b74:	080197d8 	.word	0x080197d8

08009b78 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7d1b      	ldrb	r3, [r3, #20]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d106      	bne.n	8009b9a <tcp_recved+0x22>
 8009b8c:	4b23      	ldr	r3, [pc, #140]	; (8009c1c <tcp_recved+0xa4>)
 8009b8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009b92:	4923      	ldr	r1, [pc, #140]	; (8009c20 <tcp_recved+0xa8>)
 8009b94:	4823      	ldr	r0, [pc, #140]	; (8009c24 <tcp_recved+0xac>)
 8009b96:	f00d fa39 	bl	801700c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b9e:	887b      	ldrh	r3, [r7, #2]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009bb0:	d904      	bls.n	8009bbc <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009bb8:	851a      	strh	r2, [r3, #40]	; 0x28
 8009bba:	e017      	b.n	8009bec <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d113      	bne.n	8009bec <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7d1b      	ldrb	r3, [r3, #20]
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	d003      	beq.n	8009bd4 <tcp_recved+0x5c>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	7d1b      	ldrb	r3, [r3, #20]
 8009bd0:	2b09      	cmp	r3, #9
 8009bd2:	d104      	bne.n	8009bde <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009bda:	851a      	strh	r2, [r3, #40]	; 0x28
 8009bdc:	e006      	b.n	8009bec <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8009bde:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <tcp_recved+0xa4>)
 8009be0:	f240 322d 	movw	r2, #813	; 0x32d
 8009be4:	4910      	ldr	r1, [pc, #64]	; (8009c28 <tcp_recved+0xb0>)
 8009be6:	480f      	ldr	r0, [pc, #60]	; (8009c24 <tcp_recved+0xac>)
 8009be8:	f00d fa10 	bl	801700c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ff75 	bl	8009adc <tcp_update_rcv_ann_wnd>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009bfc:	db09      	blt.n	8009c12 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7e9b      	ldrb	r3, [r3, #26]
 8009c02:	f043 0302 	orr.w	r3, r3, #2
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f004 f891 	bl	800dd34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009c12:	bf00      	nop
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	0801979c 	.word	0x0801979c
 8009c20:	080198d0 	.word	0x080198d0
 8009c24:	080197d8 	.word	0x080197d8
 8009c28:	080198f8 	.word	0x080198f8

08009c2c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8009c36:	4b1d      	ldr	r3, [pc, #116]	; (8009cac <tcp_new_port+0x80>)
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	1c5a      	adds	r2, r3, #1
 8009c3c:	b291      	uxth	r1, r2
 8009c3e:	4a1b      	ldr	r2, [pc, #108]	; (8009cac <tcp_new_port+0x80>)
 8009c40:	8011      	strh	r1, [r2, #0]
 8009c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d103      	bne.n	8009c52 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009c4a:	4b18      	ldr	r3, [pc, #96]	; (8009cac <tcp_new_port+0x80>)
 8009c4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009c50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009c52:	2300      	movs	r3, #0
 8009c54:	71fb      	strb	r3, [r7, #7]
 8009c56:	e01e      	b.n	8009c96 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	4a15      	ldr	r2, [pc, #84]	; (8009cb0 <tcp_new_port+0x84>)
 8009c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	e011      	b.n	8009c8a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	8ada      	ldrh	r2, [r3, #22]
 8009c6a:	4b10      	ldr	r3, [pc, #64]	; (8009cac <tcp_new_port+0x80>)
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d108      	bne.n	8009c84 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009c72:	88bb      	ldrh	r3, [r7, #4]
 8009c74:	3301      	adds	r3, #1
 8009c76:	80bb      	strh	r3, [r7, #4]
 8009c78:	88bb      	ldrh	r3, [r7, #4]
 8009c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c7e:	d3da      	bcc.n	8009c36 <tcp_new_port+0xa>
          return 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e00d      	b.n	8009ca0 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1ea      	bne.n	8009c66 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009c90:	79fb      	ldrb	r3, [r7, #7]
 8009c92:	3301      	adds	r3, #1
 8009c94:	71fb      	strb	r3, [r7, #7]
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d9dd      	bls.n	8009c58 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009c9c:	4b03      	ldr	r3, [pc, #12]	; (8009cac <tcp_new_port+0x80>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20000118 	.word	0x20000118
 8009cb0:	0801b308 	.word	0x0801b308

08009cb4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009cb4:	b5b0      	push	{r4, r5, r7, lr}
 8009cb6:	b08c      	sub	sp, #48	; 0x30
 8009cb8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8009cbe:	4b97      	ldr	r3, [pc, #604]	; (8009f1c <tcp_slowtmr+0x268>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a95      	ldr	r2, [pc, #596]	; (8009f1c <tcp_slowtmr+0x268>)
 8009cc6:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009cc8:	4b95      	ldr	r3, [pc, #596]	; (8009f20 <tcp_slowtmr+0x26c>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	4b93      	ldr	r3, [pc, #588]	; (8009f20 <tcp_slowtmr+0x26c>)
 8009cd2:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8009cd8:	4b92      	ldr	r3, [pc, #584]	; (8009f24 <tcp_slowtmr+0x270>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009cde:	e227      	b.n	800a130 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	7d1b      	ldrb	r3, [r3, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d106      	bne.n	8009cf6 <tcp_slowtmr+0x42>
 8009ce8:	4b8f      	ldr	r3, [pc, #572]	; (8009f28 <tcp_slowtmr+0x274>)
 8009cea:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8009cee:	498f      	ldr	r1, [pc, #572]	; (8009f2c <tcp_slowtmr+0x278>)
 8009cf0:	488f      	ldr	r0, [pc, #572]	; (8009f30 <tcp_slowtmr+0x27c>)
 8009cf2:	f00d f98b 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	7d1b      	ldrb	r3, [r3, #20]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d106      	bne.n	8009d0c <tcp_slowtmr+0x58>
 8009cfe:	4b8a      	ldr	r3, [pc, #552]	; (8009f28 <tcp_slowtmr+0x274>)
 8009d00:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8009d04:	498b      	ldr	r1, [pc, #556]	; (8009f34 <tcp_slowtmr+0x280>)
 8009d06:	488a      	ldr	r0, [pc, #552]	; (8009f30 <tcp_slowtmr+0x27c>)
 8009d08:	f00d f980 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	7d1b      	ldrb	r3, [r3, #20]
 8009d10:	2b0a      	cmp	r3, #10
 8009d12:	d106      	bne.n	8009d22 <tcp_slowtmr+0x6e>
 8009d14:	4b84      	ldr	r3, [pc, #528]	; (8009f28 <tcp_slowtmr+0x274>)
 8009d16:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8009d1a:	4987      	ldr	r1, [pc, #540]	; (8009f38 <tcp_slowtmr+0x284>)
 8009d1c:	4884      	ldr	r0, [pc, #528]	; (8009f30 <tcp_slowtmr+0x27c>)
 8009d1e:	f00d f975 	bl	801700c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	7f5a      	ldrb	r2, [r3, #29]
 8009d26:	4b7e      	ldr	r3, [pc, #504]	; (8009f20 <tcp_slowtmr+0x26c>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d103      	bne.n	8009d36 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8009d34:	e1fc      	b.n	800a130 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009d36:	4b7a      	ldr	r3, [pc, #488]	; (8009f20 <tcp_slowtmr+0x26c>)
 8009d38:	781a      	ldrb	r2, [r3, #0]
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	7d1b      	ldrb	r3, [r3, #20]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d108      	bne.n	8009d60 <tcp_slowtmr+0xac>
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d903      	bls.n	8009d60 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8009d58:	7ffb      	ldrb	r3, [r7, #31]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	77fb      	strb	r3, [r7, #31]
 8009d5e:	e0a2      	b.n	8009ea6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d66:	2b0b      	cmp	r3, #11
 8009d68:	d903      	bls.n	8009d72 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009d6a:	7ffb      	ldrb	r3, [r7, #31]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e099      	b.n	8009ea6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d032      	beq.n	8009de2 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009d82:	3b01      	subs	r3, #1
 8009d84:	4a6d      	ldr	r2, [pc, #436]	; (8009f3c <tcp_slowtmr+0x288>)
 8009d86:	5cd3      	ldrb	r3, [r2, r3]
 8009d88:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009d90:	7cfa      	ldrb	r2, [r7, #19]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d907      	bls.n	8009da6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8009dac:	7cfa      	ldrb	r2, [r7, #19]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d879      	bhi.n	8009ea6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8009db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009db4:	f004 fbd8 	bl	800e568 <tcp_zero_window_probe>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d173      	bne.n	8009ea6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009dcc:	2b06      	cmp	r3, #6
 8009dce:	d86a      	bhi.n	8009ea6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009de0:	e061      	b.n	8009ea6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	db08      	blt.n	8009dfe <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	3301      	adds	r3, #1
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	b21a      	sxth	r2, r3
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d04f      	beq.n	8009ea6 <tcp_slowtmr+0x1f2>
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009e12:	429a      	cmp	r2, r3
 8009e14:	db47      	blt.n	8009ea6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	7d1b      	ldrb	r3, [r3, #20]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d018      	beq.n	8009e50 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e24:	2b0c      	cmp	r3, #12
 8009e26:	bf28      	it	cs
 8009e28:	230c      	movcs	r3, #12
 8009e2a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009e32:	10db      	asrs	r3, r3, #3
 8009e34:	b21b      	sxth	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009e3e:	4413      	add	r3, r2
 8009e40:	7dfa      	ldrb	r2, [r7, #23]
 8009e42:	493f      	ldr	r1, [pc, #252]	; (8009f40 <tcp_slowtmr+0x28c>)
 8009e44:	5c8a      	ldrb	r2, [r1, r2]
 8009e46:	4093      	lsls	r3, r2
 8009e48:	b21a      	sxth	r2, r3
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	2200      	movs	r2, #0
 8009e54:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e62:	4293      	cmp	r3, r2
 8009e64:	bf28      	it	cs
 8009e66:	4613      	movcs	r3, r2
 8009e68:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8009e6a:	8abb      	ldrh	r3, [r7, #20]
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d206      	bcs.n	8009e96 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8009ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ea2:	f004 fa47 	bl	800e334 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	7d1b      	ldrb	r3, [r3, #20]
 8009eaa:	2b06      	cmp	r3, #6
 8009eac:	d10f      	bne.n	8009ece <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	7e9b      	ldrb	r3, [r3, #26]
 8009eb2:	f003 0310 	and.w	r3, r3, #16
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d009      	beq.n	8009ece <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009eba:	4b18      	ldr	r3, [pc, #96]	; (8009f1c <tcp_slowtmr+0x268>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b28      	cmp	r3, #40	; 0x28
 8009ec6:	d902      	bls.n	8009ece <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009ec8:	7ffb      	ldrb	r3, [r7, #31]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	7a1b      	ldrb	r3, [r3, #8]
 8009ed2:	f003 0308 	and.w	r3, r3, #8
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d05d      	beq.n	8009f96 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d003      	beq.n	8009eea <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8009ee6:	2b07      	cmp	r3, #7
 8009ee8:	d155      	bne.n	8009f96 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009eea:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <tcp_slowtmr+0x268>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009efa:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009efe:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009f02:	4910      	ldr	r1, [pc, #64]	; (8009f44 <tcp_slowtmr+0x290>)
 8009f04:	fba1 1303 	umull	r1, r3, r1, r3
 8009f08:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d91c      	bls.n	8009f48 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009f0e:	7ffb      	ldrb	r3, [r7, #31]
 8009f10:	3301      	adds	r3, #1
 8009f12:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8009f14:	7fbb      	ldrb	r3, [r7, #30]
 8009f16:	3301      	adds	r3, #1
 8009f18:	77bb      	strb	r3, [r7, #30]
 8009f1a:	e03c      	b.n	8009f96 <tcp_slowtmr+0x2e2>
 8009f1c:	20003950 	.word	0x20003950
 8009f20:	20000246 	.word	0x20000246
 8009f24:	2000394c 	.word	0x2000394c
 8009f28:	0801979c 	.word	0x0801979c
 8009f2c:	0801994c 	.word	0x0801994c
 8009f30:	080197d8 	.word	0x080197d8
 8009f34:	08019978 	.word	0x08019978
 8009f38:	080199a4 	.word	0x080199a4
 8009f3c:	0801b300 	.word	0x0801b300
 8009f40:	0801b2f0 	.word	0x0801b2f0
 8009f44:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f48:	4b97      	ldr	r3, [pc, #604]	; (800a1a8 <tcp_slowtmr+0x4f4>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009f5e:	4618      	mov	r0, r3
 8009f60:	4b92      	ldr	r3, [pc, #584]	; (800a1ac <tcp_slowtmr+0x4f8>)
 8009f62:	fb03 f300 	mul.w	r3, r3, r0
 8009f66:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8009f68:	4991      	ldr	r1, [pc, #580]	; (800a1b0 <tcp_slowtmr+0x4fc>)
 8009f6a:	fba1 1303 	umull	r1, r3, r1, r3
 8009f6e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d910      	bls.n	8009f96 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8009f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f76:	f004 faba 	bl	800e4ee <tcp_keepalive>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8009f7e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d107      	bne.n	8009f96 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8009f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f88:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d016      	beq.n	8009fcc <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8009f9e:	4b82      	ldr	r3, [pc, #520]	; (800a1a8 <tcp_slowtmr+0x4f4>)
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	1ad2      	subs	r2, r2, r3
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009fae:	4619      	mov	r1, r3
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	440b      	add	r3, r1
 8009fb6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d307      	bcc.n	8009fcc <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fa04 	bl	800a3ce <tcp_segs_free>
      pcb->ooseq = NULL;
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	2200      	movs	r2, #0
 8009fca:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	7d1b      	ldrb	r3, [r3, #20]
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d109      	bne.n	8009fe8 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009fd4:	4b74      	ldr	r3, [pc, #464]	; (800a1a8 <tcp_slowtmr+0x4f4>)
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b28      	cmp	r3, #40	; 0x28
 8009fe0:	d902      	bls.n	8009fe8 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009fe2:	7ffb      	ldrb	r3, [r7, #31]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	7d1b      	ldrb	r3, [r3, #20]
 8009fec:	2b09      	cmp	r3, #9
 8009fee:	d109      	bne.n	800a004 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009ff0:	4b6d      	ldr	r3, [pc, #436]	; (800a1a8 <tcp_slowtmr+0x4f4>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2bf0      	cmp	r3, #240	; 0xf0
 8009ffc:	d902      	bls.n	800a004 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8009ffe:	7ffb      	ldrb	r3, [r7, #31]
 800a000:	3301      	adds	r3, #1
 800a002:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a004:	7ffb      	ldrb	r3, [r7, #31]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d05d      	beq.n	800a0c6 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a010:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a014:	f000 fc4c 	bl	800a8b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d010      	beq.n	800a040 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a01e:	4b65      	ldr	r3, [pc, #404]	; (800a1b4 <tcp_slowtmr+0x500>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a024:	429a      	cmp	r2, r3
 800a026:	d106      	bne.n	800a036 <tcp_slowtmr+0x382>
 800a028:	4b63      	ldr	r3, [pc, #396]	; (800a1b8 <tcp_slowtmr+0x504>)
 800a02a:	f240 4289 	movw	r2, #1161	; 0x489
 800a02e:	4963      	ldr	r1, [pc, #396]	; (800a1bc <tcp_slowtmr+0x508>)
 800a030:	4863      	ldr	r0, [pc, #396]	; (800a1c0 <tcp_slowtmr+0x50c>)
 800a032:	f00c ffeb 	bl	801700c <iprintf>
        prev->next = pcb->next;
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	60da      	str	r2, [r3, #12]
 800a03e:	e00f      	b.n	800a060 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a040:	4b5c      	ldr	r3, [pc, #368]	; (800a1b4 <tcp_slowtmr+0x500>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a046:	429a      	cmp	r2, r3
 800a048:	d006      	beq.n	800a058 <tcp_slowtmr+0x3a4>
 800a04a:	4b5b      	ldr	r3, [pc, #364]	; (800a1b8 <tcp_slowtmr+0x504>)
 800a04c:	f240 428d 	movw	r2, #1165	; 0x48d
 800a050:	495c      	ldr	r1, [pc, #368]	; (800a1c4 <tcp_slowtmr+0x510>)
 800a052:	485b      	ldr	r0, [pc, #364]	; (800a1c0 <tcp_slowtmr+0x50c>)
 800a054:	f00c ffda 	bl	801700c <iprintf>
        tcp_active_pcbs = pcb->next;
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	4a55      	ldr	r2, [pc, #340]	; (800a1b4 <tcp_slowtmr+0x500>)
 800a05e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a060:	7fbb      	ldrb	r3, [r7, #30]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d010      	beq.n	800a088 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a06e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	1d1d      	adds	r5, r3, #4
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	8adb      	ldrh	r3, [r3, #22]
 800a078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07a:	8b12      	ldrh	r2, [r2, #24]
 800a07c:	9201      	str	r2, [sp, #4]
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	462b      	mov	r3, r5
 800a082:	4622      	mov	r2, r4
 800a084:	f004 f8e0 	bl	800e248 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a090:	7d1b      	ldrb	r3, [r3, #20]
 800a092:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f7fe f98f 	bl	80083c4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800a0a6:	4b48      	ldr	r3, [pc, #288]	; (800a1c8 <tcp_slowtmr+0x514>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d004      	beq.n	800a0bc <tcp_slowtmr+0x408>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f06f 010c 	mvn.w	r1, #12
 800a0b8:	68b8      	ldr	r0, [r7, #8]
 800a0ba:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a0bc:	4b42      	ldr	r3, [pc, #264]	; (800a1c8 <tcp_slowtmr+0x514>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d035      	beq.n	800a130 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800a0c4:	e606      	b.n	8009cd4 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	7edb      	ldrb	r3, [r3, #27]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	7eda      	ldrb	r2, [r3, #27]
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	7f1b      	ldrb	r3, [r3, #28]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d323      	bcc.n	800a130 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800a0e8:	6a3b      	ldr	r3, [r7, #32]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a0ee:	4b36      	ldr	r3, [pc, #216]	; (800a1c8 <tcp_slowtmr+0x514>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <tcp_slowtmr+0x460>
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a104:	6a3a      	ldr	r2, [r7, #32]
 800a106:	6912      	ldr	r2, [r2, #16]
 800a108:	6a39      	ldr	r1, [r7, #32]
 800a10a:	4610      	mov	r0, r2
 800a10c:	4798      	blx	r3
 800a10e:	4603      	mov	r3, r0
 800a110:	777b      	strb	r3, [r7, #29]
 800a112:	e001      	b.n	800a118 <tcp_slowtmr+0x464>
 800a114:	2300      	movs	r3, #0
 800a116:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800a118:	4b2b      	ldr	r3, [pc, #172]	; (800a1c8 <tcp_slowtmr+0x514>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d000      	beq.n	800a122 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800a120:	e5d8      	b.n	8009cd4 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a122:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800a12a:	6a38      	ldr	r0, [r7, #32]
 800a12c:	f003 fe02 	bl	800dd34 <tcp_output>
  while (pcb != NULL) {
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	2b00      	cmp	r3, #0
 800a134:	f47f add4 	bne.w	8009ce0 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800a13c:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <tcp_slowtmr+0x518>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a142:	e068      	b.n	800a216 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	7d1b      	ldrb	r3, [r3, #20]
 800a148:	2b0a      	cmp	r3, #10
 800a14a:	d006      	beq.n	800a15a <tcp_slowtmr+0x4a6>
 800a14c:	4b1a      	ldr	r3, [pc, #104]	; (800a1b8 <tcp_slowtmr+0x504>)
 800a14e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a152:	491f      	ldr	r1, [pc, #124]	; (800a1d0 <tcp_slowtmr+0x51c>)
 800a154:	481a      	ldr	r0, [pc, #104]	; (800a1c0 <tcp_slowtmr+0x50c>)
 800a156:	f00c ff59 	bl	801700c <iprintf>
    pcb_remove = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <tcp_slowtmr+0x4f4>)
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	2bf0      	cmp	r3, #240	; 0xf0
 800a16a:	d902      	bls.n	800a172 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800a16c:	7ffb      	ldrb	r3, [r7, #31]
 800a16e:	3301      	adds	r3, #1
 800a170:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a172:	7ffb      	ldrb	r3, [r7, #31]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d049      	beq.n	800a20c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a17a:	f000 fb99 	bl	800a8b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d029      	beq.n	800a1d8 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a184:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <tcp_slowtmr+0x518>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d106      	bne.n	800a19c <tcp_slowtmr+0x4e8>
 800a18e:	4b0a      	ldr	r3, [pc, #40]	; (800a1b8 <tcp_slowtmr+0x504>)
 800a190:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a194:	490f      	ldr	r1, [pc, #60]	; (800a1d4 <tcp_slowtmr+0x520>)
 800a196:	480a      	ldr	r0, [pc, #40]	; (800a1c0 <tcp_slowtmr+0x50c>)
 800a198:	f00c ff38 	bl	801700c <iprintf>
        prev->next = pcb->next;
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	60da      	str	r2, [r3, #12]
 800a1a4:	e028      	b.n	800a1f8 <tcp_slowtmr+0x544>
 800a1a6:	bf00      	nop
 800a1a8:	20003950 	.word	0x20003950
 800a1ac:	000124f8 	.word	0x000124f8
 800a1b0:	10624dd3 	.word	0x10624dd3
 800a1b4:	2000394c 	.word	0x2000394c
 800a1b8:	0801979c 	.word	0x0801979c
 800a1bc:	080199d4 	.word	0x080199d4
 800a1c0:	080197d8 	.word	0x080197d8
 800a1c4:	08019a00 	.word	0x08019a00
 800a1c8:	20003948 	.word	0x20003948
 800a1cc:	2000395c 	.word	0x2000395c
 800a1d0:	08019a2c 	.word	0x08019a2c
 800a1d4:	08019a5c 	.word	0x08019a5c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a1d8:	4b12      	ldr	r3, [pc, #72]	; (800a224 <tcp_slowtmr+0x570>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d006      	beq.n	800a1f0 <tcp_slowtmr+0x53c>
 800a1e2:	4b11      	ldr	r3, [pc, #68]	; (800a228 <tcp_slowtmr+0x574>)
 800a1e4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800a1e8:	4910      	ldr	r1, [pc, #64]	; (800a22c <tcp_slowtmr+0x578>)
 800a1ea:	4811      	ldr	r0, [pc, #68]	; (800a230 <tcp_slowtmr+0x57c>)
 800a1ec:	f00c ff0e 	bl	801700c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	4a0b      	ldr	r2, [pc, #44]	; (800a224 <tcp_slowtmr+0x570>)
 800a1f6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800a202:	69b9      	ldr	r1, [r7, #24]
 800a204:	2001      	movs	r0, #1
 800a206:	f7fe f8dd 	bl	80083c4 <memp_free>
 800a20a:	e004      	b.n	800a216 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d193      	bne.n	800a144 <tcp_slowtmr+0x490>
    }
  }
}
 800a21c:	bf00      	nop
 800a21e:	3728      	adds	r7, #40	; 0x28
 800a220:	46bd      	mov	sp, r7
 800a222:	bdb0      	pop	{r4, r5, r7, pc}
 800a224:	2000395c 	.word	0x2000395c
 800a228:	0801979c 	.word	0x0801979c
 800a22c:	08019a84 	.word	0x08019a84
 800a230:	080197d8 	.word	0x080197d8

0800a234 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a23a:	4b2d      	ldr	r3, [pc, #180]	; (800a2f0 <tcp_fasttmr+0xbc>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	3301      	adds	r3, #1
 800a240:	b2da      	uxtb	r2, r3
 800a242:	4b2b      	ldr	r3, [pc, #172]	; (800a2f0 <tcp_fasttmr+0xbc>)
 800a244:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a246:	4b2b      	ldr	r3, [pc, #172]	; (800a2f4 <tcp_fasttmr+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a24c:	e048      	b.n	800a2e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	7f5a      	ldrb	r2, [r3, #29]
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <tcp_fasttmr+0xbc>)
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d03f      	beq.n	800a2da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a25a:	4b25      	ldr	r3, [pc, #148]	; (800a2f0 <tcp_fasttmr+0xbc>)
 800a25c:	781a      	ldrb	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	7e9b      	ldrb	r3, [r3, #26]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d010      	beq.n	800a290 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	7e9b      	ldrb	r3, [r3, #26]
 800a272:	f043 0302 	orr.w	r3, r3, #2
 800a276:	b2da      	uxtb	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f003 fd59 	bl	800dd34 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7e9b      	ldrb	r3, [r3, #26]
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	7e9b      	ldrb	r3, [r3, #26]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d009      	beq.n	800a2b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	7e9b      	ldrb	r3, [r3, #26]
 800a2a0:	f023 0308 	bic.w	r3, r3, #8
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff f98e 	bl	80095cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00a      	beq.n	800a2d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a2be:	4b0e      	ldr	r3, [pc, #56]	; (800a2f8 <tcp_fasttmr+0xc4>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f819 	bl	800a2fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <tcp_fasttmr+0xc4>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d000      	beq.n	800a2d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a2d2:	e7b8      	b.n	800a246 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	607b      	str	r3, [r7, #4]
 800a2d8:	e002      	b.n	800a2e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1b3      	bne.n	800a24e <tcp_fasttmr+0x1a>
    }
  }
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000246 	.word	0x20000246
 800a2f4:	2000394c 	.word	0x2000394c
 800a2f8:	20003948 	.word	0x20003948

0800a2fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a308:	7b5b      	ldrb	r3, [r3, #13]
 800a30a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a310:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00b      	beq.n	800a33a <tcp_process_refused_data+0x3e>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6918      	ldr	r0, [r3, #16]
 800a32c:	2300      	movs	r3, #0
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	6879      	ldr	r1, [r7, #4]
 800a332:	47a0      	blx	r4
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
 800a338:	e007      	b.n	800a34a <tcp_process_refused_data+0x4e>
 800a33a:	2300      	movs	r3, #0
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	2000      	movs	r0, #0
 800a342:	f000 f89b 	bl	800a47c <tcp_recv_null>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d12a      	bne.n	800a3a8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800a352:	7bbb      	ldrb	r3, [r7, #14]
 800a354:	f003 0320 	and.w	r3, r3, #32
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d033      	beq.n	800a3c4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a360:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a364:	d005      	beq.n	800a372 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a36a:	3301      	adds	r3, #1
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00b      	beq.n	800a394 <tcp_process_refused_data+0x98>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6918      	ldr	r0, [r3, #16]
 800a386:	2300      	movs	r3, #0
 800a388:	2200      	movs	r2, #0
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	47a0      	blx	r4
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]
 800a392:	e001      	b.n	800a398 <tcp_process_refused_data+0x9c>
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a39c:	f113 0f0d 	cmn.w	r3, #13
 800a3a0:	d110      	bne.n	800a3c4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800a3a2:	f06f 030c 	mvn.w	r3, #12
 800a3a6:	e00e      	b.n	800a3c6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800a3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ac:	f113 0f0d 	cmn.w	r3, #13
 800a3b0:	d102      	bne.n	800a3b8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a3b2:	f06f 030c 	mvn.w	r3, #12
 800a3b6:	e006      	b.n	800a3c6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800a3be:	f06f 0304 	mvn.w	r3, #4
 800a3c2:	e000      	b.n	800a3c6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd90      	pop	{r4, r7, pc}

0800a3ce <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a3d6:	e007      	b.n	800a3e8 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f809 	bl	800a3f6 <tcp_seg_free>
    seg = next;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f4      	bne.n	800a3d8 <tcp_segs_free+0xa>
  }
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00c      	beq.n	800a41e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fd09 	bl	8008e28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	2003      	movs	r0, #3
 800a41a:	f7fd ffd3 	bl	80083c4 <memp_free>
  }
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a426:	b480      	push	{r7}
 800a428:	b083      	sub	sp, #12
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	755a      	strb	r2, [r3, #21]
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a44c:	2003      	movs	r0, #3
 800a44e:	f7fd ff6d 	bl	800832c <memp_malloc>
 800a452:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <tcp_seg_copy+0x1a>
    return NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e00a      	b.n	800a474 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a45e:	2210      	movs	r2, #16
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f00c fd17 	bl	8016e96 <memcpy>
  pbuf_ref(cseg->p);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fd87 	bl	8008f80 <pbuf_ref>
  return cseg;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d009      	beq.n	800a4a4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	891b      	ldrh	r3, [r3, #8]
 800a494:	4619      	mov	r1, r3
 800a496:	68b8      	ldr	r0, [r7, #8]
 800a498:	f7ff fb6e 	bl	8009b78 <tcp_recved>
    pbuf_free(p);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fe fcc3 	bl	8008e28 <pbuf_free>
 800a4a2:	e008      	b.n	800a4b6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800a4a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800a4ac:	68b8      	ldr	r0, [r7, #8]
 800a4ae:	f7ff f8f3 	bl	8009698 <tcp_close>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	e000      	b.n	800a4b8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	db01      	blt.n	800a4d6 <tcp_kill_prio+0x16>
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	e000      	b.n	800a4d8 <tcp_kill_prio+0x18>
 800a4d6:	237f      	movs	r3, #127	; 0x7f
 800a4d8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4e2:	4b16      	ldr	r3, [pc, #88]	; (800a53c <tcp_kill_prio+0x7c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	e01a      	b.n	800a520 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	7d5b      	ldrb	r3, [r3, #21]
 800a4ee:	7afa      	ldrb	r2, [r7, #11]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d312      	bcc.n	800a51a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a4f4:	4b12      	ldr	r3, [pc, #72]	; (800a540 <tcp_kill_prio+0x80>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	429a      	cmp	r2, r3
 800a502:	d80a      	bhi.n	800a51a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800a504:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <tcp_kill_prio+0x80>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	7d5b      	ldrb	r3, [r3, #21]
 800a518:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	617b      	str	r3, [r7, #20]
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e1      	bne.n	800a4ea <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a52c:	6938      	ldr	r0, [r7, #16]
 800a52e:	f7ff f97d 	bl	800982c <tcp_abort>
  }
}
 800a532:	bf00      	nop
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	2000394c 	.word	0x2000394c
 800a540:	20003950 	.word	0x20003950

0800a544 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	2b08      	cmp	r3, #8
 800a552:	d009      	beq.n	800a568 <tcp_kill_state+0x24>
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b09      	cmp	r3, #9
 800a558:	d006      	beq.n	800a568 <tcp_kill_state+0x24>
 800a55a:	4b1a      	ldr	r3, [pc, #104]	; (800a5c4 <tcp_kill_state+0x80>)
 800a55c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a560:	4919      	ldr	r1, [pc, #100]	; (800a5c8 <tcp_kill_state+0x84>)
 800a562:	481a      	ldr	r0, [pc, #104]	; (800a5cc <tcp_kill_state+0x88>)
 800a564:	f00c fd52 	bl	801700c <iprintf>

  inactivity = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a570:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <tcp_kill_state+0x8c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	e017      	b.n	800a5a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	7d1b      	ldrb	r3, [r3, #20]
 800a57c:	79fa      	ldrb	r2, [r7, #7]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d10f      	bne.n	800a5a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a582:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <tcp_kill_state+0x90>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d807      	bhi.n	800a5a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <tcp_kill_state+0x90>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1e4      	bne.n	800a578 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	6938      	ldr	r0, [r7, #16]
 800a5b8:	f7ff f886 	bl	80096c8 <tcp_abandon>
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	0801979c 	.word	0x0801979c
 800a5c8:	08019aac 	.word	0x08019aac
 800a5cc:	080197d8 	.word	0x080197d8
 800a5d0:	2000394c 	.word	0x2000394c
 800a5d4:	20003950 	.word	0x20003950

0800a5d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5e6:	4b12      	ldr	r3, [pc, #72]	; (800a630 <tcp_kill_timewait+0x58>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e012      	b.n	800a614 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a5ee:	4b11      	ldr	r3, [pc, #68]	; (800a634 <tcp_kill_timewait+0x5c>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d807      	bhi.n	800a60e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <tcp_kill_timewait+0x5c>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e9      	bne.n	800a5ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a620:	68b8      	ldr	r0, [r7, #8]
 800a622:	f7ff f903 	bl	800982c <tcp_abort>
  }
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	2000395c 	.word	0x2000395c
 800a634:	20003950 	.word	0x20003950

0800a638 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a642:	2001      	movs	r0, #1
 800a644:	f7fd fe72 	bl	800832c <memp_malloc>
 800a648:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d124      	bne.n	800a69a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a650:	f7ff ffc2 	bl	800a5d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a654:	2001      	movs	r0, #1
 800a656:	f7fd fe69 	bl	800832c <memp_malloc>
 800a65a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11b      	bne.n	800a69a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a662:	2009      	movs	r0, #9
 800a664:	f7ff ff6e 	bl	800a544 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a668:	2001      	movs	r0, #1
 800a66a:	f7fd fe5f 	bl	800832c <memp_malloc>
 800a66e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d111      	bne.n	800a69a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a676:	2008      	movs	r0, #8
 800a678:	f7ff ff64 	bl	800a544 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a67c:	2001      	movs	r0, #1
 800a67e:	f7fd fe55 	bl	800832c <memp_malloc>
 800a682:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d107      	bne.n	800a69a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff ff17 	bl	800a4c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a692:	2001      	movs	r0, #1
 800a694:	f7fd fe4a 	bl	800832c <memp_malloc>
 800a698:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d03f      	beq.n	800a720 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a6a0:	2298      	movs	r2, #152	; 0x98
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f00c fc01 	bl	8016eac <memset>
    pcb->prio = prio;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	79fa      	ldrb	r2, [r7, #7]
 800a6ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a6b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a6c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	22ff      	movs	r2, #255	; 0xff
 800a6ce:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a6d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2206      	movs	r2, #6
 800a6dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2206      	movs	r2, #6
 800a6e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a6f6:	4b0d      	ldr	r3, [pc, #52]	; (800a72c <tcp_alloc+0xf4>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <tcp_alloc+0xf8>)
 800a700:	781a      	ldrb	r2, [r3, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a70c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a08      	ldr	r2, [pc, #32]	; (800a734 <tcp_alloc+0xfc>)
 800a714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4a07      	ldr	r2, [pc, #28]	; (800a738 <tcp_alloc+0x100>)
 800a71c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a720:	68fb      	ldr	r3, [r7, #12]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20003950 	.word	0x20003950
 800a730:	20000246 	.word	0x20000246
 800a734:	0800a47d 	.word	0x0800a47d
 800a738:	006ddd00 	.word	0x006ddd00

0800a73c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a740:	2040      	movs	r0, #64	; 0x40
 800a742:	f7ff ff79 	bl	800a638 <tcp_alloc>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	611a      	str	r2, [r3, #16]
  }
}
 800a762:	bf00      	nop
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
	...

0800a770 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00e      	beq.n	800a79e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	7d1b      	ldrb	r3, [r3, #20]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d106      	bne.n	800a796 <tcp_recv+0x26>
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <tcp_recv+0x38>)
 800a78a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800a78e:	4907      	ldr	r1, [pc, #28]	; (800a7ac <tcp_recv+0x3c>)
 800a790:	4807      	ldr	r0, [pc, #28]	; (800a7b0 <tcp_recv+0x40>)
 800a792:	f00c fc3b 	bl	801700c <iprintf>
    pcb->recv = recv;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0801979c 	.word	0x0801979c
 800a7ac:	08019abc 	.word	0x08019abc
 800a7b0:	080197d8 	.word	0x080197d8

0800a7b4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00d      	beq.n	800a7e0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	7d1b      	ldrb	r3, [r3, #20]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d106      	bne.n	800a7da <tcp_sent+0x26>
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <tcp_sent+0x34>)
 800a7ce:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800a7d2:	4906      	ldr	r1, [pc, #24]	; (800a7ec <tcp_sent+0x38>)
 800a7d4:	4806      	ldr	r0, [pc, #24]	; (800a7f0 <tcp_sent+0x3c>)
 800a7d6:	f00c fc19 	bl	801700c <iprintf>
    pcb->sent = sent;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	0801979c 	.word	0x0801979c
 800a7ec:	08019ae4 	.word	0x08019ae4
 800a7f0:	080197d8 	.word	0x080197d8

0800a7f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00e      	beq.n	800a822 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d106      	bne.n	800a81a <tcp_err+0x26>
 800a80c:	4b07      	ldr	r3, [pc, #28]	; (800a82c <tcp_err+0x38>)
 800a80e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800a812:	4907      	ldr	r1, [pc, #28]	; (800a830 <tcp_err+0x3c>)
 800a814:	4807      	ldr	r0, [pc, #28]	; (800a834 <tcp_err+0x40>)
 800a816:	f00c fbf9 	bl	801700c <iprintf>
    pcb->errf = err;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800a822:	bf00      	nop
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	0801979c 	.word	0x0801979c
 800a830:	08019b0c 	.word	0x08019b0c
 800a834:	080197d8 	.word	0x080197d8

0800a838 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d008      	beq.n	800a85a <tcp_accept+0x22>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	7d1b      	ldrb	r3, [r3, #20]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d104      	bne.n	800a85a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	619a      	str	r2, [r3, #24]
  }
}
 800a85a:	bf00      	nop
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	7d1b      	ldrb	r3, [r3, #20]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d106      	bne.n	800a88c <tcp_poll+0x24>
 800a87e:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <tcp_poll+0x3c>)
 800a880:	f240 7203 	movw	r2, #1795	; 0x703
 800a884:	4908      	ldr	r1, [pc, #32]	; (800a8a8 <tcp_poll+0x40>)
 800a886:	4809      	ldr	r0, [pc, #36]	; (800a8ac <tcp_poll+0x44>)
 800a888:	f00c fbc0 	bl	801700c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	79fa      	ldrb	r2, [r7, #7]
 800a898:	771a      	strb	r2, [r3, #28]
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	0801979c 	.word	0x0801979c
 800a8a8:	08019b34 	.word	0x08019b34
 800a8ac:	080197d8 	.word	0x080197d8

0800a8b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	7d1b      	ldrb	r3, [r3, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d034      	beq.n	800a92a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a8c4:	2b0a      	cmp	r3, #10
 800a8c6:	d030      	beq.n	800a92a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d02c      	beq.n	800a92a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe faa3 	bl	8008e28 <pbuf_free>
      pcb->refused_data = NULL;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fd6e 	bl	800a3ce <tcp_segs_free>
    pcb->ooseq = NULL;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fd62 	bl	800a3ce <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff fd5d 	bl	800a3ce <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	669a      	str	r2, [r3, #104]	; 0x68
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d105      	bne.n	800a954 <tcp_pcb_remove+0x20>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e013      	b.n	800a97c <tcp_pcb_remove+0x48>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e00c      	b.n	800a976 <tcp_pcb_remove+0x42>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d104      	bne.n	800a970 <tcp_pcb_remove+0x3c>
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68da      	ldr	r2, [r3, #12]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	60da      	str	r2, [r3, #12]
 800a96e:	e005      	b.n	800a97c <tcp_pcb_remove+0x48>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d1ef      	bne.n	800a95c <tcp_pcb_remove+0x28>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2200      	movs	r2, #0
 800a980:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a982:	6838      	ldr	r0, [r7, #0]
 800a984:	f7ff ff94 	bl	800a8b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	7d1b      	ldrb	r3, [r3, #20]
 800a98c:	2b0a      	cmp	r3, #10
 800a98e:	d013      	beq.n	800a9b8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800a994:	2b01      	cmp	r3, #1
 800a996:	d00f      	beq.n	800a9b8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	7e9b      	ldrb	r3, [r3, #26]
 800a99c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d009      	beq.n	800a9b8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	7e9b      	ldrb	r3, [r3, #26]
 800a9a8:	f043 0302 	orr.w	r3, r3, #2
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a9b2:	6838      	ldr	r0, [r7, #0]
 800a9b4:	f003 f9be 	bl	800dd34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	7d1b      	ldrb	r3, [r3, #20]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d020      	beq.n	800aa02 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d006      	beq.n	800a9d6 <tcp_pcb_remove+0xa2>
 800a9c8:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <tcp_pcb_remove+0xe4>)
 800a9ca:	f240 7253 	movw	r2, #1875	; 0x753
 800a9ce:	4913      	ldr	r1, [pc, #76]	; (800aa1c <tcp_pcb_remove+0xe8>)
 800a9d0:	4813      	ldr	r0, [pc, #76]	; (800aa20 <tcp_pcb_remove+0xec>)
 800a9d2:	f00c fb1b 	bl	801700c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <tcp_pcb_remove+0xb8>
 800a9de:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <tcp_pcb_remove+0xe4>)
 800a9e0:	f240 7254 	movw	r2, #1876	; 0x754
 800a9e4:	490f      	ldr	r1, [pc, #60]	; (800aa24 <tcp_pcb_remove+0xf0>)
 800a9e6:	480e      	ldr	r0, [pc, #56]	; (800aa20 <tcp_pcb_remove+0xec>)
 800a9e8:	f00c fb10 	bl	801700c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <tcp_pcb_remove+0xce>
 800a9f4:	4b08      	ldr	r3, [pc, #32]	; (800aa18 <tcp_pcb_remove+0xe4>)
 800a9f6:	f240 7256 	movw	r2, #1878	; 0x756
 800a9fa:	490b      	ldr	r1, [pc, #44]	; (800aa28 <tcp_pcb_remove+0xf4>)
 800a9fc:	4808      	ldr	r0, [pc, #32]	; (800aa20 <tcp_pcb_remove+0xec>)
 800a9fe:	f00c fb05 	bl	801700c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2200      	movs	r2, #0
 800aa06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800aa0e:	bf00      	nop
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	0801979c 	.word	0x0801979c
 800aa1c:	08019b54 	.word	0x08019b54
 800aa20:	080197d8 	.word	0x080197d8
 800aa24:	08019b6c 	.word	0x08019b6c
 800aa28:	08019b88 	.word	0x08019b88

0800aa2c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800aa34:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <tcp_next_iss+0x28>)
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	4b07      	ldr	r3, [pc, #28]	; (800aa58 <tcp_next_iss+0x2c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	4a05      	ldr	r2, [pc, #20]	; (800aa54 <tcp_next_iss+0x28>)
 800aa40:	6013      	str	r3, [r2, #0]
  return iss;
 800aa42:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <tcp_next_iss+0x28>)
 800aa44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	2000011c 	.word	0x2000011c
 800aa58:	20003950 	.word	0x20003950

0800aa5c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800aa68:	6838      	ldr	r0, [r7, #0]
 800aa6a:	f006 fc71 	bl	8011350 <ip4_route>
 800aa6e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	e010      	b.n	800aa9c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa7e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aa80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d008      	beq.n	800aa9a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800aa88:	897b      	ldrh	r3, [r7, #10]
 800aa8a:	3b28      	subs	r3, #40	; 0x28
 800aa8c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800aa8e:	893a      	ldrh	r2, [r7, #8]
 800aa90:	88fb      	ldrh	r3, [r7, #6]
 800aa92:	4293      	cmp	r3, r2
 800aa94:	bf28      	it	cs
 800aa96:	4613      	movcs	r3, r2
 800aa98:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aab2:	e011      	b.n	800aad8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d108      	bne.n	800aad2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7fe feb0 	bl	800982c <tcp_abort>
      pcb = next;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	e002      	b.n	800aad8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1ea      	bne.n	800aab4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d02c      	beq.n	800ab52 <tcp_netif_ip_addr_changed+0x6a>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d028      	beq.n	800ab52 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ab00:	4b16      	ldr	r3, [pc, #88]	; (800ab5c <tcp_netif_ip_addr_changed+0x74>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff ffcc 	bl	800aaa4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ab0c:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <tcp_netif_ip_addr_changed+0x78>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff ffc6 	bl	800aaa4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d019      	beq.n	800ab52 <tcp_netif_ip_addr_changed+0x6a>
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d015      	beq.n	800ab52 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ab26:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <tcp_netif_ip_addr_changed+0x7c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	e00e      	b.n	800ab4c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d103      	bne.n	800ab48 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	60fb      	str	r3, [r7, #12]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1ed      	bne.n	800ab2e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	2000394c 	.word	0x2000394c
 800ab60:	20003958 	.word	0x20003958
 800ab64:	20003954 	.word	0x20003954

0800ab68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ab68:	b590      	push	{r4, r7, lr}
 800ab6a:	b08b      	sub	sp, #44	; 0x2c
 800ab6c:	af02      	add	r7, sp, #8
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	4a82      	ldr	r2, [pc, #520]	; (800ad80 <tcp_input+0x218>)
 800ab78:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	895b      	ldrh	r3, [r3, #10]
 800ab7e:	2b13      	cmp	r3, #19
 800ab80:	f240 838a 	bls.w	800b298 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ab84:	4b7f      	ldr	r3, [pc, #508]	; (800ad84 <tcp_input+0x21c>)
 800ab86:	695a      	ldr	r2, [r3, #20]
 800ab88:	4b7e      	ldr	r3, [pc, #504]	; (800ad84 <tcp_input+0x21c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f006 fe76 	bl	8011880 <ip4_addr_isbroadcast_u32>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f040 8380 	bne.w	800b29c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ab9c:	4b79      	ldr	r3, [pc, #484]	; (800ad84 <tcp_input+0x21c>)
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aba4:	2be0      	cmp	r3, #224	; 0xe0
 800aba6:	f000 8379 	beq.w	800b29c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800abaa:	4b75      	ldr	r3, [pc, #468]	; (800ad80 <tcp_input+0x218>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	899b      	ldrh	r3, [r3, #12]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fd f80c 	bl	8007bd0 <lwip_htons>
 800abb8:	4603      	mov	r3, r0
 800abba:	0b1b      	lsrs	r3, r3, #12
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800abc4:	7cbb      	ldrb	r3, [r7, #18]
 800abc6:	2b13      	cmp	r3, #19
 800abc8:	f240 8368 	bls.w	800b29c <tcp_input+0x734>
 800abcc:	7cbb      	ldrb	r3, [r7, #18]
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	891b      	ldrh	r3, [r3, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	f200 8361 	bhi.w	800b29c <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800abda:	7cbb      	ldrb	r3, [r7, #18]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	3b14      	subs	r3, #20
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	4b69      	ldr	r3, [pc, #420]	; (800ad88 <tcp_input+0x220>)
 800abe4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800abe6:	4b69      	ldr	r3, [pc, #420]	; (800ad8c <tcp_input+0x224>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	895a      	ldrh	r2, [r3, #10]
 800abf0:	7cbb      	ldrb	r3, [r7, #18]
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d30d      	bcc.n	800ac14 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800abf8:	4b63      	ldr	r3, [pc, #396]	; (800ad88 <tcp_input+0x220>)
 800abfa:	881a      	ldrh	r2, [r3, #0]
 800abfc:	4b64      	ldr	r3, [pc, #400]	; (800ad90 <tcp_input+0x228>)
 800abfe:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800ac00:	7cbb      	ldrb	r3, [r7, #18]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	425b      	negs	r3, r3
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	b21b      	sxth	r3, r3
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7fe f8e7 	bl	8008de0 <pbuf_header>
 800ac12:	e055      	b.n	800acc0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <tcp_input+0xc0>
 800ac1c:	4b5d      	ldr	r3, [pc, #372]	; (800ad94 <tcp_input+0x22c>)
 800ac1e:	22b2      	movs	r2, #178	; 0xb2
 800ac20:	495d      	ldr	r1, [pc, #372]	; (800ad98 <tcp_input+0x230>)
 800ac22:	485e      	ldr	r0, [pc, #376]	; (800ad9c <tcp_input+0x234>)
 800ac24:	f00c f9f2 	bl	801700c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800ac28:	f06f 0113 	mvn.w	r1, #19
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7fe f8d7 	bl	8008de0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	895a      	ldrh	r2, [r3, #10]
 800ac36:	4b56      	ldr	r3, [pc, #344]	; (800ad90 <tcp_input+0x228>)
 800ac38:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800ac3a:	4b53      	ldr	r3, [pc, #332]	; (800ad88 <tcp_input+0x220>)
 800ac3c:	881a      	ldrh	r2, [r3, #0]
 800ac3e:	4b54      	ldr	r3, [pc, #336]	; (800ad90 <tcp_input+0x228>)
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800ac46:	4b52      	ldr	r3, [pc, #328]	; (800ad90 <tcp_input+0x228>)
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	425b      	negs	r3, r3
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	b21b      	sxth	r3, r3
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7fe f8c4 	bl	8008de0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	895b      	ldrh	r3, [r3, #10]
 800ac5e:	8a3a      	ldrh	r2, [r7, #16]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	f200 831d 	bhi.w	800b2a0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	4a47      	ldr	r2, [pc, #284]	; (800ad8c <tcp_input+0x224>)
 800ac6e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	8a3b      	ldrh	r3, [r7, #16]
 800ac76:	425b      	negs	r3, r3
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	b21b      	sxth	r3, r3
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	4610      	mov	r0, r2
 800ac80:	f7fe f8ae 	bl	8008de0 <pbuf_header>
    p->tot_len -= opt2len;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	891a      	ldrh	r2, [r3, #8]
 800ac88:	8a3b      	ldrh	r3, [r7, #16]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	895b      	ldrh	r3, [r3, #10]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d005      	beq.n	800aca6 <tcp_input+0x13e>
 800ac9a:	4b3e      	ldr	r3, [pc, #248]	; (800ad94 <tcp_input+0x22c>)
 800ac9c:	22cf      	movs	r2, #207	; 0xcf
 800ac9e:	4940      	ldr	r1, [pc, #256]	; (800ada0 <tcp_input+0x238>)
 800aca0:	483e      	ldr	r0, [pc, #248]	; (800ad9c <tcp_input+0x234>)
 800aca2:	f00c f9b3 	bl	801700c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	891a      	ldrh	r2, [r3, #8]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	891b      	ldrh	r3, [r3, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d005      	beq.n	800acc0 <tcp_input+0x158>
 800acb4:	4b37      	ldr	r3, [pc, #220]	; (800ad94 <tcp_input+0x22c>)
 800acb6:	22d0      	movs	r2, #208	; 0xd0
 800acb8:	493a      	ldr	r1, [pc, #232]	; (800ada4 <tcp_input+0x23c>)
 800acba:	4838      	ldr	r0, [pc, #224]	; (800ad9c <tcp_input+0x234>)
 800acbc:	f00c f9a6 	bl	801700c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800acc0:	4b2f      	ldr	r3, [pc, #188]	; (800ad80 <tcp_input+0x218>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	4b2d      	ldr	r3, [pc, #180]	; (800ad80 <tcp_input+0x218>)
 800acca:	681c      	ldr	r4, [r3, #0]
 800accc:	4610      	mov	r0, r2
 800acce:	f7fc ff7f 	bl	8007bd0 <lwip_htons>
 800acd2:	4603      	mov	r3, r0
 800acd4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800acd6:	4b2a      	ldr	r3, [pc, #168]	; (800ad80 <tcp_input+0x218>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	885b      	ldrh	r3, [r3, #2]
 800acdc:	b29a      	uxth	r2, r3
 800acde:	4b28      	ldr	r3, [pc, #160]	; (800ad80 <tcp_input+0x218>)
 800ace0:	681c      	ldr	r4, [r3, #0]
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7fc ff74 	bl	8007bd0 <lwip_htons>
 800ace8:	4603      	mov	r3, r0
 800acea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800acec:	4b24      	ldr	r3, [pc, #144]	; (800ad80 <tcp_input+0x218>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	4b23      	ldr	r3, [pc, #140]	; (800ad80 <tcp_input+0x218>)
 800acf4:	681c      	ldr	r4, [r3, #0]
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fc ff78 	bl	8007bec <lwip_htonl>
 800acfc:	4603      	mov	r3, r0
 800acfe:	6063      	str	r3, [r4, #4]
 800ad00:	6863      	ldr	r3, [r4, #4]
 800ad02:	4a29      	ldr	r2, [pc, #164]	; (800ada8 <tcp_input+0x240>)
 800ad04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ad06:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <tcp_input+0x218>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	; (800ad80 <tcp_input+0x218>)
 800ad0e:	681c      	ldr	r4, [r3, #0]
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fc ff6b 	bl	8007bec <lwip_htonl>
 800ad16:	4603      	mov	r3, r0
 800ad18:	60a3      	str	r3, [r4, #8]
 800ad1a:	68a3      	ldr	r3, [r4, #8]
 800ad1c:	4a23      	ldr	r2, [pc, #140]	; (800adac <tcp_input+0x244>)
 800ad1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ad20:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <tcp_input+0x218>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	89db      	ldrh	r3, [r3, #14]
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	4b15      	ldr	r3, [pc, #84]	; (800ad80 <tcp_input+0x218>)
 800ad2a:	681c      	ldr	r4, [r3, #0]
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	f7fc ff4f 	bl	8007bd0 <lwip_htons>
 800ad32:	4603      	mov	r3, r0
 800ad34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ad36:	4b12      	ldr	r3, [pc, #72]	; (800ad80 <tcp_input+0x218>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	899b      	ldrh	r3, [r3, #12]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fc ff46 	bl	8007bd0 <lwip_htons>
 800ad44:	4603      	mov	r3, r0
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	4b18      	ldr	r3, [pc, #96]	; (800adb0 <tcp_input+0x248>)
 800ad50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	891a      	ldrh	r2, [r3, #8]
 800ad56:	4b16      	ldr	r3, [pc, #88]	; (800adb0 <tcp_input+0x248>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	f003 0303 	and.w	r3, r3, #3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bf14      	ite	ne
 800ad62:	2301      	movne	r3, #1
 800ad64:	2300      	moveq	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <tcp_input+0x24c>)
 800ad70:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad76:	4b10      	ldr	r3, [pc, #64]	; (800adb8 <tcp_input+0x250>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	61fb      	str	r3, [r7, #28]
 800ad7c:	e082      	b.n	800ae84 <tcp_input+0x31c>
 800ad7e:	bf00      	nop
 800ad80:	20000258 	.word	0x20000258
 800ad84:	200003fc 	.word	0x200003fc
 800ad88:	2000025c 	.word	0x2000025c
 800ad8c:	20000260 	.word	0x20000260
 800ad90:	2000025e 	.word	0x2000025e
 800ad94:	08019ba0 	.word	0x08019ba0
 800ad98:	08019bd4 	.word	0x08019bd4
 800ad9c:	08019be4 	.word	0x08019be4
 800ada0:	08019c0c 	.word	0x08019c0c
 800ada4:	08019c18 	.word	0x08019c18
 800ada8:	20000268 	.word	0x20000268
 800adac:	2000026c 	.word	0x2000026c
 800adb0:	20000274 	.word	0x20000274
 800adb4:	20000272 	.word	0x20000272
 800adb8:	2000394c 	.word	0x2000394c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	7d1b      	ldrb	r3, [r3, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d105      	bne.n	800add0 <tcp_input+0x268>
 800adc4:	4b8f      	ldr	r3, [pc, #572]	; (800b004 <tcp_input+0x49c>)
 800adc6:	22e2      	movs	r2, #226	; 0xe2
 800adc8:	498f      	ldr	r1, [pc, #572]	; (800b008 <tcp_input+0x4a0>)
 800adca:	4890      	ldr	r0, [pc, #576]	; (800b00c <tcp_input+0x4a4>)
 800adcc:	f00c f91e 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800add0:	69fb      	ldr	r3, [r7, #28]
 800add2:	7d1b      	ldrb	r3, [r3, #20]
 800add4:	2b0a      	cmp	r3, #10
 800add6:	d105      	bne.n	800ade4 <tcp_input+0x27c>
 800add8:	4b8a      	ldr	r3, [pc, #552]	; (800b004 <tcp_input+0x49c>)
 800adda:	22e3      	movs	r2, #227	; 0xe3
 800addc:	498c      	ldr	r1, [pc, #560]	; (800b010 <tcp_input+0x4a8>)
 800adde:	488b      	ldr	r0, [pc, #556]	; (800b00c <tcp_input+0x4a4>)
 800ade0:	f00c f914 	bl	801700c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	7d1b      	ldrb	r3, [r3, #20]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d105      	bne.n	800adf8 <tcp_input+0x290>
 800adec:	4b85      	ldr	r3, [pc, #532]	; (800b004 <tcp_input+0x49c>)
 800adee:	22e4      	movs	r2, #228	; 0xe4
 800adf0:	4988      	ldr	r1, [pc, #544]	; (800b014 <tcp_input+0x4ac>)
 800adf2:	4886      	ldr	r0, [pc, #536]	; (800b00c <tcp_input+0x4a4>)
 800adf4:	f00c f90a 	bl	801700c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	8b1a      	ldrh	r2, [r3, #24]
 800adfc:	4b86      	ldr	r3, [pc, #536]	; (800b018 <tcp_input+0x4b0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d138      	bne.n	800ae7a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	8ada      	ldrh	r2, [r3, #22]
 800ae0c:	4b82      	ldr	r3, [pc, #520]	; (800b018 <tcp_input+0x4b0>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	885b      	ldrh	r3, [r3, #2]
 800ae12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d130      	bne.n	800ae7a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	4b7f      	ldr	r3, [pc, #508]	; (800b01c <tcp_input+0x4b4>)
 800ae1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d12a      	bne.n	800ae7a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b7c      	ldr	r3, [pc, #496]	; (800b01c <tcp_input+0x4b4>)
 800ae2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d124      	bne.n	800ae7a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	69fa      	ldr	r2, [r7, #28]
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d105      	bne.n	800ae46 <tcp_input+0x2de>
 800ae3a:	4b72      	ldr	r3, [pc, #456]	; (800b004 <tcp_input+0x49c>)
 800ae3c:	22ec      	movs	r2, #236	; 0xec
 800ae3e:	4978      	ldr	r1, [pc, #480]	; (800b020 <tcp_input+0x4b8>)
 800ae40:	4872      	ldr	r0, [pc, #456]	; (800b00c <tcp_input+0x4a4>)
 800ae42:	f00c f8e3 	bl	801700c <iprintf>
      if (prev != NULL) {
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00a      	beq.n	800ae62 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ae54:	4b73      	ldr	r3, [pc, #460]	; (800b024 <tcp_input+0x4bc>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ae5c:	4a71      	ldr	r2, [pc, #452]	; (800b024 <tcp_input+0x4bc>)
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	69fa      	ldr	r2, [r7, #28]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d10f      	bne.n	800ae8c <tcp_input+0x324>
 800ae6c:	4b65      	ldr	r3, [pc, #404]	; (800b004 <tcp_input+0x49c>)
 800ae6e:	22f4      	movs	r2, #244	; 0xf4
 800ae70:	496d      	ldr	r1, [pc, #436]	; (800b028 <tcp_input+0x4c0>)
 800ae72:	4866      	ldr	r0, [pc, #408]	; (800b00c <tcp_input+0x4a4>)
 800ae74:	f00c f8ca 	bl	801700c <iprintf>
      break;
 800ae78:	e008      	b.n	800ae8c <tcp_input+0x324>
    }
    prev = pcb;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d198      	bne.n	800adbc <tcp_input+0x254>
 800ae8a:	e000      	b.n	800ae8e <tcp_input+0x326>
      break;
 800ae8c:	bf00      	nop
  }

  if (pcb == NULL) {
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d173      	bne.n	800af7c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae94:	4b65      	ldr	r3, [pc, #404]	; (800b02c <tcp_input+0x4c4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	e02f      	b.n	800aefc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	7d1b      	ldrb	r3, [r3, #20]
 800aea0:	2b0a      	cmp	r3, #10
 800aea2:	d005      	beq.n	800aeb0 <tcp_input+0x348>
 800aea4:	4b57      	ldr	r3, [pc, #348]	; (800b004 <tcp_input+0x49c>)
 800aea6:	22fe      	movs	r2, #254	; 0xfe
 800aea8:	4961      	ldr	r1, [pc, #388]	; (800b030 <tcp_input+0x4c8>)
 800aeaa:	4858      	ldr	r0, [pc, #352]	; (800b00c <tcp_input+0x4a4>)
 800aeac:	f00c f8ae 	bl	801700c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	8b1a      	ldrh	r2, [r3, #24]
 800aeb4:	4b58      	ldr	r3, [pc, #352]	; (800b018 <tcp_input+0x4b0>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d11a      	bne.n	800aef6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	8ada      	ldrh	r2, [r3, #22]
 800aec4:	4b54      	ldr	r3, [pc, #336]	; (800b018 <tcp_input+0x4b0>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	885b      	ldrh	r3, [r3, #2]
 800aeca:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800aecc:	429a      	cmp	r2, r3
 800aece:	d112      	bne.n	800aef6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	4b51      	ldr	r3, [pc, #324]	; (800b01c <tcp_input+0x4b4>)
 800aed6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d10c      	bne.n	800aef6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	4b4e      	ldr	r3, [pc, #312]	; (800b01c <tcp_input+0x4b4>)
 800aee2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d106      	bne.n	800aef6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800aee8:	69f8      	ldr	r0, [r7, #28]
 800aeea:	f000 fb15 	bl	800b518 <tcp_timewait_input>
        pbuf_free(p);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7fd ff9a 	bl	8008e28 <pbuf_free>
        return;
 800aef4:	e1da      	b.n	800b2ac <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	61fb      	str	r3, [r7, #28]
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1cc      	bne.n	800ae9c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af06:	4b4b      	ldr	r3, [pc, #300]	; (800b034 <tcp_input+0x4cc>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	617b      	str	r3, [r7, #20]
 800af0c:	e019      	b.n	800af42 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	8ada      	ldrh	r2, [r3, #22]
 800af12:	4b41      	ldr	r3, [pc, #260]	; (800b018 <tcp_input+0x4b0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	885b      	ldrh	r3, [r3, #2]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d10c      	bne.n	800af38 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b3e      	ldr	r3, [pc, #248]	; (800b01c <tcp_input+0x4b4>)
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	429a      	cmp	r2, r3
 800af28:	d00f      	beq.n	800af4a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00d      	beq.n	800af4c <tcp_input+0x3e4>
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	617b      	str	r3, [r7, #20]
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e2      	bne.n	800af0e <tcp_input+0x3a6>
 800af48:	e000      	b.n	800af4c <tcp_input+0x3e4>
            break;
 800af4a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d014      	beq.n	800af7c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00a      	beq.n	800af6e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800af60:	4b34      	ldr	r3, [pc, #208]	; (800b034 <tcp_input+0x4cc>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800af68:	4a32      	ldr	r2, [pc, #200]	; (800b034 <tcp_input+0x4cc>)
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800af6e:	6978      	ldr	r0, [r7, #20]
 800af70:	f000 f9f0 	bl	800b354 <tcp_listen_input>
      pbuf_free(p);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7fd ff57 	bl	8008e28 <pbuf_free>
      return;
 800af7a:	e197      	b.n	800b2ac <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 8164 	beq.w	800b24c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800af84:	4b2c      	ldr	r3, [pc, #176]	; (800b038 <tcp_input+0x4d0>)
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	891a      	ldrh	r2, [r3, #8]
 800af8e:	4b2a      	ldr	r3, [pc, #168]	; (800b038 <tcp_input+0x4d0>)
 800af90:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800af92:	4a29      	ldr	r2, [pc, #164]	; (800b038 <tcp_input+0x4d0>)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800af98:	4b1f      	ldr	r3, [pc, #124]	; (800b018 <tcp_input+0x4b0>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a26      	ldr	r2, [pc, #152]	; (800b038 <tcp_input+0x4d0>)
 800af9e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800afa0:	4b26      	ldr	r3, [pc, #152]	; (800b03c <tcp_input+0x4d4>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800afa6:	4b26      	ldr	r3, [pc, #152]	; (800b040 <tcp_input+0x4d8>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800afac:	4b25      	ldr	r3, [pc, #148]	; (800b044 <tcp_input+0x4dc>)
 800afae:	2200      	movs	r2, #0
 800afb0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800afb2:	4b25      	ldr	r3, [pc, #148]	; (800b048 <tcp_input+0x4e0>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	f003 0308 	and.w	r3, r3, #8
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d006      	beq.n	800afcc <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	7b5b      	ldrb	r3, [r3, #13]
 800afc2:	f043 0301 	orr.w	r3, r3, #1
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d03d      	beq.n	800b050 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800afd4:	69f8      	ldr	r0, [r7, #28]
 800afd6:	f7ff f991 	bl	800a2fc <tcp_process_refused_data>
 800afda:	4603      	mov	r3, r0
 800afdc:	f113 0f0d 	cmn.w	r3, #13
 800afe0:	d007      	beq.n	800aff2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d032      	beq.n	800b050 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800afea:	4b18      	ldr	r3, [pc, #96]	; (800b04c <tcp_input+0x4e4>)
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d02e      	beq.n	800b050 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f040 8108 	bne.w	800b20c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800affc:	69f8      	ldr	r0, [r7, #28]
 800affe:	f002 fe3d 	bl	800dc7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b002:	e103      	b.n	800b20c <tcp_input+0x6a4>
 800b004:	08019ba0 	.word	0x08019ba0
 800b008:	08019c38 	.word	0x08019c38
 800b00c:	08019be4 	.word	0x08019be4
 800b010:	08019c60 	.word	0x08019c60
 800b014:	08019c8c 	.word	0x08019c8c
 800b018:	20000258 	.word	0x20000258
 800b01c:	200003fc 	.word	0x200003fc
 800b020:	08019cb4 	.word	0x08019cb4
 800b024:	2000394c 	.word	0x2000394c
 800b028:	08019ce0 	.word	0x08019ce0
 800b02c:	2000395c 	.word	0x2000395c
 800b030:	08019d0c 	.word	0x08019d0c
 800b034:	20003954 	.word	0x20003954
 800b038:	20000248 	.word	0x20000248
 800b03c:	20000278 	.word	0x20000278
 800b040:	20000275 	.word	0x20000275
 800b044:	20000270 	.word	0x20000270
 800b048:	20000274 	.word	0x20000274
 800b04c:	20000272 	.word	0x20000272
      }
    }
    tcp_input_pcb = pcb;
 800b050:	4a98      	ldr	r2, [pc, #608]	; (800b2b4 <tcp_input+0x74c>)
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b056:	69f8      	ldr	r0, [r7, #28]
 800b058:	f000 fac6 	bl	800b5e8 <tcp_process>
 800b05c:	4603      	mov	r3, r0
 800b05e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b060:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b064:	f113 0f0d 	cmn.w	r3, #13
 800b068:	f000 80d2 	beq.w	800b210 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800b06c:	4b92      	ldr	r3, [pc, #584]	; (800b2b8 <tcp_input+0x750>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f003 0308 	and.w	r3, r3, #8
 800b074:	2b00      	cmp	r3, #0
 800b076:	d016      	beq.n	800b0a6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d008      	beq.n	800b094 <tcp_input+0x52c>
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b088:	69fa      	ldr	r2, [r7, #28]
 800b08a:	6912      	ldr	r2, [r2, #16]
 800b08c:	f06f 010d 	mvn.w	r1, #13
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b094:	69f9      	ldr	r1, [r7, #28]
 800b096:	4889      	ldr	r0, [pc, #548]	; (800b2bc <tcp_input+0x754>)
 800b098:	f7ff fc4c 	bl	800a934 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800b09c:	69f9      	ldr	r1, [r7, #28]
 800b09e:	2001      	movs	r0, #1
 800b0a0:	f7fd f990 	bl	80083c4 <memp_free>
 800b0a4:	e0bf      	b.n	800b226 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b0aa:	4b85      	ldr	r3, [pc, #532]	; (800b2c0 <tcp_input+0x758>)
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d01b      	beq.n	800b0ea <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b0b2:	4b83      	ldr	r3, [pc, #524]	; (800b2c0 <tcp_input+0x758>)
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d009      	beq.n	800b0d4 <tcp_input+0x56c>
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	6910      	ldr	r0, [r2, #16]
 800b0c8:	89fa      	ldrh	r2, [r7, #14]
 800b0ca:	69f9      	ldr	r1, [r7, #28]
 800b0cc:	4798      	blx	r3
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	74fb      	strb	r3, [r7, #19]
 800b0d2:	e001      	b.n	800b0d8 <tcp_input+0x570>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b0d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b0dc:	f113 0f0d 	cmn.w	r3, #13
 800b0e0:	f000 8098 	beq.w	800b214 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b0e4:	4b76      	ldr	r3, [pc, #472]	; (800b2c0 <tcp_input+0x758>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b0ea:	69f8      	ldr	r0, [r7, #28]
 800b0ec:	f000 f900 	bl	800b2f0 <tcp_input_delayed_close>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f040 8090 	bne.w	800b218 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b0f8:	4b72      	ldr	r3, [pc, #456]	; (800b2c4 <tcp_input+0x75c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d041      	beq.n	800b184 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b104:	2b00      	cmp	r3, #0
 800b106:	d006      	beq.n	800b116 <tcp_input+0x5ae>
 800b108:	4b6f      	ldr	r3, [pc, #444]	; (800b2c8 <tcp_input+0x760>)
 800b10a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800b10e:	496f      	ldr	r1, [pc, #444]	; (800b2cc <tcp_input+0x764>)
 800b110:	486f      	ldr	r0, [pc, #444]	; (800b2d0 <tcp_input+0x768>)
 800b112:	f00b ff7b 	bl	801700c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	7e9b      	ldrb	r3, [r3, #26]
 800b11a:	f003 0310 	and.w	r3, r3, #16
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d008      	beq.n	800b134 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b122:	4b68      	ldr	r3, [pc, #416]	; (800b2c4 <tcp_input+0x75c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4618      	mov	r0, r3
 800b128:	f7fd fe7e 	bl	8008e28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b12c:	69f8      	ldr	r0, [r7, #28]
 800b12e:	f7fe fb7d 	bl	800982c <tcp_abort>
            goto aborted;
 800b132:	e078      	b.n	800b226 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00c      	beq.n	800b158 <tcp_input+0x5f0>
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	6918      	ldr	r0, [r3, #16]
 800b148:	4b5e      	ldr	r3, [pc, #376]	; (800b2c4 <tcp_input+0x75c>)
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	2300      	movs	r3, #0
 800b14e:	69f9      	ldr	r1, [r7, #28]
 800b150:	47a0      	blx	r4
 800b152:	4603      	mov	r3, r0
 800b154:	74fb      	strb	r3, [r7, #19]
 800b156:	e008      	b.n	800b16a <tcp_input+0x602>
 800b158:	4b5a      	ldr	r3, [pc, #360]	; (800b2c4 <tcp_input+0x75c>)
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	2300      	movs	r3, #0
 800b15e:	69f9      	ldr	r1, [r7, #28]
 800b160:	2000      	movs	r0, #0
 800b162:	f7ff f98b 	bl	800a47c <tcp_recv_null>
 800b166:	4603      	mov	r3, r0
 800b168:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b16a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b16e:	f113 0f0d 	cmn.w	r3, #13
 800b172:	d053      	beq.n	800b21c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b17c:	4b51      	ldr	r3, [pc, #324]	; (800b2c4 <tcp_input+0x75c>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b184:	4b4c      	ldr	r3, [pc, #304]	; (800b2b8 <tcp_input+0x750>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f003 0320 	and.w	r3, r3, #32
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d030      	beq.n	800b1f2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b194:	2b00      	cmp	r3, #0
 800b196:	d009      	beq.n	800b1ac <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b19c:	7b5a      	ldrb	r2, [r3, #13]
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1a2:	f042 0220 	orr.w	r2, r2, #32
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	735a      	strb	r2, [r3, #13]
 800b1aa:	e022      	b.n	800b1f2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1b4:	d005      	beq.n	800b1c2 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00b      	beq.n	800b1e4 <tcp_input+0x67c>
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	6918      	ldr	r0, [r3, #16]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2200      	movs	r2, #0
 800b1da:	69f9      	ldr	r1, [r7, #28]
 800b1dc:	47a0      	blx	r4
 800b1de:	4603      	mov	r3, r0
 800b1e0:	74fb      	strb	r3, [r7, #19]
 800b1e2:	e001      	b.n	800b1e8 <tcp_input+0x680>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b1e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1ec:	f113 0f0d 	cmn.w	r3, #13
 800b1f0:	d016      	beq.n	800b220 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b1f2:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <tcp_input+0x74c>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b1f8:	69f8      	ldr	r0, [r7, #28]
 800b1fa:	f000 f879 	bl	800b2f0 <tcp_input_delayed_close>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10f      	bne.n	800b224 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b204:	69f8      	ldr	r0, [r7, #28]
 800b206:	f002 fd95 	bl	800dd34 <tcp_output>
 800b20a:	e00c      	b.n	800b226 <tcp_input+0x6be>
        goto aborted;
 800b20c:	bf00      	nop
 800b20e:	e00a      	b.n	800b226 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b210:	bf00      	nop
 800b212:	e008      	b.n	800b226 <tcp_input+0x6be>
              goto aborted;
 800b214:	bf00      	nop
 800b216:	e006      	b.n	800b226 <tcp_input+0x6be>
          goto aborted;
 800b218:	bf00      	nop
 800b21a:	e004      	b.n	800b226 <tcp_input+0x6be>
            goto aborted;
 800b21c:	bf00      	nop
 800b21e:	e002      	b.n	800b226 <tcp_input+0x6be>
              goto aborted;
 800b220:	bf00      	nop
 800b222:	e000      	b.n	800b226 <tcp_input+0x6be>
          goto aborted;
 800b224:	bf00      	nop
    tcp_input_pcb = NULL;
 800b226:	4b23      	ldr	r3, [pc, #140]	; (800b2b4 <tcp_input+0x74c>)
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b22c:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <tcp_input+0x75c>)
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800b232:	4b28      	ldr	r3, [pc, #160]	; (800b2d4 <tcp_input+0x76c>)
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d037      	beq.n	800b2aa <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800b23a:	4b26      	ldr	r3, [pc, #152]	; (800b2d4 <tcp_input+0x76c>)
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fd fdf2 	bl	8008e28 <pbuf_free>
      inseg.p = NULL;
 800b244:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <tcp_input+0x76c>)
 800b246:	2200      	movs	r2, #0
 800b248:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b24a:	e02e      	b.n	800b2aa <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b24c:	4b22      	ldr	r3, [pc, #136]	; (800b2d8 <tcp_input+0x770>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	899b      	ldrh	r3, [r3, #12]
 800b252:	b29b      	uxth	r3, r3
 800b254:	4618      	mov	r0, r3
 800b256:	f7fc fcbb 	bl	8007bd0 <lwip_htons>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d115      	bne.n	800b290 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b264:	4b1d      	ldr	r3, [pc, #116]	; (800b2dc <tcp_input+0x774>)
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	4b1d      	ldr	r3, [pc, #116]	; (800b2e0 <tcp_input+0x778>)
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	4b1d      	ldr	r3, [pc, #116]	; (800b2e4 <tcp_input+0x77c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b274:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <tcp_input+0x770>)
 800b276:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b278:	885b      	ldrh	r3, [r3, #2]
 800b27a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b27c:	4a16      	ldr	r2, [pc, #88]	; (800b2d8 <tcp_input+0x770>)
 800b27e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b280:	8812      	ldrh	r2, [r2, #0]
 800b282:	b292      	uxth	r2, r2
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <tcp_input+0x780>)
 800b28a:	4a18      	ldr	r2, [pc, #96]	; (800b2ec <tcp_input+0x784>)
 800b28c:	f002 ffdc 	bl	800e248 <tcp_rst>
    pbuf_free(p);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7fd fdc9 	bl	8008e28 <pbuf_free>
  return;
 800b296:	e008      	b.n	800b2aa <tcp_input+0x742>
    goto dropped;
 800b298:	bf00      	nop
 800b29a:	e002      	b.n	800b2a2 <tcp_input+0x73a>
dropped:
 800b29c:	bf00      	nop
 800b29e:	e000      	b.n	800b2a2 <tcp_input+0x73a>
      goto dropped;
 800b2a0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7fd fdc0 	bl	8008e28 <pbuf_free>
 800b2a8:	e000      	b.n	800b2ac <tcp_input+0x744>
  return;
 800b2aa:	bf00      	nop
}
 800b2ac:	3724      	adds	r7, #36	; 0x24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd90      	pop	{r4, r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20003960 	.word	0x20003960
 800b2b8:	20000275 	.word	0x20000275
 800b2bc:	2000394c 	.word	0x2000394c
 800b2c0:	20000270 	.word	0x20000270
 800b2c4:	20000278 	.word	0x20000278
 800b2c8:	08019ba0 	.word	0x08019ba0
 800b2cc:	08019d3c 	.word	0x08019d3c
 800b2d0:	08019be4 	.word	0x08019be4
 800b2d4:	20000248 	.word	0x20000248
 800b2d8:	20000258 	.word	0x20000258
 800b2dc:	2000026c 	.word	0x2000026c
 800b2e0:	20000272 	.word	0x20000272
 800b2e4:	20000268 	.word	0x20000268
 800b2e8:	2000040c 	.word	0x2000040c
 800b2ec:	20000410 	.word	0x20000410

0800b2f0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800b2f8:	4b14      	ldr	r3, [pc, #80]	; (800b34c <tcp_input_delayed_close+0x5c>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b00      	cmp	r3, #0
 800b302:	d01d      	beq.n	800b340 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	7e9b      	ldrb	r3, [r3, #26]
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10d      	bne.n	800b32c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d008      	beq.n	800b32c <tcp_input_delayed_close+0x3c>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	6912      	ldr	r2, [r2, #16]
 800b324:	f06f 010e 	mvn.w	r1, #14
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b32c:	6879      	ldr	r1, [r7, #4]
 800b32e:	4808      	ldr	r0, [pc, #32]	; (800b350 <tcp_input_delayed_close+0x60>)
 800b330:	f7ff fb00 	bl	800a934 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	2001      	movs	r0, #1
 800b338:	f7fd f844 	bl	80083c4 <memp_free>
    return 1;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20000275 	.word	0x20000275
 800b350:	2000394c 	.word	0x2000394c

0800b354 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af02      	add	r7, sp, #8
 800b35a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b35c:	4b64      	ldr	r3, [pc, #400]	; (800b4f0 <tcp_listen_input+0x19c>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	f040 80bc 	bne.w	800b4e2 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b36a:	4b61      	ldr	r3, [pc, #388]	; (800b4f0 <tcp_listen_input+0x19c>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	f003 0310 	and.w	r3, r3, #16
 800b372:	2b00      	cmp	r3, #0
 800b374:	d016      	beq.n	800b3a4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b376:	4b5f      	ldr	r3, [pc, #380]	; (800b4f4 <tcp_listen_input+0x1a0>)
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	4b5f      	ldr	r3, [pc, #380]	; (800b4f8 <tcp_listen_input+0x1a4>)
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	4b5e      	ldr	r3, [pc, #376]	; (800b4fc <tcp_listen_input+0x1a8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b386:	4b5e      	ldr	r3, [pc, #376]	; (800b500 <tcp_listen_input+0x1ac>)
 800b388:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b38a:	885b      	ldrh	r3, [r3, #2]
 800b38c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b38e:	4a5c      	ldr	r2, [pc, #368]	; (800b500 <tcp_listen_input+0x1ac>)
 800b390:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b392:	8812      	ldrh	r2, [r2, #0]
 800b394:	b292      	uxth	r2, r2
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	4b5a      	ldr	r3, [pc, #360]	; (800b504 <tcp_listen_input+0x1b0>)
 800b39c:	4a5a      	ldr	r2, [pc, #360]	; (800b508 <tcp_listen_input+0x1b4>)
 800b39e:	f002 ff53 	bl	800e248 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b3a2:	e0a0      	b.n	800b4e6 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800b3a4:	4b52      	ldr	r3, [pc, #328]	; (800b4f0 <tcp_listen_input+0x19c>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	f003 0302 	and.w	r3, r3, #2
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 809a 	beq.w	800b4e6 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	7d5b      	ldrb	r3, [r3, #21]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7ff f93e 	bl	800a638 <tcp_alloc>
 800b3bc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d111      	bne.n	800b3e8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <tcp_listen_input+0x8e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	6910      	ldr	r0, [r2, #16]
 800b3d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4798      	blx	r3
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73bb      	strb	r3, [r7, #14]
      return;
 800b3e0:	e082      	b.n	800b4e8 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b3e2:	23f0      	movs	r3, #240	; 0xf0
 800b3e4:	73bb      	strb	r3, [r7, #14]
      return;
 800b3e6:	e07f      	b.n	800b4e8 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b3e8:	4b48      	ldr	r3, [pc, #288]	; (800b50c <tcp_listen_input+0x1b8>)
 800b3ea:	695a      	ldr	r2, [r3, #20]
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b3f0:	4b46      	ldr	r3, [pc, #280]	; (800b50c <tcp_listen_input+0x1b8>)
 800b3f2:	691a      	ldr	r2, [r3, #16]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	8ada      	ldrh	r2, [r3, #22]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b400:	4b3f      	ldr	r3, [pc, #252]	; (800b500 <tcp_listen_input+0x1ac>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	b29a      	uxth	r2, r3
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	2203      	movs	r2, #3
 800b410:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b412:	4b3a      	ldr	r3, [pc, #232]	; (800b4fc <tcp_listen_input+0x1a8>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b424:	6978      	ldr	r0, [r7, #20]
 800b426:	f7ff fb01 	bl	800aa2c <tcp_next_iss>
 800b42a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b444:	4b2d      	ldr	r3, [pc, #180]	; (800b4fc <tcp_listen_input+0x1a8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	1e5a      	subs	r2, r3, #1
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	691a      	ldr	r2, [r3, #16]
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7a1b      	ldrb	r3, [r3, #8]
 800b460:	f003 030c 	and.w	r3, r3, #12
 800b464:	b2da      	uxtb	r2, r3
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b46a:	4b29      	ldr	r3, [pc, #164]	; (800b510 <tcp_listen_input+0x1bc>)
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	60da      	str	r2, [r3, #12]
 800b472:	4a27      	ldr	r2, [pc, #156]	; (800b510 <tcp_listen_input+0x1bc>)
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	f003 f936 	bl	800e6e8 <tcp_timer_needed>
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <tcp_listen_input+0x1c0>)
 800b47e:	2201      	movs	r2, #1
 800b480:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b482:	6978      	ldr	r0, [r7, #20]
 800b484:	f001 fd14 	bl	800ceb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b488:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <tcp_listen_input+0x1ac>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	89db      	ldrh	r3, [r3, #14]
 800b48e:	b29a      	uxth	r2, r3
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	f7ff fad5 	bl	800aa5c <tcp_eff_send_mss_impl>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b4ba:	2112      	movs	r1, #18
 800b4bc:	6978      	ldr	r0, [r7, #20]
 800b4be:	f002 fae1 	bl	800da84 <tcp_enqueue_flags>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b4c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	6978      	ldr	r0, [r7, #20]
 800b4d2:	f7fe f8f9 	bl	80096c8 <tcp_abandon>
      return;
 800b4d6:	e007      	b.n	800b4e8 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800b4d8:	6978      	ldr	r0, [r7, #20]
 800b4da:	f002 fc2b 	bl	800dd34 <tcp_output>
  return;
 800b4de:	bf00      	nop
 800b4e0:	e001      	b.n	800b4e6 <tcp_listen_input+0x192>
    return;
 800b4e2:	bf00      	nop
 800b4e4:	e000      	b.n	800b4e8 <tcp_listen_input+0x194>
  return;
 800b4e6:	bf00      	nop
}
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20000274 	.word	0x20000274
 800b4f4:	2000026c 	.word	0x2000026c
 800b4f8:	20000272 	.word	0x20000272
 800b4fc:	20000268 	.word	0x20000268
 800b500:	20000258 	.word	0x20000258
 800b504:	2000040c 	.word	0x2000040c
 800b508:	20000410 	.word	0x20000410
 800b50c:	200003fc 	.word	0x200003fc
 800b510:	2000394c 	.word	0x2000394c
 800b514:	20003948 	.word	0x20003948

0800b518 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af02      	add	r7, sp, #8
 800b51e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b520:	4b29      	ldr	r3, [pc, #164]	; (800b5c8 <tcp_timewait_input+0xb0>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f003 0304 	and.w	r3, r3, #4
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d147      	bne.n	800b5bc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b52c:	4b26      	ldr	r3, [pc, #152]	; (800b5c8 <tcp_timewait_input+0xb0>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d027      	beq.n	800b588 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b538:	4b24      	ldr	r3, [pc, #144]	; (800b5cc <tcp_timewait_input+0xb4>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	db2a      	blt.n	800b59c <tcp_timewait_input+0x84>
 800b546:	4b21      	ldr	r3, [pc, #132]	; (800b5cc <tcp_timewait_input+0xb4>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b552:	440b      	add	r3, r1
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	dc20      	bgt.n	800b59c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b55a:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <tcp_timewait_input+0xb8>)
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	4b1d      	ldr	r3, [pc, #116]	; (800b5d4 <tcp_timewait_input+0xbc>)
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	4b19      	ldr	r3, [pc, #100]	; (800b5cc <tcp_timewait_input+0xb4>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b56a:	4b1b      	ldr	r3, [pc, #108]	; (800b5d8 <tcp_timewait_input+0xc0>)
 800b56c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b56e:	885b      	ldrh	r3, [r3, #2]
 800b570:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b572:	4a19      	ldr	r2, [pc, #100]	; (800b5d8 <tcp_timewait_input+0xc0>)
 800b574:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b576:	8812      	ldrh	r2, [r2, #0]
 800b578:	b292      	uxth	r2, r2
 800b57a:	9201      	str	r2, [sp, #4]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	4b17      	ldr	r3, [pc, #92]	; (800b5dc <tcp_timewait_input+0xc4>)
 800b580:	4a17      	ldr	r2, [pc, #92]	; (800b5e0 <tcp_timewait_input+0xc8>)
 800b582:	f002 fe61 	bl	800e248 <tcp_rst>
      return;
 800b586:	e01c      	b.n	800b5c2 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800b588:	4b0f      	ldr	r3, [pc, #60]	; (800b5c8 <tcp_timewait_input+0xb0>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b594:	4b13      	ldr	r3, [pc, #76]	; (800b5e4 <tcp_timewait_input+0xcc>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b59c:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <tcp_timewait_input+0xbc>)
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00d      	beq.n	800b5c0 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	7e9b      	ldrb	r3, [r3, #26]
 800b5a8:	f043 0302 	orr.w	r3, r3, #2
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f002 fbbe 	bl	800dd34 <tcp_output>
  }
  return;
 800b5b8:	bf00      	nop
 800b5ba:	e001      	b.n	800b5c0 <tcp_timewait_input+0xa8>
    return;
 800b5bc:	bf00      	nop
 800b5be:	e000      	b.n	800b5c2 <tcp_timewait_input+0xaa>
  return;
 800b5c0:	bf00      	nop
}
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20000274 	.word	0x20000274
 800b5cc:	20000268 	.word	0x20000268
 800b5d0:	2000026c 	.word	0x2000026c
 800b5d4:	20000272 	.word	0x20000272
 800b5d8:	20000258 	.word	0x20000258
 800b5dc:	2000040c 	.word	0x2000040c
 800b5e0:	20000410 	.word	0x20000410
 800b5e4:	20003950 	.word	0x20003950

0800b5e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b5f8:	4ba4      	ldr	r3, [pc, #656]	; (800b88c <tcp_process+0x2a4>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d04e      	beq.n	800b6a2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7d1b      	ldrb	r3, [r3, #20]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d108      	bne.n	800b61e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b610:	4b9f      	ldr	r3, [pc, #636]	; (800b890 <tcp_process+0x2a8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d123      	bne.n	800b660 <tcp_process+0x78>
        acceptable = 1;
 800b618:	2301      	movs	r3, #1
 800b61a:	76fb      	strb	r3, [r7, #27]
 800b61c:	e020      	b.n	800b660 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b622:	4b9c      	ldr	r3, [pc, #624]	; (800b894 <tcp_process+0x2ac>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d102      	bne.n	800b630 <tcp_process+0x48>
        acceptable = 1;
 800b62a:	2301      	movs	r3, #1
 800b62c:	76fb      	strb	r3, [r7, #27]
 800b62e:	e017      	b.n	800b660 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b630:	4b98      	ldr	r3, [pc, #608]	; (800b894 <tcp_process+0x2ac>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	db10      	blt.n	800b660 <tcp_process+0x78>
 800b63e:	4b95      	ldr	r3, [pc, #596]	; (800b894 <tcp_process+0x2ac>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	6879      	ldr	r1, [r7, #4]
 800b648:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b64a:	440b      	add	r3, r1
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	dc06      	bgt.n	800b660 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	7e9b      	ldrb	r3, [r3, #26]
 800b656:	f043 0302 	orr.w	r3, r3, #2
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b660:	7efb      	ldrb	r3, [r7, #27]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d01b      	beq.n	800b69e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	7d1b      	ldrb	r3, [r3, #20]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <tcp_process+0x94>
 800b66e:	4b8a      	ldr	r3, [pc, #552]	; (800b898 <tcp_process+0x2b0>)
 800b670:	f240 22e7 	movw	r2, #743	; 0x2e7
 800b674:	4989      	ldr	r1, [pc, #548]	; (800b89c <tcp_process+0x2b4>)
 800b676:	488a      	ldr	r0, [pc, #552]	; (800b8a0 <tcp_process+0x2b8>)
 800b678:	f00b fcc8 	bl	801700c <iprintf>
      recv_flags |= TF_RESET;
 800b67c:	4b89      	ldr	r3, [pc, #548]	; (800b8a4 <tcp_process+0x2bc>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	f043 0308 	orr.w	r3, r3, #8
 800b684:	b2da      	uxtb	r2, r3
 800b686:	4b87      	ldr	r3, [pc, #540]	; (800b8a4 <tcp_process+0x2bc>)
 800b688:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7e9b      	ldrb	r3, [r3, #26]
 800b68e:	f023 0301 	bic.w	r3, r3, #1
 800b692:	b2da      	uxtb	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800b698:	f06f 030d 	mvn.w	r3, #13
 800b69c:	e34d      	b.n	800bd3a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e34b      	b.n	800bd3a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b6a2:	4b7a      	ldr	r3, [pc, #488]	; (800b88c <tcp_process+0x2a4>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f003 0302 	and.w	r3, r3, #2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d010      	beq.n	800b6d0 <tcp_process+0xe8>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	7d1b      	ldrb	r3, [r3, #20]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d00c      	beq.n	800b6d0 <tcp_process+0xe8>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7d1b      	ldrb	r3, [r3, #20]
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	d008      	beq.n	800b6d0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	7e9b      	ldrb	r3, [r3, #26]
 800b6c2:	f043 0302 	orr.w	r3, r3, #2
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e334      	b.n	800bd3a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7e9b      	ldrb	r3, [r3, #26]
 800b6d4:	f003 0310 	and.w	r3, r3, #16
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d103      	bne.n	800b6e4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b6dc:	4b72      	ldr	r3, [pc, #456]	; (800b8a8 <tcp_process+0x2c0>)
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f001 fbdf 	bl	800ceb0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	7d1b      	ldrb	r3, [r3, #20]
 800b6f6:	3b02      	subs	r3, #2
 800b6f8:	2b07      	cmp	r3, #7
 800b6fa:	f200 830e 	bhi.w	800bd1a <tcp_process+0x732>
 800b6fe:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <tcp_process+0x11c>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b725 	.word	0x0800b725
 800b708:	0800b91d 	.word	0x0800b91d
 800b70c:	0800ba75 	.word	0x0800ba75
 800b710:	0800ba9f 	.word	0x0800ba9f
 800b714:	0800bbc9 	.word	0x0800bbc9
 800b718:	0800ba75 	.word	0x0800ba75
 800b71c:	0800bc55 	.word	0x0800bc55
 800b720:	0800bce5 	.word	0x0800bce5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b724:	4b59      	ldr	r3, [pc, #356]	; (800b88c <tcp_process+0x2a4>)
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 80cb 	beq.w	800b8c8 <tcp_process+0x2e0>
 800b732:	4b56      	ldr	r3, [pc, #344]	; (800b88c <tcp_process+0x2a4>)
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 80c4 	beq.w	800b8c8 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	4b52      	ldr	r3, [pc, #328]	; (800b890 <tcp_process+0x2a8>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	f040 80bc 	bne.w	800b8c8 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800b750:	4b50      	ldr	r3, [pc, #320]	; (800b894 <tcp_process+0x2ac>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800b762:	4b4b      	ldr	r3, [pc, #300]	; (800b890 <tcp_process+0x2a8>)
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800b76a:	4b50      	ldr	r3, [pc, #320]	; (800b8ac <tcp_process+0x2c4>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	89db      	ldrh	r3, [r3, #14]
 800b770:	b29a      	uxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b784:	4b43      	ldr	r3, [pc, #268]	; (800b894 <tcp_process+0x2ac>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	1e5a      	subs	r2, r3, #1
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2204      	movs	r2, #4
 800b792:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3304      	adds	r3, #4
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f7ff f95c 	bl	800aa5c <tcp_eff_send_mss_impl>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	f241 121c 	movw	r2, #4380	; 0x111c
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	bf38      	it	cc
 800b7ba:	461a      	movcc	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	bf28      	it	cs
 800b7c6:	4613      	movcs	r3, r2
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d106      	bne.n	800b7e8 <tcp_process+0x200>
 800b7da:	4b2f      	ldr	r3, [pc, #188]	; (800b898 <tcp_process+0x2b0>)
 800b7dc:	f240 321a 	movw	r2, #794	; 0x31a
 800b7e0:	4933      	ldr	r1, [pc, #204]	; (800b8b0 <tcp_process+0x2c8>)
 800b7e2:	482f      	ldr	r0, [pc, #188]	; (800b8a0 <tcp_process+0x2b8>)
 800b7e4:	f00b fc12 	bl	801700c <iprintf>
      --pcb->snd_queuelen;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7fc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d111      	bne.n	800b828 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b808:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d106      	bne.n	800b81e <tcp_process+0x236>
 800b810:	4b21      	ldr	r3, [pc, #132]	; (800b898 <tcp_process+0x2b0>)
 800b812:	f240 3222 	movw	r2, #802	; 0x322
 800b816:	4927      	ldr	r1, [pc, #156]	; (800b8b4 <tcp_process+0x2cc>)
 800b818:	4821      	ldr	r0, [pc, #132]	; (800b8a0 <tcp_process+0x2b8>)
 800b81a:	f00b fbf7 	bl	801700c <iprintf>
        pcb->unsent = rseg->next;
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	669a      	str	r2, [r3, #104]	; 0x68
 800b826:	e003      	b.n	800b830 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800b830:	69f8      	ldr	r0, [r7, #28]
 800b832:	f7fe fde0 	bl	800a3f6 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d104      	bne.n	800b848 <tcp_process+0x260>
        pcb->rtime = -1;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b844:	861a      	strh	r2, [r3, #48]	; 0x30
 800b846:	e006      	b.n	800b856 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00a      	beq.n	800b876 <tcp_process+0x28e>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	6910      	ldr	r0, [r2, #16]
 800b86a:	2200      	movs	r2, #0
 800b86c:	6879      	ldr	r1, [r7, #4]
 800b86e:	4798      	blx	r3
 800b870:	4603      	mov	r3, r0
 800b872:	76bb      	strb	r3, [r7, #26]
 800b874:	e001      	b.n	800b87a <tcp_process+0x292>
 800b876:	2300      	movs	r3, #0
 800b878:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800b87a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b87e:	f113 0f0d 	cmn.w	r3, #13
 800b882:	d119      	bne.n	800b8b8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800b884:	f06f 030c 	mvn.w	r3, #12
 800b888:	e257      	b.n	800bd3a <tcp_process+0x752>
 800b88a:	bf00      	nop
 800b88c:	20000274 	.word	0x20000274
 800b890:	2000026c 	.word	0x2000026c
 800b894:	20000268 	.word	0x20000268
 800b898:	08019ba0 	.word	0x08019ba0
 800b89c:	08019d58 	.word	0x08019d58
 800b8a0:	08019be4 	.word	0x08019be4
 800b8a4:	20000275 	.word	0x20000275
 800b8a8:	20003950 	.word	0x20003950
 800b8ac:	20000258 	.word	0x20000258
 800b8b0:	08019d78 	.word	0x08019d78
 800b8b4:	08019d90 	.word	0x08019d90
      }
      tcp_ack_now(pcb);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7e9b      	ldrb	r3, [r3, #26]
 800b8bc:	f043 0302 	orr.w	r3, r3, #2
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800b8c6:	e22a      	b.n	800bd1e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800b8c8:	4b9f      	ldr	r3, [pc, #636]	; (800bb48 <tcp_process+0x560>)
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	f003 0310 	and.w	r3, r3, #16
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 8224 	beq.w	800bd1e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8d6:	4b9d      	ldr	r3, [pc, #628]	; (800bb4c <tcp_process+0x564>)
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	4b9d      	ldr	r3, [pc, #628]	; (800bb50 <tcp_process+0x568>)
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4b9c      	ldr	r3, [pc, #624]	; (800bb54 <tcp_process+0x56c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8e6:	4b9c      	ldr	r3, [pc, #624]	; (800bb58 <tcp_process+0x570>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ea:	885b      	ldrh	r3, [r3, #2]
 800b8ec:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8ee:	4a9a      	ldr	r2, [pc, #616]	; (800bb58 <tcp_process+0x570>)
 800b8f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8f2:	8812      	ldrh	r2, [r2, #0]
 800b8f4:	b292      	uxth	r2, r2
 800b8f6:	9201      	str	r2, [sp, #4]
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4b98      	ldr	r3, [pc, #608]	; (800bb5c <tcp_process+0x574>)
 800b8fc:	4a98      	ldr	r2, [pc, #608]	; (800bb60 <tcp_process+0x578>)
 800b8fe:	f002 fca3 	bl	800e248 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b908:	2b05      	cmp	r3, #5
 800b90a:	f200 8208 	bhi.w	800bd1e <tcp_process+0x736>
        pcb->rtime = 0;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f002 fd0d 	bl	800e334 <tcp_rexmit_rto>
    break;
 800b91a:	e200      	b.n	800bd1e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800b91c:	4b8a      	ldr	r3, [pc, #552]	; (800bb48 <tcp_process+0x560>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	f003 0310 	and.w	r3, r3, #16
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 8091 	beq.w	800ba4c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b92a:	4b88      	ldr	r3, [pc, #544]	; (800bb4c <tcp_process+0x564>)
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	3b01      	subs	r3, #1
 800b936:	2b00      	cmp	r3, #0
 800b938:	db71      	blt.n	800ba1e <tcp_process+0x436>
 800b93a:	4b84      	ldr	r3, [pc, #528]	; (800bb4c <tcp_process+0x564>)
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc6a      	bgt.n	800ba1e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2204      	movs	r2, #4
 800b94c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00b      	beq.n	800b96e <tcp_process+0x386>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d106      	bne.n	800b96e <tcp_process+0x386>
 800b960:	4b80      	ldr	r3, [pc, #512]	; (800bb64 <tcp_process+0x57c>)
 800b962:	f240 3251 	movw	r2, #849	; 0x351
 800b966:	4980      	ldr	r1, [pc, #512]	; (800bb68 <tcp_process+0x580>)
 800b968:	4880      	ldr	r0, [pc, #512]	; (800bb6c <tcp_process+0x584>)
 800b96a:	f00b fb4f 	bl	801700c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800b976:	23fa      	movs	r3, #250	; 0xfa
 800b978:	76bb      	strb	r3, [r7, #26]
 800b97a:	e011      	b.n	800b9a0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <tcp_process+0x3b4>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	6910      	ldr	r0, [r2, #16]
 800b990:	2200      	movs	r2, #0
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	4798      	blx	r3
 800b996:	4603      	mov	r3, r0
 800b998:	76bb      	strb	r3, [r7, #26]
 800b99a:	e001      	b.n	800b9a0 <tcp_process+0x3b8>
 800b99c:	23f0      	movs	r3, #240	; 0xf0
 800b99e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800b9a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00a      	beq.n	800b9be <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800b9a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b9ac:	f113 0f0d 	cmn.w	r3, #13
 800b9b0:	d002      	beq.n	800b9b8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7fd ff3a 	bl	800982c <tcp_abort>
          }
          return ERR_ABRT;
 800b9b8:	f06f 030c 	mvn.w	r3, #12
 800b9bc:	e1bd      	b.n	800bd3a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fa42 	bl	800be48 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800b9c4:	4b6a      	ldr	r3, [pc, #424]	; (800bb70 <tcp_process+0x588>)
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d005      	beq.n	800b9d8 <tcp_process+0x3f0>
          recv_acked--;
 800b9cc:	4b68      	ldr	r3, [pc, #416]	; (800bb70 <tcp_process+0x588>)
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	4b66      	ldr	r3, [pc, #408]	; (800bb70 <tcp_process+0x588>)
 800b9d6:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	f241 121c 	movw	r2, #4380	; 0x111c
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	bf38      	it	cc
 800b9e6:	461a      	movcc	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	bf28      	it	cs
 800b9f2:	4613      	movcs	r3, r2
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800b9fc:	4b5d      	ldr	r3, [pc, #372]	; (800bb74 <tcp_process+0x58c>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	f003 0320 	and.w	r3, r3, #32
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d034      	beq.n	800ba72 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	7e9b      	ldrb	r3, [r3, #26]
 800ba0c:	f043 0302 	orr.w	r3, r3, #2
 800ba10:	b2da      	uxtb	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2207      	movs	r2, #7
 800ba1a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ba1c:	e029      	b.n	800ba72 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba1e:	4b4b      	ldr	r3, [pc, #300]	; (800bb4c <tcp_process+0x564>)
 800ba20:	6818      	ldr	r0, [r3, #0]
 800ba22:	4b4b      	ldr	r3, [pc, #300]	; (800bb50 <tcp_process+0x568>)
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	4b4a      	ldr	r3, [pc, #296]	; (800bb54 <tcp_process+0x56c>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba2e:	4b4a      	ldr	r3, [pc, #296]	; (800bb58 <tcp_process+0x570>)
 800ba30:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba32:	885b      	ldrh	r3, [r3, #2]
 800ba34:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba36:	4a48      	ldr	r2, [pc, #288]	; (800bb58 <tcp_process+0x570>)
 800ba38:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba3a:	8812      	ldrh	r2, [r2, #0]
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	9201      	str	r2, [sp, #4]
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	4b46      	ldr	r3, [pc, #280]	; (800bb5c <tcp_process+0x574>)
 800ba44:	4a46      	ldr	r2, [pc, #280]	; (800bb60 <tcp_process+0x578>)
 800ba46:	f002 fbff 	bl	800e248 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ba4a:	e16a      	b.n	800bd22 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ba4c:	4b3e      	ldr	r3, [pc, #248]	; (800bb48 <tcp_process+0x560>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8164 	beq.w	800bd22 <tcp_process+0x73a>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5e:	1e5a      	subs	r2, r3, #1
 800ba60:	4b3c      	ldr	r3, [pc, #240]	; (800bb54 <tcp_process+0x56c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	f040 815c 	bne.w	800bd22 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f002 fc98 	bl	800e3a0 <tcp_rexmit>
    break;
 800ba70:	e157      	b.n	800bd22 <tcp_process+0x73a>
 800ba72:	e156      	b.n	800bd22 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f9e7 	bl	800be48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ba7a:	4b3e      	ldr	r3, [pc, #248]	; (800bb74 <tcp_process+0x58c>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 814f 	beq.w	800bd26 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	7e9b      	ldrb	r3, [r3, #26]
 800ba8c:	f043 0302 	orr.w	r3, r3, #2
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2207      	movs	r2, #7
 800ba9a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ba9c:	e143      	b.n	800bd26 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f9d2 	bl	800be48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800baa4:	4b33      	ldr	r3, [pc, #204]	; (800bb74 <tcp_process+0x58c>)
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	f003 0320 	and.w	r3, r3, #32
 800baac:	2b00      	cmp	r3, #0
 800baae:	d074      	beq.n	800bb9a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bab0:	4b25      	ldr	r3, [pc, #148]	; (800bb48 <tcp_process+0x560>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	f003 0310 	and.w	r3, r3, #16
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d063      	beq.n	800bb84 <tcp_process+0x59c>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bac0:	4b22      	ldr	r3, [pc, #136]	; (800bb4c <tcp_process+0x564>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d15d      	bne.n	800bb84 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d159      	bne.n	800bb84 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	7e9b      	ldrb	r3, [r3, #26]
 800bad4:	f043 0302 	orr.w	r3, r3, #2
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7fe fee6 	bl	800a8b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <tcp_process+0x590>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	429a      	cmp	r2, r3
 800baec:	d105      	bne.n	800bafa <tcp_process+0x512>
 800baee:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <tcp_process+0x590>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	4a20      	ldr	r2, [pc, #128]	; (800bb78 <tcp_process+0x590>)
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	e013      	b.n	800bb22 <tcp_process+0x53a>
 800bafa:	4b1f      	ldr	r3, [pc, #124]	; (800bb78 <tcp_process+0x590>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e00c      	b.n	800bb1c <tcp_process+0x534>
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	68db      	ldr	r3, [r3, #12]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d104      	bne.n	800bb16 <tcp_process+0x52e>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68da      	ldr	r2, [r3, #12]
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	60da      	str	r2, [r3, #12]
 800bb14:	e005      	b.n	800bb22 <tcp_process+0x53a>
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	617b      	str	r3, [r7, #20]
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1ef      	bne.n	800bb02 <tcp_process+0x51a>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	60da      	str	r2, [r3, #12]
 800bb28:	4b14      	ldr	r3, [pc, #80]	; (800bb7c <tcp_process+0x594>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	220a      	movs	r2, #10
 800bb32:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb34:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <tcp_process+0x598>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	60da      	str	r2, [r3, #12]
 800bb3c:	4a10      	ldr	r2, [pc, #64]	; (800bb80 <tcp_process+0x598>)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6013      	str	r3, [r2, #0]
 800bb42:	f002 fdd1 	bl	800e6e8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800bb46:	e0f0      	b.n	800bd2a <tcp_process+0x742>
 800bb48:	20000274 	.word	0x20000274
 800bb4c:	2000026c 	.word	0x2000026c
 800bb50:	20000272 	.word	0x20000272
 800bb54:	20000268 	.word	0x20000268
 800bb58:	20000258 	.word	0x20000258
 800bb5c:	2000040c 	.word	0x2000040c
 800bb60:	20000410 	.word	0x20000410
 800bb64:	08019ba0 	.word	0x08019ba0
 800bb68:	08019da4 	.word	0x08019da4
 800bb6c:	08019be4 	.word	0x08019be4
 800bb70:	20000270 	.word	0x20000270
 800bb74:	20000275 	.word	0x20000275
 800bb78:	2000394c 	.word	0x2000394c
 800bb7c:	20003948 	.word	0x20003948
 800bb80:	2000395c 	.word	0x2000395c
        tcp_ack_now(pcb);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7e9b      	ldrb	r3, [r3, #26]
 800bb88:	f043 0302 	orr.w	r3, r3, #2
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2208      	movs	r2, #8
 800bb96:	751a      	strb	r2, [r3, #20]
    break;
 800bb98:	e0c7      	b.n	800bd2a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb9a:	4b6a      	ldr	r3, [pc, #424]	; (800bd44 <tcp_process+0x75c>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	f003 0310 	and.w	r3, r3, #16
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 80c1 	beq.w	800bd2a <tcp_process+0x742>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbac:	4b66      	ldr	r3, [pc, #408]	; (800bd48 <tcp_process+0x760>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	f040 80ba 	bne.w	800bd2a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f040 80b5 	bne.w	800bd2a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2206      	movs	r2, #6
 800bbc4:	751a      	strb	r2, [r3, #20]
    break;
 800bbc6:	e0b0      	b.n	800bd2a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 f93d 	bl	800be48 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800bbce:	4b5f      	ldr	r3, [pc, #380]	; (800bd4c <tcp_process+0x764>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	f003 0320 	and.w	r3, r3, #32
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 80a9 	beq.w	800bd2e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7e9b      	ldrb	r3, [r3, #26]
 800bbe0:	f043 0302 	orr.w	r3, r3, #2
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fe fe60 	bl	800a8b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bbf0:	4b57      	ldr	r3, [pc, #348]	; (800bd50 <tcp_process+0x768>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d105      	bne.n	800bc06 <tcp_process+0x61e>
 800bbfa:	4b55      	ldr	r3, [pc, #340]	; (800bd50 <tcp_process+0x768>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	4a53      	ldr	r2, [pc, #332]	; (800bd50 <tcp_process+0x768>)
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	e013      	b.n	800bc2e <tcp_process+0x646>
 800bc06:	4b52      	ldr	r3, [pc, #328]	; (800bd50 <tcp_process+0x768>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	613b      	str	r3, [r7, #16]
 800bc0c:	e00c      	b.n	800bc28 <tcp_process+0x640>
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d104      	bne.n	800bc22 <tcp_process+0x63a>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	60da      	str	r2, [r3, #12]
 800bc20:	e005      	b.n	800bc2e <tcp_process+0x646>
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	613b      	str	r3, [r7, #16]
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1ef      	bne.n	800bc0e <tcp_process+0x626>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	60da      	str	r2, [r3, #12]
 800bc34:	4b47      	ldr	r3, [pc, #284]	; (800bd54 <tcp_process+0x76c>)
 800bc36:	2201      	movs	r2, #1
 800bc38:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	220a      	movs	r2, #10
 800bc3e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800bc40:	4b45      	ldr	r3, [pc, #276]	; (800bd58 <tcp_process+0x770>)
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	60da      	str	r2, [r3, #12]
 800bc48:	4a43      	ldr	r2, [pc, #268]	; (800bd58 <tcp_process+0x770>)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6013      	str	r3, [r2, #0]
 800bc4e:	f002 fd4b 	bl	800e6e8 <tcp_timer_needed>
    }
    break;
 800bc52:	e06c      	b.n	800bd2e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f8f7 	bl	800be48 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bc5a:	4b3a      	ldr	r3, [pc, #232]	; (800bd44 <tcp_process+0x75c>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0310 	and.w	r3, r3, #16
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d065      	beq.n	800bd32 <tcp_process+0x74a>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc6a:	4b37      	ldr	r3, [pc, #220]	; (800bd48 <tcp_process+0x760>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d15f      	bne.n	800bd32 <tcp_process+0x74a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d15b      	bne.n	800bd32 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7fe fe18 	bl	800a8b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bc80:	4b33      	ldr	r3, [pc, #204]	; (800bd50 <tcp_process+0x768>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d105      	bne.n	800bc96 <tcp_process+0x6ae>
 800bc8a:	4b31      	ldr	r3, [pc, #196]	; (800bd50 <tcp_process+0x768>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	4a2f      	ldr	r2, [pc, #188]	; (800bd50 <tcp_process+0x768>)
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	e013      	b.n	800bcbe <tcp_process+0x6d6>
 800bc96:	4b2e      	ldr	r3, [pc, #184]	; (800bd50 <tcp_process+0x768>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e00c      	b.n	800bcb8 <tcp_process+0x6d0>
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d104      	bne.n	800bcb2 <tcp_process+0x6ca>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	60da      	str	r2, [r3, #12]
 800bcb0:	e005      	b.n	800bcbe <tcp_process+0x6d6>
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1ef      	bne.n	800bc9e <tcp_process+0x6b6>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	60da      	str	r2, [r3, #12]
 800bcc4:	4b23      	ldr	r3, [pc, #140]	; (800bd54 <tcp_process+0x76c>)
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	220a      	movs	r2, #10
 800bcce:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800bcd0:	4b21      	ldr	r3, [pc, #132]	; (800bd58 <tcp_process+0x770>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	60da      	str	r2, [r3, #12]
 800bcd8:	4a1f      	ldr	r2, [pc, #124]	; (800bd58 <tcp_process+0x770>)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	f002 fd03 	bl	800e6e8 <tcp_timer_needed>
    }
    break;
 800bce2:	e026      	b.n	800bd32 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f8af 	bl	800be48 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bcea:	4b16      	ldr	r3, [pc, #88]	; (800bd44 <tcp_process+0x75c>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d01f      	beq.n	800bd36 <tcp_process+0x74e>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcfa:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <tcp_process+0x760>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d119      	bne.n	800bd36 <tcp_process+0x74e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d115      	bne.n	800bd36 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800bd0a:	4b10      	ldr	r3, [pc, #64]	; (800bd4c <tcp_process+0x764>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	f043 0310 	orr.w	r3, r3, #16
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	4b0d      	ldr	r3, [pc, #52]	; (800bd4c <tcp_process+0x764>)
 800bd16:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bd18:	e00d      	b.n	800bd36 <tcp_process+0x74e>
  default:
    break;
 800bd1a:	bf00      	nop
 800bd1c:	e00c      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd1e:	bf00      	nop
 800bd20:	e00a      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd22:	bf00      	nop
 800bd24:	e008      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd26:	bf00      	nop
 800bd28:	e006      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd2a:	bf00      	nop
 800bd2c:	e004      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd2e:	bf00      	nop
 800bd30:	e002      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd32:	bf00      	nop
 800bd34:	e000      	b.n	800bd38 <tcp_process+0x750>
    break;
 800bd36:	bf00      	nop
  }
  return ERR_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20000274 	.word	0x20000274
 800bd48:	2000026c 	.word	0x2000026c
 800bd4c:	20000275 	.word	0x20000275
 800bd50:	2000394c 	.word	0x2000394c
 800bd54:	20003948 	.word	0x20003948
 800bd58:	2000395c 	.word	0x2000395c

0800bd5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	899b      	ldrh	r3, [r3, #12]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fb ff2e 	bl	8007bd0 <lwip_htons>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d027      	beq.n	800bdce <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bd7e:	6838      	ldr	r0, [r7, #0]
 800bd80:	f7fe fb25 	bl	800a3ce <tcp_segs_free>
    next = NULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	603b      	str	r3, [r7, #0]
 800bd88:	e055      	b.n	800be36 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	899b      	ldrh	r3, [r3, #12]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fb ff1c 	bl	8007bd0 <lwip_htons>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f003 0301 	and.w	r3, r3, #1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00d      	beq.n	800bdbe <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	899b      	ldrh	r3, [r3, #12]
 800bda8:	b29c      	uxth	r4, r3
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7fb ff10 	bl	8007bd0 <lwip_htons>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	4322      	orrs	r2, r4
 800bdba:	b292      	uxth	r2, r2
 800bdbc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7fe fb14 	bl	800a3f6 <tcp_seg_free>
    while (next &&
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00e      	beq.n	800bdf2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	891b      	ldrh	r3, [r3, #8]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	4b1a      	ldr	r3, [pc, #104]	; (800be44 <tcp_oos_insert_segment+0xe8>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	441a      	add	r2, r3
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	8909      	ldrh	r1, [r1, #8]
 800bdea:	440b      	add	r3, r1
 800bdec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	dacb      	bge.n	800bd8a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d01e      	beq.n	800be36 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	891b      	ldrh	r3, [r3, #8]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4b11      	ldr	r3, [pc, #68]	; (800be44 <tcp_oos_insert_segment+0xe8>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	441a      	add	r2, r3
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd12      	ble.n	800be36 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b29a      	uxth	r2, r3
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <tcp_oos_insert_segment+0xe8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	b29a      	uxth	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	891b      	ldrh	r3, [r3, #8]
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f7fc fe85 	bl	8008b40 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	601a      	str	r2, [r3, #0]
}
 800be3c:	bf00      	nop
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	bd90      	pop	{r4, r7, pc}
 800be44:	20000268 	.word	0x20000268

0800be48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4a:	b08d      	sub	sp, #52	; 0x34
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	7d1b      	ldrb	r3, [r3, #20]
 800be58:	2b03      	cmp	r3, #3
 800be5a:	d806      	bhi.n	800be6a <tcp_receive+0x22>
 800be5c:	4ba6      	ldr	r3, [pc, #664]	; (800c0f8 <tcp_receive+0x2b0>)
 800be5e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800be62:	49a6      	ldr	r1, [pc, #664]	; (800c0fc <tcp_receive+0x2b4>)
 800be64:	48a6      	ldr	r0, [pc, #664]	; (800c100 <tcp_receive+0x2b8>)
 800be66:	f00b f8d1 	bl	801700c <iprintf>

  if (flags & TCP_ACK) {
 800be6a:	4ba6      	ldr	r3, [pc, #664]	; (800c104 <tcp_receive+0x2bc>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 0310 	and.w	r3, r3, #16
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 82bf 	beq.w	800c3f6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be84:	4413      	add	r3, r2
 800be86:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be8c:	4b9e      	ldr	r3, [pc, #632]	; (800c108 <tcp_receive+0x2c0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	db1b      	blt.n	800bece <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be9a:	4b9b      	ldr	r3, [pc, #620]	; (800c108 <tcp_receive+0x2c0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d106      	bne.n	800beb0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bea6:	4b99      	ldr	r3, [pc, #612]	; (800c10c <tcp_receive+0x2c4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	db0e      	blt.n	800bece <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beb4:	4b95      	ldr	r3, [pc, #596]	; (800c10c <tcp_receive+0x2c4>)
 800beb6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800beb8:	429a      	cmp	r2, r3
 800beba:	d141      	bne.n	800bf40 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bebc:	4b94      	ldr	r3, [pc, #592]	; (800c110 <tcp_receive+0x2c8>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	89db      	ldrh	r3, [r3, #14]
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beca:	429a      	cmp	r2, r3
 800becc:	d938      	bls.n	800bf40 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bece:	4b90      	ldr	r3, [pc, #576]	; (800c110 <tcp_receive+0x2c8>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	89db      	ldrh	r3, [r3, #14]
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bee8:	429a      	cmp	r2, r3
 800beea:	d205      	bcs.n	800bef8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800bef8:	4b83      	ldr	r3, [pc, #524]	; (800c108 <tcp_receive+0x2c0>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800bf00:	4b82      	ldr	r3, [pc, #520]	; (800c10c <tcp_receive+0x2c4>)
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10d      	bne.n	800bf2e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d111      	bne.n	800bf40 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800bf2c:	e008      	b.n	800bf40 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf40:	4b72      	ldr	r3, [pc, #456]	; (800c10c <tcp_receive+0x2c4>)
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	dc53      	bgt.n	800bff6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800bf4e:	4b71      	ldr	r3, [pc, #452]	; (800c114 <tcp_receive+0x2cc>)
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d146      	bne.n	800bfe4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800bf60:	4413      	add	r3, r2
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d13d      	bne.n	800bfe4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	db38      	blt.n	800bfe4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf76:	4b65      	ldr	r3, [pc, #404]	; (800c10c <tcp_receive+0x2c4>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d132      	bne.n	800bfe4 <tcp_receive+0x19c>
              found_dupack = 1;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf88:	2bff      	cmp	r3, #255	; 0xff
 800bf8a:	d007      	beq.n	800bf9c <tcp_receive+0x154>
                ++pcb->dupacks;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bf92:	3301      	adds	r3, #1
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	d916      	bls.n	800bfd4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfb0:	4413      	add	r3, r2
 800bfb2:	b29a      	uxth	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d912      	bls.n	800bfe4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfc8:	4413      	add	r3, r2
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800bfd2:	e007      	b.n	800bfe4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d102      	bne.n	800bfe4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f002 fa2e 	bl	800e440 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bfe4:	69fb      	ldr	r3, [r7, #28]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f040 8169 	bne.w	800c2be <tcp_receive+0x476>
        pcb->dupacks = 0;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bff4:	e163      	b.n	800c2be <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800bff6:	4b45      	ldr	r3, [pc, #276]	; (800c10c <tcp_receive+0x2c4>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	3b01      	subs	r3, #1
 800c002:	2b00      	cmp	r3, #0
 800c004:	f2c0 8107 	blt.w	800c216 <tcp_receive+0x3ce>
 800c008:	4b40      	ldr	r3, [pc, #256]	; (800c10c <tcp_receive+0x2c4>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	f300 80ff 	bgt.w	800c216 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7e9b      	ldrb	r3, [r3, #26]
 800c01c:	f003 0304 	and.w	r3, r3, #4
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00c      	beq.n	800c03e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	7e9b      	ldrb	r3, [r3, #26]
 800c028:	f023 0304 	bic.w	r3, r3, #4
 800c02c:	b2da      	uxtb	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c04c:	10db      	asrs	r3, r3, #3
 800c04e:	b21b      	sxth	r3, r3
 800c050:	b29a      	uxth	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c058:	b29b      	uxth	r3, r3
 800c05a:	4413      	add	r3, r2
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	b21a      	sxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c06e:	4b27      	ldr	r3, [pc, #156]	; (800c10c <tcp_receive+0x2c4>)
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	7d1b      	ldrb	r3, [r3, #20]
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	f240 8094 	bls.w	800c1a8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d216      	bcs.n	800c0be <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c09a:	4413      	add	r3, r2
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d97f      	bls.n	800c1a8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0b2:	4413      	add	r3, r2
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c0bc:	e074      	b.n	800c1a8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0ce:	fb03 f301 	mul.w	r3, r3, r1
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800c0d8:	fb93 f3f1 	sdiv	r3, r3, r1
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	4413      	add	r3, r2
 800c0e0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c0e8:	8a7a      	ldrh	r2, [r7, #18]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d95c      	bls.n	800c1a8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8a7a      	ldrh	r2, [r7, #18]
 800c0f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c0f6:	e057      	b.n	800c1a8 <tcp_receive+0x360>
 800c0f8:	08019ba0 	.word	0x08019ba0
 800c0fc:	08019dc4 	.word	0x08019dc4
 800c100:	08019be4 	.word	0x08019be4
 800c104:	20000274 	.word	0x20000274
 800c108:	20000268 	.word	0x20000268
 800c10c:	2000026c 	.word	0x2000026c
 800c110:	20000258 	.word	0x20000258
 800c114:	20000272 	.word	0x20000272
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c11c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	4618      	mov	r0, r3
 800c134:	f7fc ff0c 	bl	8008f50 <pbuf_clen>
 800c138:	4603      	mov	r3, r0
 800c13a:	429c      	cmp	r4, r3
 800c13c:	d206      	bcs.n	800c14c <tcp_receive+0x304>
 800c13e:	4b70      	ldr	r3, [pc, #448]	; (800c300 <tcp_receive+0x4b8>)
 800c140:	f240 429e 	movw	r2, #1182	; 0x49e
 800c144:	496f      	ldr	r1, [pc, #444]	; (800c304 <tcp_receive+0x4bc>)
 800c146:	4870      	ldr	r0, [pc, #448]	; (800c308 <tcp_receive+0x4c0>)
 800c148:	f00a ff60 	bl	801700c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	4618      	mov	r0, r3
 800c152:	f7fc fefd 	bl	8008f50 <pbuf_clen>
 800c156:	4603      	mov	r3, r0
 800c158:	461a      	mov	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c160:	1a9b      	subs	r3, r3, r2
 800c162:	b29a      	uxth	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	891a      	ldrh	r2, [r3, #8]
 800c16e:	4b67      	ldr	r3, [pc, #412]	; (800c30c <tcp_receive+0x4c4>)
 800c170:	881b      	ldrh	r3, [r3, #0]
 800c172:	4413      	add	r3, r2
 800c174:	b29a      	uxth	r2, r3
 800c176:	4b65      	ldr	r3, [pc, #404]	; (800c30c <tcp_receive+0x4c4>)
 800c178:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800c17a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c17c:	f7fe f93b 	bl	800a3f6 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00e      	beq.n	800c1a8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10a      	bne.n	800c1a8 <tcp_receive+0x360>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <tcp_receive+0x360>
 800c19a:	4b59      	ldr	r3, [pc, #356]	; (800c300 <tcp_receive+0x4b8>)
 800c19c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800c1a0:	495b      	ldr	r1, [pc, #364]	; (800c310 <tcp_receive+0x4c8>)
 800c1a2:	4859      	ldr	r0, [pc, #356]	; (800c308 <tcp_receive+0x4c0>)
 800c1a4:	f00a ff32 	bl	801700c <iprintf>
      while (pcb->unacked != NULL &&
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d022      	beq.n	800c1f6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fb fd17 	bl	8007bec <lwip_htonl>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c4:	891b      	ldrh	r3, [r3, #8]
 800c1c6:	461d      	mov	r5, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	899b      	ldrh	r3, [r3, #12]
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fb fcfc 	bl	8007bd0 <lwip_htons>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	f003 0303 	and.w	r3, r3, #3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <tcp_receive+0x39e>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <tcp_receive+0x3a0>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	442b      	add	r3, r5
 800c1ea:	18e2      	adds	r2, r4, r3
 800c1ec:	4b49      	ldr	r3, [pc, #292]	; (800c314 <tcp_receive+0x4cc>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	dd90      	ble.n	800c118 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d104      	bne.n	800c208 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c204:	861a      	strh	r2, [r3, #48]	; 0x30
 800c206:	e002      	b.n	800c20e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2200      	movs	r2, #0
 800c212:	76da      	strb	r2, [r3, #27]
 800c214:	e002      	b.n	800c21c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 fd30 	bl	800dc7c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c21c:	e04f      	b.n	800c2be <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fc fe81 	bl	8008f50 <pbuf_clen>
 800c24e:	4603      	mov	r3, r0
 800c250:	429c      	cmp	r4, r3
 800c252:	d206      	bcs.n	800c262 <tcp_receive+0x41a>
 800c254:	4b2a      	ldr	r3, [pc, #168]	; (800c300 <tcp_receive+0x4b8>)
 800c256:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c25a:	492a      	ldr	r1, [pc, #168]	; (800c304 <tcp_receive+0x4bc>)
 800c25c:	482a      	ldr	r0, [pc, #168]	; (800c308 <tcp_receive+0x4c0>)
 800c25e:	f00a fed5 	bl	801700c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	4618      	mov	r0, r3
 800c268:	f7fc fe72 	bl	8008f50 <pbuf_clen>
 800c26c:	4603      	mov	r3, r0
 800c26e:	461a      	mov	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c276:	1a9b      	subs	r3, r3, r2
 800c278:	b29a      	uxth	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	891a      	ldrh	r2, [r3, #8]
 800c284:	4b21      	ldr	r3, [pc, #132]	; (800c30c <tcp_receive+0x4c4>)
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	4413      	add	r3, r2
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <tcp_receive+0x4c4>)
 800c28e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800c290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c292:	f7fe f8b0 	bl	800a3f6 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00e      	beq.n	800c2be <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <tcp_receive+0x476>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <tcp_receive+0x476>
 800c2b0:	4b13      	ldr	r3, [pc, #76]	; (800c300 <tcp_receive+0x4b8>)
 800c2b2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800c2b6:	4916      	ldr	r1, [pc, #88]	; (800c310 <tcp_receive+0x4c8>)
 800c2b8:	4813      	ldr	r0, [pc, #76]	; (800c308 <tcp_receive+0x4c0>)
 800c2ba:	f00a fea7 	bl	801700c <iprintf>
    while (pcb->unsent != NULL &&
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d036      	beq.n	800c334 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c2c6:	4b13      	ldr	r3, [pc, #76]	; (800c314 <tcp_receive+0x4cc>)
 800c2c8:	681c      	ldr	r4, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fb fc8a 	bl	8007bec <lwip_htonl>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2de:	891b      	ldrh	r3, [r3, #8]
 800c2e0:	461e      	mov	r6, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	899b      	ldrh	r3, [r3, #12]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fb fc6f 	bl	8007bd0 <lwip_htons>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f003 0303 	and.w	r3, r3, #3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00d      	beq.n	800c318 <tcp_receive+0x4d0>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e00c      	b.n	800c31a <tcp_receive+0x4d2>
 800c300:	08019ba0 	.word	0x08019ba0
 800c304:	08019de0 	.word	0x08019de0
 800c308:	08019be4 	.word	0x08019be4
 800c30c:	20000270 	.word	0x20000270
 800c310:	08019e08 	.word	0x08019e08
 800c314:	2000026c 	.word	0x2000026c
 800c318:	2300      	movs	r3, #0
 800c31a:	4433      	add	r3, r6
 800c31c:	442b      	add	r3, r5
 800c31e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800c320:	2b00      	cmp	r3, #0
 800c322:	db07      	blt.n	800c334 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800c324:	4b8d      	ldr	r3, [pc, #564]	; (800c55c <tcp_receive+0x714>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f77f af75 	ble.w	800c21e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c33a:	4b89      	ldr	r3, [pc, #548]	; (800c560 <tcp_receive+0x718>)
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	4413      	add	r3, r2
 800c340:	b29a      	uxth	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d052      	beq.n	800c3f6 <tcp_receive+0x5ae>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c354:	4b81      	ldr	r3, [pc, #516]	; (800c55c <tcp_receive+0x714>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da4b      	bge.n	800c3f6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c35e:	4b81      	ldr	r3, [pc, #516]	; (800c564 <tcp_receive+0x71c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	b29a      	uxth	r2, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c368:	b29b      	uxth	r3, r3
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800c370:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c378:	10db      	asrs	r3, r3, #3
 800c37a:	b21b      	sxth	r3, r3
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	b29b      	uxth	r3, r3
 800c382:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c38e:	4413      	add	r3, r2
 800c390:	b29b      	uxth	r3, r3
 800c392:	b21a      	sxth	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c398:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	da03      	bge.n	800c3a8 <tcp_receive+0x560>
        m = -m;
 800c3a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3a2:	425b      	negs	r3, r3
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800c3a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3b0:	109b      	asrs	r3, r3, #2
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3c6:	4413      	add	r3, r2
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	b21a      	sxth	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c3d6:	10db      	asrs	r3, r3, #3
 800c3d8:	b21b      	sxth	r3, r3
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	4413      	add	r3, r2
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	b21a      	sxth	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c3f6:	4b5c      	ldr	r3, [pc, #368]	; (800c568 <tcp_receive+0x720>)
 800c3f8:	881b      	ldrh	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 84f1 	beq.w	800cde2 <tcp_receive+0xf9a>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	7d1b      	ldrb	r3, [r3, #20]
 800c404:	2b06      	cmp	r3, #6
 800c406:	f200 84ec 	bhi.w	800cde2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c40e:	4b57      	ldr	r3, [pc, #348]	; (800c56c <tcp_receive+0x724>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	3b01      	subs	r3, #1
 800c416:	2b00      	cmp	r3, #0
 800c418:	f2c0 80b8 	blt.w	800c58c <tcp_receive+0x744>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c420:	4b51      	ldr	r3, [pc, #324]	; (800c568 <tcp_receive+0x720>)
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	4619      	mov	r1, r3
 800c426:	4b51      	ldr	r3, [pc, #324]	; (800c56c <tcp_receive+0x724>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	440b      	add	r3, r1
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	3301      	adds	r3, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	f300 80ab 	bgt.w	800c58c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c436:	4b4e      	ldr	r3, [pc, #312]	; (800c570 <tcp_receive+0x728>)
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c440:	4b4a      	ldr	r3, [pc, #296]	; (800c56c <tcp_receive+0x724>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c448:	4b49      	ldr	r3, [pc, #292]	; (800c570 <tcp_receive+0x728>)
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d106      	bne.n	800c45e <tcp_receive+0x616>
 800c450:	4b48      	ldr	r3, [pc, #288]	; (800c574 <tcp_receive+0x72c>)
 800c452:	f240 523c 	movw	r2, #1340	; 0x53c
 800c456:	4948      	ldr	r1, [pc, #288]	; (800c578 <tcp_receive+0x730>)
 800c458:	4848      	ldr	r0, [pc, #288]	; (800c57c <tcp_receive+0x734>)
 800c45a:	f00a fdd7 	bl	801700c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c464:	4293      	cmp	r3, r2
 800c466:	dd06      	ble.n	800c476 <tcp_receive+0x62e>
 800c468:	4b42      	ldr	r3, [pc, #264]	; (800c574 <tcp_receive+0x72c>)
 800c46a:	f240 523d 	movw	r2, #1341	; 0x53d
 800c46e:	4944      	ldr	r1, [pc, #272]	; (800c580 <tcp_receive+0x738>)
 800c470:	4842      	ldr	r0, [pc, #264]	; (800c57c <tcp_receive+0x734>)
 800c472:	f00a fdcb 	bl	801700c <iprintf>
      if (inseg.p->len < off) {
 800c476:	4b3e      	ldr	r3, [pc, #248]	; (800c570 <tcp_receive+0x728>)
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	895b      	ldrh	r3, [r3, #10]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	4293      	cmp	r3, r2
 800c482:	dd3e      	ble.n	800c502 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c484:	4b3a      	ldr	r3, [pc, #232]	; (800c570 <tcp_receive+0x728>)
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	891b      	ldrh	r3, [r3, #8]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	4293      	cmp	r3, r2
 800c490:	dd06      	ble.n	800c4a0 <tcp_receive+0x658>
 800c492:	4b38      	ldr	r3, [pc, #224]	; (800c574 <tcp_receive+0x72c>)
 800c494:	f240 523f 	movw	r2, #1343	; 0x53f
 800c498:	493a      	ldr	r1, [pc, #232]	; (800c584 <tcp_receive+0x73c>)
 800c49a:	4838      	ldr	r0, [pc, #224]	; (800c57c <tcp_receive+0x734>)
 800c49c:	f00a fdb6 	bl	801700c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c4a0:	4b33      	ldr	r3, [pc, #204]	; (800c570 <tcp_receive+0x728>)
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	891a      	ldrh	r2, [r3, #8]
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	1ad3      	subs	r3, r2, r3
 800c4ac:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800c4ae:	e00e      	b.n	800c4ce <tcp_receive+0x686>
          off -= p->len;
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	895b      	ldrh	r3, [r3, #10]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	1a9b      	subs	r3, r3, r2
 800c4ba:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	8a3a      	ldrh	r2, [r7, #16]
 800c4c0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	895b      	ldrh	r3, [r3, #10]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	dcea      	bgt.n	800c4b0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	b29b      	uxth	r3, r3
 800c4de:	425b      	negs	r3, r3
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	b21b      	sxth	r3, r3
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	69b8      	ldr	r0, [r7, #24]
 800c4e8:	f7fc fc7a 	bl	8008de0 <pbuf_header>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d01c      	beq.n	800c52c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c4f2:	4b20      	ldr	r3, [pc, #128]	; (800c574 <tcp_receive+0x72c>)
 800c4f4:	f240 524c 	movw	r2, #1356	; 0x54c
 800c4f8:	4923      	ldr	r1, [pc, #140]	; (800c588 <tcp_receive+0x740>)
 800c4fa:	4820      	ldr	r0, [pc, #128]	; (800c57c <tcp_receive+0x734>)
 800c4fc:	f00a fd86 	bl	801700c <iprintf>
 800c500:	e014      	b.n	800c52c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800c502:	4b1b      	ldr	r3, [pc, #108]	; (800c570 <tcp_receive+0x728>)
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c508:	b292      	uxth	r2, r2
 800c50a:	4252      	negs	r2, r2
 800c50c:	b292      	uxth	r2, r2
 800c50e:	b212      	sxth	r2, r2
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7fc fc64 	bl	8008de0 <pbuf_header>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d006      	beq.n	800c52c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800c51e:	4b15      	ldr	r3, [pc, #84]	; (800c574 <tcp_receive+0x72c>)
 800c520:	f240 5251 	movw	r2, #1361	; 0x551
 800c524:	4918      	ldr	r1, [pc, #96]	; (800c588 <tcp_receive+0x740>)
 800c526:	4815      	ldr	r0, [pc, #84]	; (800c57c <tcp_receive+0x734>)
 800c528:	f00a fd70 	bl	801700c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c52c:	4b10      	ldr	r3, [pc, #64]	; (800c570 <tcp_receive+0x728>)
 800c52e:	891a      	ldrh	r2, [r3, #8]
 800c530:	4b0e      	ldr	r3, [pc, #56]	; (800c56c <tcp_receive+0x724>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	b299      	uxth	r1, r3
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	1acb      	subs	r3, r1, r3
 800c53e:	b29b      	uxth	r3, r3
 800c540:	4413      	add	r3, r2
 800c542:	b29a      	uxth	r2, r3
 800c544:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <tcp_receive+0x728>)
 800c546:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	4a07      	ldr	r2, [pc, #28]	; (800c56c <tcp_receive+0x724>)
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	4b07      	ldr	r3, [pc, #28]	; (800c570 <tcp_receive+0x728>)
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	4a05      	ldr	r2, [pc, #20]	; (800c56c <tcp_receive+0x724>)
 800c556:	6812      	ldr	r2, [r2, #0]
 800c558:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c55a:	e025      	b.n	800c5a8 <tcp_receive+0x760>
 800c55c:	2000026c 	.word	0x2000026c
 800c560:	20000270 	.word	0x20000270
 800c564:	20003950 	.word	0x20003950
 800c568:	20000272 	.word	0x20000272
 800c56c:	20000268 	.word	0x20000268
 800c570:	20000248 	.word	0x20000248
 800c574:	08019ba0 	.word	0x08019ba0
 800c578:	08019e28 	.word	0x08019e28
 800c57c:	08019be4 	.word	0x08019be4
 800c580:	08019e38 	.word	0x08019e38
 800c584:	08019e48 	.word	0x08019e48
 800c588:	08019e58 	.word	0x08019e58
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c58c:	4b87      	ldr	r3, [pc, #540]	; (800c7ac <tcp_receive+0x964>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	2b00      	cmp	r3, #0
 800c598:	da06      	bge.n	800c5a8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7e9b      	ldrb	r3, [r3, #26]
 800c59e:	f043 0302 	orr.w	r3, r3, #2
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c5a8:	4b80      	ldr	r3, [pc, #512]	; (800c7ac <tcp_receive+0x964>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f2c0 8410 	blt.w	800cdd8 <tcp_receive+0xf90>
 800c5b8:	4b7c      	ldr	r3, [pc, #496]	; (800c7ac <tcp_receive+0x964>)
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5c4:	440b      	add	r3, r1
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f300 8404 	bgt.w	800cdd8 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5d4:	4b75      	ldr	r3, [pc, #468]	; (800c7ac <tcp_receive+0x964>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	f040 8287 	bne.w	800caec <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c5de:	4b74      	ldr	r3, [pc, #464]	; (800c7b0 <tcp_receive+0x968>)
 800c5e0:	891c      	ldrh	r4, [r3, #8]
 800c5e2:	4b73      	ldr	r3, [pc, #460]	; (800c7b0 <tcp_receive+0x968>)
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	899b      	ldrh	r3, [r3, #12]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fb faf0 	bl	8007bd0 <lwip_htons>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	f003 0303 	and.w	r3, r3, #3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <tcp_receive+0x7b6>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <tcp_receive+0x7b8>
 800c5fe:	2300      	movs	r3, #0
 800c600:	4423      	add	r3, r4
 800c602:	b29a      	uxth	r2, r3
 800c604:	4b6b      	ldr	r3, [pc, #428]	; (800c7b4 <tcp_receive+0x96c>)
 800c606:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c60c:	4b69      	ldr	r3, [pc, #420]	; (800c7b4 <tcp_receive+0x96c>)
 800c60e:	881b      	ldrh	r3, [r3, #0]
 800c610:	429a      	cmp	r2, r3
 800c612:	d26e      	bcs.n	800c6f2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c614:	4b66      	ldr	r3, [pc, #408]	; (800c7b0 <tcp_receive+0x968>)
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	899b      	ldrh	r3, [r3, #12]
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fb fad7 	bl	8007bd0 <lwip_htons>
 800c622:	4603      	mov	r3, r0
 800c624:	f003 0301 	and.w	r3, r3, #1
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01b      	beq.n	800c664 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c62c:	4b60      	ldr	r3, [pc, #384]	; (800c7b0 <tcp_receive+0x968>)
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	899b      	ldrh	r3, [r3, #12]
 800c632:	b29b      	uxth	r3, r3
 800c634:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c638:	b29c      	uxth	r4, r3
 800c63a:	4b5d      	ldr	r3, [pc, #372]	; (800c7b0 <tcp_receive+0x968>)
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	899b      	ldrh	r3, [r3, #12]
 800c640:	b29b      	uxth	r3, r3
 800c642:	4618      	mov	r0, r3
 800c644:	f7fb fac4 	bl	8007bd0 <lwip_htons>
 800c648:	4603      	mov	r3, r0
 800c64a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c64e:	b29b      	uxth	r3, r3
 800c650:	4618      	mov	r0, r3
 800c652:	f7fb fabd 	bl	8007bd0 <lwip_htons>
 800c656:	4603      	mov	r3, r0
 800c658:	461a      	mov	r2, r3
 800c65a:	4b55      	ldr	r3, [pc, #340]	; (800c7b0 <tcp_receive+0x968>)
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	4322      	orrs	r2, r4
 800c660:	b292      	uxth	r2, r2
 800c662:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c668:	4b51      	ldr	r3, [pc, #324]	; (800c7b0 <tcp_receive+0x968>)
 800c66a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c66c:	4b50      	ldr	r3, [pc, #320]	; (800c7b0 <tcp_receive+0x968>)
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	899b      	ldrh	r3, [r3, #12]
 800c672:	b29b      	uxth	r3, r3
 800c674:	4618      	mov	r0, r3
 800c676:	f7fb faab 	bl	8007bd0 <lwip_htons>
 800c67a:	4603      	mov	r3, r0
 800c67c:	f003 0302 	and.w	r3, r3, #2
 800c680:	2b00      	cmp	r3, #0
 800c682:	d005      	beq.n	800c690 <tcp_receive+0x848>
            inseg.len -= 1;
 800c684:	4b4a      	ldr	r3, [pc, #296]	; (800c7b0 <tcp_receive+0x968>)
 800c686:	891b      	ldrh	r3, [r3, #8]
 800c688:	3b01      	subs	r3, #1
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	4b48      	ldr	r3, [pc, #288]	; (800c7b0 <tcp_receive+0x968>)
 800c68e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c690:	4b47      	ldr	r3, [pc, #284]	; (800c7b0 <tcp_receive+0x968>)
 800c692:	685a      	ldr	r2, [r3, #4]
 800c694:	4b46      	ldr	r3, [pc, #280]	; (800c7b0 <tcp_receive+0x968>)
 800c696:	891b      	ldrh	r3, [r3, #8]
 800c698:	4619      	mov	r1, r3
 800c69a:	4610      	mov	r0, r2
 800c69c:	f7fc fa50 	bl	8008b40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c6a0:	4b43      	ldr	r3, [pc, #268]	; (800c7b0 <tcp_receive+0x968>)
 800c6a2:	891c      	ldrh	r4, [r3, #8]
 800c6a4:	4b42      	ldr	r3, [pc, #264]	; (800c7b0 <tcp_receive+0x968>)
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	899b      	ldrh	r3, [r3, #12]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fb fa8f 	bl	8007bd0 <lwip_htons>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	f003 0303 	and.w	r3, r3, #3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <tcp_receive+0x878>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e000      	b.n	800c6c2 <tcp_receive+0x87a>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4423      	add	r3, r4
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	4b3b      	ldr	r3, [pc, #236]	; (800c7b4 <tcp_receive+0x96c>)
 800c6c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c6ca:	4b3a      	ldr	r3, [pc, #232]	; (800c7b4 <tcp_receive+0x96c>)
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4b36      	ldr	r3, [pc, #216]	; (800c7ac <tcp_receive+0x964>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	441a      	add	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6de:	440b      	add	r3, r1
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d006      	beq.n	800c6f2 <tcp_receive+0x8aa>
 800c6e4:	4b34      	ldr	r3, [pc, #208]	; (800c7b8 <tcp_receive+0x970>)
 800c6e6:	f240 527f 	movw	r2, #1407	; 0x57f
 800c6ea:	4934      	ldr	r1, [pc, #208]	; (800c7bc <tcp_receive+0x974>)
 800c6ec:	4834      	ldr	r0, [pc, #208]	; (800c7c0 <tcp_receive+0x978>)
 800c6ee:	f00a fc8d 	bl	801700c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 80e1 	beq.w	800c8be <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c6fc:	4b2c      	ldr	r3, [pc, #176]	; (800c7b0 <tcp_receive+0x968>)
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	899b      	ldrh	r3, [r3, #12]
 800c702:	b29b      	uxth	r3, r3
 800c704:	4618      	mov	r0, r3
 800c706:	f7fb fa63 	bl	8007bd0 <lwip_htons>
 800c70a:	4603      	mov	r3, r0
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b00      	cmp	r3, #0
 800c712:	d010      	beq.n	800c736 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c714:	e00a      	b.n	800c72c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c71a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800c726:	68b8      	ldr	r0, [r7, #8]
 800c728:	f7fd fe65 	bl	800a3f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1f0      	bne.n	800c716 <tcp_receive+0x8ce>
 800c734:	e0c3      	b.n	800c8be <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c73c:	e04f      	b.n	800c7de <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	899b      	ldrh	r3, [r3, #12]
 800c744:	b29b      	uxth	r3, r3
 800c746:	4618      	mov	r0, r3
 800c748:	f7fb fa42 	bl	8007bd0 <lwip_htons>
 800c74c:	4603      	mov	r3, r0
 800c74e:	f003 0301 	and.w	r3, r3, #1
 800c752:	2b00      	cmp	r3, #0
 800c754:	d03b      	beq.n	800c7ce <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c756:	4b16      	ldr	r3, [pc, #88]	; (800c7b0 <tcp_receive+0x968>)
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	899b      	ldrh	r3, [r3, #12]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fb fa36 	bl	8007bd0 <lwip_htons>
 800c764:	4603      	mov	r3, r0
 800c766:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d12f      	bne.n	800c7ce <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c76e:	4b10      	ldr	r3, [pc, #64]	; (800c7b0 <tcp_receive+0x968>)
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	899b      	ldrh	r3, [r3, #12]
 800c774:	b29c      	uxth	r4, r3
 800c776:	2001      	movs	r0, #1
 800c778:	f7fb fa2a 	bl	8007bd0 <lwip_htons>
 800c77c:	4603      	mov	r3, r0
 800c77e:	461a      	mov	r2, r3
 800c780:	4b0b      	ldr	r3, [pc, #44]	; (800c7b0 <tcp_receive+0x968>)
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	4322      	orrs	r2, r4
 800c786:	b292      	uxth	r2, r2
 800c788:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c78a:	4b09      	ldr	r3, [pc, #36]	; (800c7b0 <tcp_receive+0x968>)
 800c78c:	891c      	ldrh	r4, [r3, #8]
 800c78e:	4b08      	ldr	r3, [pc, #32]	; (800c7b0 <tcp_receive+0x968>)
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	899b      	ldrh	r3, [r3, #12]
 800c794:	b29b      	uxth	r3, r3
 800c796:	4618      	mov	r0, r3
 800c798:	f7fb fa1a 	bl	8007bd0 <lwip_htons>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f003 0303 	and.w	r3, r3, #3
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00e      	beq.n	800c7c4 <tcp_receive+0x97c>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e00d      	b.n	800c7c6 <tcp_receive+0x97e>
 800c7aa:	bf00      	nop
 800c7ac:	20000268 	.word	0x20000268
 800c7b0:	20000248 	.word	0x20000248
 800c7b4:	20000272 	.word	0x20000272
 800c7b8:	08019ba0 	.word	0x08019ba0
 800c7bc:	08019e6c 	.word	0x08019e6c
 800c7c0:	08019be4 	.word	0x08019be4
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4423      	add	r3, r4
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	4b95      	ldr	r3, [pc, #596]	; (800ca20 <tcp_receive+0xbd8>)
 800c7cc:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800c7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7da:	f7fd fe0c 	bl	800a3f6 <tcp_seg_free>
            while (next &&
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00e      	beq.n	800c802 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c7e4:	4b8e      	ldr	r3, [pc, #568]	; (800ca20 <tcp_receive+0xbd8>)
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	4b8e      	ldr	r3, [pc, #568]	; (800ca24 <tcp_receive+0xbdc>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	441a      	add	r2, r3
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7f8:	8909      	ldrh	r1, [r1, #8]
 800c7fa:	440b      	add	r3, r1
 800c7fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	da9d      	bge.n	800c73e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d057      	beq.n	800c8b8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800c808:	4b85      	ldr	r3, [pc, #532]	; (800ca20 <tcp_receive+0xbd8>)
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	4b85      	ldr	r3, [pc, #532]	; (800ca24 <tcp_receive+0xbdc>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	441a      	add	r2, r3
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	dd4b      	ble.n	800c8b8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	b29a      	uxth	r2, r3
 800c828:	4b7e      	ldr	r3, [pc, #504]	; (800ca24 <tcp_receive+0xbdc>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	b29a      	uxth	r2, r3
 800c832:	4b7d      	ldr	r3, [pc, #500]	; (800ca28 <tcp_receive+0xbe0>)
 800c834:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c836:	4b7c      	ldr	r3, [pc, #496]	; (800ca28 <tcp_receive+0xbe0>)
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	899b      	ldrh	r3, [r3, #12]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fb f9c6 	bl	8007bd0 <lwip_htons>
 800c844:	4603      	mov	r3, r0
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d005      	beq.n	800c85a <tcp_receive+0xa12>
                inseg.len -= 1;
 800c84e:	4b76      	ldr	r3, [pc, #472]	; (800ca28 <tcp_receive+0xbe0>)
 800c850:	891b      	ldrh	r3, [r3, #8]
 800c852:	3b01      	subs	r3, #1
 800c854:	b29a      	uxth	r2, r3
 800c856:	4b74      	ldr	r3, [pc, #464]	; (800ca28 <tcp_receive+0xbe0>)
 800c858:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c85a:	4b73      	ldr	r3, [pc, #460]	; (800ca28 <tcp_receive+0xbe0>)
 800c85c:	685a      	ldr	r2, [r3, #4]
 800c85e:	4b72      	ldr	r3, [pc, #456]	; (800ca28 <tcp_receive+0xbe0>)
 800c860:	891b      	ldrh	r3, [r3, #8]
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fc f96b 	bl	8008b40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c86a:	4b6f      	ldr	r3, [pc, #444]	; (800ca28 <tcp_receive+0xbe0>)
 800c86c:	891c      	ldrh	r4, [r3, #8]
 800c86e:	4b6e      	ldr	r3, [pc, #440]	; (800ca28 <tcp_receive+0xbe0>)
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	899b      	ldrh	r3, [r3, #12]
 800c874:	b29b      	uxth	r3, r3
 800c876:	4618      	mov	r0, r3
 800c878:	f7fb f9aa 	bl	8007bd0 <lwip_htons>
 800c87c:	4603      	mov	r3, r0
 800c87e:	f003 0303 	and.w	r3, r3, #3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <tcp_receive+0xa42>
 800c886:	2301      	movs	r3, #1
 800c888:	e000      	b.n	800c88c <tcp_receive+0xa44>
 800c88a:	2300      	movs	r3, #0
 800c88c:	4423      	add	r3, r4
 800c88e:	b29a      	uxth	r2, r3
 800c890:	4b63      	ldr	r3, [pc, #396]	; (800ca20 <tcp_receive+0xbd8>)
 800c892:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c894:	4b62      	ldr	r3, [pc, #392]	; (800ca20 <tcp_receive+0xbd8>)
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	461a      	mov	r2, r3
 800c89a:	4b62      	ldr	r3, [pc, #392]	; (800ca24 <tcp_receive+0xbdc>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	441a      	add	r2, r3
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d006      	beq.n	800c8b8 <tcp_receive+0xa70>
 800c8aa:	4b60      	ldr	r3, [pc, #384]	; (800ca2c <tcp_receive+0xbe4>)
 800c8ac:	f240 52af 	movw	r2, #1455	; 0x5af
 800c8b0:	495f      	ldr	r1, [pc, #380]	; (800ca30 <tcp_receive+0xbe8>)
 800c8b2:	4860      	ldr	r0, [pc, #384]	; (800ca34 <tcp_receive+0xbec>)
 800c8b4:	f00a fbaa 	bl	801700c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8bc:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c8be:	4b58      	ldr	r3, [pc, #352]	; (800ca20 <tcp_receive+0xbd8>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4b57      	ldr	r3, [pc, #348]	; (800ca24 <tcp_receive+0xbdc>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	441a      	add	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8d2:	4b53      	ldr	r3, [pc, #332]	; (800ca20 <tcp_receive+0xbd8>)
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d206      	bcs.n	800c8e8 <tcp_receive+0xaa0>
 800c8da:	4b54      	ldr	r3, [pc, #336]	; (800ca2c <tcp_receive+0xbe4>)
 800c8dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c8e0:	4955      	ldr	r1, [pc, #340]	; (800ca38 <tcp_receive+0xbf0>)
 800c8e2:	4854      	ldr	r0, [pc, #336]	; (800ca34 <tcp_receive+0xbec>)
 800c8e4:	f00a fb92 	bl	801700c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8ec:	4b4c      	ldr	r3, [pc, #304]	; (800ca20 <tcp_receive+0xbd8>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7fd f8ef 	bl	8009adc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c8fe:	4b4a      	ldr	r3, [pc, #296]	; (800ca28 <tcp_receive+0xbe0>)
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	891b      	ldrh	r3, [r3, #8]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d006      	beq.n	800c916 <tcp_receive+0xace>
          recv_data = inseg.p;
 800c908:	4b47      	ldr	r3, [pc, #284]	; (800ca28 <tcp_receive+0xbe0>)
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	4a4b      	ldr	r2, [pc, #300]	; (800ca3c <tcp_receive+0xbf4>)
 800c90e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c910:	4b45      	ldr	r3, [pc, #276]	; (800ca28 <tcp_receive+0xbe0>)
 800c912:	2200      	movs	r2, #0
 800c914:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c916:	4b44      	ldr	r3, [pc, #272]	; (800ca28 <tcp_receive+0xbe0>)
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	899b      	ldrh	r3, [r3, #12]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fb f956 	bl	8007bd0 <lwip_htons>
 800c924:	4603      	mov	r3, r0
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f000 80b4 	beq.w	800ca98 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c930:	4b43      	ldr	r3, [pc, #268]	; (800ca40 <tcp_receive+0xbf8>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f043 0320 	orr.w	r3, r3, #32
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	4b41      	ldr	r3, [pc, #260]	; (800ca40 <tcp_receive+0xbf8>)
 800c93c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c93e:	e0ab      	b.n	800ca98 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c944:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	4a35      	ldr	r2, [pc, #212]	; (800ca24 <tcp_receive+0xbdc>)
 800c950:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	891b      	ldrh	r3, [r3, #8]
 800c956:	461c      	mov	r4, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	899b      	ldrh	r3, [r3, #12]
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4618      	mov	r0, r3
 800c962:	f7fb f935 	bl	8007bd0 <lwip_htons>
 800c966:	4603      	mov	r3, r0
 800c968:	f003 0303 	and.w	r3, r3, #3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <tcp_receive+0xb2c>
 800c970:	2301      	movs	r3, #1
 800c972:	e000      	b.n	800c976 <tcp_receive+0xb2e>
 800c974:	2300      	movs	r3, #0
 800c976:	191a      	adds	r2, r3, r4
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	441a      	add	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c986:	461c      	mov	r4, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	891b      	ldrh	r3, [r3, #8]
 800c98c:	461d      	mov	r5, r3
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	899b      	ldrh	r3, [r3, #12]
 800c994:	b29b      	uxth	r3, r3
 800c996:	4618      	mov	r0, r3
 800c998:	f7fb f91a 	bl	8007bd0 <lwip_htons>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f003 0303 	and.w	r3, r3, #3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <tcp_receive+0xb62>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e000      	b.n	800c9ac <tcp_receive+0xb64>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	442b      	add	r3, r5
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	d206      	bcs.n	800c9c0 <tcp_receive+0xb78>
 800c9b2:	4b1e      	ldr	r3, [pc, #120]	; (800ca2c <tcp_receive+0xbe4>)
 800c9b4:	f240 52de 	movw	r2, #1502	; 0x5de
 800c9b8:	4922      	ldr	r1, [pc, #136]	; (800ca44 <tcp_receive+0xbfc>)
 800c9ba:	481e      	ldr	r0, [pc, #120]	; (800ca34 <tcp_receive+0xbec>)
 800c9bc:	f00a fb26 	bl	801700c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	891b      	ldrh	r3, [r3, #8]
 800c9c4:	461c      	mov	r4, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	899b      	ldrh	r3, [r3, #12]
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fb f8fe 	bl	8007bd0 <lwip_htons>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	f003 0303 	and.w	r3, r3, #3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <tcp_receive+0xb9a>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e000      	b.n	800c9e4 <tcp_receive+0xb9c>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	1919      	adds	r1, r3, r4
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9ea:	b28b      	uxth	r3, r1
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fd f871 	bl	8009adc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	891b      	ldrh	r3, [r3, #8]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d028      	beq.n	800ca56 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ca04:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <tcp_receive+0xbf4>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01d      	beq.n	800ca48 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800ca0c:	4b0b      	ldr	r3, [pc, #44]	; (800ca3c <tcp_receive+0xbf4>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4619      	mov	r1, r3
 800ca16:	4610      	mov	r0, r2
 800ca18:	f7fc fad4 	bl	8008fc4 <pbuf_cat>
 800ca1c:	e018      	b.n	800ca50 <tcp_receive+0xc08>
 800ca1e:	bf00      	nop
 800ca20:	20000272 	.word	0x20000272
 800ca24:	20000268 	.word	0x20000268
 800ca28:	20000248 	.word	0x20000248
 800ca2c:	08019ba0 	.word	0x08019ba0
 800ca30:	08019ea4 	.word	0x08019ea4
 800ca34:	08019be4 	.word	0x08019be4
 800ca38:	08019ee0 	.word	0x08019ee0
 800ca3c:	20000278 	.word	0x20000278
 800ca40:	20000275 	.word	0x20000275
 800ca44:	08019f00 	.word	0x08019f00
            } else {
              recv_data = cseg->p;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	4a71      	ldr	r2, [pc, #452]	; (800cc14 <tcp_receive+0xdcc>)
 800ca4e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2200      	movs	r2, #0
 800ca54:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	899b      	ldrh	r3, [r3, #12]
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fb f8b6 	bl	8007bd0 <lwip_htons>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00d      	beq.n	800ca8a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ca6e:	4b6a      	ldr	r3, [pc, #424]	; (800cc18 <tcp_receive+0xdd0>)
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	f043 0320 	orr.w	r3, r3, #32
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	4b67      	ldr	r3, [pc, #412]	; (800cc18 <tcp_receive+0xdd0>)
 800ca7a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	7d1b      	ldrb	r3, [r3, #20]
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d102      	bne.n	800ca8a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2207      	movs	r2, #7
 800ca88:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f7fd fcaf 	bl	800a3f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d008      	beq.n	800cab2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	685a      	ldr	r2, [r3, #4]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800caac:	429a      	cmp	r2, r3
 800caae:	f43f af47 	beq.w	800c940 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7e9b      	ldrb	r3, [r3, #26]
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00e      	beq.n	800cadc <tcp_receive+0xc94>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7e9b      	ldrb	r3, [r3, #26]
 800cac2:	f023 0301 	bic.w	r3, r3, #1
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	769a      	strb	r2, [r3, #26]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7e9b      	ldrb	r3, [r3, #26]
 800cad0:	f043 0302 	orr.w	r3, r3, #2
 800cad4:	b2da      	uxtb	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cada:	e181      	b.n	800cde0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	7e9b      	ldrb	r3, [r3, #26]
 800cae0:	f043 0301 	orr.w	r3, r3, #1
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800caea:	e179      	b.n	800cde0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f001 f8c5 	bl	800dc7c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cafa:	4848      	ldr	r0, [pc, #288]	; (800cc1c <tcp_receive+0xdd4>)
 800cafc:	f7fd fca2 	bl	800a444 <tcp_seg_copy>
 800cb00:	4602      	mov	r2, r0
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800cb06:	e16b      	b.n	800cde0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb12:	e150      	b.n	800cdb6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	4b41      	ldr	r3, [pc, #260]	; (800cc20 <tcp_receive+0xdd8>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d11d      	bne.n	800cb5e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cb22:	4b3e      	ldr	r3, [pc, #248]	; (800cc1c <tcp_receive+0xdd4>)
 800cb24:	891a      	ldrh	r2, [r3, #8]
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	891b      	ldrh	r3, [r3, #8]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	f240 8148 	bls.w	800cdc0 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800cb30:	483a      	ldr	r0, [pc, #232]	; (800cc1c <tcp_receive+0xdd4>)
 800cb32:	f7fd fc87 	bl	800a444 <tcp_seg_copy>
 800cb36:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f000 8142 	beq.w	800cdc4 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <tcp_receive+0xd06>
                    prev->next = cseg;
 800cb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	e002      	b.n	800cb54 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cb54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f7ff f900 	bl	800bd5c <tcp_oos_insert_segment>
                }
                break;
 800cb5c:	e132      	b.n	800cdc4 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d117      	bne.n	800cb94 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cb64:	4b2e      	ldr	r3, [pc, #184]	; (800cc20 <tcp_receive+0xdd8>)
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	da57      	bge.n	800cc24 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800cb74:	4829      	ldr	r0, [pc, #164]	; (800cc1c <tcp_receive+0xdd4>)
 800cb76:	f7fd fc65 	bl	800a444 <tcp_seg_copy>
 800cb7a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f000 8122 	beq.w	800cdc8 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800cb8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff f8e5 	bl	800bd5c <tcp_oos_insert_segment>
                  }
                  break;
 800cb92:	e119      	b.n	800cdc8 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800cb94:	4b22      	ldr	r3, [pc, #136]	; (800cc20 <tcp_receive+0xdd8>)
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	3b01      	subs	r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	db3e      	blt.n	800cc24 <tcp_receive+0xddc>
 800cba6:	4b1e      	ldr	r3, [pc, #120]	; (800cc20 <tcp_receive+0xdd8>)
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	dc35      	bgt.n	800cc24 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800cbb8:	4818      	ldr	r0, [pc, #96]	; (800cc1c <tcp_receive+0xdd4>)
 800cbba:	f7fd fc43 	bl	800a444 <tcp_seg_copy>
 800cbbe:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f000 8102 	beq.w	800cdcc <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbd0:	8912      	ldrh	r2, [r2, #8]
 800cbd2:	441a      	add	r2, r3
 800cbd4:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <tcp_receive+0xdd8>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dd12      	ble.n	800cc04 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <tcp_receive+0xdd8>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	891b      	ldrh	r3, [r3, #8]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fb ff9e 	bl	8008b40 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cc0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7ff f8a5 	bl	800bd5c <tcp_oos_insert_segment>
                  }
                  break;
 800cc12:	e0db      	b.n	800cdcc <tcp_receive+0xf84>
 800cc14:	20000278 	.word	0x20000278
 800cc18:	20000275 	.word	0x20000275
 800cc1c:	20000248 	.word	0x20000248
 800cc20:	20000268 	.word	0x20000268
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f040 80bf 	bne.w	800cdac <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cc2e:	4b7c      	ldr	r3, [pc, #496]	; (800ce20 <tcp_receive+0xfd8>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f340 80b6 	ble.w	800cdac <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	899b      	ldrh	r3, [r3, #12]
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fa ffc1 	bl	8007bd0 <lwip_htons>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f040 80bb 	bne.w	800cdd0 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cc5a:	4872      	ldr	r0, [pc, #456]	; (800ce24 <tcp_receive+0xfdc>)
 800cc5c:	f7fd fbf2 	bl	800a444 <tcp_seg_copy>
 800cc60:	4602      	mov	r2, r0
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f000 80b2 	beq.w	800cdd4 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc78:	8912      	ldrh	r2, [r2, #8]
 800cc7a:	441a      	add	r2, r3
 800cc7c:	4b68      	ldr	r3, [pc, #416]	; (800ce20 <tcp_receive+0xfd8>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	1ad3      	subs	r3, r2, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	dd12      	ble.n	800ccac <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cc86:	4b66      	ldr	r3, [pc, #408]	; (800ce20 <tcp_receive+0xfd8>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	891b      	ldrh	r3, [r3, #8]
 800cca4:	4619      	mov	r1, r3
 800cca6:	4610      	mov	r0, r2
 800cca8:	f7fb ff4a 	bl	8008b40 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ccac:	4b5e      	ldr	r3, [pc, #376]	; (800ce28 <tcp_receive+0xfe0>)
 800ccae:	881b      	ldrh	r3, [r3, #0]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4b5b      	ldr	r3, [pc, #364]	; (800ce20 <tcp_receive+0xfd8>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	441a      	add	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	6879      	ldr	r1, [r7, #4]
 800ccbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccc0:	440b      	add	r3, r1
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f340 8085 	ble.w	800cdd4 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	899b      	ldrh	r3, [r3, #12]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fa ff7b 	bl	8007bd0 <lwip_htons>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01e      	beq.n	800cd22 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	899b      	ldrh	r3, [r3, #12]
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ccf2:	b29c      	uxth	r4, r3
 800ccf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	899b      	ldrh	r3, [r3, #12]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fa ff66 	bl	8007bd0 <lwip_htons>
 800cd04:	4603      	mov	r3, r0
 800cd06:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fa ff5f 	bl	8007bd0 <lwip_htons>
 800cd12:	4603      	mov	r3, r0
 800cd14:	461a      	mov	r2, r3
 800cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	4322      	orrs	r2, r4
 800cd1e:	b292      	uxth	r2, r2
 800cd20:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd26:	b29a      	uxth	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd2c:	4413      	add	r3, r2
 800cd2e:	b299      	uxth	r1, r3
 800cd30:	4b3b      	ldr	r3, [pc, #236]	; (800ce20 <tcp_receive+0xfd8>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	1a8a      	subs	r2, r1, r2
 800cd3c:	b292      	uxth	r2, r2
 800cd3e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	891b      	ldrh	r3, [r3, #8]
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4610      	mov	r0, r2
 800cd50:	f7fb fef6 	bl	8008b40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	891c      	ldrh	r4, [r3, #8]
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	899b      	ldrh	r3, [r3, #12]
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fa ff33 	bl	8007bd0 <lwip_htons>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	f003 0303 	and.w	r3, r3, #3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <tcp_receive+0xf30>
 800cd74:	2301      	movs	r3, #1
 800cd76:	e000      	b.n	800cd7a <tcp_receive+0xf32>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4423      	add	r3, r4
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	4b2a      	ldr	r3, [pc, #168]	; (800ce28 <tcp_receive+0xfe0>)
 800cd80:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd82:	4b29      	ldr	r3, [pc, #164]	; (800ce28 <tcp_receive+0xfe0>)
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	461a      	mov	r2, r3
 800cd88:	4b25      	ldr	r3, [pc, #148]	; (800ce20 <tcp_receive+0xfd8>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	441a      	add	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd96:	440b      	add	r3, r1
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d01b      	beq.n	800cdd4 <tcp_receive+0xf8c>
 800cd9c:	4b23      	ldr	r3, [pc, #140]	; (800ce2c <tcp_receive+0xfe4>)
 800cd9e:	f240 627b 	movw	r2, #1659	; 0x67b
 800cda2:	4923      	ldr	r1, [pc, #140]	; (800ce30 <tcp_receive+0xfe8>)
 800cda4:	4823      	ldr	r0, [pc, #140]	; (800ce34 <tcp_receive+0xfec>)
 800cda6:	f00a f931 	bl	801700c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cdaa:	e013      	b.n	800cdd4 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f47f aeab 	bne.w	800cb14 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800cdbe:	e00f      	b.n	800cde0 <tcp_receive+0xf98>
                break;
 800cdc0:	bf00      	nop
 800cdc2:	e00d      	b.n	800cde0 <tcp_receive+0xf98>
                break;
 800cdc4:	bf00      	nop
 800cdc6:	e00b      	b.n	800cde0 <tcp_receive+0xf98>
                  break;
 800cdc8:	bf00      	nop
 800cdca:	e009      	b.n	800cde0 <tcp_receive+0xf98>
                  break;
 800cdcc:	bf00      	nop
 800cdce:	e007      	b.n	800cde0 <tcp_receive+0xf98>
                  break;
 800cdd0:	bf00      	nop
 800cdd2:	e005      	b.n	800cde0 <tcp_receive+0xf98>
                break;
 800cdd4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800cdd6:	e003      	b.n	800cde0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 ff4f 	bl	800dc7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cdde:	e01a      	b.n	800ce16 <tcp_receive+0xfce>
 800cde0:	e019      	b.n	800ce16 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cde2:	4b0f      	ldr	r3, [pc, #60]	; (800ce20 <tcp_receive+0xfd8>)
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdea:	1ad3      	subs	r3, r2, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	db0a      	blt.n	800ce06 <tcp_receive+0xfbe>
 800cdf0:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <tcp_receive+0xfd8>)
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdfc:	440b      	add	r3, r1
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	3301      	adds	r3, #1
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	dd07      	ble.n	800ce16 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	7e9b      	ldrb	r3, [r3, #26]
 800ce0a:	f043 0302 	orr.w	r3, r3, #2
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800ce14:	e7ff      	b.n	800ce16 <tcp_receive+0xfce>
 800ce16:	bf00      	nop
 800ce18:	3734      	adds	r7, #52	; 0x34
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000268 	.word	0x20000268
 800ce24:	20000248 	.word	0x20000248
 800ce28:	20000272 	.word	0x20000272
 800ce2c:	08019ba0 	.word	0x08019ba0
 800ce30:	08019e6c 	.word	0x08019e6c
 800ce34:	08019be4 	.word	0x08019be4

0800ce38 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800ce3e:	4b18      	ldr	r3, [pc, #96]	; (800cea0 <tcp_getoptbyte+0x68>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d005      	beq.n	800ce52 <tcp_getoptbyte+0x1a>
 800ce46:	4b17      	ldr	r3, [pc, #92]	; (800cea4 <tcp_getoptbyte+0x6c>)
 800ce48:	881a      	ldrh	r2, [r3, #0]
 800ce4a:	4b17      	ldr	r3, [pc, #92]	; (800cea8 <tcp_getoptbyte+0x70>)
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d20e      	bcs.n	800ce70 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800ce52:	4b16      	ldr	r3, [pc, #88]	; (800ceac <tcp_getoptbyte+0x74>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	3314      	adds	r3, #20
 800ce58:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800ce5a:	4b12      	ldr	r3, [pc, #72]	; (800cea4 <tcp_getoptbyte+0x6c>)
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	b291      	uxth	r1, r2
 800ce62:	4a10      	ldr	r2, [pc, #64]	; (800cea4 <tcp_getoptbyte+0x6c>)
 800ce64:	8011      	strh	r1, [r2, #0]
 800ce66:	461a      	mov	r2, r3
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	e010      	b.n	800ce92 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800ce70:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <tcp_getoptbyte+0x6c>)
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	b291      	uxth	r1, r2
 800ce78:	4a0a      	ldr	r2, [pc, #40]	; (800cea4 <tcp_getoptbyte+0x6c>)
 800ce7a:	8011      	strh	r1, [r2, #0]
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	4b0a      	ldr	r3, [pc, #40]	; (800cea8 <tcp_getoptbyte+0x70>)
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800ce88:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <tcp_getoptbyte+0x68>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	4413      	add	r3, r2
 800ce90:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	370c      	adds	r7, #12
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	20000260 	.word	0x20000260
 800cea4:	20000264 	.word	0x20000264
 800cea8:	2000025e 	.word	0x2000025e
 800ceac:	20000258 	.word	0x20000258

0800ceb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ceb8:	4b2d      	ldr	r3, [pc, #180]	; (800cf70 <tcp_parseopt+0xc0>)
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d053      	beq.n	800cf68 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cec0:	4b2c      	ldr	r3, [pc, #176]	; (800cf74 <tcp_parseopt+0xc4>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	801a      	strh	r2, [r3, #0]
 800cec6:	e043      	b.n	800cf50 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800cec8:	f7ff ffb6 	bl	800ce38 <tcp_getoptbyte>
 800cecc:	4603      	mov	r3, r0
 800cece:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d03c      	beq.n	800cf50 <tcp_parseopt+0xa0>
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d002      	beq.n	800cee0 <tcp_parseopt+0x30>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d03f      	beq.n	800cf5e <tcp_parseopt+0xae>
 800cede:	e026      	b.n	800cf2e <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cee0:	f7ff ffaa 	bl	800ce38 <tcp_getoptbyte>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	d13b      	bne.n	800cf62 <tcp_parseopt+0xb2>
 800ceea:	4b22      	ldr	r3, [pc, #136]	; (800cf74 <tcp_parseopt+0xc4>)
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	3302      	adds	r3, #2
 800cef0:	4a1f      	ldr	r2, [pc, #124]	; (800cf70 <tcp_parseopt+0xc0>)
 800cef2:	8812      	ldrh	r2, [r2, #0]
 800cef4:	4293      	cmp	r3, r2
 800cef6:	dc34      	bgt.n	800cf62 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800cef8:	f7ff ff9e 	bl	800ce38 <tcp_getoptbyte>
 800cefc:	4603      	mov	r3, r0
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	021b      	lsls	r3, r3, #8
 800cf02:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800cf04:	f7ff ff98 	bl	800ce38 <tcp_getoptbyte>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	89bb      	ldrh	r3, [r7, #12]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cf12:	89bb      	ldrh	r3, [r7, #12]
 800cf14:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cf18:	d804      	bhi.n	800cf24 <tcp_parseopt+0x74>
 800cf1a:	89bb      	ldrh	r3, [r7, #12]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <tcp_parseopt+0x74>
 800cf20:	89ba      	ldrh	r2, [r7, #12]
 800cf22:	e001      	b.n	800cf28 <tcp_parseopt+0x78>
 800cf24:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800cf2c:	e010      	b.n	800cf50 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800cf2e:	f7ff ff83 	bl	800ce38 <tcp_getoptbyte>
 800cf32:	4603      	mov	r3, r0
 800cf34:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800cf36:	7afb      	ldrb	r3, [r7, #11]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d914      	bls.n	800cf66 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800cf3c:	7afb      	ldrb	r3, [r7, #11]
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	4b0c      	ldr	r3, [pc, #48]	; (800cf74 <tcp_parseopt+0xc4>)
 800cf42:	881b      	ldrh	r3, [r3, #0]
 800cf44:	4413      	add	r3, r2
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	3b02      	subs	r3, #2
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	4b09      	ldr	r3, [pc, #36]	; (800cf74 <tcp_parseopt+0xc4>)
 800cf4e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf50:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <tcp_parseopt+0xc4>)
 800cf52:	881a      	ldrh	r2, [r3, #0]
 800cf54:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <tcp_parseopt+0xc0>)
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d3b5      	bcc.n	800cec8 <tcp_parseopt+0x18>
 800cf5c:	e004      	b.n	800cf68 <tcp_parseopt+0xb8>
        return;
 800cf5e:	bf00      	nop
 800cf60:	e002      	b.n	800cf68 <tcp_parseopt+0xb8>
          return;
 800cf62:	bf00      	nop
 800cf64:	e000      	b.n	800cf68 <tcp_parseopt+0xb8>
          return;
 800cf66:	bf00      	nop
      }
    }
  }
}
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	2000025c 	.word	0x2000025c
 800cf74:	20000264 	.word	0x20000264

0800cf78 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cf7c:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <tcp_trigger_input_pcb_close+0x1c>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f043 0310 	orr.w	r3, r3, #16
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	4b03      	ldr	r3, [pc, #12]	; (800cf94 <tcp_trigger_input_pcb_close+0x1c>)
 800cf88:	701a      	strb	r2, [r3, #0]
}
 800cf8a:	bf00      	nop
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	20000275 	.word	0x20000275

0800cf98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	607b      	str	r3, [r7, #4]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	817b      	strh	r3, [r7, #10]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cfaa:	897a      	ldrh	r2, [r7, #10]
 800cfac:	893b      	ldrh	r3, [r7, #8]
 800cfae:	4413      	add	r3, r2
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	3314      	adds	r3, #20
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	4619      	mov	r1, r3
 800cfba:	2001      	movs	r0, #1
 800cfbc:	f7fb fbc2 	bl	8008744 <pbuf_alloc>
 800cfc0:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d057      	beq.n	800d078 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	895b      	ldrh	r3, [r3, #10]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	897b      	ldrh	r3, [r7, #10]
 800cfd0:	3314      	adds	r3, #20
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	da05      	bge.n	800cfe2 <tcp_output_alloc_header+0x4a>
 800cfd6:	4b2b      	ldr	r3, [pc, #172]	; (800d084 <tcp_output_alloc_header+0xec>)
 800cfd8:	2273      	movs	r2, #115	; 0x73
 800cfda:	492b      	ldr	r1, [pc, #172]	; (800d088 <tcp_output_alloc_header+0xf0>)
 800cfdc:	482b      	ldr	r0, [pc, #172]	; (800d08c <tcp_output_alloc_header+0xf4>)
 800cfde:	f00a f815 	bl	801700c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	8adb      	ldrh	r3, [r3, #22]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fa fdef 	bl	8007bd0 <lwip_htons>
 800cff2:	4603      	mov	r3, r0
 800cff4:	461a      	mov	r2, r3
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	8b1b      	ldrh	r3, [r3, #24]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fa fde6 	bl	8007bd0 <lwip_htons>
 800d004:	4603      	mov	r3, r0
 800d006:	461a      	mov	r2, r3
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	4618      	mov	r0, r3
 800d018:	f7fa fde8 	bl	8007bec <lwip_htonl>
 800d01c:	4602      	mov	r2, r0
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d022:	897b      	ldrh	r3, [r7, #10]
 800d024:	089b      	lsrs	r3, r3, #2
 800d026:	b29b      	uxth	r3, r3
 800d028:	3305      	adds	r3, #5
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	031b      	lsls	r3, r3, #12
 800d02e:	b29b      	uxth	r3, r3
 800d030:	f043 0310 	orr.w	r3, r3, #16
 800d034:	b29b      	uxth	r3, r3
 800d036:	4618      	mov	r0, r3
 800d038:	f7fa fdca 	bl	8007bd0 <lwip_htons>
 800d03c:	4603      	mov	r3, r0
 800d03e:	461a      	mov	r2, r3
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fa fdc1 	bl	8007bd0 <lwip_htons>
 800d04e:	4603      	mov	r3, r0
 800d050:	461a      	mov	r2, r3
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	2200      	movs	r2, #0
 800d05a:	741a      	strb	r2, [r3, #16]
 800d05c:	2200      	movs	r2, #0
 800d05e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2200      	movs	r2, #0
 800d064:	749a      	strb	r2, [r3, #18]
 800d066:	2200      	movs	r2, #0
 800d068:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d072:	441a      	add	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d078:	697b      	ldr	r3, [r7, #20]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	08019f28 	.word	0x08019f28
 800d088:	08019f5c 	.word	0x08019f5c
 800d08c:	08019f8c 	.word	0x08019f8c

0800d090 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d090:	b590      	push	{r4, r7, lr}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d02d      	beq.n	800d0fc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	e002      	b.n	800d0ae <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1f8      	bne.n	800d0a8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	899b      	ldrh	r3, [r3, #12]
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fa fd86 	bl	8007bd0 <lwip_htons>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d116      	bne.n	800d0fc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	899b      	ldrh	r3, [r3, #12]
 800d0d4:	b29c      	uxth	r4, r3
 800d0d6:	2001      	movs	r0, #1
 800d0d8:	f7fa fd7a 	bl	8007bd0 <lwip_htons>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	461a      	mov	r2, r3
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	4322      	orrs	r2, r4
 800d0e6:	b292      	uxth	r2, r2
 800d0e8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7e9b      	ldrb	r3, [r3, #26]
 800d0ee:	f043 0320 	orr.w	r3, r3, #32
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	e004      	b.n	800d106 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fcc0 	bl	800da84 <tcp_enqueue_flags>
 800d104:	4603      	mov	r3, r0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd90      	pop	{r4, r7, pc}
	...

0800d110 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800d110:	b590      	push	{r4, r7, lr}
 800d112:	b087      	sub	sp, #28
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	4613      	mov	r3, r2
 800d11e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	b2db      	uxtb	r3, r3
 800d128:	f003 0304 	and.w	r3, r3, #4
 800d12c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d12e:	2003      	movs	r0, #3
 800d130:	f7fb f8fc 	bl	800832c <memp_malloc>
 800d134:	6138      	str	r0, [r7, #16]
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d104      	bne.n	800d146 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d13c:	68b8      	ldr	r0, [r7, #8]
 800d13e:	f7fb fe73 	bl	8008e28 <pbuf_free>
    return NULL;
 800d142:	2300      	movs	r3, #0
 800d144:	e061      	b.n	800d20a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d14c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	2200      	movs	r2, #0
 800d152:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	891a      	ldrh	r2, [r3, #8]
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	b29b      	uxth	r3, r3
 800d162:	429a      	cmp	r2, r3
 800d164:	d205      	bcs.n	800d172 <tcp_create_segment+0x62>
 800d166:	4b2b      	ldr	r3, [pc, #172]	; (800d214 <tcp_create_segment+0x104>)
 800d168:	22ba      	movs	r2, #186	; 0xba
 800d16a:	492b      	ldr	r1, [pc, #172]	; (800d218 <tcp_create_segment+0x108>)
 800d16c:	482b      	ldr	r0, [pc, #172]	; (800d21c <tcp_create_segment+0x10c>)
 800d16e:	f009 ff4d 	bl	801700c <iprintf>
  seg->len = p->tot_len - optlen;
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	891a      	ldrh	r2, [r3, #8]
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	b29b      	uxth	r3, r3
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800d182:	2114      	movs	r1, #20
 800d184:	68b8      	ldr	r0, [r7, #8]
 800d186:	f7fb fe2b 	bl	8008de0 <pbuf_header>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d190:	6938      	ldr	r0, [r7, #16]
 800d192:	f7fd f930 	bl	800a3f6 <tcp_seg_free>
    return NULL;
 800d196:	2300      	movs	r3, #0
 800d198:	e037      	b.n	800d20a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	8ada      	ldrh	r2, [r3, #22]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	68dc      	ldr	r4, [r3, #12]
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	f7fa fd0f 	bl	8007bd0 <lwip_htons>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	8b1a      	ldrh	r2, [r3, #24]
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	68dc      	ldr	r4, [r3, #12]
 800d1be:	4610      	mov	r0, r2
 800d1c0:	f7fa fd06 	bl	8007bd0 <lwip_htons>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	68dc      	ldr	r4, [r3, #12]
 800d1cc:	6838      	ldr	r0, [r7, #0]
 800d1ce:	f7fa fd0d 	bl	8007bec <lwip_htonl>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	089b      	lsrs	r3, r3, #2
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	3305      	adds	r3, #5
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	031b      	lsls	r3, r3, #12
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	79fb      	ldrb	r3, [r7, #7]
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	68dc      	ldr	r4, [r3, #12]
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	f7fa fcec 	bl	8007bd0 <lwip_htons>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	749a      	strb	r2, [r3, #18]
 800d204:	2200      	movs	r2, #0
 800d206:	74da      	strb	r2, [r3, #19]
  return seg;
 800d208:	693b      	ldr	r3, [r7, #16]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	371c      	adds	r7, #28
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd90      	pop	{r4, r7, pc}
 800d212:	bf00      	nop
 800d214:	08019f28 	.word	0x08019f28
 800d218:	08019fb4 	.word	0x08019fb4
 800d21c:	08019f8c 	.word	0x08019f8c

0800d220 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	607b      	str	r3, [r7, #4]
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
 800d22c:	460b      	mov	r3, r1
 800d22e:	81bb      	strh	r3, [r7, #12]
 800d230:	4613      	mov	r3, r2
 800d232:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d234:	89bb      	ldrh	r3, [r7, #12]
 800d236:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d238:	89ba      	ldrh	r2, [r7, #12]
 800d23a:	897b      	ldrh	r3, [r7, #10]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d221      	bcs.n	800d284 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d240:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d244:	f003 0302 	and.w	r3, r3, #2
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d111      	bne.n	800d270 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	7e9b      	ldrb	r3, [r3, #26]
 800d250:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d254:	2b00      	cmp	r3, #0
 800d256:	d115      	bne.n	800d284 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800d258:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d007      	beq.n	800d270 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d260:	6a3b      	ldr	r3, [r7, #32]
 800d262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800d264:	2b00      	cmp	r3, #0
 800d266:	d103      	bne.n	800d270 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800d268:	6a3b      	ldr	r3, [r7, #32]
 800d26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d009      	beq.n	800d284 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d270:	89bb      	ldrh	r3, [r7, #12]
 800d272:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800d276:	f023 0203 	bic.w	r2, r3, #3
 800d27a:	897b      	ldrh	r3, [r7, #10]
 800d27c:	4293      	cmp	r3, r2
 800d27e:	bf28      	it	cs
 800d280:	4613      	movcs	r3, r2
 800d282:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d284:	8af9      	ldrh	r1, [r7, #22]
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	2200      	movs	r2, #0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f7fb fa5a 	bl	8008744 <pbuf_alloc>
 800d290:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d101      	bne.n	800d29c <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800d298:	2300      	movs	r3, #0
 800d29a:	e019      	b.n	800d2d0 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d006      	beq.n	800d2b2 <tcp_pbuf_prealloc+0x92>
 800d2a4:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <tcp_pbuf_prealloc+0xb8>)
 800d2a6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d2aa:	490c      	ldr	r1, [pc, #48]	; (800d2dc <tcp_pbuf_prealloc+0xbc>)
 800d2ac:	480c      	ldr	r0, [pc, #48]	; (800d2e0 <tcp_pbuf_prealloc+0xc0>)
 800d2ae:	f009 fead 	bl	801700c <iprintf>
  *oversize = p->len - length;
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	895a      	ldrh	r2, [r3, #10]
 800d2b6:	89bb      	ldrh	r3, [r7, #12]
 800d2b8:	1ad3      	subs	r3, r2, r3
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	89ba      	ldrh	r2, [r7, #12]
 800d2c4:	811a      	strh	r2, [r3, #8]
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	891a      	ldrh	r2, [r3, #8]
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	815a      	strh	r2, [r3, #10]
  return p;
 800d2ce:	693b      	ldr	r3, [r7, #16]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	08019f28 	.word	0x08019f28
 800d2dc:	08019fcc 	.word	0x08019fcc
 800d2e0:	08019f8c 	.word	0x08019f8c

0800d2e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	7d1b      	ldrb	r3, [r3, #20]
 800d2f4:	2b04      	cmp	r3, #4
 800d2f6:	d00e      	beq.n	800d316 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d2fc:	2b07      	cmp	r3, #7
 800d2fe:	d00a      	beq.n	800d316 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d304:	2b02      	cmp	r3, #2
 800d306:	d006      	beq.n	800d316 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d002      	beq.n	800d316 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d310:	f06f 030a 	mvn.w	r3, #10
 800d314:	e04f      	b.n	800d3b6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800d316:	887b      	ldrh	r3, [r7, #2]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <tcp_write_checks+0x3c>
    return ERR_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	e04a      	b.n	800d3b6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d326:	887a      	ldrh	r2, [r7, #2]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d909      	bls.n	800d340 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	7e9b      	ldrb	r3, [r3, #26]
 800d330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d334:	b2da      	uxtb	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d33e:	e03a      	b.n	800d3b6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d346:	2b08      	cmp	r3, #8
 800d348:	d806      	bhi.n	800d358 <tcp_write_checks+0x74>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d350:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d354:	4293      	cmp	r3, r2
 800d356:	d909      	bls.n	800d36c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7e9b      	ldrb	r3, [r3, #26]
 800d35c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d360:	b2da      	uxtb	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800d366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d36a:	e024      	b.n	800d3b6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00f      	beq.n	800d396 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d11a      	bne.n	800d3b4 <tcp_write_checks+0xd0>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d382:	2b00      	cmp	r3, #0
 800d384:	d116      	bne.n	800d3b4 <tcp_write_checks+0xd0>
 800d386:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <tcp_write_checks+0xdc>)
 800d388:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800d38c:	490d      	ldr	r1, [pc, #52]	; (800d3c4 <tcp_write_checks+0xe0>)
 800d38e:	480e      	ldr	r0, [pc, #56]	; (800d3c8 <tcp_write_checks+0xe4>)
 800d390:	f009 fe3c 	bl	801700c <iprintf>
 800d394:	e00e      	b.n	800d3b4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d103      	bne.n	800d3a6 <tcp_write_checks+0xc2>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d006      	beq.n	800d3b4 <tcp_write_checks+0xd0>
 800d3a6:	4b06      	ldr	r3, [pc, #24]	; (800d3c0 <tcp_write_checks+0xdc>)
 800d3a8:	f240 1259 	movw	r2, #345	; 0x159
 800d3ac:	4907      	ldr	r1, [pc, #28]	; (800d3cc <tcp_write_checks+0xe8>)
 800d3ae:	4806      	ldr	r0, [pc, #24]	; (800d3c8 <tcp_write_checks+0xe4>)
 800d3b0:	f009 fe2c 	bl	801700c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3708      	adds	r7, #8
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	08019f28 	.word	0x08019f28
 800d3c4:	08019fe0 	.word	0x08019fe0
 800d3c8:	08019f8c 	.word	0x08019f8c
 800d3cc:	0801a01c 	.word	0x0801a01c

0800d3d0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d3d0:	b590      	push	{r4, r7, lr}
 800d3d2:	b09b      	sub	sp, #108	; 0x6c
 800d3d4:	af04      	add	r7, sp, #16
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	4611      	mov	r1, r2
 800d3dc:	461a      	mov	r2, r3
 800d3de:	460b      	mov	r3, r1
 800d3e0:	80fb      	strh	r3, [r7, #6]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	653b      	str	r3, [r7, #80]	; 0x50
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d410:	2300      	movs	r3, #0
 800d412:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d41e:	085b      	lsrs	r3, r3, #1
 800d420:	b29a      	uxth	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d426:	4293      	cmp	r3, r2
 800d428:	bf28      	it	cs
 800d42a:	4613      	movcs	r3, r2
 800d42c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d42e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d102      	bne.n	800d43a <tcp_write+0x6a>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d438:	e000      	b.n	800d43c <tcp_write+0x6c>
 800d43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d43c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d109      	bne.n	800d458 <tcp_write+0x88>
 800d444:	4b92      	ldr	r3, [pc, #584]	; (800d690 <tcp_write+0x2c0>)
 800d446:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800d44a:	4992      	ldr	r1, [pc, #584]	; (800d694 <tcp_write+0x2c4>)
 800d44c:	4892      	ldr	r0, [pc, #584]	; (800d698 <tcp_write+0x2c8>)
 800d44e:	f009 fddd 	bl	801700c <iprintf>
 800d452:	f06f 030f 	mvn.w	r3, #15
 800d456:	e30a      	b.n	800da6e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d458:	88fb      	ldrh	r3, [r7, #6]
 800d45a:	4619      	mov	r1, r3
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f7ff ff41 	bl	800d2e4 <tcp_write_checks>
 800d462:	4603      	mov	r3, r0
 800d464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800d468:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <tcp_write+0xa6>
    return err;
 800d470:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d474:	e2fb      	b.n	800da6e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d47c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 80f5 	beq.w	800d674 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d48e:	653b      	str	r3, [r7, #80]	; 0x50
 800d490:	e002      	b.n	800d498 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800d492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f8      	bne.n	800d492 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800d4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a2:	7a9b      	ldrb	r3, [r3, #10]
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	f003 0304 	and.w	r3, r3, #4
 800d4ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d4ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b2:	891b      	ldrh	r3, [r3, #8]
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	8c3b      	ldrh	r3, [r7, #32]
 800d4b8:	440b      	add	r3, r1
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	da06      	bge.n	800d4cc <tcp_write+0xfc>
 800d4be:	4b74      	ldr	r3, [pc, #464]	; (800d690 <tcp_write+0x2c0>)
 800d4c0:	f240 12c7 	movw	r2, #455	; 0x1c7
 800d4c4:	4975      	ldr	r1, [pc, #468]	; (800d69c <tcp_write+0x2cc>)
 800d4c6:	4874      	ldr	r0, [pc, #464]	; (800d698 <tcp_write+0x2c8>)
 800d4c8:	f009 fda0 	bl	801700c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ce:	891a      	ldrh	r2, [r3, #8]
 800d4d0:	8c3b      	ldrh	r3, [r7, #32]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d4e2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d4e4:	8a7b      	ldrh	r3, [r7, #18]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d027      	beq.n	800d53a <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d4ea:	8a7b      	ldrh	r3, [r7, #18]
 800d4ec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d206      	bcs.n	800d500 <tcp_write+0x130>
 800d4f2:	4b67      	ldr	r3, [pc, #412]	; (800d690 <tcp_write+0x2c0>)
 800d4f4:	f240 12d9 	movw	r2, #473	; 0x1d9
 800d4f8:	4969      	ldr	r1, [pc, #420]	; (800d6a0 <tcp_write+0x2d0>)
 800d4fa:	4867      	ldr	r0, [pc, #412]	; (800d698 <tcp_write+0x2c8>)
 800d4fc:	f009 fd86 	bl	801700c <iprintf>
      seg = last_unsent;
 800d500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d502:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d504:	8a7b      	ldrh	r3, [r7, #18]
 800d506:	88fa      	ldrh	r2, [r7, #6]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d901      	bls.n	800d510 <tcp_write+0x140>
 800d50c:	8a7b      	ldrh	r3, [r7, #18]
 800d50e:	e000      	b.n	800d512 <tcp_write+0x142>
 800d510:	88fb      	ldrh	r3, [r7, #6]
 800d512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d514:	4293      	cmp	r3, r2
 800d516:	bfa8      	it	ge
 800d518:	4613      	movge	r3, r2
 800d51a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800d51c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d520:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d522:	4413      	add	r3, r2
 800d524:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800d528:	8a7a      	ldrh	r2, [r7, #18]
 800d52a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	b29b      	uxth	r3, r3
 800d530:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d532:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d53a:	8a7b      	ldrh	r3, [r7, #18]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00b      	beq.n	800d558 <tcp_write+0x188>
 800d540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d544:	88fb      	ldrh	r3, [r7, #6]
 800d546:	429a      	cmp	r2, r3
 800d548:	d006      	beq.n	800d558 <tcp_write+0x188>
 800d54a:	4b51      	ldr	r3, [pc, #324]	; (800d690 <tcp_write+0x2c0>)
 800d54c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d550:	4954      	ldr	r1, [pc, #336]	; (800d6a4 <tcp_write+0x2d4>)
 800d552:	4851      	ldr	r0, [pc, #324]	; (800d698 <tcp_write+0x2c8>)
 800d554:	f009 fd5a 	bl	801700c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d558:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d55c:	88fb      	ldrh	r3, [r7, #6]
 800d55e:	429a      	cmp	r2, r3
 800d560:	f080 8168 	bcs.w	800d834 <tcp_write+0x464>
 800d564:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d566:	2b00      	cmp	r3, #0
 800d568:	f000 8164 	beq.w	800d834 <tcp_write+0x464>
 800d56c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56e:	891b      	ldrh	r3, [r3, #8]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 815f 	beq.w	800d834 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d576:	88fa      	ldrh	r2, [r7, #6]
 800d578:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d57c:	1ad2      	subs	r2, r2, r3
 800d57e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d580:	4293      	cmp	r3, r2
 800d582:	bfa8      	it	ge
 800d584:	4613      	movge	r3, r2
 800d586:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d58a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d58c:	797b      	ldrb	r3, [r7, #5]
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d027      	beq.n	800d5e6 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d596:	f107 0012 	add.w	r0, r7, #18
 800d59a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d59c:	8bf9      	ldrh	r1, [r7, #30]
 800d59e:	2301      	movs	r3, #1
 800d5a0:	9302      	str	r3, [sp, #8]
 800d5a2:	797b      	ldrb	r3, [r7, #5]
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2004      	movs	r0, #4
 800d5ae:	f7ff fe37 	bl	800d220 <tcp_pbuf_prealloc>
 800d5b2:	6578      	str	r0, [r7, #84]	; 0x54
 800d5b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	f000 8227 	beq.w	800da0a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d5bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5be:	6858      	ldr	r0, [r3, #4]
 800d5c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5c4:	68ba      	ldr	r2, [r7, #8]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	8bfa      	ldrh	r2, [r7, #30]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	f009 fc63 	bl	8016e96 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d5d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d5d2:	f7fb fcbd 	bl	8008f50 <pbuf_clen>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	461a      	mov	r2, r3
 800d5da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d5de:	4413      	add	r3, r2
 800d5e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d5e4:	e03f      	b.n	800d666 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ec:	e002      	b.n	800d5f4 <tcp_write+0x224>
 800d5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1f8      	bne.n	800d5ee <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fe:	7b1b      	ldrb	r3, [r3, #12]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d115      	bne.n	800d630 <tcp_write+0x260>
 800d604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d60a:	8952      	ldrh	r2, [r2, #10]
 800d60c:	4413      	add	r3, r2
 800d60e:	68ba      	ldr	r2, [r7, #8]
 800d610:	429a      	cmp	r2, r3
 800d612:	d10d      	bne.n	800d630 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d614:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d006      	beq.n	800d62a <tcp_write+0x25a>
 800d61c:	4b1c      	ldr	r3, [pc, #112]	; (800d690 <tcp_write+0x2c0>)
 800d61e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800d622:	4921      	ldr	r1, [pc, #132]	; (800d6a8 <tcp_write+0x2d8>)
 800d624:	481c      	ldr	r0, [pc, #112]	; (800d698 <tcp_write+0x2c8>)
 800d626:	f009 fcf1 	bl	801700c <iprintf>
          extendlen = seglen;
 800d62a:	8bfb      	ldrh	r3, [r7, #30]
 800d62c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d62e:	e01a      	b.n	800d666 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d630:	8bfb      	ldrh	r3, [r7, #30]
 800d632:	2201      	movs	r2, #1
 800d634:	4619      	mov	r1, r3
 800d636:	2004      	movs	r0, #4
 800d638:	f7fb f884 	bl	8008744 <pbuf_alloc>
 800d63c:	6578      	str	r0, [r7, #84]	; 0x54
 800d63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 81e4 	beq.w	800da0e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800d646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	441a      	add	r2, r3
 800d64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d650:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d652:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d654:	f7fb fc7c 	bl	8008f50 <pbuf_clen>
 800d658:	4603      	mov	r3, r0
 800d65a:	461a      	mov	r2, r3
 800d65c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d660:	4413      	add	r3, r2
 800d662:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d666:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d66a:	8bfb      	ldrh	r3, [r7, #30]
 800d66c:	4413      	add	r3, r2
 800d66e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d672:	e0df      	b.n	800d834 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f000 80da 	beq.w	800d834 <tcp_write+0x464>
 800d680:	4b03      	ldr	r3, [pc, #12]	; (800d690 <tcp_write+0x2c0>)
 800d682:	f240 2225 	movw	r2, #549	; 0x225
 800d686:	4909      	ldr	r1, [pc, #36]	; (800d6ac <tcp_write+0x2dc>)
 800d688:	4803      	ldr	r0, [pc, #12]	; (800d698 <tcp_write+0x2c8>)
 800d68a:	f009 fcbf 	bl	801700c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d68e:	e0d1      	b.n	800d834 <tcp_write+0x464>
 800d690:	08019f28 	.word	0x08019f28
 800d694:	0801a050 	.word	0x0801a050
 800d698:	08019f8c 	.word	0x08019f8c
 800d69c:	0801a084 	.word	0x0801a084
 800d6a0:	0801a09c 	.word	0x0801a09c
 800d6a4:	0801a0bc 	.word	0x0801a0bc
 800d6a8:	0801a0dc 	.word	0x0801a0dc
 800d6ac:	0801a108 	.word	0x0801a108
    struct pbuf *p;
    u16_t left = len - pos;
 800d6b0:	88fa      	ldrh	r2, [r7, #6]
 800d6b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d6ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6c2:	1ad3      	subs	r3, r2, r3
 800d6c4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d6c6:	8b7a      	ldrh	r2, [r7, #26]
 800d6c8:	8bbb      	ldrh	r3, [r7, #28]
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	bf28      	it	cs
 800d6ce:	4613      	movcs	r3, r2
 800d6d0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d6d2:	797b      	ldrb	r3, [r7, #5]
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d036      	beq.n	800d74a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	8b3b      	ldrh	r3, [r7, #24]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	b299      	uxth	r1, r3
 800d6e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	bf0c      	ite	eq
 800d6ee:	2301      	moveq	r3, #1
 800d6f0:	2300      	movne	r3, #0
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f107 0012 	add.w	r0, r7, #18
 800d6f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d6fa:	9302      	str	r3, [sp, #8]
 800d6fc:	797b      	ldrb	r3, [r7, #5]
 800d6fe:	9301      	str	r3, [sp, #4]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	4603      	mov	r3, r0
 800d706:	2000      	movs	r0, #0
 800d708:	f7ff fd8a 	bl	800d220 <tcp_pbuf_prealloc>
 800d70c:	6338      	str	r0, [r7, #48]	; 0x30
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 817e 	beq.w	800da12 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d718:	895b      	ldrh	r3, [r3, #10]
 800d71a:	8b3a      	ldrh	r2, [r7, #24]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d906      	bls.n	800d72e <tcp_write+0x35e>
 800d720:	4b8f      	ldr	r3, [pc, #572]	; (800d960 <tcp_write+0x590>)
 800d722:	f240 2241 	movw	r2, #577	; 0x241
 800d726:	498f      	ldr	r1, [pc, #572]	; (800d964 <tcp_write+0x594>)
 800d728:	488f      	ldr	r0, [pc, #572]	; (800d968 <tcp_write+0x598>)
 800d72a:	f009 fc6f 	bl	801700c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d736:	18d0      	adds	r0, r2, r3
 800d738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	4413      	add	r3, r2
 800d740:	8b3a      	ldrh	r2, [r7, #24]
 800d742:	4619      	mov	r1, r3
 800d744:	f009 fba7 	bl	8016e96 <memcpy>
 800d748:	e02e      	b.n	800d7a8 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d74a:	8a7b      	ldrh	r3, [r7, #18]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d006      	beq.n	800d75e <tcp_write+0x38e>
 800d750:	4b83      	ldr	r3, [pc, #524]	; (800d960 <tcp_write+0x590>)
 800d752:	f240 224b 	movw	r2, #587	; 0x24b
 800d756:	4985      	ldr	r1, [pc, #532]	; (800d96c <tcp_write+0x59c>)
 800d758:	4883      	ldr	r0, [pc, #524]	; (800d968 <tcp_write+0x598>)
 800d75a:	f009 fc57 	bl	801700c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d75e:	8b3b      	ldrh	r3, [r7, #24]
 800d760:	2201      	movs	r2, #1
 800d762:	4619      	mov	r1, r3
 800d764:	2000      	movs	r0, #0
 800d766:	f7fa ffed 	bl	8008744 <pbuf_alloc>
 800d76a:	6178      	str	r0, [r7, #20]
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8151 	beq.w	800da16 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800d774:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	441a      	add	r2, r3
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d784:	b29b      	uxth	r3, r3
 800d786:	2200      	movs	r2, #0
 800d788:	4619      	mov	r1, r3
 800d78a:	2000      	movs	r0, #0
 800d78c:	f7fa ffda 	bl	8008744 <pbuf_alloc>
 800d790:	6338      	str	r0, [r7, #48]	; 0x30
 800d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d794:	2b00      	cmp	r3, #0
 800d796:	d103      	bne.n	800d7a0 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d798:	6978      	ldr	r0, [r7, #20]
 800d79a:	f7fb fb45 	bl	8008e28 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d79e:	e13d      	b.n	800da1c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d7a0:	6979      	ldr	r1, [r7, #20]
 800d7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7a4:	f7fb fc0e 	bl	8008fc4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d7a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7aa:	f7fb fbd1 	bl	8008f50 <pbuf_clen>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d7bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7c0:	2b09      	cmp	r3, #9
 800d7c2:	d805      	bhi.n	800d7d0 <tcp_write+0x400>
 800d7c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d7c8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d903      	bls.n	800d7d8 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7d2:	f7fb fb29 	bl	8008e28 <pbuf_free>
      goto memerr;
 800d7d6:	e121      	b.n	800da1c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d7e0:	441a      	add	r2, r3
 800d7e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff fc8e 	bl	800d110 <tcp_create_segment>
 800d7f4:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 810e 	beq.w	800da1a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d7fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d800:	2b00      	cmp	r3, #0
 800d802:	d102      	bne.n	800d80a <tcp_write+0x43a>
      queue = seg;
 800d804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d806:	647b      	str	r3, [r7, #68]	; 0x44
 800d808:	e00c      	b.n	800d824 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d80a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d106      	bne.n	800d81e <tcp_write+0x44e>
 800d810:	4b53      	ldr	r3, [pc, #332]	; (800d960 <tcp_write+0x590>)
 800d812:	f240 2285 	movw	r2, #645	; 0x285
 800d816:	4956      	ldr	r1, [pc, #344]	; (800d970 <tcp_write+0x5a0>)
 800d818:	4853      	ldr	r0, [pc, #332]	; (800d968 <tcp_write+0x598>)
 800d81a:	f009 fbf7 	bl	801700c <iprintf>
      prev_seg->next = seg;
 800d81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d822:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d826:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d828:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d82c:	8b3b      	ldrh	r3, [r7, #24]
 800d82e:	4413      	add	r3, r2
 800d830:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800d834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d838:	88fb      	ldrh	r3, [r7, #6]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	f4ff af38 	bcc.w	800d6b0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d842:	2b00      	cmp	r3, #0
 800d844:	d02c      	beq.n	800d8a0 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d84c:	e01e      	b.n	800d88c <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800d84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d850:	891a      	ldrh	r2, [r3, #8]
 800d852:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d854:	4413      	add	r3, r2
 800d856:	b29a      	uxth	r2, r3
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d110      	bne.n	800d886 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86a:	8952      	ldrh	r2, [r2, #10]
 800d86c:	4413      	add	r3, r2
 800d86e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d870:	68b9      	ldr	r1, [r7, #8]
 800d872:	4618      	mov	r0, r3
 800d874:	f009 fb0f 	bl	8016e96 <memcpy>
        p->len += oversize_used;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	895a      	ldrh	r2, [r3, #10]
 800d87c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d87e:	4413      	add	r3, r2
 800d880:	b29a      	uxth	r2, r3
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d884:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1dd      	bne.n	800d84e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800d892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d894:	891a      	ldrh	r2, [r3, #8]
 800d896:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d898:	4413      	add	r3, r2
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d89e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d8a0:	8a7a      	ldrh	r2, [r7, #18]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d8a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d018      	beq.n	800d8e0 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d106      	bne.n	800d8c2 <tcp_write+0x4f2>
 800d8b4:	4b2a      	ldr	r3, [pc, #168]	; (800d960 <tcp_write+0x590>)
 800d8b6:	f240 22bb 	movw	r2, #699	; 0x2bb
 800d8ba:	492e      	ldr	r1, [pc, #184]	; (800d974 <tcp_write+0x5a4>)
 800d8bc:	482a      	ldr	r0, [pc, #168]	; (800d968 <tcp_write+0x598>)
 800d8be:	f009 fba5 	bl	801700c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fb fb7b 	bl	8008fc4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d0:	891a      	ldrh	r2, [r3, #8]
 800d8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8d4:	891b      	ldrh	r3, [r3, #8]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8dc:	811a      	strh	r2, [r3, #8]
 800d8de:	e037      	b.n	800d950 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800d8e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d034      	beq.n	800d950 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d003      	beq.n	800d8f4 <tcp_write+0x524>
 800d8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d106      	bne.n	800d902 <tcp_write+0x532>
 800d8f4:	4b1a      	ldr	r3, [pc, #104]	; (800d960 <tcp_write+0x590>)
 800d8f6:	f240 22c1 	movw	r2, #705	; 0x2c1
 800d8fa:	491f      	ldr	r1, [pc, #124]	; (800d978 <tcp_write+0x5a8>)
 800d8fc:	481a      	ldr	r0, [pc, #104]	; (800d968 <tcp_write+0x598>)
 800d8fe:	f009 fb85 	bl	801700c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	62bb      	str	r3, [r7, #40]	; 0x28
 800d908:	e009      	b.n	800d91e <tcp_write+0x54e>
      p->tot_len += extendlen;
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	891a      	ldrh	r2, [r3, #8]
 800d90e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d910:	4413      	add	r3, r2
 800d912:	b29a      	uxth	r2, r3
 800d914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d916:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1f1      	bne.n	800d90a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800d926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d928:	891a      	ldrh	r2, [r3, #8]
 800d92a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d92c:	4413      	add	r3, r2
 800d92e:	b29a      	uxth	r2, r3
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	895a      	ldrh	r2, [r3, #10]
 800d938:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d93a:	4413      	add	r3, r2
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d940:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d944:	891a      	ldrh	r2, [r3, #8]
 800d946:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d948:	4413      	add	r3, r2
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d952:	2b00      	cmp	r3, #0
 800d954:	d112      	bne.n	800d97c <tcp_write+0x5ac>
    pcb->unsent = queue;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d95a:	669a      	str	r2, [r3, #104]	; 0x68
 800d95c:	e011      	b.n	800d982 <tcp_write+0x5b2>
 800d95e:	bf00      	nop
 800d960:	08019f28 	.word	0x08019f28
 800d964:	0801a138 	.word	0x0801a138
 800d968:	08019f8c 	.word	0x08019f8c
 800d96c:	0801a178 	.word	0x0801a178
 800d970:	0801a188 	.word	0x0801a188
 800d974:	0801a19c 	.word	0x0801a19c
 800d978:	0801a1d4 	.word	0x0801a1d4
  } else {
    last_unsent->next = queue;
 800d97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d97e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d980:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d986:	88fb      	ldrh	r3, [r7, #6]
 800d988:	441a      	add	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d994:	88fb      	ldrh	r3, [r7, #6]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	b29a      	uxth	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d9a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00e      	beq.n	800d9d2 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <tcp_write+0x602>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d106      	bne.n	800d9d2 <tcp_write+0x602>
 800d9c4:	4b2c      	ldr	r3, [pc, #176]	; (800da78 <tcp_write+0x6a8>)
 800d9c6:	f240 22ed 	movw	r2, #749	; 0x2ed
 800d9ca:	492c      	ldr	r1, [pc, #176]	; (800da7c <tcp_write+0x6ac>)
 800d9cc:	482c      	ldr	r0, [pc, #176]	; (800da80 <tcp_write+0x6b0>)
 800d9ce:	f009 fb1d 	bl	801700c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800d9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d016      	beq.n	800da06 <tcp_write+0x636>
 800d9d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d012      	beq.n	800da06 <tcp_write+0x636>
 800d9e0:	797b      	ldrb	r3, [r7, #5]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10d      	bne.n	800da06 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	899b      	ldrh	r3, [r3, #12]
 800d9f0:	b29c      	uxth	r4, r3
 800d9f2:	2008      	movs	r0, #8
 800d9f4:	f7fa f8ec 	bl	8007bd0 <lwip_htons>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	4322      	orrs	r2, r4
 800da02:	b292      	uxth	r2, r2
 800da04:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800da06:	2300      	movs	r3, #0
 800da08:	e031      	b.n	800da6e <tcp_write+0x69e>
          goto memerr;
 800da0a:	bf00      	nop
 800da0c:	e006      	b.n	800da1c <tcp_write+0x64c>
            goto memerr;
 800da0e:	bf00      	nop
 800da10:	e004      	b.n	800da1c <tcp_write+0x64c>
        goto memerr;
 800da12:	bf00      	nop
 800da14:	e002      	b.n	800da1c <tcp_write+0x64c>
        goto memerr;
 800da16:	bf00      	nop
 800da18:	e000      	b.n	800da1c <tcp_write+0x64c>
      goto memerr;
 800da1a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	7e9b      	ldrb	r3, [r3, #26]
 800da20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da24:	b2da      	uxtb	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800da2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <tcp_write+0x666>
    pbuf_free(concat_p);
 800da30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800da32:	f7fb f9f9 	bl	8008e28 <pbuf_free>
  }
  if (queue != NULL) {
 800da36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <tcp_write+0x672>
    tcp_segs_free(queue);
 800da3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800da3e:	f7fc fcc6 	bl	800a3ce <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00e      	beq.n	800da6a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10a      	bne.n	800da6a <tcp_write+0x69a>
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d106      	bne.n	800da6a <tcp_write+0x69a>
 800da5c:	4b06      	ldr	r3, [pc, #24]	; (800da78 <tcp_write+0x6a8>)
 800da5e:	f240 3202 	movw	r2, #770	; 0x302
 800da62:	4906      	ldr	r1, [pc, #24]	; (800da7c <tcp_write+0x6ac>)
 800da64:	4806      	ldr	r0, [pc, #24]	; (800da80 <tcp_write+0x6b0>)
 800da66:	f009 fad1 	bl	801700c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800da6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800da6e:	4618      	mov	r0, r3
 800da70:	375c      	adds	r7, #92	; 0x5c
 800da72:	46bd      	mov	sp, r7
 800da74:	bd90      	pop	{r4, r7, pc}
 800da76:	bf00      	nop
 800da78:	08019f28 	.word	0x08019f28
 800da7c:	0801a20c 	.word	0x0801a20c
 800da80:	08019f8c 	.word	0x08019f8c

0800da84 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b08a      	sub	sp, #40	; 0x28
 800da88:	af02      	add	r7, sp, #8
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	460b      	mov	r3, r1
 800da8e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800da90:	2300      	movs	r3, #0
 800da92:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800da94:	2300      	movs	r3, #0
 800da96:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800da98:	78fb      	ldrb	r3, [r7, #3]
 800da9a:	f003 0303 	and.w	r3, r3, #3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <tcp_enqueue_flags+0x2c>
 800daa2:	4b6f      	ldr	r3, [pc, #444]	; (800dc60 <tcp_enqueue_flags+0x1dc>)
 800daa4:	f240 321b 	movw	r2, #795	; 0x31b
 800daa8:	496e      	ldr	r1, [pc, #440]	; (800dc64 <tcp_enqueue_flags+0x1e0>)
 800daaa:	486f      	ldr	r0, [pc, #444]	; (800dc68 <tcp_enqueue_flags+0x1e4>)
 800daac:	f009 faae 	bl	801700c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dab6:	2b08      	cmp	r3, #8
 800dab8:	d806      	bhi.n	800dac8 <tcp_enqueue_flags+0x44>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dac0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d90e      	bls.n	800dae6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800dac8:	78fb      	ldrb	r3, [r7, #3]
 800daca:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d109      	bne.n	800dae6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7e9b      	ldrb	r3, [r3, #26]
 800dad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800dae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dae4:	e0b7      	b.n	800dc56 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800dae6:	78fb      	ldrb	r3, [r7, #3]
 800dae8:	f003 0302 	and.w	r3, r3, #2
 800daec:	2b00      	cmp	r3, #0
 800daee:	d001      	beq.n	800daf4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800daf0:	2301      	movs	r3, #1
 800daf2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800daf4:	7ffb      	ldrb	r3, [r7, #31]
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	f003 0304 	and.w	r3, r3, #4
 800dafe:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	b29b      	uxth	r3, r3
 800db04:	2200      	movs	r2, #0
 800db06:	4619      	mov	r1, r3
 800db08:	2000      	movs	r0, #0
 800db0a:	f7fa fe1b 	bl	8008744 <pbuf_alloc>
 800db0e:	6138      	str	r0, [r7, #16]
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d109      	bne.n	800db2a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	7e9b      	ldrb	r3, [r3, #26]
 800db1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db28:	e095      	b.n	800dc56 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	895a      	ldrh	r2, [r3, #10]
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	b29b      	uxth	r3, r3
 800db32:	429a      	cmp	r2, r3
 800db34:	d206      	bcs.n	800db44 <tcp_enqueue_flags+0xc0>
 800db36:	4b4a      	ldr	r3, [pc, #296]	; (800dc60 <tcp_enqueue_flags+0x1dc>)
 800db38:	f240 3241 	movw	r2, #833	; 0x341
 800db3c:	494b      	ldr	r1, [pc, #300]	; (800dc6c <tcp_enqueue_flags+0x1e8>)
 800db3e:	484a      	ldr	r0, [pc, #296]	; (800dc68 <tcp_enqueue_flags+0x1e4>)
 800db40:	f009 fa64 	bl	801700c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800db48:	78fa      	ldrb	r2, [r7, #3]
 800db4a:	7ffb      	ldrb	r3, [r7, #31]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	460b      	mov	r3, r1
 800db50:	6939      	ldr	r1, [r7, #16]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fadc 	bl	800d110 <tcp_create_segment>
 800db58:	60f8      	str	r0, [r7, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d109      	bne.n	800db74 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	7e9b      	ldrb	r3, [r3, #26]
 800db64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800db6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db72:	e070      	b.n	800dc56 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f003 0303 	and.w	r3, r3, #3
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d006      	beq.n	800db8e <tcp_enqueue_flags+0x10a>
 800db80:	4b37      	ldr	r3, [pc, #220]	; (800dc60 <tcp_enqueue_flags+0x1dc>)
 800db82:	f240 3249 	movw	r2, #841	; 0x349
 800db86:	493a      	ldr	r1, [pc, #232]	; (800dc70 <tcp_enqueue_flags+0x1ec>)
 800db88:	4837      	ldr	r0, [pc, #220]	; (800dc68 <tcp_enqueue_flags+0x1e4>)
 800db8a:	f009 fa3f 	bl	801700c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	891b      	ldrh	r3, [r3, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d006      	beq.n	800dba4 <tcp_enqueue_flags+0x120>
 800db96:	4b32      	ldr	r3, [pc, #200]	; (800dc60 <tcp_enqueue_flags+0x1dc>)
 800db98:	f240 324a 	movw	r2, #842	; 0x34a
 800db9c:	4935      	ldr	r1, [pc, #212]	; (800dc74 <tcp_enqueue_flags+0x1f0>)
 800db9e:	4832      	ldr	r0, [pc, #200]	; (800dc68 <tcp_enqueue_flags+0x1e4>)
 800dba0:	f009 fa34 	bl	801700c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d103      	bne.n	800dbb4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	669a      	str	r2, [r3, #104]	; 0x68
 800dbb2:	e00d      	b.n	800dbd0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbb8:	61bb      	str	r3, [r7, #24]
 800dbba:	e002      	b.n	800dbc2 <tcp_enqueue_flags+0x13e>
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	61bb      	str	r3, [r7, #24]
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1f8      	bne.n	800dbbc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dbd8:	78fb      	ldrb	r3, [r7, #3]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d104      	bne.n	800dbec <tcp_enqueue_flags+0x168>
 800dbe2:	78fb      	ldrb	r3, [r7, #3]
 800dbe4:	f003 0301 	and.w	r3, r3, #1
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d004      	beq.n	800dbf6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dbf6:	78fb      	ldrb	r3, [r7, #3]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d006      	beq.n	800dc0e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7e9b      	ldrb	r3, [r3, #26]
 800dc04:	f043 0320 	orr.w	r3, r3, #32
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fb f99c 	bl	8008f50 <pbuf_clen>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc22:	4413      	add	r3, r2
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00e      	beq.n	800dc54 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d10a      	bne.n	800dc54 <tcp_enqueue_flags+0x1d0>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <tcp_enqueue_flags+0x1d0>
 800dc46:	4b06      	ldr	r3, [pc, #24]	; (800dc60 <tcp_enqueue_flags+0x1dc>)
 800dc48:	f240 326d 	movw	r2, #877	; 0x36d
 800dc4c:	490a      	ldr	r1, [pc, #40]	; (800dc78 <tcp_enqueue_flags+0x1f4>)
 800dc4e:	4806      	ldr	r0, [pc, #24]	; (800dc68 <tcp_enqueue_flags+0x1e4>)
 800dc50:	f009 f9dc 	bl	801700c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3720      	adds	r7, #32
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	08019f28 	.word	0x08019f28
 800dc64:	0801a22c 	.word	0x0801a22c
 800dc68:	08019f8c 	.word	0x08019f8c
 800dc6c:	0801a284 	.word	0x0801a284
 800dc70:	0801a2c0 	.word	0x0801a2c0
 800dc74:	0801a2d8 	.word	0x0801a2d8
 800dc78:	0801a304 	.word	0x0801a304

0800dc7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dc7c:	b590      	push	{r4, r7, lr}
 800dc7e:	b08b      	sub	sp, #44	; 0x2c
 800dc80:	af04      	add	r7, sp, #16
 800dc82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dc88:	7dbb      	ldrb	r3, [r7, #22]
 800dc8a:	b29c      	uxth	r4, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7f9 ffab 	bl	8007bec <lwip_htonl>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2200      	movs	r2, #0
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f7ff f97b 	bl	800cf98 <tcp_output_alloc_header>
 800dca2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d109      	bne.n	800dcbe <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7e9b      	ldrb	r3, [r3, #26]
 800dcae:	f043 0303 	orr.w	r3, r3, #3
 800dcb2:	b2da      	uxtb	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dcb8:	f06f 0301 	mvn.w	r3, #1
 800dcbc:	e036      	b.n	800dd2c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f003 fb44 	bl	8011350 <ip4_route>
 800dcc8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800dcd0:	23fc      	movs	r3, #252	; 0xfc
 800dcd2:	75fb      	strb	r3, [r7, #23]
 800dcd4:	e012      	b.n	800dcfc <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	1d18      	adds	r0, r3, #4
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	7a9c      	ldrb	r4, [r3, #10]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	7a5b      	ldrb	r3, [r3, #9]
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	9202      	str	r2, [sp, #8]
 800dce8:	2206      	movs	r2, #6
 800dcea:	9201      	str	r2, [sp, #4]
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	4623      	mov	r3, r4
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	6938      	ldr	r0, [r7, #16]
 800dcf4:	f003 fcf2 	bl	80116dc <ip4_output_if>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800dcfc:	6938      	ldr	r0, [r7, #16]
 800dcfe:	f7fb f893 	bl	8008e28 <pbuf_free>

  if (err != ERR_OK) {
 800dd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d007      	beq.n	800dd1a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7e9b      	ldrb	r3, [r3, #26]
 800dd0e:	f043 0303 	orr.w	r3, r3, #3
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	769a      	strb	r2, [r3, #26]
 800dd18:	e006      	b.n	800dd28 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	7e9b      	ldrb	r3, [r3, #26]
 800dd1e:	f023 0303 	bic.w	r3, r3, #3
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800dd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	371c      	adds	r7, #28
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd90      	pop	{r4, r7, pc}

0800dd34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dd34:	b5b0      	push	{r4, r5, r7, lr}
 800dd36:	b08a      	sub	sp, #40	; 0x28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	7d1b      	ldrb	r3, [r3, #20]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d106      	bne.n	800dd52 <tcp_output+0x1e>
 800dd44:	4b9b      	ldr	r3, [pc, #620]	; (800dfb4 <tcp_output+0x280>)
 800dd46:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800dd4a:	499b      	ldr	r1, [pc, #620]	; (800dfb8 <tcp_output+0x284>)
 800dd4c:	489b      	ldr	r0, [pc, #620]	; (800dfbc <tcp_output+0x288>)
 800dd4e:	f009 f95d 	bl	801700c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dd52:	4b9b      	ldr	r3, [pc, #620]	; (800dfc0 <tcp_output+0x28c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d101      	bne.n	800dd60 <tcp_output+0x2c>
    return ERR_OK;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	e1cf      	b.n	800e100 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d203      	bcs.n	800dd78 <tcp_output+0x44>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd76:	e002      	b.n	800dd7e <tcp_output+0x4a>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd7e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd84:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	7e9b      	ldrb	r3, [r3, #26]
 800dd8a:	f003 0302 	and.w	r3, r3, #2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d017      	beq.n	800ddc2 <tcp_output+0x8e>
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00f      	beq.n	800ddb8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800dd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f9 ff24 	bl	8007bec <lwip_htonl>
 800dda4:	4602      	mov	r2, r0
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddae:	8912      	ldrh	r2, [r2, #8]
 800ddb0:	4413      	add	r3, r2
     (seg == NULL ||
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d204      	bcs.n	800ddc2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ff5f 	bl	800dc7c <tcp_send_empty_ack>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	e19e      	b.n	800e100 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ddc8:	6a3b      	ldr	r3, [r7, #32]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d007      	beq.n	800ddde <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800ddce:	e002      	b.n	800ddd6 <tcp_output+0xa2>
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	623b      	str	r3, [r7, #32]
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d1f8      	bne.n	800ddd0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3304      	adds	r3, #4
 800dde2:	4618      	mov	r0, r3
 800dde4:	f003 fab4 	bl	8011350 <ip4_route>
 800dde8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d102      	bne.n	800ddf6 <tcp_output+0xc2>
    return ERR_RTE;
 800ddf0:	f06f 0303 	mvn.w	r3, #3
 800ddf4:	e184      	b.n	800e100 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d003      	beq.n	800de04 <tcp_output+0xd0>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d111      	bne.n	800de28 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d002      	beq.n	800de10 <tcp_output+0xdc>
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	3304      	adds	r3, #4
 800de0e:	e000      	b.n	800de12 <tcp_output+0xde>
 800de10:	2300      	movs	r3, #0
 800de12:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d102      	bne.n	800de20 <tcp_output+0xec>
      return ERR_RTE;
 800de1a:	f06f 0303 	mvn.w	r3, #3
 800de1e:	e16f      	b.n	800e100 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 813e 	beq.w	800e0ac <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	f7f9 fed8 	bl	8007bec <lwip_htonl>
 800de3c:	4602      	mov	r2, r0
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de46:	8912      	ldrh	r2, [r2, #8]
 800de48:	4413      	add	r3, r2
  if (seg != NULL &&
 800de4a:	69ba      	ldr	r2, [r7, #24]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	f080 812d 	bcs.w	800e0ac <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800de52:	69bb      	ldr	r3, [r7, #24]
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 8129 	beq.w	800e0ac <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de60:	461a      	mov	r2, r3
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	4293      	cmp	r3, r2
 800de66:	f040 8121 	bne.w	800e0ac <tcp_output+0x378>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f040 811c 	bne.w	800e0ac <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f040 812b 	bne.w	800e0d6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800de90:	e121      	b.n	800e0d6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	899b      	ldrh	r3, [r3, #12]
 800de98:	b29b      	uxth	r3, r3
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7f9 fe98 	bl	8007bd0 <lwip_htons>
 800dea0:	4603      	mov	r3, r0
 800dea2:	f003 0304 	and.w	r3, r3, #4
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d006      	beq.n	800deb8 <tcp_output+0x184>
 800deaa:	4b42      	ldr	r3, [pc, #264]	; (800dfb4 <tcp_output+0x280>)
 800deac:	f240 4246 	movw	r2, #1094	; 0x446
 800deb0:	4944      	ldr	r1, [pc, #272]	; (800dfc4 <tcp_output+0x290>)
 800deb2:	4842      	ldr	r0, [pc, #264]	; (800dfbc <tcp_output+0x288>)
 800deb4:	f009 f8aa 	bl	801700c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800debc:	2b00      	cmp	r3, #0
 800debe:	d01f      	beq.n	800df00 <tcp_output+0x1cc>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7e9b      	ldrb	r3, [r3, #26]
 800dec4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d119      	bne.n	800df00 <tcp_output+0x1cc>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00b      	beq.n	800deec <tcp_output+0x1b8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d110      	bne.n	800df00 <tcp_output+0x1cc>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dee2:	891a      	ldrh	r2, [r3, #8]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dee8:	429a      	cmp	r2, r3
 800deea:	d209      	bcs.n	800df00 <tcp_output+0x1cc>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800def2:	2b00      	cmp	r3, #0
 800def4:	d004      	beq.n	800df00 <tcp_output+0x1cc>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800defc:	2b08      	cmp	r3, #8
 800defe:	d901      	bls.n	800df04 <tcp_output+0x1d0>
 800df00:	2301      	movs	r3, #1
 800df02:	e000      	b.n	800df06 <tcp_output+0x1d2>
 800df04:	2300      	movs	r3, #0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7e9b      	ldrb	r3, [r3, #26]
 800df0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 80e1 	beq.w	800e0da <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d00d      	beq.n	800df3c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	899b      	ldrh	r3, [r3, #12]
 800df26:	b29c      	uxth	r4, r3
 800df28:	2010      	movs	r0, #16
 800df2a:	f7f9 fe51 	bl	8007bd0 <lwip_htons>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	4322      	orrs	r2, r4
 800df38:	b292      	uxth	r2, r2
 800df3a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df42:	f000 f8e1 	bl	800e108 <tcp_output_segment>
 800df46:	4603      	mov	r3, r0
 800df48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800df4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	7e9b      	ldrb	r3, [r3, #26]
 800df56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	769a      	strb	r2, [r3, #26]
      return err;
 800df60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df64:	e0cc      	b.n	800e100 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7d1b      	ldrb	r3, [r3, #20]
 800df72:	2b02      	cmp	r3, #2
 800df74:	d006      	beq.n	800df84 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7e9b      	ldrb	r3, [r3, #26]
 800df7a:	f023 0303 	bic.w	r3, r3, #3
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f9 fe2e 	bl	8007bec <lwip_htonl>
 800df90:	4604      	mov	r4, r0
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	891b      	ldrh	r3, [r3, #8]
 800df96:	461d      	mov	r5, r3
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	899b      	ldrh	r3, [r3, #12]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7f9 fe15 	bl	8007bd0 <lwip_htons>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f003 0303 	and.w	r3, r3, #3
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00b      	beq.n	800dfc8 <tcp_output+0x294>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e00a      	b.n	800dfca <tcp_output+0x296>
 800dfb4:	08019f28 	.word	0x08019f28
 800dfb8:	0801a32c 	.word	0x0801a32c
 800dfbc:	08019f8c 	.word	0x08019f8c
 800dfc0:	20003960 	.word	0x20003960
 800dfc4:	0801a354 	.word	0x0801a354
 800dfc8:	2300      	movs	r3, #0
 800dfca:	442b      	add	r3, r5
 800dfcc:	4423      	add	r3, r4
 800dfce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	da02      	bge.n	800dfe2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	891b      	ldrh	r3, [r3, #8]
 800dfe6:	461c      	mov	r4, r3
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	899b      	ldrh	r3, [r3, #12]
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7f9 fded 	bl	8007bd0 <lwip_htons>
 800dff6:	4603      	mov	r3, r0
 800dff8:	f003 0303 	and.w	r3, r3, #3
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <tcp_output+0x2d0>
 800e000:	2301      	movs	r3, #1
 800e002:	e000      	b.n	800e006 <tcp_output+0x2d2>
 800e004:	2300      	movs	r3, #0
 800e006:	4423      	add	r3, r4
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d049      	beq.n	800e0a0 <tcp_output+0x36c>
      seg->next = NULL;
 800e00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00e:	2200      	movs	r2, #0
 800e010:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e016:	2b00      	cmp	r3, #0
 800e018:	d105      	bne.n	800e026 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	623b      	str	r3, [r7, #32]
 800e024:	e03f      	b.n	800e0a6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f9 fddd 	bl	8007bec <lwip_htonl>
 800e032:	4604      	mov	r4, r0
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7f9 fdd6 	bl	8007bec <lwip_htonl>
 800e040:	4603      	mov	r3, r0
 800e042:	1ae3      	subs	r3, r4, r3
 800e044:	2b00      	cmp	r3, #0
 800e046:	da24      	bge.n	800e092 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	336c      	adds	r3, #108	; 0x6c
 800e04c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e04e:	e002      	b.n	800e056 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d011      	beq.n	800e082 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	4618      	mov	r0, r3
 800e068:	f7f9 fdc0 	bl	8007bec <lwip_htonl>
 800e06c:	4604      	mov	r4, r0
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	4618      	mov	r0, r3
 800e076:	f7f9 fdb9 	bl	8007bec <lwip_htonl>
 800e07a:	4603      	mov	r3, r0
 800e07c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e07e:	2b00      	cmp	r3, #0
 800e080:	dbe6      	blt.n	800e050 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	e009      	b.n	800e0a6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e096:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	623b      	str	r3, [r7, #32]
 800e09e:	e002      	b.n	800e0a6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e0a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0a2:	f7fc f9a8 	bl	800a3f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d015      	beq.n	800e0de <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7f9 fd97 	bl	8007bec <lwip_htonl>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c4:	1ad3      	subs	r3, r2, r3
 800e0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c8:	8912      	ldrh	r2, [r2, #8]
 800e0ca:	4413      	add	r3, r2
  while (seg != NULL &&
 800e0cc:	69ba      	ldr	r2, [r7, #24]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	f4bf aedf 	bcs.w	800de92 <tcp_output+0x15e>
  }
output_done:
 800e0d4:	e003      	b.n	800e0de <tcp_output+0x3aa>
    goto output_done;
 800e0d6:	bf00      	nop
 800e0d8:	e002      	b.n	800e0e0 <tcp_output+0x3ac>
      break;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <tcp_output+0x3ac>
output_done:
 800e0de:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7e9b      	ldrb	r3, [r3, #26]
 800e0f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3728      	adds	r7, #40	; 0x28
 800e104:	46bd      	mov	sp, r7
 800e106:	bdb0      	pop	{r4, r5, r7, pc}

0800e108 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e108:	b5b0      	push	{r4, r5, r7, lr}
 800e10a:	b08c      	sub	sp, #48	; 0x30
 800e10c:	af04      	add	r7, sp, #16
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	89db      	ldrh	r3, [r3, #14]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d001      	beq.n	800e122 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	e08b      	b.n	800e23a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	68dc      	ldr	r4, [r3, #12]
 800e12a:	4610      	mov	r0, r2
 800e12c:	f7f9 fd5e 	bl	8007bec <lwip_htonl>
 800e130:	4603      	mov	r3, r0
 800e132:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	68dc      	ldr	r4, [r3, #12]
 800e13c:	4610      	mov	r0, r2
 800e13e:	f7f9 fd47 	bl	8007bd0 <lwip_htons>
 800e142:	4603      	mov	r3, r0
 800e144:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e14e:	441a      	add	r2, r3
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	3314      	adds	r3, #20
 800e15a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	7a9b      	ldrb	r3, [r3, #10]
 800e160:	f003 0301 	and.w	r3, r3, #1
 800e164:	2b00      	cmp	r3, #0
 800e166:	d014      	beq.n	800e192 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	3304      	adds	r3, #4
 800e16c:	4619      	mov	r1, r3
 800e16e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e172:	f7fc fc73 	bl	800aa5c <tcp_eff_send_mss_impl>
 800e176:	4603      	mov	r3, r0
 800e178:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e17a:	8b7b      	ldrh	r3, [r7, #26]
 800e17c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e180:	4618      	mov	r0, r3
 800e182:	f7f9 fd33 	bl	8007bec <lwip_htonl>
 800e186:	4602      	mov	r2, r0
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	3304      	adds	r3, #4
 800e190:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e198:	2b00      	cmp	r3, #0
 800e19a:	da02      	bge.n	800e1a2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10c      	bne.n	800e1c4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800e1aa:	4b26      	ldr	r3, [pc, #152]	; (800e244 <tcp_output_segment+0x13c>)
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f9 fd17 	bl	8007bec <lwip_htonl>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	8959      	ldrh	r1, [r3, #10]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	8b3a      	ldrh	r2, [r7, #24]
 800e1e0:	1a8a      	subs	r2, r1, r2
 800e1e2:	b292      	uxth	r2, r2
 800e1e4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	8919      	ldrh	r1, [r3, #8]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	8b3a      	ldrh	r2, [r7, #24]
 800e1f2:	1a8a      	subs	r2, r1, r2
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	68d2      	ldr	r2, [r2, #12]
 800e200:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	741a      	strb	r2, [r3, #16]
 800e20a:	2200      	movs	r2, #0
 800e20c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6858      	ldr	r0, [r3, #4]
 800e212:	68b9      	ldr	r1, [r7, #8]
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	1d1c      	adds	r4, r3, #4
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	7a9d      	ldrb	r5, [r3, #10]
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	7a5b      	ldrb	r3, [r3, #9]
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	9202      	str	r2, [sp, #8]
 800e224:	2206      	movs	r2, #6
 800e226:	9201      	str	r2, [sp, #4]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	462b      	mov	r3, r5
 800e22c:	4622      	mov	r2, r4
 800e22e:	f003 fa55 	bl	80116dc <ip4_output_if>
 800e232:	4603      	mov	r3, r0
 800e234:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800e236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3720      	adds	r7, #32
 800e23e:	46bd      	mov	sp, r7
 800e240:	bdb0      	pop	{r4, r5, r7, pc}
 800e242:	bf00      	nop
 800e244:	20003950 	.word	0x20003950

0800e248 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b08c      	sub	sp, #48	; 0x30
 800e24c:	af04      	add	r7, sp, #16
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e256:	2200      	movs	r2, #0
 800e258:	2114      	movs	r1, #20
 800e25a:	2001      	movs	r0, #1
 800e25c:	f7fa fa72 	bl	8008744 <pbuf_alloc>
 800e260:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d05b      	beq.n	800e320 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	895b      	ldrh	r3, [r3, #10]
 800e26c:	2b13      	cmp	r3, #19
 800e26e:	d806      	bhi.n	800e27e <tcp_rst+0x36>
 800e270:	4b2d      	ldr	r3, [pc, #180]	; (800e328 <tcp_rst+0xe0>)
 800e272:	f240 524d 	movw	r2, #1357	; 0x54d
 800e276:	492d      	ldr	r1, [pc, #180]	; (800e32c <tcp_rst+0xe4>)
 800e278:	482d      	ldr	r0, [pc, #180]	; (800e330 <tcp_rst+0xe8>)
 800e27a:	f008 fec7 	bl	801700c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800e284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e286:	4618      	mov	r0, r3
 800e288:	f7f9 fca2 	bl	8007bd0 <lwip_htons>
 800e28c:	4603      	mov	r3, r0
 800e28e:	461a      	mov	r2, r3
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e294:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e296:	4618      	mov	r0, r3
 800e298:	f7f9 fc9a 	bl	8007bd0 <lwip_htons>
 800e29c:	4603      	mov	r3, r0
 800e29e:	461a      	mov	r2, r3
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7f9 fca1 	bl	8007bec <lwip_htonl>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e2b0:	68b8      	ldr	r0, [r7, #8]
 800e2b2:	f7f9 fc9b 	bl	8007bec <lwip_htonl>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e2bc:	f245 0014 	movw	r0, #20500	; 0x5014
 800e2c0:	f7f9 fc86 	bl	8007bd0 <lwip_htons>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f042 0208 	orr.w	r2, r2, #8
 800e2d4:	739a      	strb	r2, [r3, #14]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e2dc:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	741a      	strb	r2, [r3, #16]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800e2e8:	69bb      	ldr	r3, [r7, #24]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	749a      	strb	r2, [r3, #18]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800e2f2:	6838      	ldr	r0, [r7, #0]
 800e2f4:	f003 f82c 	bl	8011350 <ip4_route>
 800e2f8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00b      	beq.n	800e318 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	9302      	str	r3, [sp, #8]
 800e304:	2306      	movs	r3, #6
 800e306:	9301      	str	r3, [sp, #4]
 800e308:	2300      	movs	r3, #0
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	23ff      	movs	r3, #255	; 0xff
 800e30e:	683a      	ldr	r2, [r7, #0]
 800e310:	6879      	ldr	r1, [r7, #4]
 800e312:	69f8      	ldr	r0, [r7, #28]
 800e314:	f003 f9e2 	bl	80116dc <ip4_output_if>
  }
  pbuf_free(p);
 800e318:	69f8      	ldr	r0, [r7, #28]
 800e31a:	f7fa fd85 	bl	8008e28 <pbuf_free>
 800e31e:	e000      	b.n	800e322 <tcp_rst+0xda>
    return;
 800e320:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e322:	3720      	adds	r7, #32
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	08019f28 	.word	0x08019f28
 800e32c:	08019f5c 	.word	0x08019f5c
 800e330:	08019f8c 	.word	0x08019f8c

0800e334 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e340:	2b00      	cmp	r3, #0
 800e342:	d029      	beq.n	800e398 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e348:	60fb      	str	r3, [r7, #12]
 800e34a:	e002      	b.n	800e352 <tcp_rexmit_rto+0x1e>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	60fb      	str	r3, [r7, #12]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1f8      	bne.n	800e34c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e376:	2bff      	cmp	r3, #255	; 0xff
 800e378:	d007      	beq.n	800e38a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e380:	3301      	adds	r3, #1
 800e382:	b2da      	uxtb	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff fccf 	bl	800dd34 <tcp_output>
 800e396:	e000      	b.n	800e39a <tcp_rexmit_rto+0x66>
    return;
 800e398:	bf00      	nop
}
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d043      	beq.n	800e438 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3b4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	3368      	adds	r3, #104	; 0x68
 800e3c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e3c4:	e002      	b.n	800e3cc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d011      	beq.n	800e3f8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f9 fc05 	bl	8007bec <lwip_htonl>
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f9 fbfe 	bl	8007bec <lwip_htonl>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dbe6      	blt.n	800e3c6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d103      	bne.n	800e416 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e41c:	2bff      	cmp	r3, #255	; 0xff
 800e41e:	d007      	beq.n	800e430 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e426:	3301      	adds	r3, #1
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	635a      	str	r2, [r3, #52]	; 0x34
 800e436:	e000      	b.n	800e43a <tcp_rexmit+0x9a>
    return;
 800e438:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd90      	pop	{r4, r7, pc}

0800e440 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d04a      	beq.n	800e4e6 <tcp_rexmit_fast+0xa6>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	7e9b      	ldrb	r3, [r3, #26]
 800e454:	f003 0304 	and.w	r3, r3, #4
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d144      	bne.n	800e4e6 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7ff ff9f 	bl	800e3a0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e46e:	429a      	cmp	r2, r3
 800e470:	d207      	bcs.n	800e482 <tcp_rexmit_fast+0x42>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e478:	0fda      	lsrs	r2, r3, #31
 800e47a:	4413      	add	r3, r2
 800e47c:	105b      	asrs	r3, r3, #1
 800e47e:	b29b      	uxth	r3, r3
 800e480:	e006      	b.n	800e490 <tcp_rexmit_fast+0x50>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e488:	0fda      	lsrs	r2, r3, #31
 800e48a:	4413      	add	r3, r2
 800e48c:	105b      	asrs	r3, r3, #1
 800e48e:	b29b      	uxth	r3, r3
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e49c:	461a      	mov	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4a2:	005b      	lsls	r3, r3, #1
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d206      	bcs.n	800e4b6 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	0049      	lsls	r1, r1, #1
 800e4c4:	440b      	add	r3, r1
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	4413      	add	r3, r2
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	7e9b      	ldrb	r3, [r3, #26]
 800e4d6:	f043 0304 	orr.w	r3, r3, #4
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800e4e6:	bf00      	nop
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b08a      	sub	sp, #40	; 0x28
 800e4f2:	af04      	add	r7, sp, #16
 800e4f4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7f9 fb75 	bl	8007bec <lwip_htonl>
 800e502:	4603      	mov	r3, r0
 800e504:	2200      	movs	r2, #0
 800e506:	2100      	movs	r1, #0
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7fe fd45 	bl	800cf98 <tcp_output_alloc_header>
 800e50e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d102      	bne.n	800e51c <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e51a:	e021      	b.n	800e560 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3304      	adds	r3, #4
 800e520:	4618      	mov	r0, r3
 800e522:	f002 ff15 	bl	8011350 <ip4_route>
 800e526:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d102      	bne.n	800e534 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800e52e:	23fc      	movs	r3, #252	; 0xfc
 800e530:	75fb      	strb	r3, [r7, #23]
 800e532:	e010      	b.n	800e556 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e534:	6879      	ldr	r1, [r7, #4]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	1d1a      	adds	r2, r3, #4
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7a98      	ldrb	r0, [r3, #10]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	9302      	str	r3, [sp, #8]
 800e542:	2306      	movs	r3, #6
 800e544:	9301      	str	r3, [sp, #4]
 800e546:	2300      	movs	r3, #0
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	4603      	mov	r3, r0
 800e54c:	6938      	ldr	r0, [r7, #16]
 800e54e:	f003 f8c5 	bl	80116dc <ip4_output_if>
 800e552:	4603      	mov	r3, r0
 800e554:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e556:	6938      	ldr	r0, [r7, #16]
 800e558:	f7fa fc66 	bl	8008e28 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e55c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e560:	4618      	mov	r0, r3
 800e562:	3718      	adds	r7, #24
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b08f      	sub	sp, #60	; 0x3c
 800e56c:	af04      	add	r7, sp, #16
 800e56e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e574:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e576:	6a3b      	ldr	r3, [r7, #32]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e580:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	e085      	b.n	800e698 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e58c:	6a3b      	ldr	r3, [r7, #32]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	899b      	ldrh	r3, [r3, #12]
 800e592:	b29b      	uxth	r3, r3
 800e594:	4618      	mov	r0, r3
 800e596:	f7f9 fb1b 	bl	8007bd0 <lwip_htons>
 800e59a:	4603      	mov	r3, r0
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d005      	beq.n	800e5b0 <tcp_zero_window_probe+0x48>
 800e5a4:	6a3b      	ldr	r3, [r7, #32]
 800e5a6:	891b      	ldrh	r3, [r3, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d101      	bne.n	800e5b0 <tcp_zero_window_probe+0x48>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e000      	b.n	800e5b2 <tcp_zero_window_probe+0x4a>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e5b4:	7ffb      	ldrb	r3, [r7, #31]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	bf0c      	ite	eq
 800e5ba:	2301      	moveq	r3, #1
 800e5bc:	2300      	movne	r3, #0
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e5c2:	6a3b      	ldr	r3, [r7, #32]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	8bba      	ldrh	r2, [r7, #28]
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7fe fce3 	bl	800cf98 <tcp_output_alloc_header>
 800e5d2:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d102      	bne.n	800e5e0 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e5da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5de:	e05b      	b.n	800e698 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e5e6:	7ffb      	ldrb	r3, [r7, #31]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00e      	beq.n	800e60a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	899b      	ldrh	r3, [r3, #12]
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e5f6:	b29c      	uxth	r4, r3
 800e5f8:	2011      	movs	r0, #17
 800e5fa:	f7f9 fae9 	bl	8007bd0 <lwip_htons>
 800e5fe:	4603      	mov	r3, r0
 800e600:	4323      	orrs	r3, r4
 800e602:	b29a      	uxth	r2, r3
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	819a      	strh	r2, [r3, #12]
 800e608:	e010      	b.n	800e62c <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	3314      	adds	r3, #20
 800e610:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	6858      	ldr	r0, [r3, #4]
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	891a      	ldrh	r2, [r3, #8]
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	891b      	ldrh	r3, [r3, #8]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	b29b      	uxth	r3, r3
 800e624:	2201      	movs	r2, #1
 800e626:	6939      	ldr	r1, [r7, #16]
 800e628:	f7fa fdfe 	bl	8009228 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e62c:	6a3b      	ldr	r3, [r7, #32]
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	4618      	mov	r0, r3
 800e634:	f7f9 fada 	bl	8007bec <lwip_htonl>
 800e638:	4603      	mov	r3, r0
 800e63a:	3301      	adds	r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	da02      	bge.n	800e650 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3304      	adds	r3, #4
 800e654:	4618      	mov	r0, r3
 800e656:	f002 fe7b 	bl	8011350 <ip4_route>
 800e65a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d103      	bne.n	800e66a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800e662:	23fc      	movs	r3, #252	; 0xfc
 800e664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e668:	e011      	b.n	800e68e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e66a:	6879      	ldr	r1, [r7, #4]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	1d1a      	adds	r2, r3, #4
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7a98      	ldrb	r0, [r3, #10]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	9302      	str	r3, [sp, #8]
 800e678:	2306      	movs	r3, #6
 800e67a:	9301      	str	r3, [sp, #4]
 800e67c:	2300      	movs	r3, #0
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	4603      	mov	r3, r0
 800e682:	69b8      	ldr	r0, [r7, #24]
 800e684:	f003 f82a 	bl	80116dc <ip4_output_if>
 800e688:	4603      	mov	r3, r0
 800e68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800e68e:	69b8      	ldr	r0, [r7, #24]
 800e690:	f7fa fbca 	bl	8008e28 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e698:	4618      	mov	r0, r3
 800e69a:	372c      	adds	r7, #44	; 0x2c
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd90      	pop	{r4, r7, pc}

0800e6a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e6a8:	f7fa fe40 	bl	800932c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e6ac:	4b0a      	ldr	r3, [pc, #40]	; (800e6d8 <tcpip_tcp_timer+0x38>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d103      	bne.n	800e6bc <tcpip_tcp_timer+0x1c>
 800e6b4:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <tcpip_tcp_timer+0x3c>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d005      	beq.n	800e6c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e6bc:	2200      	movs	r2, #0
 800e6be:	4908      	ldr	r1, [pc, #32]	; (800e6e0 <tcpip_tcp_timer+0x40>)
 800e6c0:	20fa      	movs	r0, #250	; 0xfa
 800e6c2:	f000 f86f 	bl	800e7a4 <sys_timeout>
 800e6c6:	e002      	b.n	800e6ce <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e6c8:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <tcpip_tcp_timer+0x44>)
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	601a      	str	r2, [r3, #0]
  }
}
 800e6ce:	bf00      	nop
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	2000394c 	.word	0x2000394c
 800e6dc:	2000395c 	.word	0x2000395c
 800e6e0:	0800e6a1 	.word	0x0800e6a1
 800e6e4:	20000284 	.word	0x20000284

0800e6e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e6ec:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <tcp_timer_needed+0x30>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10f      	bne.n	800e714 <tcp_timer_needed+0x2c>
 800e6f4:	4b09      	ldr	r3, [pc, #36]	; (800e71c <tcp_timer_needed+0x34>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d103      	bne.n	800e704 <tcp_timer_needed+0x1c>
 800e6fc:	4b08      	ldr	r3, [pc, #32]	; (800e720 <tcp_timer_needed+0x38>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d007      	beq.n	800e714 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e704:	4b04      	ldr	r3, [pc, #16]	; (800e718 <tcp_timer_needed+0x30>)
 800e706:	2201      	movs	r2, #1
 800e708:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e70a:	2200      	movs	r2, #0
 800e70c:	4905      	ldr	r1, [pc, #20]	; (800e724 <tcp_timer_needed+0x3c>)
 800e70e:	20fa      	movs	r0, #250	; 0xfa
 800e710:	f000 f848 	bl	800e7a4 <sys_timeout>
  }
}
 800e714:	bf00      	nop
 800e716:	bd80      	pop	{r7, pc}
 800e718:	20000284 	.word	0x20000284
 800e71c:	2000394c 	.word	0x2000394c
 800e720:	2000395c 	.word	0x2000395c
 800e724:	0800e6a1 	.word	0x0800e6a1

0800e728 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	4903      	ldr	r1, [pc, #12]	; (800e750 <cyclic_timer+0x28>)
 800e742:	4618      	mov	r0, r3
 800e744:	f000 f82e 	bl	800e7a4 <sys_timeout>
}
 800e748:	bf00      	nop
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	0800e729 	.word	0x0800e729

0800e754 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e75a:	2301      	movs	r3, #1
 800e75c:	607b      	str	r3, [r7, #4]
 800e75e:	e00e      	b.n	800e77e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800e760:	4a0d      	ldr	r2, [pc, #52]	; (800e798 <sys_timeouts_init+0x44>)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	00db      	lsls	r3, r3, #3
 800e76c:	4a0a      	ldr	r2, [pc, #40]	; (800e798 <sys_timeouts_init+0x44>)
 800e76e:	4413      	add	r3, r2
 800e770:	461a      	mov	r2, r3
 800e772:	490a      	ldr	r1, [pc, #40]	; (800e79c <sys_timeouts_init+0x48>)
 800e774:	f000 f816 	bl	800e7a4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	3301      	adds	r3, #1
 800e77c:	607b      	str	r3, [r7, #4]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b04      	cmp	r3, #4
 800e782:	d9ed      	bls.n	800e760 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800e784:	f006 f926 	bl	80149d4 <sys_now>
 800e788:	4602      	mov	r2, r0
 800e78a:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <sys_timeouts_init+0x4c>)
 800e78c:	601a      	str	r2, [r3, #0]
}
 800e78e:	bf00      	nop
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	0801b318 	.word	0x0801b318
 800e79c:	0800e729 	.word	0x0800e729
 800e7a0:	20000280 	.word	0x20000280

0800e7a4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e7b0:	2006      	movs	r0, #6
 800e7b2:	f7f9 fdbb 	bl	800832c <memp_malloc>
 800e7b6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10a      	bne.n	800e7d4 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f040 8084 	bne.w	800e8ce <sys_timeout+0x12a>
 800e7c6:	4b44      	ldr	r3, [pc, #272]	; (800e8d8 <sys_timeout+0x134>)
 800e7c8:	22d4      	movs	r2, #212	; 0xd4
 800e7ca:	4944      	ldr	r1, [pc, #272]	; (800e8dc <sys_timeout+0x138>)
 800e7cc:	4844      	ldr	r0, [pc, #272]	; (800e8e0 <sys_timeout+0x13c>)
 800e7ce:	f008 fc1d 	bl	801700c <iprintf>
    return;
 800e7d2:	e07c      	b.n	800e8ce <sys_timeout+0x12a>
  }

  now = sys_now();
 800e7d4:	f006 f8fe 	bl	80149d4 <sys_now>
 800e7d8:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800e7da:	4b42      	ldr	r3, [pc, #264]	; (800e8e4 <sys_timeout+0x140>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d105      	bne.n	800e7ee <sys_timeout+0x4a>
    diff = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800e7e6:	4a40      	ldr	r2, [pc, #256]	; (800e8e8 <sys_timeout+0x144>)
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6013      	str	r3, [r2, #0]
 800e7ec:	e004      	b.n	800e7f8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800e7ee:	4b3e      	ldr	r3, [pc, #248]	; (800e8e8 <sys_timeout+0x144>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	693a      	ldr	r2, [r7, #16]
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	441a      	add	r2, r3
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e814:	4b33      	ldr	r3, [pc, #204]	; (800e8e4 <sys_timeout+0x140>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d103      	bne.n	800e824 <sys_timeout+0x80>
    next_timeout = timeout;
 800e81c:	4a31      	ldr	r2, [pc, #196]	; (800e8e4 <sys_timeout+0x140>)
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	6013      	str	r3, [r2, #0]
    return;
 800e822:	e055      	b.n	800e8d0 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800e824:	4b2f      	ldr	r3, [pc, #188]	; (800e8e4 <sys_timeout+0x140>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d20f      	bcs.n	800e850 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800e830:	4b2c      	ldr	r3, [pc, #176]	; (800e8e4 <sys_timeout+0x140>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6859      	ldr	r1, [r3, #4]
 800e836:	4b2b      	ldr	r3, [pc, #172]	; (800e8e4 <sys_timeout+0x140>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	1a8a      	subs	r2, r1, r2
 800e83e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800e840:	4b28      	ldr	r3, [pc, #160]	; (800e8e4 <sys_timeout+0x140>)
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e848:	4a26      	ldr	r2, [pc, #152]	; (800e8e4 <sys_timeout+0x140>)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	6013      	str	r3, [r2, #0]
 800e84e:	e03f      	b.n	800e8d0 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e850:	4b24      	ldr	r3, [pc, #144]	; (800e8e4 <sys_timeout+0x140>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	61fb      	str	r3, [r7, #28]
 800e856:	e036      	b.n	800e8c6 <sys_timeout+0x122>
      timeout->time -= t->time;
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	1ad2      	subs	r2, r2, r3
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d006      	beq.n	800e87c <sys_timeout+0xd8>
 800e86e:	69fb      	ldr	r3, [r7, #28]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d921      	bls.n	800e8c0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6859      	ldr	r1, [r3, #4]
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	1a8a      	subs	r2, r1, r2
 800e894:	605a      	str	r2, [r3, #4]
 800e896:	e00b      	b.n	800e8b0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d206      	bcs.n	800e8b0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800e8a2:	4b10      	ldr	r3, [pc, #64]	; (800e8e4 <sys_timeout+0x140>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	441a      	add	r2, r3
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	601a      	str	r2, [r3, #0]
        break;
 800e8be:	e007      	b.n	800e8d0 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	61fb      	str	r3, [r7, #28]
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1c5      	bne.n	800e858 <sys_timeout+0xb4>
 800e8cc:	e000      	b.n	800e8d0 <sys_timeout+0x12c>
    return;
 800e8ce:	bf00      	nop
      }
    }
  }
}
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	0801a36c 	.word	0x0801a36c
 800e8dc:	0801a3a0 	.word	0x0801a3a0
 800e8e0:	0801a3e0 	.word	0x0801a3e0
 800e8e4:	2000027c 	.word	0x2000027c
 800e8e8:	20000280 	.word	0x20000280

0800e8ec <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800e8f2:	4b24      	ldr	r3, [pc, #144]	; (800e984 <sys_check_timeouts+0x98>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d040      	beq.n	800e97c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800e8fa:	f006 f86b 	bl	80149d4 <sys_now>
 800e8fe:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800e900:	4b21      	ldr	r3, [pc, #132]	; (800e988 <sys_check_timeouts+0x9c>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	1ad3      	subs	r3, r2, r3
 800e908:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800e90a:	4b20      	ldr	r3, [pc, #128]	; (800e98c <sys_check_timeouts+0xa0>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d001      	beq.n	800e918 <sys_check_timeouts+0x2c>
 800e914:	f7f9 fee6 	bl	80086e4 <pbuf_free_ooseq>
      had_one = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800e91c:	4b19      	ldr	r3, [pc, #100]	; (800e984 <sys_check_timeouts+0x98>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d026      	beq.n	800e976 <sys_check_timeouts+0x8a>
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d321      	bcc.n	800e976 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800e932:	2301      	movs	r3, #1
 800e934:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	4b13      	ldr	r3, [pc, #76]	; (800e988 <sys_check_timeouts+0x9c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4413      	add	r3, r2
 800e940:	4a11      	ldr	r2, [pc, #68]	; (800e988 <sys_check_timeouts+0x9c>)
 800e942:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	697a      	ldr	r2, [r7, #20]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a0c      	ldr	r2, [pc, #48]	; (800e984 <sys_check_timeouts+0x98>)
 800e954:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e962:	68b9      	ldr	r1, [r7, #8]
 800e964:	2006      	movs	r0, #6
 800e966:	f7f9 fd2d 	bl	80083c4 <memp_free>
        if (handler != NULL) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d002      	beq.n	800e976 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6838      	ldr	r0, [r7, #0]
 800e974:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800e976:	7cfb      	ldrb	r3, [r7, #19]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1c6      	bne.n	800e90a <sys_check_timeouts+0x1e>
  }
}
 800e97c:	bf00      	nop
 800e97e:	3718      	adds	r7, #24
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	2000027c 	.word	0x2000027c
 800e988:	20000280 	.word	0x20000280
 800e98c:	20003944 	.word	0x20003944

0800e990 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e990:	b480      	push	{r7}
 800e992:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
	...

0800e9a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e9aa:	4b17      	ldr	r3, [pc, #92]	; (800ea08 <udp_new_port+0x68>)
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	1c5a      	adds	r2, r3, #1
 800e9b0:	b291      	uxth	r1, r2
 800e9b2:	4a15      	ldr	r2, [pc, #84]	; (800ea08 <udp_new_port+0x68>)
 800e9b4:	8011      	strh	r1, [r2, #0]
 800e9b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d103      	bne.n	800e9c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e9be:	4b12      	ldr	r3, [pc, #72]	; (800ea08 <udp_new_port+0x68>)
 800e9c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e9c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9c6:	4b11      	ldr	r3, [pc, #68]	; (800ea0c <udp_new_port+0x6c>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	e011      	b.n	800e9f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	8a5a      	ldrh	r2, [r3, #18]
 800e9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <udp_new_port+0x68>)
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d108      	bne.n	800e9ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e9da:	88fb      	ldrh	r3, [r7, #6]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	80fb      	strh	r3, [r7, #6]
 800e9e0:	88fb      	ldrh	r3, [r7, #6]
 800e9e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e9e6:	d3e0      	bcc.n	800e9aa <udp_new_port+0xa>
        return 0;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	e007      	b.n	800e9fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	603b      	str	r3, [r7, #0]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1ea      	bne.n	800e9ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e9f8:	4b03      	ldr	r3, [pc, #12]	; (800ea08 <udp_new_port+0x68>)
 800e9fa:	881b      	ldrh	r3, [r3, #0]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	20000120 	.word	0x20000120
 800ea0c:	20003964 	.word	0x20003964

0800ea10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ea1e:	79fb      	ldrb	r3, [r7, #7]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d018      	beq.n	800ea56 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d013      	beq.n	800ea52 <udp_input_local_match+0x42>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d00f      	beq.n	800ea52 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ea32:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <udp_input_local_match+0x74>)
 800ea34:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea3a:	d00a      	beq.n	800ea52 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	4b10      	ldr	r3, [pc, #64]	; (800ea84 <udp_input_local_match+0x74>)
 800ea42:	695b      	ldr	r3, [r3, #20]
 800ea44:	405a      	eors	r2, r3
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	3308      	adds	r3, #8
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d110      	bne.n	800ea74 <udp_input_local_match+0x64>
          return 1;
 800ea52:	2301      	movs	r3, #1
 800ea54:	e00f      	b.n	800ea76 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d009      	beq.n	800ea70 <udp_input_local_match+0x60>
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <udp_input_local_match+0x60>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <udp_input_local_match+0x74>)
 800ea6a:	695b      	ldr	r3, [r3, #20]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d101      	bne.n	800ea74 <udp_input_local_match+0x64>
      return 1;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	200003fc 	.word	0x200003fc

0800ea88 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b08d      	sub	sp, #52	; 0x34
 800ea8c:	af02      	add	r7, sp, #8
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	895b      	ldrh	r3, [r3, #10]
 800ea9a:	2b07      	cmp	r3, #7
 800ea9c:	d803      	bhi.n	800eaa6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7fa f9c2 	bl	8008e28 <pbuf_free>
    goto end;
 800eaa4:	e0c6      	b.n	800ec34 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eaac:	4b63      	ldr	r3, [pc, #396]	; (800ec3c <udp_input+0x1b4>)
 800eaae:	695a      	ldr	r2, [r3, #20]
 800eab0:	4b62      	ldr	r3, [pc, #392]	; (800ec3c <udp_input+0x1b4>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4619      	mov	r1, r3
 800eab6:	4610      	mov	r0, r2
 800eab8:	f002 fee2 	bl	8011880 <ip4_addr_isbroadcast_u32>
 800eabc:	4603      	mov	r3, r0
 800eabe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	881b      	ldrh	r3, [r3, #0]
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7f9 f882 	bl	8007bd0 <lwip_htons>
 800eacc:	4603      	mov	r3, r0
 800eace:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	885b      	ldrh	r3, [r3, #2]
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f9 f87a 	bl	8007bd0 <lwip_htons>
 800eadc:	4603      	mov	r3, r0
 800eade:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800eae4:	2300      	movs	r3, #0
 800eae6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800eae8:	2300      	movs	r3, #0
 800eaea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaec:	4b54      	ldr	r3, [pc, #336]	; (800ec40 <udp_input+0x1b8>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	627b      	str	r3, [r7, #36]	; 0x24
 800eaf2:	e03b      	b.n	800eb6c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	8a5b      	ldrh	r3, [r3, #18]
 800eaf8:	89fa      	ldrh	r2, [r7, #14]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d131      	bne.n	800eb62 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800eafe:	7cfb      	ldrb	r3, [r7, #19]
 800eb00:	461a      	mov	r2, r3
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb06:	f7ff ff83 	bl	800ea10 <udp_input_local_match>
 800eb0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d028      	beq.n	800eb62 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	7c1b      	ldrb	r3, [r3, #16]
 800eb14:	f003 0304 	and.w	r3, r3, #4
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d104      	bne.n	800eb26 <udp_input+0x9e>
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb24:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	8a9b      	ldrh	r3, [r3, #20]
 800eb2a:	8a3a      	ldrh	r2, [r7, #16]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d118      	bne.n	800eb62 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d005      	beq.n	800eb44 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3a:	685a      	ldr	r2, [r3, #4]
 800eb3c:	4b3f      	ldr	r3, [pc, #252]	; (800ec3c <udp_input+0x1b4>)
 800eb3e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d10e      	bne.n	800eb62 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eb44:	6a3b      	ldr	r3, [r7, #32]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d014      	beq.n	800eb74 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	68da      	ldr	r2, [r3, #12]
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800eb52:	4b3b      	ldr	r3, [pc, #236]	; (800ec40 <udp_input+0x1b8>)
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eb5a:	4a39      	ldr	r2, [pc, #228]	; (800ec40 <udp_input+0x1b8>)
 800eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eb60:	e008      	b.n	800eb74 <udp_input+0xec>
      }
    }

    prev = pcb;
 800eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb64:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1c0      	bne.n	800eaf4 <udp_input+0x6c>
 800eb72:	e000      	b.n	800eb76 <udp_input+0xee>
        break;
 800eb74:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d101      	bne.n	800eb80 <udp_input+0xf8>
    pcb = uncon_pcb;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d002      	beq.n	800eb8c <udp_input+0x104>
    for_us = 1;
 800eb86:	2301      	movs	r3, #1
 800eb88:	76fb      	strb	r3, [r7, #27]
 800eb8a:	e00a      	b.n	800eba2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	3304      	adds	r3, #4
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	4b2a      	ldr	r3, [pc, #168]	; (800ec3c <udp_input+0x1b4>)
 800eb94:	695b      	ldr	r3, [r3, #20]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	bf0c      	ite	eq
 800eb9a:	2301      	moveq	r3, #1
 800eb9c:	2300      	movne	r3, #0
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800eba2:	7efb      	ldrb	r3, [r7, #27]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d042      	beq.n	800ec2e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800eba8:	f06f 0107 	mvn.w	r1, #7
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7fa f917 	bl	8008de0 <pbuf_header>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00a      	beq.n	800ebce <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800ebb8:	4b22      	ldr	r3, [pc, #136]	; (800ec44 <udp_input+0x1bc>)
 800ebba:	f240 1255 	movw	r2, #341	; 0x155
 800ebbe:	4922      	ldr	r1, [pc, #136]	; (800ec48 <udp_input+0x1c0>)
 800ebc0:	4822      	ldr	r0, [pc, #136]	; (800ec4c <udp_input+0x1c4>)
 800ebc2:	f008 fa23 	bl	801700c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f7fa f92e 	bl	8008e28 <pbuf_free>
      goto end;
 800ebcc:	e032      	b.n	800ec34 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800ebce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d012      	beq.n	800ebfa <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	699b      	ldr	r3, [r3, #24]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00a      	beq.n	800ebf2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	699c      	ldr	r4, [r3, #24]
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	69d8      	ldr	r0, [r3, #28]
 800ebe4:	8a3b      	ldrh	r3, [r7, #16]
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <udp_input+0x1c8>)
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ebf0:	e021      	b.n	800ec36 <udp_input+0x1ae>
        pbuf_free(p);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7fa f918 	bl	8008e28 <pbuf_free>
        goto end;
 800ebf8:	e01c      	b.n	800ec34 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ebfa:	7cfb      	ldrb	r3, [r7, #19]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d112      	bne.n	800ec26 <udp_input+0x19e>
 800ec00:	4b0e      	ldr	r3, [pc, #56]	; (800ec3c <udp_input+0x1b4>)
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec08:	2be0      	cmp	r3, #224	; 0xe0
 800ec0a:	d00c      	beq.n	800ec26 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ec0c:	4b0b      	ldr	r3, [pc, #44]	; (800ec3c <udp_input+0x1b4>)
 800ec0e:	899b      	ldrh	r3, [r3, #12]
 800ec10:	3308      	adds	r3, #8
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	b21b      	sxth	r3, r3
 800ec16:	4619      	mov	r1, r3
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7fa f8f3 	bl	8008e04 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ec1e:	2103      	movs	r1, #3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f002 fb0d 	bl	8011240 <icmp_dest_unreach>
      pbuf_free(p);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7fa f8fe 	bl	8008e28 <pbuf_free>
  return;
 800ec2c:	e003      	b.n	800ec36 <udp_input+0x1ae>
    pbuf_free(p);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7fa f8fa 	bl	8008e28 <pbuf_free>
  return;
 800ec34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ec36:	372c      	adds	r7, #44	; 0x2c
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd90      	pop	{r4, r7, pc}
 800ec3c:	200003fc 	.word	0x200003fc
 800ec40:	20003964 	.word	0x20003964
 800ec44:	0801a408 	.word	0x0801a408
 800ec48:	0801a438 	.word	0x0801a438
 800ec4c:	0801a44c 	.word	0x0801a44c
 800ec50:	2000040c 	.word	0x2000040c

0800ec54 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af02      	add	r7, sp, #8
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <udp_sendto_if+0x1a>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d102      	bne.n	800ec74 <udp_sendto_if+0x20>
    return ERR_VAL;
 800ec6e:	f06f 0305 	mvn.w	r3, #5
 800ec72:	e028      	b.n	800ecc6 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d009      	beq.n	800ec8e <udp_sendto_if+0x3a>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d005      	beq.n	800ec8e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec8a:	2be0      	cmp	r3, #224	; 0xe0
 800ec8c:	d103      	bne.n	800ec96 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	3304      	adds	r3, #4
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	e00b      	b.n	800ecae <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d002      	beq.n	800ecaa <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800eca4:	f06f 0303 	mvn.w	r3, #3
 800eca8:	e00d      	b.n	800ecc6 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ecae:	887a      	ldrh	r2, [r7, #2]
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	4613      	mov	r3, r2
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 f806 	bl	800ecd0 <udp_sendto_if_src>
 800ecc4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3718      	adds	r7, #24
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b08c      	sub	sp, #48	; 0x30
 800ecd4:	af04      	add	r7, sp, #16
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <udp_sendto_if_src+0x1a>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d102      	bne.n	800ecf0 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800ecea:	f06f 0305 	mvn.w	r3, #5
 800ecee:	e07e      	b.n	800edee <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	8a5b      	ldrh	r3, [r3, #18]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10f      	bne.n	800ed18 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ecf8:	68f9      	ldr	r1, [r7, #12]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	8a5b      	ldrh	r3, [r3, #18]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 f87f 	bl	800ee04 <udp_bind>
 800ed06:	4603      	mov	r3, r0
 800ed08:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ed0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d002      	beq.n	800ed18 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ed12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed16:	e06a      	b.n	800edee <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ed18:	2108      	movs	r1, #8
 800ed1a:	68b8      	ldr	r0, [r7, #8]
 800ed1c:	f7fa f860 	bl	8008de0 <pbuf_header>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d014      	beq.n	800ed50 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ed26:	2200      	movs	r2, #0
 800ed28:	2108      	movs	r1, #8
 800ed2a:	2001      	movs	r0, #1
 800ed2c:	f7f9 fd0a 	bl	8008744 <pbuf_alloc>
 800ed30:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d102      	bne.n	800ed3e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ed38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed3c:	e057      	b.n	800edee <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	891b      	ldrh	r3, [r3, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d006      	beq.n	800ed54 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ed46:	68b9      	ldr	r1, [r7, #8]
 800ed48:	69f8      	ldr	r0, [r7, #28]
 800ed4a:	f7fa f991 	bl	8009070 <pbuf_chain>
 800ed4e:	e001      	b.n	800ed54 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	895b      	ldrh	r3, [r3, #10]
 800ed58:	2b07      	cmp	r3, #7
 800ed5a:	d806      	bhi.n	800ed6a <udp_sendto_if_src+0x9a>
 800ed5c:	4b26      	ldr	r3, [pc, #152]	; (800edf8 <udp_sendto_if_src+0x128>)
 800ed5e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ed62:	4926      	ldr	r1, [pc, #152]	; (800edfc <udp_sendto_if_src+0x12c>)
 800ed64:	4826      	ldr	r0, [pc, #152]	; (800ee00 <udp_sendto_if_src+0x130>)
 800ed66:	f008 f951 	bl	801700c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	8a5b      	ldrh	r3, [r3, #18]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7f8 ff2b 	bl	8007bd0 <lwip_htons>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ed82:	887b      	ldrh	r3, [r7, #2]
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7f8 ff23 	bl	8007bd0 <lwip_htons>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2200      	movs	r2, #0
 800ed96:	719a      	strb	r2, [r3, #6]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	891b      	ldrh	r3, [r3, #8]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7f8 ff15 	bl	8007bd0 <lwip_htons>
 800eda6:	4603      	mov	r3, r0
 800eda8:	461a      	mov	r2, r3
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800edae:	2311      	movs	r3, #17
 800edb0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	7a9b      	ldrb	r3, [r3, #10]
 800edb6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	7a5b      	ldrb	r3, [r3, #9]
 800edbc:	7cb9      	ldrb	r1, [r7, #18]
 800edbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc0:	9202      	str	r2, [sp, #8]
 800edc2:	7cfa      	ldrb	r2, [r7, #19]
 800edc4:	9201      	str	r2, [sp, #4]
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	460b      	mov	r3, r1
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edce:	69f8      	ldr	r0, [r7, #28]
 800edd0:	f002 fcae 	bl	8011730 <ip4_output_if_src>
 800edd4:	4603      	mov	r3, r0
 800edd6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800edd8:	69fa      	ldr	r2, [r7, #28]
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d004      	beq.n	800edea <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800ede0:	69f8      	ldr	r0, [r7, #28]
 800ede2:	f7fa f821 	bl	8008e28 <pbuf_free>
    q = NULL;
 800ede6:	2300      	movs	r3, #0
 800ede8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800edea:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	0801a408 	.word	0x0801a408
 800edfc:	0801a474 	.word	0x0801a474
 800ee00:	0801a44c 	.word	0x0801a44c

0800ee04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d101      	bne.n	800ee1c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ee18:	4b30      	ldr	r3, [pc, #192]	; (800eedc <udp_bind+0xd8>)
 800ee1a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d002      	beq.n	800ee28 <udp_bind+0x24>
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d102      	bne.n	800ee2e <udp_bind+0x2a>
    return ERR_VAL;
 800ee28:	f06f 0305 	mvn.w	r3, #5
 800ee2c:	e052      	b.n	800eed4 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee32:	4b2b      	ldr	r3, [pc, #172]	; (800eee0 <udp_bind+0xdc>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	617b      	str	r3, [r7, #20]
 800ee38:	e009      	b.n	800ee4e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d102      	bne.n	800ee48 <udp_bind+0x44>
      rebind = 1;
 800ee42:	2301      	movs	r3, #1
 800ee44:	74fb      	strb	r3, [r7, #19]
      break;
 800ee46:	e005      	b.n	800ee54 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	617b      	str	r3, [r7, #20]
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1f2      	bne.n	800ee3a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800ee54:	88fb      	ldrh	r3, [r7, #6]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d109      	bne.n	800ee6e <udp_bind+0x6a>
    port = udp_new_port();
 800ee5a:	f7ff fda1 	bl	800e9a0 <udp_new_port>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ee62:	88fb      	ldrh	r3, [r7, #6]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d11e      	bne.n	800eea6 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ee68:	f06f 0307 	mvn.w	r3, #7
 800ee6c:	e032      	b.n	800eed4 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee6e:	4b1c      	ldr	r3, [pc, #112]	; (800eee0 <udp_bind+0xdc>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	e014      	b.n	800eea0 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d00d      	beq.n	800ee9a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	8a5b      	ldrh	r3, [r3, #18]
 800ee82:	88fa      	ldrh	r2, [r7, #6]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d108      	bne.n	800ee9a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	681a      	ldr	r2, [r3, #0]
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d102      	bne.n	800ee9a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ee94:	f06f 0307 	mvn.w	r3, #7
 800ee98:	e01c      	b.n	800eed4 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	617b      	str	r3, [r7, #20]
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1e7      	bne.n	800ee76 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <udp_bind+0xae>
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	e000      	b.n	800eeb4 <udp_bind+0xb0>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	88fa      	ldrh	r2, [r7, #6]
 800eebc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800eebe:	7cfb      	ldrb	r3, [r7, #19]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d106      	bne.n	800eed2 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800eec4:	4b06      	ldr	r3, [pc, #24]	; (800eee0 <udp_bind+0xdc>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800eecc:	4a04      	ldr	r2, [pc, #16]	; (800eee0 <udp_bind+0xdc>)
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800eed2:	2300      	movs	r3, #0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3718      	adds	r7, #24
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}
 800eedc:	0801b340 	.word	0x0801b340
 800eee0:	20003964 	.word	0x20003964

0800eee4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d01e      	beq.n	800ef32 <udp_netif_ip_addr_changed+0x4e>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d01a      	beq.n	800ef32 <udp_netif_ip_addr_changed+0x4e>
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d017      	beq.n	800ef32 <udp_netif_ip_addr_changed+0x4e>
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d013      	beq.n	800ef32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef0a:	4b0d      	ldr	r3, [pc, #52]	; (800ef40 <udp_netif_ip_addr_changed+0x5c>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	60fb      	str	r3, [r7, #12]
 800ef10:	e00c      	b.n	800ef2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d103      	bne.n	800ef26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	60fb      	str	r3, [r7, #12]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1ef      	bne.n	800ef12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ef32:	bf00      	nop
 800ef34:	3714      	adds	r7, #20
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	20003964 	.word	0x20003964

0800ef44 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ef52:	2108      	movs	r1, #8
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f000 fe23 	bl	800fba0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3328      	adds	r3, #40	; 0x28
 800ef5e:	2200      	movs	r2, #0
 800ef60:	4619      	mov	r1, r3
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f001 fe5c 	bl	8010c20 <etharp_query>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	7a9b      	ldrb	r3, [r3, #10]
 800ef70:	2bff      	cmp	r3, #255	; 0xff
 800ef72:	d005      	beq.n	800ef80 <dhcp_check+0x3c>
    dhcp->tries++;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	7a9b      	ldrb	r3, [r3, #10]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	b2da      	uxtb	r2, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800ef80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ef84:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ef86:	893b      	ldrh	r3, [r7, #8]
 800ef88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ef8c:	4a06      	ldr	r2, [pc, #24]	; (800efa8 <dhcp_check+0x64>)
 800ef8e:	fb82 1203 	smull	r1, r2, r2, r3
 800ef92:	1152      	asrs	r2, r2, #5
 800ef94:	17db      	asrs	r3, r3, #31
 800ef96:	1ad3      	subs	r3, r2, r3
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800ef9e:	bf00      	nop
 800efa0:	3710      	adds	r7, #16
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	10624dd3 	.word	0x10624dd3

0800efac <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b088      	sub	sp, #32
 800efb0:	af02      	add	r7, sp, #8
 800efb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a1b      	ldr	r3, [r3, #32]
 800efb8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800efba:	2101      	movs	r1, #1
 800efbc:	6938      	ldr	r0, [r7, #16]
 800efbe:	f000 fdef 	bl	800fba0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800efc2:	2203      	movs	r2, #3
 800efc4:	6939      	ldr	r1, [r7, #16]
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fef6 	bl	800fdb8 <dhcp_create_msg>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800efd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d159      	bne.n	800f08c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800efd8:	2202      	movs	r2, #2
 800efda:	2139      	movs	r1, #57	; 0x39
 800efdc:	6938      	ldr	r0, [r7, #16]
 800efde:	f000 fdf9 	bl	800fbd4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800efe6:	4619      	mov	r1, r3
 800efe8:	6938      	ldr	r0, [r7, #16]
 800efea:	f000 fe55 	bl	800fc98 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800efee:	2204      	movs	r2, #4
 800eff0:	2132      	movs	r1, #50	; 0x32
 800eff2:	6938      	ldr	r0, [r7, #16]
 800eff4:	f000 fdee 	bl	800fbd4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effc:	4618      	mov	r0, r3
 800effe:	f7f8 fdf5 	bl	8007bec <lwip_htonl>
 800f002:	4603      	mov	r3, r0
 800f004:	4619      	mov	r1, r3
 800f006:	6938      	ldr	r0, [r7, #16]
 800f008:	f000 fe80 	bl	800fd0c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800f00c:	2204      	movs	r2, #4
 800f00e:	2136      	movs	r1, #54	; 0x36
 800f010:	6938      	ldr	r0, [r7, #16]
 800f012:	f000 fddf 	bl	800fbd4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7f8 fde6 	bl	8007bec <lwip_htonl>
 800f020:	4603      	mov	r3, r0
 800f022:	4619      	mov	r1, r3
 800f024:	6938      	ldr	r0, [r7, #16]
 800f026:	f000 fe71 	bl	800fd0c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f02a:	2203      	movs	r2, #3
 800f02c:	2137      	movs	r1, #55	; 0x37
 800f02e:	6938      	ldr	r0, [r7, #16]
 800f030:	f000 fdd0 	bl	800fbd4 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f034:	2300      	movs	r3, #0
 800f036:	75fb      	strb	r3, [r7, #23]
 800f038:	e009      	b.n	800f04e <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f03a:	7dfb      	ldrb	r3, [r7, #23]
 800f03c:	4a29      	ldr	r2, [pc, #164]	; (800f0e4 <dhcp_select+0x138>)
 800f03e:	5cd3      	ldrb	r3, [r2, r3]
 800f040:	4619      	mov	r1, r3
 800f042:	6938      	ldr	r0, [r7, #16]
 800f044:	f000 fe00 	bl	800fc48 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f048:	7dfb      	ldrb	r3, [r7, #23]
 800f04a:	3301      	adds	r3, #1
 800f04c:	75fb      	strb	r3, [r7, #23]
 800f04e:	7dfb      	ldrb	r3, [r7, #23]
 800f050:	2b02      	cmp	r3, #2
 800f052:	d9f2      	bls.n	800f03a <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f054:	6938      	ldr	r0, [r7, #16]
 800f056:	f001 f853 	bl	8010100 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	68da      	ldr	r2, [r3, #12]
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	8a9b      	ldrh	r3, [r3, #20]
 800f062:	33f0      	adds	r3, #240	; 0xf0
 800f064:	b29b      	uxth	r3, r3
 800f066:	4619      	mov	r1, r3
 800f068:	4610      	mov	r0, r2
 800f06a:	f7f9 fd69 	bl	8008b40 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f06e:	4b1e      	ldr	r3, [pc, #120]	; (800f0e8 <dhcp_select+0x13c>)
 800f070:	6818      	ldr	r0, [r3, #0]
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	68d9      	ldr	r1, [r3, #12]
 800f076:	4b1d      	ldr	r3, [pc, #116]	; (800f0ec <dhcp_select+0x140>)
 800f078:	9301      	str	r3, [sp, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	2343      	movs	r3, #67	; 0x43
 800f080:	4a1b      	ldr	r2, [pc, #108]	; (800f0f0 <dhcp_select+0x144>)
 800f082:	f7ff fe25 	bl	800ecd0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f086:	6938      	ldr	r0, [r7, #16]
 800f088:	f000 fff8 	bl	801007c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	7a9b      	ldrb	r3, [r3, #10]
 800f090:	2bff      	cmp	r3, #255	; 0xff
 800f092:	d005      	beq.n	800f0a0 <dhcp_select+0xf4>
    dhcp->tries++;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	7a9b      	ldrb	r3, [r3, #10]
 800f098:	3301      	adds	r3, #1
 800f09a:	b2da      	uxtb	r2, r3
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	7a9b      	ldrb	r3, [r3, #10]
 800f0a4:	2b05      	cmp	r3, #5
 800f0a6:	d807      	bhi.n	800f0b8 <dhcp_select+0x10c>
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	7a9b      	ldrb	r3, [r3, #10]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0b2:	4093      	lsls	r3, r2
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	e001      	b.n	800f0bc <dhcp_select+0x110>
 800f0b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f0bc:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f0be:	89bb      	ldrh	r3, [r7, #12]
 800f0c0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0c4:	4a0b      	ldr	r2, [pc, #44]	; (800f0f4 <dhcp_select+0x148>)
 800f0c6:	fb82 1203 	smull	r1, r2, r2, r3
 800f0ca:	1152      	asrs	r2, r2, #5
 800f0cc:	17db      	asrs	r3, r3, #31
 800f0ce:	1ad3      	subs	r3, r2, r3
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	20000124 	.word	0x20000124
 800f0e8:	20000288 	.word	0x20000288
 800f0ec:	0801b340 	.word	0x0801b340
 800f0f0:	0801b344 	.word	0x0801b344
 800f0f4:	10624dd3 	.word	0x10624dd3

0800f0f8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f0fe:	4b27      	ldr	r3, [pc, #156]	; (800f19c <dhcp_coarse_tmr+0xa4>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800f104:	e042      	b.n	800f18c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a1b      	ldr	r3, [r3, #32]
 800f10a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d039      	beq.n	800f186 <dhcp_coarse_tmr+0x8e>
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	7a5b      	ldrb	r3, [r3, #9]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d035      	beq.n	800f186 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d012      	beq.n	800f148 <dhcp_coarse_tmr+0x50>
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	8c1b      	ldrh	r3, [r3, #32]
 800f126:	3301      	adds	r3, #1
 800f128:	b29a      	uxth	r2, r3
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	841a      	strh	r2, [r3, #32]
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	8c1a      	ldrh	r2, [r3, #32]
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f136:	429a      	cmp	r2, r3
 800f138:	d106      	bne.n	800f148 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fca8 	bl	800fa90 <dhcp_release>
        dhcp_discover(netif);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f99f 	bl	800f484 <dhcp_discover>
 800f146:	e01e      	b.n	800f186 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	8bdb      	ldrh	r3, [r3, #30]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d00b      	beq.n	800f168 <dhcp_coarse_tmr+0x70>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	8bdb      	ldrh	r3, [r3, #30]
 800f154:	1e5a      	subs	r2, r3, #1
 800f156:	b291      	uxth	r1, r2
 800f158:	683a      	ldr	r2, [r7, #0]
 800f15a:	83d1      	strh	r1, [r2, #30]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d103      	bne.n	800f168 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f8c6 	bl	800f2f2 <dhcp_t2_timeout>
 800f166:	e00e      	b.n	800f186 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	8b9b      	ldrh	r3, [r3, #28]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00a      	beq.n	800f186 <dhcp_coarse_tmr+0x8e>
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	8b9b      	ldrh	r3, [r3, #28]
 800f174:	1e5a      	subs	r2, r3, #1
 800f176:	b291      	uxth	r1, r2
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	8391      	strh	r1, [r2, #28]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d102      	bne.n	800f186 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f888 	bl	800f296 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1b9      	bne.n	800f106 <dhcp_coarse_tmr+0xe>
  }
}
 800f192:	bf00      	nop
 800f194:	3708      	adds	r7, #8
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	2000393c 	.word	0x2000393c

0800f1a0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f1a6:	4b16      	ldr	r3, [pc, #88]	; (800f200 <dhcp_fine_tmr+0x60>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800f1ac:	e020      	b.n	800f1f0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d017      	beq.n	800f1ea <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	8adb      	ldrh	r3, [r3, #22]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d906      	bls.n	800f1d0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	8adb      	ldrh	r3, [r3, #22]
 800f1c6:	3b01      	subs	r3, #1
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	82da      	strh	r2, [r3, #22]
 800f1ce:	e00c      	b.n	800f1ea <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	8adb      	ldrh	r3, [r3, #22]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d108      	bne.n	800f1ea <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	8adb      	ldrh	r3, [r3, #22]
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 f80d 	bl	800f204 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1db      	bne.n	800f1ae <dhcp_fine_tmr+0xe>
  }
}
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	2000393c 	.word	0x2000393c

0800f204 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	7a5b      	ldrb	r3, [r3, #9]
 800f216:	2b0c      	cmp	r3, #12
 800f218:	d003      	beq.n	800f222 <dhcp_timeout+0x1e>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	7a5b      	ldrb	r3, [r3, #9]
 800f21e:	2b06      	cmp	r3, #6
 800f220:	d103      	bne.n	800f22a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f92e 	bl	800f484 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f228:	e031      	b.n	800f28e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	7a5b      	ldrb	r3, [r3, #9]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d10e      	bne.n	800f250 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	7a9b      	ldrb	r3, [r3, #10]
 800f236:	2b05      	cmp	r3, #5
 800f238:	d803      	bhi.n	800f242 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff feb6 	bl	800efac <dhcp_select>
}
 800f240:	e025      	b.n	800f28e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fc24 	bl	800fa90 <dhcp_release>
      dhcp_discover(netif);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f91b 	bl	800f484 <dhcp_discover>
}
 800f24e:	e01e      	b.n	800f28e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	7a5b      	ldrb	r3, [r3, #9]
 800f254:	2b08      	cmp	r3, #8
 800f256:	d10b      	bne.n	800f270 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	7a9b      	ldrb	r3, [r3, #10]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d803      	bhi.n	800f268 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff fe6f 	bl	800ef44 <dhcp_check>
}
 800f266:	e012      	b.n	800f28e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f997 	bl	800f59c <dhcp_bind>
}
 800f26e:	e00e      	b.n	800f28e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	7a5b      	ldrb	r3, [r3, #9]
 800f274:	2b03      	cmp	r3, #3
 800f276:	d10a      	bne.n	800f28e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	7a9b      	ldrb	r3, [r3, #10]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d803      	bhi.n	800f288 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 fb71 	bl	800f968 <dhcp_reboot>
}
 800f286:	e002      	b.n	800f28e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f8fb 	bl	800f484 <dhcp_discover>
}
 800f28e:	bf00      	nop
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6a1b      	ldr	r3, [r3, #32]
 800f2a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	7a5b      	ldrb	r3, [r3, #9]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d007      	beq.n	800f2bc <dhcp_t1_timeout+0x26>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	7a5b      	ldrb	r3, [r3, #9]
 800f2b0:	2b0a      	cmp	r3, #10
 800f2b2:	d003      	beq.n	800f2bc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f2b8:	2b05      	cmp	r3, #5
 800f2ba:	d116      	bne.n	800f2ea <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fa47 	bl	800f750 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	8b5b      	ldrh	r3, [r3, #26]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	8c1b      	ldrh	r3, [r3, #32]
 800f2cc:	1ad3      	subs	r3, r2, r3
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	dd0b      	ble.n	800f2ea <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	8b5b      	ldrh	r3, [r3, #26]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	8c1b      	ldrh	r3, [r3, #32]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	0fda      	lsrs	r2, r3, #31
 800f2e0:	4413      	add	r3, r2
 800f2e2:	105b      	asrs	r3, r3, #1
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800f2ea:	bf00      	nop
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	7a5b      	ldrb	r3, [r3, #9]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d00b      	beq.n	800f320 <dhcp_t2_timeout+0x2e>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	7a5b      	ldrb	r3, [r3, #9]
 800f30c:	2b0a      	cmp	r3, #10
 800f30e:	d007      	beq.n	800f320 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f314:	2b05      	cmp	r3, #5
 800f316:	d003      	beq.n	800f320 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	7a5b      	ldrb	r3, [r3, #9]
 800f31c:	2b04      	cmp	r3, #4
 800f31e:	d116      	bne.n	800f34e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fa9b 	bl	800f85c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f32a:	461a      	mov	r2, r3
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	8c1b      	ldrh	r3, [r3, #32]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	2b01      	cmp	r3, #1
 800f334:	dd0b      	ble.n	800f34e <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f33a:	461a      	mov	r2, r3
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	8c1b      	ldrh	r3, [r3, #32]
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	0fda      	lsrs	r2, r3, #31
 800f344:	4413      	add	r3, r2
 800f346:	105b      	asrs	r3, r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800f34e:	bf00      	nop
 800f350:	3710      	adds	r7, #16
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b084      	sub	sp, #16
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d107      	bne.n	800f378 <dhcp_arp_reply+0x20>
 800f368:	4b0e      	ldr	r3, [pc, #56]	; (800f3a4 <dhcp_arp_reply+0x4c>)
 800f36a:	f240 327b 	movw	r2, #891	; 0x37b
 800f36e:	490e      	ldr	r1, [pc, #56]	; (800f3a8 <dhcp_arp_reply+0x50>)
 800f370:	480e      	ldr	r0, [pc, #56]	; (800f3ac <dhcp_arp_reply+0x54>)
 800f372:	f007 fe4b 	bl	801700c <iprintf>
 800f376:	e012      	b.n	800f39e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a1b      	ldr	r3, [r3, #32]
 800f37c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00c      	beq.n	800f39e <dhcp_arp_reply+0x46>
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	7a5b      	ldrb	r3, [r3, #9]
 800f388:	2b08      	cmp	r3, #8
 800f38a:	d108      	bne.n	800f39e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f394:	429a      	cmp	r2, r3
 800f396:	d102      	bne.n	800f39e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f809 	bl	800f3b0 <dhcp_decline>
    }
  }
}
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	0801a4a4 	.word	0x0801a4a4
 800f3a8:	0801a550 	.word	0x0801a550
 800f3ac:	0801a504 	.word	0x0801a504

0800f3b0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af02      	add	r7, sp, #8
 800f3b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a1b      	ldr	r3, [r3, #32]
 800f3bc:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f3c2:	210c      	movs	r1, #12
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f000 fbeb 	bl	800fba0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800f3ca:	2204      	movs	r2, #4
 800f3cc:	68f9      	ldr	r1, [r7, #12]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 fcf2 	bl	800fdb8 <dhcp_create_msg>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800f3d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d12a      	bne.n	800f436 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f3e0:	2204      	movs	r2, #4
 800f3e2:	2132      	movs	r1, #50	; 0x32
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 fbf5 	bl	800fbd4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7f8 fbfc 	bl	8007bec <lwip_htonl>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	68f8      	ldr	r0, [r7, #12]
 800f3fa:	f000 fc87 	bl	800fd0c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f000 fe7e 	bl	8010100 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	68da      	ldr	r2, [r3, #12]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	8a9b      	ldrh	r3, [r3, #20]
 800f40c:	33f0      	adds	r3, #240	; 0xf0
 800f40e:	b29b      	uxth	r3, r3
 800f410:	4619      	mov	r1, r3
 800f412:	4610      	mov	r0, r2
 800f414:	f7f9 fb94 	bl	8008b40 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f418:	4b16      	ldr	r3, [pc, #88]	; (800f474 <dhcp_decline+0xc4>)
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	68d9      	ldr	r1, [r3, #12]
 800f420:	4b15      	ldr	r3, [pc, #84]	; (800f478 <dhcp_decline+0xc8>)
 800f422:	9301      	str	r3, [sp, #4]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	9300      	str	r3, [sp, #0]
 800f428:	2343      	movs	r3, #67	; 0x43
 800f42a:	4a14      	ldr	r2, [pc, #80]	; (800f47c <dhcp_decline+0xcc>)
 800f42c:	f7ff fc50 	bl	800ecd0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f000 fe23 	bl	801007c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	7a9b      	ldrb	r3, [r3, #10]
 800f43a:	2bff      	cmp	r3, #255	; 0xff
 800f43c:	d005      	beq.n	800f44a <dhcp_decline+0x9a>
    dhcp->tries++;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	7a9b      	ldrb	r3, [r3, #10]
 800f442:	3301      	adds	r3, #1
 800f444:	b2da      	uxtb	r2, r3
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800f44a:	f242 7310 	movw	r3, #10000	; 0x2710
 800f44e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f450:	893b      	ldrh	r3, [r7, #8]
 800f452:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f456:	4a0a      	ldr	r2, [pc, #40]	; (800f480 <dhcp_decline+0xd0>)
 800f458:	fb82 1203 	smull	r1, r2, r2, r3
 800f45c:	1152      	asrs	r2, r2, #5
 800f45e:	17db      	asrs	r3, r3, #31
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	b29a      	uxth	r2, r3
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f468:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	20000288 	.word	0x20000288
 800f478:	0801b340 	.word	0x0801b340
 800f47c:	0801b344 	.word	0x0801b344
 800f480:	10624dd3 	.word	0x10624dd3

0800f484 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b088      	sub	sp, #32
 800f488:	af02      	add	r7, sp, #8
 800f48a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	6a1b      	ldr	r3, [r3, #32]
 800f490:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	2200      	movs	r2, #0
 800f49a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f49c:	2106      	movs	r1, #6
 800f49e:	6938      	ldr	r0, [r7, #16]
 800f4a0:	f000 fb7e 	bl	800fba0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	6939      	ldr	r1, [r7, #16]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 fc85 	bl	800fdb8 <dhcp_create_msg>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d13b      	bne.n	800f532 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f4ba:	2202      	movs	r2, #2
 800f4bc:	2139      	movs	r1, #57	; 0x39
 800f4be:	6938      	ldr	r0, [r7, #16]
 800f4c0:	f000 fb88 	bl	800fbd4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6938      	ldr	r0, [r7, #16]
 800f4cc:	f000 fbe4 	bl	800fc98 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f4d0:	2203      	movs	r2, #3
 800f4d2:	2137      	movs	r1, #55	; 0x37
 800f4d4:	6938      	ldr	r0, [r7, #16]
 800f4d6:	f000 fb7d 	bl	800fbd4 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4da:	2300      	movs	r3, #0
 800f4dc:	75fb      	strb	r3, [r7, #23]
 800f4de:	e009      	b.n	800f4f4 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	4a29      	ldr	r2, [pc, #164]	; (800f588 <dhcp_discover+0x104>)
 800f4e4:	5cd3      	ldrb	r3, [r2, r3]
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	6938      	ldr	r0, [r7, #16]
 800f4ea:	f000 fbad 	bl	800fc48 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f4ee:	7dfb      	ldrb	r3, [r7, #23]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	75fb      	strb	r3, [r7, #23]
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	2b02      	cmp	r3, #2
 800f4f8:	d9f2      	bls.n	800f4e0 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800f4fa:	6938      	ldr	r0, [r7, #16]
 800f4fc:	f000 fe00 	bl	8010100 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	68da      	ldr	r2, [r3, #12]
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	8a9b      	ldrh	r3, [r3, #20]
 800f508:	33f0      	adds	r3, #240	; 0xf0
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f7f9 fb16 	bl	8008b40 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f514:	4b1d      	ldr	r3, [pc, #116]	; (800f58c <dhcp_discover+0x108>)
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	68d9      	ldr	r1, [r3, #12]
 800f51c:	4b1c      	ldr	r3, [pc, #112]	; (800f590 <dhcp_discover+0x10c>)
 800f51e:	9301      	str	r3, [sp, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	2343      	movs	r3, #67	; 0x43
 800f526:	4a1b      	ldr	r2, [pc, #108]	; (800f594 <dhcp_discover+0x110>)
 800f528:	f7ff fbd2 	bl	800ecd0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800f52c:	6938      	ldr	r0, [r7, #16]
 800f52e:	f000 fda5 	bl	801007c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	7a9b      	ldrb	r3, [r3, #10]
 800f536:	2bff      	cmp	r3, #255	; 0xff
 800f538:	d005      	beq.n	800f546 <dhcp_discover+0xc2>
    dhcp->tries++;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	7a9b      	ldrb	r3, [r3, #10]
 800f53e:	3301      	adds	r3, #1
 800f540:	b2da      	uxtb	r2, r3
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	7a9b      	ldrb	r3, [r3, #10]
 800f54a:	2b05      	cmp	r3, #5
 800f54c:	d807      	bhi.n	800f55e <dhcp_discover+0xda>
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	7a9b      	ldrb	r3, [r3, #10]
 800f552:	461a      	mov	r2, r3
 800f554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f558:	4093      	lsls	r3, r2
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	e001      	b.n	800f562 <dhcp_discover+0xde>
 800f55e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f562:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f564:	89bb      	ldrh	r3, [r7, #12]
 800f566:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f56a:	4a0b      	ldr	r2, [pc, #44]	; (800f598 <dhcp_discover+0x114>)
 800f56c:	fb82 1203 	smull	r1, r2, r2, r3
 800f570:	1152      	asrs	r2, r2, #5
 800f572:	17db      	asrs	r3, r3, #31
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	b29a      	uxth	r2, r3
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f580:	4618      	mov	r0, r3
 800f582:	3718      	adds	r7, #24
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	20000124 	.word	0x20000124
 800f58c:	20000288 	.word	0x20000288
 800f590:	0801b340 	.word	0x0801b340
 800f594:	0801b344 	.word	0x0801b344
 800f598:	10624dd3 	.word	0x10624dd3

0800f59c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b088      	sub	sp, #32
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d107      	bne.n	800f5ba <dhcp_bind+0x1e>
 800f5aa:	4b64      	ldr	r3, [pc, #400]	; (800f73c <dhcp_bind+0x1a0>)
 800f5ac:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f5b0:	4963      	ldr	r1, [pc, #396]	; (800f740 <dhcp_bind+0x1a4>)
 800f5b2:	4864      	ldr	r0, [pc, #400]	; (800f744 <dhcp_bind+0x1a8>)
 800f5b4:	f007 fd2a 	bl	801700c <iprintf>
 800f5b8:	e0bc      	b.n	800f734 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a1b      	ldr	r3, [r3, #32]
 800f5be:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d107      	bne.n	800f5d6 <dhcp_bind+0x3a>
 800f5c6:	4b5d      	ldr	r3, [pc, #372]	; (800f73c <dhcp_bind+0x1a0>)
 800f5c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5cc:	495e      	ldr	r1, [pc, #376]	; (800f748 <dhcp_bind+0x1ac>)
 800f5ce:	485d      	ldr	r0, [pc, #372]	; (800f744 <dhcp_bind+0x1a8>)
 800f5d0:	f007 fd1c 	bl	801700c <iprintf>
 800f5d4:	e0ae      	b.n	800f734 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5e4:	d019      	beq.n	800f61a <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ea:	331e      	adds	r3, #30
 800f5ec:	4a57      	ldr	r2, [pc, #348]	; (800f74c <dhcp_bind+0x1b0>)
 800f5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f2:	095b      	lsrs	r3, r3, #5
 800f5f4:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5fc:	d302      	bcc.n	800f604 <dhcp_bind+0x68>
       timeout = 0xffff;
 800f5fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f602:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	b29a      	uxth	r2, r3
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800f60c:	69bb      	ldr	r3, [r7, #24]
 800f60e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f610:	2b00      	cmp	r3, #0
 800f612:	d102      	bne.n	800f61a <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	2201      	movs	r2, #1
 800f618:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f61a:	69bb      	ldr	r3, [r7, #24]
 800f61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f61e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f622:	d01d      	beq.n	800f660 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f624:	69bb      	ldr	r3, [r7, #24]
 800f626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f628:	331e      	adds	r3, #30
 800f62a:	4a48      	ldr	r2, [pc, #288]	; (800f74c <dhcp_bind+0x1b0>)
 800f62c:	fba2 2303 	umull	r2, r3, r2, r3
 800f630:	095b      	lsrs	r3, r3, #5
 800f632:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f63a:	d302      	bcc.n	800f642 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f63c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f640:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f642:	69fb      	ldr	r3, [r7, #28]
 800f644:	b29a      	uxth	r2, r3
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	8b1b      	ldrh	r3, [r3, #24]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d102      	bne.n	800f658 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	2201      	movs	r2, #1
 800f656:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	8b1a      	ldrh	r2, [r3, #24]
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f668:	d01d      	beq.n	800f6a6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f66e:	331e      	adds	r3, #30
 800f670:	4a36      	ldr	r2, [pc, #216]	; (800f74c <dhcp_bind+0x1b0>)
 800f672:	fba2 2303 	umull	r2, r3, r2, r3
 800f676:	095b      	lsrs	r3, r3, #5
 800f678:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f680:	d302      	bcc.n	800f688 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f686:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800f690:	69bb      	ldr	r3, [r7, #24]
 800f692:	8b5b      	ldrh	r3, [r3, #26]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d102      	bne.n	800f69e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	2201      	movs	r2, #1
 800f69c:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	8b5a      	ldrh	r2, [r3, #26]
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	8b1a      	ldrh	r2, [r3, #24]
 800f6aa:	69bb      	ldr	r3, [r7, #24]
 800f6ac:	8b5b      	ldrh	r3, [r3, #26]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d306      	bcc.n	800f6c0 <dhcp_bind+0x124>
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	8b5b      	ldrh	r3, [r3, #26]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800f6c0:	69bb      	ldr	r3, [r7, #24]
 800f6c2:	7adb      	ldrb	r3, [r3, #11]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d003      	beq.n	800f6d0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6cc:	613b      	str	r3, [r7, #16]
 800f6ce:	e014      	b.n	800f6fa <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	3328      	adds	r3, #40	; 0x28
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f6d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	db02      	blt.n	800f6e6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f6e0:	23ff      	movs	r3, #255	; 0xff
 800f6e2:	613b      	str	r3, [r7, #16]
 800f6e4:	e009      	b.n	800f6fa <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f6e6:	7dfb      	ldrb	r3, [r7, #23]
 800f6e8:	2bbf      	cmp	r3, #191	; 0xbf
 800f6ea:	d903      	bls.n	800f6f4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f6ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f6f0:	613b      	str	r3, [r7, #16]
 800f6f2:	e002      	b.n	800f6fa <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f6f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6f8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6fe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d108      	bne.n	800f718 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	4013      	ands	r3, r2
 800f70e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f716:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f718:	210a      	movs	r1, #10
 800f71a:	69b8      	ldr	r0, [r7, #24]
 800f71c:	f000 fa40 	bl	800fba0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f726:	f107 030c 	add.w	r3, r7, #12
 800f72a:	f107 0210 	add.w	r2, r7, #16
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f7f8 fed6 	bl	80084e0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f734:	3720      	adds	r7, #32
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	0801a4a4 	.word	0x0801a4a4
 800f740:	0801a5e4 	.word	0x0801a5e4
 800f744:	0801a504 	.word	0x0801a504
 800f748:	0801a600 	.word	0x0801a600
 800f74c:	88888889 	.word	0x88888889

0800f750 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af02      	add	r7, sp, #8
 800f756:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a1b      	ldr	r3, [r3, #32]
 800f75c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f75e:	2105      	movs	r1, #5
 800f760:	6938      	ldr	r0, [r7, #16]
 800f762:	f000 fa1d 	bl	800fba0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f766:	2203      	movs	r2, #3
 800f768:	6939      	ldr	r1, [r7, #16]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fb24 	bl	800fdb8 <dhcp_create_msg>
 800f770:	4603      	mov	r3, r0
 800f772:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d13b      	bne.n	800f7f4 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f77c:	2202      	movs	r2, #2
 800f77e:	2139      	movs	r1, #57	; 0x39
 800f780:	6938      	ldr	r0, [r7, #16]
 800f782:	f000 fa27 	bl	800fbd4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f78a:	4619      	mov	r1, r3
 800f78c:	6938      	ldr	r0, [r7, #16]
 800f78e:	f000 fa83 	bl	800fc98 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f792:	2203      	movs	r2, #3
 800f794:	2137      	movs	r1, #55	; 0x37
 800f796:	6938      	ldr	r0, [r7, #16]
 800f798:	f000 fa1c 	bl	800fbd4 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f79c:	2300      	movs	r3, #0
 800f79e:	75fb      	strb	r3, [r7, #23]
 800f7a0:	e009      	b.n	800f7b6 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f7a2:	7dfb      	ldrb	r3, [r7, #23]
 800f7a4:	4a2a      	ldr	r2, [pc, #168]	; (800f850 <dhcp_renew+0x100>)
 800f7a6:	5cd3      	ldrb	r3, [r2, r3]
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	6938      	ldr	r0, [r7, #16]
 800f7ac:	f000 fa4c 	bl	800fc48 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	75fb      	strb	r3, [r7, #23]
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	d9f2      	bls.n	800f7a2 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800f7bc:	6938      	ldr	r0, [r7, #16]
 800f7be:	f000 fc9f 	bl	8010100 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	68da      	ldr	r2, [r3, #12]
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	8a9b      	ldrh	r3, [r3, #20]
 800f7ca:	33f0      	adds	r3, #240	; 0xf0
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	4610      	mov	r0, r2
 800f7d2:	f7f9 f9b5 	bl	8008b40 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800f7d6:	4b1f      	ldr	r3, [pc, #124]	; (800f854 <dhcp_renew+0x104>)
 800f7d8:	6818      	ldr	r0, [r3, #0]
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	68d9      	ldr	r1, [r3, #12]
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	2343      	movs	r3, #67	; 0x43
 800f7ea:	f7ff fa33 	bl	800ec54 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f7ee:	6938      	ldr	r0, [r7, #16]
 800f7f0:	f000 fc44 	bl	801007c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	7a9b      	ldrb	r3, [r3, #10]
 800f7f8:	2bff      	cmp	r3, #255	; 0xff
 800f7fa:	d005      	beq.n	800f808 <dhcp_renew+0xb8>
    dhcp->tries++;
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	7a9b      	ldrb	r3, [r3, #10]
 800f800:	3301      	adds	r3, #1
 800f802:	b2da      	uxtb	r2, r3
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	7a9b      	ldrb	r3, [r3, #10]
 800f80c:	2b09      	cmp	r3, #9
 800f80e:	d80a      	bhi.n	800f826 <dhcp_renew+0xd6>
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	7a9b      	ldrb	r3, [r3, #10]
 800f814:	b29b      	uxth	r3, r3
 800f816:	461a      	mov	r2, r3
 800f818:	0152      	lsls	r2, r2, #5
 800f81a:	1ad2      	subs	r2, r2, r3
 800f81c:	0092      	lsls	r2, r2, #2
 800f81e:	4413      	add	r3, r2
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	b29b      	uxth	r3, r3
 800f824:	e001      	b.n	800f82a <dhcp_renew+0xda>
 800f826:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f82a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f82c:	89bb      	ldrh	r3, [r7, #12]
 800f82e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f832:	4a09      	ldr	r2, [pc, #36]	; (800f858 <dhcp_renew+0x108>)
 800f834:	fb82 1203 	smull	r1, r2, r2, r3
 800f838:	1152      	asrs	r2, r2, #5
 800f83a:	17db      	asrs	r3, r3, #31
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	b29a      	uxth	r2, r3
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3718      	adds	r7, #24
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	20000124 	.word	0x20000124
 800f854:	20000288 	.word	0x20000288
 800f858:	10624dd3 	.word	0x10624dd3

0800f85c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b088      	sub	sp, #32
 800f860:	af02      	add	r7, sp, #8
 800f862:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a1b      	ldr	r3, [r3, #32]
 800f868:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f86a:	2104      	movs	r1, #4
 800f86c:	6938      	ldr	r0, [r7, #16]
 800f86e:	f000 f997 	bl	800fba0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f872:	2203      	movs	r2, #3
 800f874:	6939      	ldr	r1, [r7, #16]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fa9e 	bl	800fdb8 <dhcp_create_msg>
 800f87c:	4603      	mov	r3, r0
 800f87e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d139      	bne.n	800f8fc <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f888:	2202      	movs	r2, #2
 800f88a:	2139      	movs	r1, #57	; 0x39
 800f88c:	6938      	ldr	r0, [r7, #16]
 800f88e:	f000 f9a1 	bl	800fbd4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f896:	4619      	mov	r1, r3
 800f898:	6938      	ldr	r0, [r7, #16]
 800f89a:	f000 f9fd 	bl	800fc98 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f89e:	2203      	movs	r2, #3
 800f8a0:	2137      	movs	r1, #55	; 0x37
 800f8a2:	6938      	ldr	r0, [r7, #16]
 800f8a4:	f000 f996 	bl	800fbd4 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	75fb      	strb	r3, [r7, #23]
 800f8ac:	e009      	b.n	800f8c2 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	4a29      	ldr	r2, [pc, #164]	; (800f958 <dhcp_rebind+0xfc>)
 800f8b2:	5cd3      	ldrb	r3, [r2, r3]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	6938      	ldr	r0, [r7, #16]
 800f8b8:	f000 f9c6 	bl	800fc48 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8bc:	7dfb      	ldrb	r3, [r7, #23]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	75fb      	strb	r3, [r7, #23]
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	d9f2      	bls.n	800f8ae <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f8c8:	6938      	ldr	r0, [r7, #16]
 800f8ca:	f000 fc19 	bl	8010100 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	68da      	ldr	r2, [r3, #12]
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	8a9b      	ldrh	r3, [r3, #20]
 800f8d6:	33f0      	adds	r3, #240	; 0xf0
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	4619      	mov	r1, r3
 800f8dc:	4610      	mov	r0, r2
 800f8de:	f7f9 f92f 	bl	8008b40 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800f8e2:	4b1e      	ldr	r3, [pc, #120]	; (800f95c <dhcp_rebind+0x100>)
 800f8e4:	6818      	ldr	r0, [r3, #0]
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	68d9      	ldr	r1, [r3, #12]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	2343      	movs	r3, #67	; 0x43
 800f8f0:	4a1b      	ldr	r2, [pc, #108]	; (800f960 <dhcp_rebind+0x104>)
 800f8f2:	f7ff f9af 	bl	800ec54 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800f8f6:	6938      	ldr	r0, [r7, #16]
 800f8f8:	f000 fbc0 	bl	801007c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	7a9b      	ldrb	r3, [r3, #10]
 800f900:	2bff      	cmp	r3, #255	; 0xff
 800f902:	d005      	beq.n	800f910 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	7a9b      	ldrb	r3, [r3, #10]
 800f908:	3301      	adds	r3, #1
 800f90a:	b2da      	uxtb	r2, r3
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	7a9b      	ldrb	r3, [r3, #10]
 800f914:	2b09      	cmp	r3, #9
 800f916:	d80a      	bhi.n	800f92e <dhcp_rebind+0xd2>
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	7a9b      	ldrb	r3, [r3, #10]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	461a      	mov	r2, r3
 800f920:	0152      	lsls	r2, r2, #5
 800f922:	1ad2      	subs	r2, r2, r3
 800f924:	0092      	lsls	r2, r2, #2
 800f926:	4413      	add	r3, r2
 800f928:	00db      	lsls	r3, r3, #3
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	e001      	b.n	800f932 <dhcp_rebind+0xd6>
 800f92e:	f242 7310 	movw	r3, #10000	; 0x2710
 800f932:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f934:	89bb      	ldrh	r3, [r7, #12]
 800f936:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f93a:	4a0a      	ldr	r2, [pc, #40]	; (800f964 <dhcp_rebind+0x108>)
 800f93c:	fb82 1203 	smull	r1, r2, r2, r3
 800f940:	1152      	asrs	r2, r2, #5
 800f942:	17db      	asrs	r3, r3, #31
 800f944:	1ad3      	subs	r3, r2, r3
 800f946:	b29a      	uxth	r2, r3
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f950:	4618      	mov	r0, r3
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	20000124 	.word	0x20000124
 800f95c:	20000288 	.word	0x20000288
 800f960:	0801b344 	.word	0x0801b344
 800f964:	10624dd3 	.word	0x10624dd3

0800f968 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af02      	add	r7, sp, #8
 800f96e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a1b      	ldr	r3, [r3, #32]
 800f974:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f976:	2103      	movs	r1, #3
 800f978:	6938      	ldr	r0, [r7, #16]
 800f97a:	f000 f911 	bl	800fba0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f97e:	2203      	movs	r2, #3
 800f980:	6939      	ldr	r1, [r7, #16]
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fa18 	bl	800fdb8 <dhcp_create_msg>
 800f988:	4603      	mov	r3, r0
 800f98a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f98c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d147      	bne.n	800fa24 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f994:	2202      	movs	r2, #2
 800f996:	2139      	movs	r1, #57	; 0x39
 800f998:	6938      	ldr	r0, [r7, #16]
 800f99a:	f000 f91b 	bl	800fbd4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f99e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f9a2:	6938      	ldr	r0, [r7, #16]
 800f9a4:	f000 f978 	bl	800fc98 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f9a8:	2204      	movs	r2, #4
 800f9aa:	2132      	movs	r1, #50	; 0x32
 800f9ac:	6938      	ldr	r0, [r7, #16]
 800f9ae:	f000 f911 	bl	800fbd4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7f8 f918 	bl	8007bec <lwip_htonl>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	4619      	mov	r1, r3
 800f9c0:	6938      	ldr	r0, [r7, #16]
 800f9c2:	f000 f9a3 	bl	800fd0c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f9c6:	2203      	movs	r2, #3
 800f9c8:	2137      	movs	r1, #55	; 0x37
 800f9ca:	6938      	ldr	r0, [r7, #16]
 800f9cc:	f000 f902 	bl	800fbd4 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	75fb      	strb	r3, [r7, #23]
 800f9d4:	e009      	b.n	800f9ea <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f9d6:	7dfb      	ldrb	r3, [r7, #23]
 800f9d8:	4a29      	ldr	r2, [pc, #164]	; (800fa80 <dhcp_reboot+0x118>)
 800f9da:	5cd3      	ldrb	r3, [r2, r3]
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6938      	ldr	r0, [r7, #16]
 800f9e0:	f000 f932 	bl	800fc48 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9e4:	7dfb      	ldrb	r3, [r7, #23]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	75fb      	strb	r3, [r7, #23]
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d9f2      	bls.n	800f9d6 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800f9f0:	6938      	ldr	r0, [r7, #16]
 800f9f2:	f000 fb85 	bl	8010100 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	68da      	ldr	r2, [r3, #12]
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	8a9b      	ldrh	r3, [r3, #20]
 800f9fe:	33f0      	adds	r3, #240	; 0xf0
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	4619      	mov	r1, r3
 800fa04:	4610      	mov	r0, r2
 800fa06:	f7f9 f89b 	bl	8008b40 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fa0a:	4b1e      	ldr	r3, [pc, #120]	; (800fa84 <dhcp_reboot+0x11c>)
 800fa0c:	6818      	ldr	r0, [r3, #0]
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	68d9      	ldr	r1, [r3, #12]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	2343      	movs	r3, #67	; 0x43
 800fa18:	4a1b      	ldr	r2, [pc, #108]	; (800fa88 <dhcp_reboot+0x120>)
 800fa1a:	f7ff f91b 	bl	800ec54 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fa1e:	6938      	ldr	r0, [r7, #16]
 800fa20:	f000 fb2c 	bl	801007c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	7a9b      	ldrb	r3, [r3, #10]
 800fa28:	2bff      	cmp	r3, #255	; 0xff
 800fa2a:	d005      	beq.n	800fa38 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	7a9b      	ldrb	r3, [r3, #10]
 800fa30:	3301      	adds	r3, #1
 800fa32:	b2da      	uxtb	r2, r3
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	7a9b      	ldrb	r3, [r3, #10]
 800fa3c:	2b09      	cmp	r3, #9
 800fa3e:	d80a      	bhi.n	800fa56 <dhcp_reboot+0xee>
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	7a9b      	ldrb	r3, [r3, #10]
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	461a      	mov	r2, r3
 800fa48:	0152      	lsls	r2, r2, #5
 800fa4a:	1ad2      	subs	r2, r2, r3
 800fa4c:	0092      	lsls	r2, r2, #2
 800fa4e:	4413      	add	r3, r2
 800fa50:	00db      	lsls	r3, r3, #3
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	e001      	b.n	800fa5a <dhcp_reboot+0xf2>
 800fa56:	f242 7310 	movw	r3, #10000	; 0x2710
 800fa5a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fa5c:	89bb      	ldrh	r3, [r7, #12]
 800fa5e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fa62:	4a0a      	ldr	r2, [pc, #40]	; (800fa8c <dhcp_reboot+0x124>)
 800fa64:	fb82 1203 	smull	r1, r2, r2, r3
 800fa68:	1152      	asrs	r2, r2, #5
 800fa6a:	17db      	asrs	r3, r3, #31
 800fa6c:	1ad3      	subs	r3, r2, r3
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fa74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	20000124 	.word	0x20000124
 800fa84:	20000288 	.word	0x20000288
 800fa88:	0801b344 	.word	0x0801b344
 800fa8c:	10624dd3 	.word	0x10624dd3

0800fa90 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b088      	sub	sp, #32
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6a1b      	ldr	r3, [r3, #32]
 800fa9c:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <dhcp_release+0x1a>
    return ERR_ARG;
 800faa4:	f06f 030f 	mvn.w	r3, #15
 800faa8:	e072      	b.n	800fb90 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faae:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 fb7f 	bl	80101b4 <dhcp_supplied_address>
 800fab6:	4603      	mov	r3, r0
 800fab8:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800faba:	2100      	movs	r1, #0
 800fabc:	6978      	ldr	r0, [r7, #20]
 800fabe:	f000 f86f 	bl	800fba0 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2200      	movs	r2, #0
 800fac6:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	2200      	movs	r2, #0
 800facc:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2200      	movs	r2, #0
 800fad2:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2200      	movs	r2, #0
 800fad8:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	2200      	movs	r2, #0
 800fade:	63da      	str	r2, [r3, #60]	; 0x3c
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	2200      	movs	r2, #0
 800faf4:	845a      	strh	r2, [r3, #34]	; 0x22
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	841a      	strh	r2, [r3, #32]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	8c1a      	ldrh	r2, [r3, #32]
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	83da      	strh	r2, [r3, #30]
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	8bda      	ldrh	r2, [r3, #30]
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800fb0e:	7cfb      	ldrb	r3, [r7, #19]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d101      	bne.n	800fb18 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800fb14:	2300      	movs	r3, #0
 800fb16:	e03b      	b.n	800fb90 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800fb18:	2207      	movs	r2, #7
 800fb1a:	6979      	ldr	r1, [r7, #20]
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f94b 	bl	800fdb8 <dhcp_create_msg>
 800fb22:	4603      	mov	r3, r0
 800fb24:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800fb26:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d128      	bne.n	800fb80 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800fb2e:	2204      	movs	r2, #4
 800fb30:	2136      	movs	r1, #54	; 0x36
 800fb32:	6978      	ldr	r0, [r7, #20]
 800fb34:	f000 f84e 	bl	800fbd4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7f8 f856 	bl	8007bec <lwip_htonl>
 800fb40:	4603      	mov	r3, r0
 800fb42:	4619      	mov	r1, r3
 800fb44:	6978      	ldr	r0, [r7, #20]
 800fb46:	f000 f8e1 	bl	800fd0c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800fb4a:	6978      	ldr	r0, [r7, #20]
 800fb4c:	f000 fad8 	bl	8010100 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	68da      	ldr	r2, [r3, #12]
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	8a9b      	ldrh	r3, [r3, #20]
 800fb58:	33f0      	adds	r3, #240	; 0xf0
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f7f8 ffee 	bl	8008b40 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800fb64:	4b0c      	ldr	r3, [pc, #48]	; (800fb98 <dhcp_release+0x108>)
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	68d9      	ldr	r1, [r3, #12]
 800fb6c:	f107 020c 	add.w	r2, r7, #12
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	2343      	movs	r3, #67	; 0x43
 800fb76:	f7ff f86d 	bl	800ec54 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fb7a:	6978      	ldr	r0, [r7, #20]
 800fb7c:	f000 fa7e 	bl	801007c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb80:	4b06      	ldr	r3, [pc, #24]	; (800fb9c <dhcp_release+0x10c>)
 800fb82:	4a06      	ldr	r2, [pc, #24]	; (800fb9c <dhcp_release+0x10c>)
 800fb84:	4905      	ldr	r1, [pc, #20]	; (800fb9c <dhcp_release+0x10c>)
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7f8 fcaa 	bl	80084e0 <netif_set_addr>

  return result;
 800fb8c:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3718      	adds	r7, #24
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	20000288 	.word	0x20000288
 800fb9c:	0801b340 	.word	0x0801b340

0800fba0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	460b      	mov	r3, r1
 800fbaa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	7a5b      	ldrb	r3, [r3, #9]
 800fbb0:	78fa      	ldrb	r2, [r7, #3]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d008      	beq.n	800fbc8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	78fa      	ldrb	r2, [r7, #3]
 800fbba:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	82da      	strh	r2, [r3, #22]
  }
}
 800fbc8:	bf00      	nop
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	460b      	mov	r3, r1
 800fbde:	70fb      	strb	r3, [r7, #3]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8a9b      	ldrh	r3, [r3, #20]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	78bb      	ldrb	r3, [r7, #2]
 800fbec:	4413      	add	r3, r2
 800fbee:	3302      	adds	r3, #2
 800fbf0:	2b44      	cmp	r3, #68	; 0x44
 800fbf2:	d906      	bls.n	800fc02 <dhcp_option+0x2e>
 800fbf4:	4b11      	ldr	r3, [pc, #68]	; (800fc3c <dhcp_option+0x68>)
 800fbf6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800fbfa:	4911      	ldr	r1, [pc, #68]	; (800fc40 <dhcp_option+0x6c>)
 800fbfc:	4811      	ldr	r0, [pc, #68]	; (800fc44 <dhcp_option+0x70>)
 800fbfe:	f007 fa05 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	691a      	ldr	r2, [r3, #16]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	8a9b      	ldrh	r3, [r3, #20]
 800fc0a:	1c59      	adds	r1, r3, #1
 800fc0c:	b288      	uxth	r0, r1
 800fc0e:	6879      	ldr	r1, [r7, #4]
 800fc10:	8288      	strh	r0, [r1, #20]
 800fc12:	4413      	add	r3, r2
 800fc14:	78fa      	ldrb	r2, [r7, #3]
 800fc16:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	691a      	ldr	r2, [r3, #16]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	8a9b      	ldrh	r3, [r3, #20]
 800fc22:	1c59      	adds	r1, r3, #1
 800fc24:	b288      	uxth	r0, r1
 800fc26:	6879      	ldr	r1, [r7, #4]
 800fc28:	8288      	strh	r0, [r1, #20]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	78ba      	ldrb	r2, [r7, #2]
 800fc2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fc32:	bf00      	nop
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	0801a4a4 	.word	0x0801a4a4
 800fc40:	0801a634 	.word	0x0801a634
 800fc44:	0801a504 	.word	0x0801a504

0800fc48 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8a9b      	ldrh	r3, [r3, #20]
 800fc58:	2b43      	cmp	r3, #67	; 0x43
 800fc5a:	d906      	bls.n	800fc6a <dhcp_option_byte+0x22>
 800fc5c:	4b0b      	ldr	r3, [pc, #44]	; (800fc8c <dhcp_option_byte+0x44>)
 800fc5e:	f240 527b 	movw	r2, #1403	; 0x57b
 800fc62:	490b      	ldr	r1, [pc, #44]	; (800fc90 <dhcp_option_byte+0x48>)
 800fc64:	480b      	ldr	r0, [pc, #44]	; (800fc94 <dhcp_option_byte+0x4c>)
 800fc66:	f007 f9d1 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	691a      	ldr	r2, [r3, #16]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	8a9b      	ldrh	r3, [r3, #20]
 800fc72:	1c59      	adds	r1, r3, #1
 800fc74:	b288      	uxth	r0, r1
 800fc76:	6879      	ldr	r1, [r7, #4]
 800fc78:	8288      	strh	r0, [r1, #20]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	78fa      	ldrb	r2, [r7, #3]
 800fc7e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fc82:	bf00      	nop
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	0801a4a4 	.word	0x0801a4a4
 800fc90:	0801a67c 	.word	0x0801a67c
 800fc94:	0801a504 	.word	0x0801a504

0800fc98 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800fc98:	b590      	push	{r4, r7, lr}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	8a9b      	ldrh	r3, [r3, #20]
 800fca8:	3302      	adds	r3, #2
 800fcaa:	2b44      	cmp	r3, #68	; 0x44
 800fcac:	d906      	bls.n	800fcbc <dhcp_option_short+0x24>
 800fcae:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <dhcp_option_short+0x68>)
 800fcb0:	f240 5282 	movw	r2, #1410	; 0x582
 800fcb4:	4913      	ldr	r1, [pc, #76]	; (800fd04 <dhcp_option_short+0x6c>)
 800fcb6:	4814      	ldr	r0, [pc, #80]	; (800fd08 <dhcp_option_short+0x70>)
 800fcb8:	f007 f9a8 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fcbc:	887b      	ldrh	r3, [r7, #2]
 800fcbe:	0a1b      	lsrs	r3, r3, #8
 800fcc0:	b298      	uxth	r0, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	691a      	ldr	r2, [r3, #16]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	8a9b      	ldrh	r3, [r3, #20]
 800fcca:	1c59      	adds	r1, r3, #1
 800fccc:	b28c      	uxth	r4, r1
 800fcce:	6879      	ldr	r1, [r7, #4]
 800fcd0:	828c      	strh	r4, [r1, #20]
 800fcd2:	b2c1      	uxtb	r1, r0
 800fcd4:	4413      	add	r3, r2
 800fcd6:	460a      	mov	r2, r1
 800fcd8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	691a      	ldr	r2, [r3, #16]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	8a9b      	ldrh	r3, [r3, #20]
 800fce4:	1c59      	adds	r1, r3, #1
 800fce6:	b288      	uxth	r0, r1
 800fce8:	6879      	ldr	r1, [r7, #4]
 800fcea:	8288      	strh	r0, [r1, #20]
 800fcec:	8879      	ldrh	r1, [r7, #2]
 800fcee:	b2c9      	uxtb	r1, r1
 800fcf0:	4413      	add	r3, r2
 800fcf2:	460a      	mov	r2, r1
 800fcf4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd90      	pop	{r4, r7, pc}
 800fd00:	0801a4a4 	.word	0x0801a4a4
 800fd04:	0801a6b8 	.word	0x0801a6b8
 800fd08:	0801a504 	.word	0x0801a504

0800fd0c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800fd0c:	b590      	push	{r4, r7, lr}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	8a9b      	ldrh	r3, [r3, #20]
 800fd1a:	3304      	adds	r3, #4
 800fd1c:	2b44      	cmp	r3, #68	; 0x44
 800fd1e:	d906      	bls.n	800fd2e <dhcp_option_long+0x22>
 800fd20:	4b22      	ldr	r3, [pc, #136]	; (800fdac <dhcp_option_long+0xa0>)
 800fd22:	f240 528a 	movw	r2, #1418	; 0x58a
 800fd26:	4922      	ldr	r1, [pc, #136]	; (800fdb0 <dhcp_option_long+0xa4>)
 800fd28:	4822      	ldr	r0, [pc, #136]	; (800fdb4 <dhcp_option_long+0xa8>)
 800fd2a:	f007 f96f 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	0e18      	lsrs	r0, r3, #24
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	691a      	ldr	r2, [r3, #16]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8a9b      	ldrh	r3, [r3, #20]
 800fd3a:	1c59      	adds	r1, r3, #1
 800fd3c:	b28c      	uxth	r4, r1
 800fd3e:	6879      	ldr	r1, [r7, #4]
 800fd40:	828c      	strh	r4, [r1, #20]
 800fd42:	b2c1      	uxtb	r1, r0
 800fd44:	4413      	add	r3, r2
 800fd46:	460a      	mov	r2, r1
 800fd48:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	0c18      	lsrs	r0, r3, #16
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	691a      	ldr	r2, [r3, #16]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	8a9b      	ldrh	r3, [r3, #20]
 800fd58:	1c59      	adds	r1, r3, #1
 800fd5a:	b28c      	uxth	r4, r1
 800fd5c:	6879      	ldr	r1, [r7, #4]
 800fd5e:	828c      	strh	r4, [r1, #20]
 800fd60:	b2c1      	uxtb	r1, r0
 800fd62:	4413      	add	r3, r2
 800fd64:	460a      	mov	r2, r1
 800fd66:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	0a18      	lsrs	r0, r3, #8
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	691a      	ldr	r2, [r3, #16]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8a9b      	ldrh	r3, [r3, #20]
 800fd76:	1c59      	adds	r1, r3, #1
 800fd78:	b28c      	uxth	r4, r1
 800fd7a:	6879      	ldr	r1, [r7, #4]
 800fd7c:	828c      	strh	r4, [r1, #20]
 800fd7e:	b2c1      	uxtb	r1, r0
 800fd80:	4413      	add	r3, r2
 800fd82:	460a      	mov	r2, r1
 800fd84:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	691a      	ldr	r2, [r3, #16]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	8a9b      	ldrh	r3, [r3, #20]
 800fd90:	1c59      	adds	r1, r3, #1
 800fd92:	b288      	uxth	r0, r1
 800fd94:	6879      	ldr	r1, [r7, #4]
 800fd96:	8288      	strh	r0, [r1, #20]
 800fd98:	6839      	ldr	r1, [r7, #0]
 800fd9a:	b2c9      	uxtb	r1, r1
 800fd9c:	4413      	add	r3, r2
 800fd9e:	460a      	mov	r2, r1
 800fda0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd90      	pop	{r4, r7, pc}
 800fdac:	0801a4a4 	.word	0x0801a4a4
 800fdb0:	0801a6fc 	.word	0x0801a6fc
 800fdb4:	0801a504 	.word	0x0801a504

0800fdb8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800fdb8:	b590      	push	{r4, r7, lr}
 800fdba:	b087      	sub	sp, #28
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d109      	bne.n	800fde0 <dhcp_create_msg+0x28>
 800fdcc:	4ba3      	ldr	r3, [pc, #652]	; (801005c <dhcp_create_msg+0x2a4>)
 800fdce:	f240 721d 	movw	r2, #1821	; 0x71d
 800fdd2:	49a3      	ldr	r1, [pc, #652]	; (8010060 <dhcp_create_msg+0x2a8>)
 800fdd4:	48a3      	ldr	r0, [pc, #652]	; (8010064 <dhcp_create_msg+0x2ac>)
 800fdd6:	f007 f919 	bl	801700c <iprintf>
 800fdda:	f06f 030f 	mvn.w	r3, #15
 800fdde:	e138      	b.n	8010052 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d109      	bne.n	800fdfa <dhcp_create_msg+0x42>
 800fde6:	4b9d      	ldr	r3, [pc, #628]	; (801005c <dhcp_create_msg+0x2a4>)
 800fde8:	f240 721e 	movw	r2, #1822	; 0x71e
 800fdec:	499e      	ldr	r1, [pc, #632]	; (8010068 <dhcp_create_msg+0x2b0>)
 800fdee:	489d      	ldr	r0, [pc, #628]	; (8010064 <dhcp_create_msg+0x2ac>)
 800fdf0:	f007 f90c 	bl	801700c <iprintf>
 800fdf4:	f06f 0305 	mvn.w	r3, #5
 800fdf8:	e12b      	b.n	8010052 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d006      	beq.n	800fe10 <dhcp_create_msg+0x58>
 800fe02:	4b96      	ldr	r3, [pc, #600]	; (801005c <dhcp_create_msg+0x2a4>)
 800fe04:	f240 721f 	movw	r2, #1823	; 0x71f
 800fe08:	4998      	ldr	r1, [pc, #608]	; (801006c <dhcp_create_msg+0x2b4>)
 800fe0a:	4896      	ldr	r0, [pc, #600]	; (8010064 <dhcp_create_msg+0x2ac>)
 800fe0c:	f007 f8fe 	bl	801700c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d006      	beq.n	800fe26 <dhcp_create_msg+0x6e>
 800fe18:	4b90      	ldr	r3, [pc, #576]	; (801005c <dhcp_create_msg+0x2a4>)
 800fe1a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800fe1e:	4994      	ldr	r1, [pc, #592]	; (8010070 <dhcp_create_msg+0x2b8>)
 800fe20:	4890      	ldr	r0, [pc, #576]	; (8010064 <dhcp_create_msg+0x2ac>)
 800fe22:	f007 f8f3 	bl	801700c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fe26:	2200      	movs	r2, #0
 800fe28:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	f7f8 fc89 	bl	8008744 <pbuf_alloc>
 800fe32:	4602      	mov	r2, r0
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d102      	bne.n	800fe46 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800fe40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe44:	e105      	b.n	8010052 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	895b      	ldrh	r3, [r3, #10]
 800fe4c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fe50:	d206      	bcs.n	800fe60 <dhcp_create_msg+0xa8>
 800fe52:	4b82      	ldr	r3, [pc, #520]	; (801005c <dhcp_create_msg+0x2a4>)
 800fe54:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fe58:	4986      	ldr	r1, [pc, #536]	; (8010074 <dhcp_create_msg+0x2bc>)
 800fe5a:	4882      	ldr	r0, [pc, #520]	; (8010064 <dhcp_create_msg+0x2ac>)
 800fe5c:	f007 f8d6 	bl	801700c <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fe60:	79fb      	ldrb	r3, [r7, #7]
 800fe62:	2b03      	cmp	r3, #3
 800fe64:	d103      	bne.n	800fe6e <dhcp_create_msg+0xb6>
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	7a5b      	ldrb	r3, [r3, #9]
 800fe6a:	2b03      	cmp	r3, #3
 800fe6c:	d10d      	bne.n	800fe8a <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	7a9b      	ldrb	r3, [r3, #10]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d105      	bne.n	800fe82 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fe76:	f007 f945 	bl	8017104 <rand>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	4b7e      	ldr	r3, [pc, #504]	; (8010078 <dhcp_create_msg+0x2c0>)
 800fe80:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fe82:	4b7d      	ldr	r3, [pc, #500]	; (8010078 <dhcp_create_msg+0x2c0>)
 800fe84:	681a      	ldr	r2, [r3, #0]
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	685a      	ldr	r2, [r3, #4]
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	2201      	movs	r2, #1
 800fe9a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	2201      	movs	r2, #1
 800fea2:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800feae:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	691b      	ldr	r3, [r3, #16]
 800feb4:	2200      	movs	r2, #0
 800feb6:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	691c      	ldr	r4, [r3, #16]
 800fec0:	4610      	mov	r0, r2
 800fec2:	f7f7 fe93 	bl	8007bec <lwip_htonl>
 800fec6:	4603      	mov	r3, r0
 800fec8:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	2200      	movs	r2, #0
 800fed0:	721a      	strb	r2, [r3, #8]
 800fed2:	2200      	movs	r2, #0
 800fed4:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	691b      	ldr	r3, [r3, #16]
 800feda:	2200      	movs	r2, #0
 800fedc:	729a      	strb	r2, [r3, #10]
 800fede:	2200      	movs	r2, #0
 800fee0:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	691b      	ldr	r3, [r3, #16]
 800fee6:	2200      	movs	r2, #0
 800fee8:	731a      	strb	r2, [r3, #12]
 800feea:	2200      	movs	r2, #0
 800feec:	735a      	strb	r2, [r3, #13]
 800feee:	2200      	movs	r2, #0
 800fef0:	739a      	strb	r2, [r3, #14]
 800fef2:	2200      	movs	r2, #0
 800fef4:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800fef6:	79fb      	ldrb	r3, [r7, #7]
 800fef8:	2b08      	cmp	r3, #8
 800fefa:	d010      	beq.n	800ff1e <dhcp_create_msg+0x166>
 800fefc:	79fb      	ldrb	r3, [r7, #7]
 800fefe:	2b04      	cmp	r3, #4
 800ff00:	d00d      	beq.n	800ff1e <dhcp_create_msg+0x166>
 800ff02:	79fb      	ldrb	r3, [r7, #7]
 800ff04:	2b07      	cmp	r3, #7
 800ff06:	d00a      	beq.n	800ff1e <dhcp_create_msg+0x166>
 800ff08:	79fb      	ldrb	r3, [r7, #7]
 800ff0a:	2b03      	cmp	r3, #3
 800ff0c:	d10d      	bne.n	800ff2a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ff12:	2b05      	cmp	r3, #5
 800ff14:	d003      	beq.n	800ff1e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	7a5b      	ldrb	r3, [r3, #9]
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	d105      	bne.n	800ff2a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	1d1a      	adds	r2, r3, #4
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	6812      	ldr	r2, [r2, #0]
 800ff28:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	741a      	strb	r2, [r3, #16]
 800ff32:	2200      	movs	r2, #0
 800ff34:	745a      	strb	r2, [r3, #17]
 800ff36:	2200      	movs	r2, #0
 800ff38:	749a      	strb	r2, [r3, #18]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	2200      	movs	r2, #0
 800ff44:	751a      	strb	r2, [r3, #20]
 800ff46:	2200      	movs	r2, #0
 800ff48:	755a      	strb	r2, [r3, #21]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	759a      	strb	r2, [r3, #22]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	691b      	ldr	r3, [r3, #16]
 800ff56:	2200      	movs	r2, #0
 800ff58:	761a      	strb	r2, [r3, #24]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	765a      	strb	r2, [r3, #25]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	769a      	strb	r2, [r3, #26]
 800ff62:	2200      	movs	r2, #0
 800ff64:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800ff66:	2300      	movs	r3, #0
 800ff68:	82fb      	strh	r3, [r7, #22]
 800ff6a:	e019      	b.n	800ffa0 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	8afa      	ldrh	r2, [r7, #22]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d208      	bcs.n	800ff8c <dhcp_create_msg+0x1d4>
 800ff7a:	8afb      	ldrh	r3, [r7, #22]
 800ff7c:	2b05      	cmp	r3, #5
 800ff7e:	d805      	bhi.n	800ff8c <dhcp_create_msg+0x1d4>
 800ff80:	8afb      	ldrh	r3, [r7, #22]
 800ff82:	68fa      	ldr	r2, [r7, #12]
 800ff84:	4413      	add	r3, r2
 800ff86:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800ff8a:	e000      	b.n	800ff8e <dhcp_create_msg+0x1d6>
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	691a      	ldr	r2, [r3, #16]
 800ff92:	8afb      	ldrh	r3, [r7, #22]
 800ff94:	4413      	add	r3, r2
 800ff96:	460a      	mov	r2, r1
 800ff98:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800ff9a:	8afb      	ldrh	r3, [r7, #22]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	82fb      	strh	r3, [r7, #22]
 800ffa0:	8afb      	ldrh	r3, [r7, #22]
 800ffa2:	2b0f      	cmp	r3, #15
 800ffa4:	d9e2      	bls.n	800ff6c <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	82fb      	strh	r3, [r7, #22]
 800ffaa:	e009      	b.n	800ffc0 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	691a      	ldr	r2, [r3, #16]
 800ffb0:	8afb      	ldrh	r3, [r7, #22]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800ffba:	8afb      	ldrh	r3, [r7, #22]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	82fb      	strh	r3, [r7, #22]
 800ffc0:	8afb      	ldrh	r3, [r7, #22]
 800ffc2:	2b3f      	cmp	r3, #63	; 0x3f
 800ffc4:	d9f2      	bls.n	800ffac <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	82fb      	strh	r3, [r7, #22]
 800ffca:	e009      	b.n	800ffe0 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	691a      	ldr	r2, [r3, #16]
 800ffd0:	8afb      	ldrh	r3, [r7, #22]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800ffda:	8afb      	ldrh	r3, [r7, #22]
 800ffdc:	3301      	adds	r3, #1
 800ffde:	82fb      	strh	r3, [r7, #22]
 800ffe0:	8afb      	ldrh	r3, [r7, #22]
 800ffe2:	2b7f      	cmp	r3, #127	; 0x7f
 800ffe4:	d9f2      	bls.n	800ffcc <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	691b      	ldr	r3, [r3, #16]
 800ffea:	2200      	movs	r2, #0
 800ffec:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fff0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800fff4:	2200      	movs	r2, #0
 800fff6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800fffa:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800fffe:	2200      	movs	r2, #0
 8010000:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010004:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010008:	2200      	movs	r2, #0
 801000a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801000e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	2200      	movs	r2, #0
 8010016:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010018:	2300      	movs	r3, #0
 801001a:	82fb      	strh	r3, [r7, #22]
 801001c:	e00b      	b.n	8010036 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	691a      	ldr	r2, [r3, #16]
 8010022:	8afb      	ldrh	r3, [r7, #22]
 8010024:	8af9      	ldrh	r1, [r7, #22]
 8010026:	b2c9      	uxtb	r1, r1
 8010028:	4413      	add	r3, r2
 801002a:	460a      	mov	r2, r1
 801002c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010030:	8afb      	ldrh	r3, [r7, #22]
 8010032:	3301      	adds	r3, #1
 8010034:	82fb      	strh	r3, [r7, #22]
 8010036:	8afb      	ldrh	r3, [r7, #22]
 8010038:	2b43      	cmp	r3, #67	; 0x43
 801003a:	d9f0      	bls.n	801001e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801003c:	2201      	movs	r2, #1
 801003e:	2135      	movs	r1, #53	; 0x35
 8010040:	68b8      	ldr	r0, [r7, #8]
 8010042:	f7ff fdc7 	bl	800fbd4 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8010046:	79fb      	ldrb	r3, [r7, #7]
 8010048:	4619      	mov	r1, r3
 801004a:	68b8      	ldr	r0, [r7, #8]
 801004c:	f7ff fdfc 	bl	800fc48 <dhcp_option_byte>
  return ERR_OK;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	371c      	adds	r7, #28
 8010056:	46bd      	mov	sp, r7
 8010058:	bd90      	pop	{r4, r7, pc}
 801005a:	bf00      	nop
 801005c:	0801a4a4 	.word	0x0801a4a4
 8010060:	0801a7d4 	.word	0x0801a7d4
 8010064:	0801a504 	.word	0x0801a504
 8010068:	0801a7f4 	.word	0x0801a7f4
 801006c:	0801a814 	.word	0x0801a814
 8010070:	0801a83c 	.word	0x0801a83c
 8010074:	0801a864 	.word	0x0801a864
 8010078:	2000028c 	.word	0x2000028c

0801007c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d107      	bne.n	801009a <dhcp_delete_msg+0x1e>
 801008a:	4b18      	ldr	r3, [pc, #96]	; (80100ec <dhcp_delete_msg+0x70>)
 801008c:	f240 726d 	movw	r2, #1901	; 0x76d
 8010090:	4917      	ldr	r1, [pc, #92]	; (80100f0 <dhcp_delete_msg+0x74>)
 8010092:	4818      	ldr	r0, [pc, #96]	; (80100f4 <dhcp_delete_msg+0x78>)
 8010094:	f006 ffba 	bl	801700c <iprintf>
 8010098:	e024      	b.n	80100e4 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	68db      	ldr	r3, [r3, #12]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d106      	bne.n	80100b0 <dhcp_delete_msg+0x34>
 80100a2:	4b12      	ldr	r3, [pc, #72]	; (80100ec <dhcp_delete_msg+0x70>)
 80100a4:	f240 726e 	movw	r2, #1902	; 0x76e
 80100a8:	4913      	ldr	r1, [pc, #76]	; (80100f8 <dhcp_delete_msg+0x7c>)
 80100aa:	4812      	ldr	r0, [pc, #72]	; (80100f4 <dhcp_delete_msg+0x78>)
 80100ac:	f006 ffae 	bl	801700c <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d106      	bne.n	80100c6 <dhcp_delete_msg+0x4a>
 80100b8:	4b0c      	ldr	r3, [pc, #48]	; (80100ec <dhcp_delete_msg+0x70>)
 80100ba:	f240 726f 	movw	r2, #1903	; 0x76f
 80100be:	490f      	ldr	r1, [pc, #60]	; (80100fc <dhcp_delete_msg+0x80>)
 80100c0:	480c      	ldr	r0, [pc, #48]	; (80100f4 <dhcp_delete_msg+0x78>)
 80100c2:	f006 ffa3 	bl	801700c <iprintf>
  if (dhcp->p_out != NULL) {
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	68db      	ldr	r3, [r3, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d004      	beq.n	80100d8 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7f8 fea8 	bl	8008e28 <pbuf_free>
  }
  dhcp->p_out = NULL;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	611a      	str	r2, [r3, #16]
}
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	0801a4a4 	.word	0x0801a4a4
 80100f0:	0801a8a4 	.word	0x0801a8a4
 80100f4:	0801a504 	.word	0x0801a504
 80100f8:	0801a8c4 	.word	0x0801a8c4
 80100fc:	0801a8ec 	.word	0x0801a8ec

08010100 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d107      	bne.n	801011e <dhcp_option_trailer+0x1e>
 801010e:	4b24      	ldr	r3, [pc, #144]	; (80101a0 <dhcp_option_trailer+0xa0>)
 8010110:	f240 7282 	movw	r2, #1922	; 0x782
 8010114:	4923      	ldr	r1, [pc, #140]	; (80101a4 <dhcp_option_trailer+0xa4>)
 8010116:	4824      	ldr	r0, [pc, #144]	; (80101a8 <dhcp_option_trailer+0xa8>)
 8010118:	f006 ff78 	bl	801700c <iprintf>
 801011c:	e03c      	b.n	8010198 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	691b      	ldr	r3, [r3, #16]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d106      	bne.n	8010134 <dhcp_option_trailer+0x34>
 8010126:	4b1e      	ldr	r3, [pc, #120]	; (80101a0 <dhcp_option_trailer+0xa0>)
 8010128:	f240 7283 	movw	r2, #1923	; 0x783
 801012c:	491f      	ldr	r1, [pc, #124]	; (80101ac <dhcp_option_trailer+0xac>)
 801012e:	481e      	ldr	r0, [pc, #120]	; (80101a8 <dhcp_option_trailer+0xa8>)
 8010130:	f006 ff6c 	bl	801700c <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	8a9b      	ldrh	r3, [r3, #20]
 8010138:	2b43      	cmp	r3, #67	; 0x43
 801013a:	d906      	bls.n	801014a <dhcp_option_trailer+0x4a>
 801013c:	4b18      	ldr	r3, [pc, #96]	; (80101a0 <dhcp_option_trailer+0xa0>)
 801013e:	f240 7284 	movw	r2, #1924	; 0x784
 8010142:	491b      	ldr	r1, [pc, #108]	; (80101b0 <dhcp_option_trailer+0xb0>)
 8010144:	4818      	ldr	r0, [pc, #96]	; (80101a8 <dhcp_option_trailer+0xa8>)
 8010146:	f006 ff61 	bl	801700c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	691a      	ldr	r2, [r3, #16]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	8a9b      	ldrh	r3, [r3, #20]
 8010152:	1c59      	adds	r1, r3, #1
 8010154:	b288      	uxth	r0, r1
 8010156:	6879      	ldr	r1, [r7, #4]
 8010158:	8288      	strh	r0, [r1, #20]
 801015a:	4413      	add	r3, r2
 801015c:	22ff      	movs	r2, #255	; 0xff
 801015e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8010162:	e00b      	b.n	801017c <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	691a      	ldr	r2, [r3, #16]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	8a9b      	ldrh	r3, [r3, #20]
 801016c:	1c59      	adds	r1, r3, #1
 801016e:	b288      	uxth	r0, r1
 8010170:	6879      	ldr	r1, [r7, #4]
 8010172:	8288      	strh	r0, [r1, #20]
 8010174:	4413      	add	r3, r2
 8010176:	2200      	movs	r2, #0
 8010178:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	8a9b      	ldrh	r3, [r3, #20]
 8010180:	2b43      	cmp	r3, #67	; 0x43
 8010182:	d905      	bls.n	8010190 <dhcp_option_trailer+0x90>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8a9b      	ldrh	r3, [r3, #20]
 8010188:	f003 0303 	and.w	r3, r3, #3
 801018c:	2b00      	cmp	r3, #0
 801018e:	d003      	beq.n	8010198 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8010194:	2b43      	cmp	r3, #67	; 0x43
 8010196:	d9e5      	bls.n	8010164 <dhcp_option_trailer+0x64>
  }
}
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	0801a4a4 	.word	0x0801a4a4
 80101a4:	0801a914 	.word	0x0801a914
 80101a8:	0801a504 	.word	0x0801a504
 80101ac:	0801a938 	.word	0x0801a938
 80101b0:	0801a964 	.word	0x0801a964

080101b4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d017      	beq.n	80101f2 <dhcp_supplied_address+0x3e>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a1b      	ldr	r3, [r3, #32]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d013      	beq.n	80101f2 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a1b      	ldr	r3, [r3, #32]
 80101ce:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	7a5b      	ldrb	r3, [r3, #9]
 80101d4:	2b0a      	cmp	r3, #10
 80101d6:	d007      	beq.n	80101e8 <dhcp_supplied_address+0x34>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	7a5b      	ldrb	r3, [r3, #9]
 80101dc:	2b05      	cmp	r3, #5
 80101de:	d003      	beq.n	80101e8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80101e4:	2b04      	cmp	r3, #4
 80101e6:	d101      	bne.n	80101ec <dhcp_supplied_address+0x38>
 80101e8:	2301      	movs	r3, #1
 80101ea:	e000      	b.n	80101ee <dhcp_supplied_address+0x3a>
 80101ec:	2300      	movs	r3, #0
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	e000      	b.n	80101f4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80101f2:	2300      	movs	r3, #0
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3714      	adds	r7, #20
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010208:	4915      	ldr	r1, [pc, #84]	; (8010260 <etharp_free_entry+0x60>)
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	4613      	mov	r3, r2
 801020e:	005b      	lsls	r3, r3, #1
 8010210:	4413      	add	r3, r2
 8010212:	00db      	lsls	r3, r3, #3
 8010214:	440b      	add	r3, r1
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d013      	beq.n	8010244 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801021c:	4910      	ldr	r1, [pc, #64]	; (8010260 <etharp_free_entry+0x60>)
 801021e:	687a      	ldr	r2, [r7, #4]
 8010220:	4613      	mov	r3, r2
 8010222:	005b      	lsls	r3, r3, #1
 8010224:	4413      	add	r3, r2
 8010226:	00db      	lsls	r3, r3, #3
 8010228:	440b      	add	r3, r1
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4618      	mov	r0, r3
 801022e:	f7f8 fdfb 	bl	8008e28 <pbuf_free>
    arp_table[i].q = NULL;
 8010232:	490b      	ldr	r1, [pc, #44]	; (8010260 <etharp_free_entry+0x60>)
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	4613      	mov	r3, r2
 8010238:	005b      	lsls	r3, r3, #1
 801023a:	4413      	add	r3, r2
 801023c:	00db      	lsls	r3, r3, #3
 801023e:	440b      	add	r3, r1
 8010240:	2200      	movs	r2, #0
 8010242:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010244:	4906      	ldr	r1, [pc, #24]	; (8010260 <etharp_free_entry+0x60>)
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	4613      	mov	r3, r2
 801024a:	005b      	lsls	r3, r3, #1
 801024c:	4413      	add	r3, r2
 801024e:	00db      	lsls	r3, r3, #3
 8010250:	440b      	add	r3, r1
 8010252:	3314      	adds	r3, #20
 8010254:	2200      	movs	r2, #0
 8010256:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	20000290 	.word	0x20000290

08010264 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801026a:	2300      	movs	r3, #0
 801026c:	71fb      	strb	r3, [r7, #7]
 801026e:	e096      	b.n	801039e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010270:	79fa      	ldrb	r2, [r7, #7]
 8010272:	494f      	ldr	r1, [pc, #316]	; (80103b0 <etharp_tmr+0x14c>)
 8010274:	4613      	mov	r3, r2
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	4413      	add	r3, r2
 801027a:	00db      	lsls	r3, r3, #3
 801027c:	440b      	add	r3, r1
 801027e:	3314      	adds	r3, #20
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8010284:	79bb      	ldrb	r3, [r7, #6]
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 8086 	beq.w	8010398 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801028c:	79fa      	ldrb	r2, [r7, #7]
 801028e:	4948      	ldr	r1, [pc, #288]	; (80103b0 <etharp_tmr+0x14c>)
 8010290:	4613      	mov	r3, r2
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	4413      	add	r3, r2
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	440b      	add	r3, r1
 801029a:	3312      	adds	r3, #18
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	3301      	adds	r3, #1
 80102a0:	b298      	uxth	r0, r3
 80102a2:	4943      	ldr	r1, [pc, #268]	; (80103b0 <etharp_tmr+0x14c>)
 80102a4:	4613      	mov	r3, r2
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	4413      	add	r3, r2
 80102aa:	00db      	lsls	r3, r3, #3
 80102ac:	440b      	add	r3, r1
 80102ae:	3312      	adds	r3, #18
 80102b0:	4602      	mov	r2, r0
 80102b2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80102b4:	79fa      	ldrb	r2, [r7, #7]
 80102b6:	493e      	ldr	r1, [pc, #248]	; (80103b0 <etharp_tmr+0x14c>)
 80102b8:	4613      	mov	r3, r2
 80102ba:	005b      	lsls	r3, r3, #1
 80102bc:	4413      	add	r3, r2
 80102be:	00db      	lsls	r3, r3, #3
 80102c0:	440b      	add	r3, r1
 80102c2:	3312      	adds	r3, #18
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80102ca:	d215      	bcs.n	80102f8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80102cc:	79fa      	ldrb	r2, [r7, #7]
 80102ce:	4938      	ldr	r1, [pc, #224]	; (80103b0 <etharp_tmr+0x14c>)
 80102d0:	4613      	mov	r3, r2
 80102d2:	005b      	lsls	r3, r3, #1
 80102d4:	4413      	add	r3, r2
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	440b      	add	r3, r1
 80102da:	3314      	adds	r3, #20
 80102dc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d10f      	bne.n	8010302 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80102e2:	79fa      	ldrb	r2, [r7, #7]
 80102e4:	4932      	ldr	r1, [pc, #200]	; (80103b0 <etharp_tmr+0x14c>)
 80102e6:	4613      	mov	r3, r2
 80102e8:	005b      	lsls	r3, r3, #1
 80102ea:	4413      	add	r3, r2
 80102ec:	00db      	lsls	r3, r3, #3
 80102ee:	440b      	add	r3, r1
 80102f0:	3312      	adds	r3, #18
 80102f2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80102f4:	2b04      	cmp	r3, #4
 80102f6:	d904      	bls.n	8010302 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80102f8:	79fb      	ldrb	r3, [r7, #7]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7ff ff80 	bl	8010200 <etharp_free_entry>
 8010300:	e04a      	b.n	8010398 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010302:	79fa      	ldrb	r2, [r7, #7]
 8010304:	492a      	ldr	r1, [pc, #168]	; (80103b0 <etharp_tmr+0x14c>)
 8010306:	4613      	mov	r3, r2
 8010308:	005b      	lsls	r3, r3, #1
 801030a:	4413      	add	r3, r2
 801030c:	00db      	lsls	r3, r3, #3
 801030e:	440b      	add	r3, r1
 8010310:	3314      	adds	r3, #20
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	2b03      	cmp	r3, #3
 8010316:	d10a      	bne.n	801032e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010318:	79fa      	ldrb	r2, [r7, #7]
 801031a:	4925      	ldr	r1, [pc, #148]	; (80103b0 <etharp_tmr+0x14c>)
 801031c:	4613      	mov	r3, r2
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4413      	add	r3, r2
 8010322:	00db      	lsls	r3, r3, #3
 8010324:	440b      	add	r3, r1
 8010326:	3314      	adds	r3, #20
 8010328:	2204      	movs	r2, #4
 801032a:	701a      	strb	r2, [r3, #0]
 801032c:	e034      	b.n	8010398 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801032e:	79fa      	ldrb	r2, [r7, #7]
 8010330:	491f      	ldr	r1, [pc, #124]	; (80103b0 <etharp_tmr+0x14c>)
 8010332:	4613      	mov	r3, r2
 8010334:	005b      	lsls	r3, r3, #1
 8010336:	4413      	add	r3, r2
 8010338:	00db      	lsls	r3, r3, #3
 801033a:	440b      	add	r3, r1
 801033c:	3314      	adds	r3, #20
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	2b04      	cmp	r3, #4
 8010342:	d10a      	bne.n	801035a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010344:	79fa      	ldrb	r2, [r7, #7]
 8010346:	491a      	ldr	r1, [pc, #104]	; (80103b0 <etharp_tmr+0x14c>)
 8010348:	4613      	mov	r3, r2
 801034a:	005b      	lsls	r3, r3, #1
 801034c:	4413      	add	r3, r2
 801034e:	00db      	lsls	r3, r3, #3
 8010350:	440b      	add	r3, r1
 8010352:	3314      	adds	r3, #20
 8010354:	2202      	movs	r2, #2
 8010356:	701a      	strb	r2, [r3, #0]
 8010358:	e01e      	b.n	8010398 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801035a:	79fa      	ldrb	r2, [r7, #7]
 801035c:	4914      	ldr	r1, [pc, #80]	; (80103b0 <etharp_tmr+0x14c>)
 801035e:	4613      	mov	r3, r2
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	4413      	add	r3, r2
 8010364:	00db      	lsls	r3, r3, #3
 8010366:	440b      	add	r3, r1
 8010368:	3314      	adds	r3, #20
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d113      	bne.n	8010398 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010370:	79fa      	ldrb	r2, [r7, #7]
 8010372:	490f      	ldr	r1, [pc, #60]	; (80103b0 <etharp_tmr+0x14c>)
 8010374:	4613      	mov	r3, r2
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	4413      	add	r3, r2
 801037a:	00db      	lsls	r3, r3, #3
 801037c:	440b      	add	r3, r1
 801037e:	3308      	adds	r3, #8
 8010380:	6818      	ldr	r0, [r3, #0]
 8010382:	79fa      	ldrb	r2, [r7, #7]
 8010384:	4613      	mov	r3, r2
 8010386:	005b      	lsls	r3, r3, #1
 8010388:	4413      	add	r3, r2
 801038a:	00db      	lsls	r3, r3, #3
 801038c:	4a08      	ldr	r2, [pc, #32]	; (80103b0 <etharp_tmr+0x14c>)
 801038e:	4413      	add	r3, r2
 8010390:	3304      	adds	r3, #4
 8010392:	4619      	mov	r1, r3
 8010394:	f000 fe3c 	bl	8011010 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010398:	79fb      	ldrb	r3, [r7, #7]
 801039a:	3301      	adds	r3, #1
 801039c:	71fb      	strb	r3, [r7, #7]
 801039e:	79fb      	ldrb	r3, [r7, #7]
 80103a0:	2b09      	cmp	r3, #9
 80103a2:	f67f af65 	bls.w	8010270 <etharp_tmr+0xc>
      }
    }
  }
}
 80103a6:	bf00      	nop
 80103a8:	3708      	adds	r7, #8
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	20000290 	.word	0x20000290

080103b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b088      	sub	sp, #32
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	460b      	mov	r3, r1
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80103c2:	230a      	movs	r3, #10
 80103c4:	77fb      	strb	r3, [r7, #31]
 80103c6:	230a      	movs	r3, #10
 80103c8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80103ca:	230a      	movs	r3, #10
 80103cc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80103d2:	230a      	movs	r3, #10
 80103d4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80103d6:	2300      	movs	r3, #0
 80103d8:	833b      	strh	r3, [r7, #24]
 80103da:	2300      	movs	r3, #0
 80103dc:	82fb      	strh	r3, [r7, #22]
 80103de:	2300      	movs	r3, #0
 80103e0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103e2:	2300      	movs	r3, #0
 80103e4:	773b      	strb	r3, [r7, #28]
 80103e6:	e093      	b.n	8010510 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80103e8:	7f3a      	ldrb	r2, [r7, #28]
 80103ea:	4990      	ldr	r1, [pc, #576]	; (801062c <etharp_find_entry+0x278>)
 80103ec:	4613      	mov	r3, r2
 80103ee:	005b      	lsls	r3, r3, #1
 80103f0:	4413      	add	r3, r2
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	440b      	add	r3, r1
 80103f6:	3314      	adds	r3, #20
 80103f8:	781b      	ldrb	r3, [r3, #0]
 80103fa:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80103fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010400:	2b0a      	cmp	r3, #10
 8010402:	d105      	bne.n	8010410 <etharp_find_entry+0x5c>
 8010404:	7cfb      	ldrb	r3, [r7, #19]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d102      	bne.n	8010410 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801040a:	7f3b      	ldrb	r3, [r7, #28]
 801040c:	777b      	strb	r3, [r7, #29]
 801040e:	e07c      	b.n	801050a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010410:	7cfb      	ldrb	r3, [r7, #19]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d079      	beq.n	801050a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010416:	7cfb      	ldrb	r3, [r7, #19]
 8010418:	2b01      	cmp	r3, #1
 801041a:	d009      	beq.n	8010430 <etharp_find_entry+0x7c>
 801041c:	7cfb      	ldrb	r3, [r7, #19]
 801041e:	2b01      	cmp	r3, #1
 8010420:	d806      	bhi.n	8010430 <etharp_find_entry+0x7c>
 8010422:	4b83      	ldr	r3, [pc, #524]	; (8010630 <etharp_find_entry+0x27c>)
 8010424:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010428:	4982      	ldr	r1, [pc, #520]	; (8010634 <etharp_find_entry+0x280>)
 801042a:	4883      	ldr	r0, [pc, #524]	; (8010638 <etharp_find_entry+0x284>)
 801042c:	f006 fdee 	bl	801700c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d00f      	beq.n	8010456 <etharp_find_entry+0xa2>
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	6819      	ldr	r1, [r3, #0]
 801043a:	7f3a      	ldrb	r2, [r7, #28]
 801043c:	487b      	ldr	r0, [pc, #492]	; (801062c <etharp_find_entry+0x278>)
 801043e:	4613      	mov	r3, r2
 8010440:	005b      	lsls	r3, r3, #1
 8010442:	4413      	add	r3, r2
 8010444:	00db      	lsls	r3, r3, #3
 8010446:	4403      	add	r3, r0
 8010448:	3304      	adds	r3, #4
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4299      	cmp	r1, r3
 801044e:	d102      	bne.n	8010456 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010450:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010454:	e0e5      	b.n	8010622 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010456:	7cfb      	ldrb	r3, [r7, #19]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d13b      	bne.n	80104d4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801045c:	7f3a      	ldrb	r2, [r7, #28]
 801045e:	4973      	ldr	r1, [pc, #460]	; (801062c <etharp_find_entry+0x278>)
 8010460:	4613      	mov	r3, r2
 8010462:	005b      	lsls	r3, r3, #1
 8010464:	4413      	add	r3, r2
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	440b      	add	r3, r1
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d018      	beq.n	80104a2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8010470:	7f3a      	ldrb	r2, [r7, #28]
 8010472:	496e      	ldr	r1, [pc, #440]	; (801062c <etharp_find_entry+0x278>)
 8010474:	4613      	mov	r3, r2
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	4413      	add	r3, r2
 801047a:	00db      	lsls	r3, r3, #3
 801047c:	440b      	add	r3, r1
 801047e:	3312      	adds	r3, #18
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	8b3a      	ldrh	r2, [r7, #24]
 8010484:	429a      	cmp	r2, r3
 8010486:	d840      	bhi.n	801050a <etharp_find_entry+0x156>
            old_queue = i;
 8010488:	7f3b      	ldrb	r3, [r7, #28]
 801048a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801048c:	7f3a      	ldrb	r2, [r7, #28]
 801048e:	4967      	ldr	r1, [pc, #412]	; (801062c <etharp_find_entry+0x278>)
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	440b      	add	r3, r1
 801049a:	3312      	adds	r3, #18
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	833b      	strh	r3, [r7, #24]
 80104a0:	e033      	b.n	801050a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80104a2:	7f3a      	ldrb	r2, [r7, #28]
 80104a4:	4961      	ldr	r1, [pc, #388]	; (801062c <etharp_find_entry+0x278>)
 80104a6:	4613      	mov	r3, r2
 80104a8:	005b      	lsls	r3, r3, #1
 80104aa:	4413      	add	r3, r2
 80104ac:	00db      	lsls	r3, r3, #3
 80104ae:	440b      	add	r3, r1
 80104b0:	3312      	adds	r3, #18
 80104b2:	881b      	ldrh	r3, [r3, #0]
 80104b4:	8afa      	ldrh	r2, [r7, #22]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d827      	bhi.n	801050a <etharp_find_entry+0x156>
            old_pending = i;
 80104ba:	7f3b      	ldrb	r3, [r7, #28]
 80104bc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80104be:	7f3a      	ldrb	r2, [r7, #28]
 80104c0:	495a      	ldr	r1, [pc, #360]	; (801062c <etharp_find_entry+0x278>)
 80104c2:	4613      	mov	r3, r2
 80104c4:	005b      	lsls	r3, r3, #1
 80104c6:	4413      	add	r3, r2
 80104c8:	00db      	lsls	r3, r3, #3
 80104ca:	440b      	add	r3, r1
 80104cc:	3312      	adds	r3, #18
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	82fb      	strh	r3, [r7, #22]
 80104d2:	e01a      	b.n	801050a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80104d4:	7cfb      	ldrb	r3, [r7, #19]
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d917      	bls.n	801050a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80104da:	7f3a      	ldrb	r2, [r7, #28]
 80104dc:	4953      	ldr	r1, [pc, #332]	; (801062c <etharp_find_entry+0x278>)
 80104de:	4613      	mov	r3, r2
 80104e0:	005b      	lsls	r3, r3, #1
 80104e2:	4413      	add	r3, r2
 80104e4:	00db      	lsls	r3, r3, #3
 80104e6:	440b      	add	r3, r1
 80104e8:	3312      	adds	r3, #18
 80104ea:	881b      	ldrh	r3, [r3, #0]
 80104ec:	8aba      	ldrh	r2, [r7, #20]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d80b      	bhi.n	801050a <etharp_find_entry+0x156>
            old_stable = i;
 80104f2:	7f3b      	ldrb	r3, [r7, #28]
 80104f4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80104f6:	7f3a      	ldrb	r2, [r7, #28]
 80104f8:	494c      	ldr	r1, [pc, #304]	; (801062c <etharp_find_entry+0x278>)
 80104fa:	4613      	mov	r3, r2
 80104fc:	005b      	lsls	r3, r3, #1
 80104fe:	4413      	add	r3, r2
 8010500:	00db      	lsls	r3, r3, #3
 8010502:	440b      	add	r3, r1
 8010504:	3312      	adds	r3, #18
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801050a:	7f3b      	ldrb	r3, [r7, #28]
 801050c:	3301      	adds	r3, #1
 801050e:	773b      	strb	r3, [r7, #28]
 8010510:	7f3b      	ldrb	r3, [r7, #28]
 8010512:	2b09      	cmp	r3, #9
 8010514:	f67f af68 	bls.w	80103e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010518:	7afb      	ldrb	r3, [r7, #11]
 801051a:	f003 0302 	and.w	r3, r3, #2
 801051e:	2b00      	cmp	r3, #0
 8010520:	d108      	bne.n	8010534 <etharp_find_entry+0x180>
 8010522:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010526:	2b0a      	cmp	r3, #10
 8010528:	d107      	bne.n	801053a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801052a:	7afb      	ldrb	r3, [r7, #11]
 801052c:	f003 0301 	and.w	r3, r3, #1
 8010530:	2b00      	cmp	r3, #0
 8010532:	d102      	bne.n	801053a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010538:	e073      	b.n	8010622 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801053a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801053e:	2b09      	cmp	r3, #9
 8010540:	dc02      	bgt.n	8010548 <etharp_find_entry+0x194>
    i = empty;
 8010542:	7f7b      	ldrb	r3, [r7, #29]
 8010544:	773b      	strb	r3, [r7, #28]
 8010546:	e036      	b.n	80105b6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010548:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801054c:	2b09      	cmp	r3, #9
 801054e:	dc13      	bgt.n	8010578 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8010550:	7fbb      	ldrb	r3, [r7, #30]
 8010552:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010554:	7f3a      	ldrb	r2, [r7, #28]
 8010556:	4935      	ldr	r1, [pc, #212]	; (801062c <etharp_find_entry+0x278>)
 8010558:	4613      	mov	r3, r2
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	4413      	add	r3, r2
 801055e:	00db      	lsls	r3, r3, #3
 8010560:	440b      	add	r3, r1
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d018      	beq.n	801059a <etharp_find_entry+0x1e6>
 8010568:	4b31      	ldr	r3, [pc, #196]	; (8010630 <etharp_find_entry+0x27c>)
 801056a:	f240 126f 	movw	r2, #367	; 0x16f
 801056e:	4933      	ldr	r1, [pc, #204]	; (801063c <etharp_find_entry+0x288>)
 8010570:	4831      	ldr	r0, [pc, #196]	; (8010638 <etharp_find_entry+0x284>)
 8010572:	f006 fd4b 	bl	801700c <iprintf>
 8010576:	e010      	b.n	801059a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010578:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801057c:	2b09      	cmp	r3, #9
 801057e:	dc02      	bgt.n	8010586 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8010580:	7ffb      	ldrb	r3, [r7, #31]
 8010582:	773b      	strb	r3, [r7, #28]
 8010584:	e009      	b.n	801059a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010586:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801058a:	2b09      	cmp	r3, #9
 801058c:	dc02      	bgt.n	8010594 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801058e:	7efb      	ldrb	r3, [r7, #27]
 8010590:	773b      	strb	r3, [r7, #28]
 8010592:	e002      	b.n	801059a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8010594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010598:	e043      	b.n	8010622 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801059a:	7f3b      	ldrb	r3, [r7, #28]
 801059c:	2b09      	cmp	r3, #9
 801059e:	d906      	bls.n	80105ae <etharp_find_entry+0x1fa>
 80105a0:	4b23      	ldr	r3, [pc, #140]	; (8010630 <etharp_find_entry+0x27c>)
 80105a2:	f240 1281 	movw	r2, #385	; 0x181
 80105a6:	4926      	ldr	r1, [pc, #152]	; (8010640 <etharp_find_entry+0x28c>)
 80105a8:	4823      	ldr	r0, [pc, #140]	; (8010638 <etharp_find_entry+0x284>)
 80105aa:	f006 fd2f 	bl	801700c <iprintf>
    etharp_free_entry(i);
 80105ae:	7f3b      	ldrb	r3, [r7, #28]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7ff fe25 	bl	8010200 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80105b6:	7f3b      	ldrb	r3, [r7, #28]
 80105b8:	2b09      	cmp	r3, #9
 80105ba:	d906      	bls.n	80105ca <etharp_find_entry+0x216>
 80105bc:	4b1c      	ldr	r3, [pc, #112]	; (8010630 <etharp_find_entry+0x27c>)
 80105be:	f240 1285 	movw	r2, #389	; 0x185
 80105c2:	491f      	ldr	r1, [pc, #124]	; (8010640 <etharp_find_entry+0x28c>)
 80105c4:	481c      	ldr	r0, [pc, #112]	; (8010638 <etharp_find_entry+0x284>)
 80105c6:	f006 fd21 	bl	801700c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80105ca:	7f3a      	ldrb	r2, [r7, #28]
 80105cc:	4917      	ldr	r1, [pc, #92]	; (801062c <etharp_find_entry+0x278>)
 80105ce:	4613      	mov	r3, r2
 80105d0:	005b      	lsls	r3, r3, #1
 80105d2:	4413      	add	r3, r2
 80105d4:	00db      	lsls	r3, r3, #3
 80105d6:	440b      	add	r3, r1
 80105d8:	3314      	adds	r3, #20
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d006      	beq.n	80105ee <etharp_find_entry+0x23a>
 80105e0:	4b13      	ldr	r3, [pc, #76]	; (8010630 <etharp_find_entry+0x27c>)
 80105e2:	f240 1287 	movw	r2, #391	; 0x187
 80105e6:	4917      	ldr	r1, [pc, #92]	; (8010644 <etharp_find_entry+0x290>)
 80105e8:	4813      	ldr	r0, [pc, #76]	; (8010638 <etharp_find_entry+0x284>)
 80105ea:	f006 fd0f 	bl	801700c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d00a      	beq.n	801060a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80105f4:	7f3a      	ldrb	r2, [r7, #28]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6819      	ldr	r1, [r3, #0]
 80105fa:	480c      	ldr	r0, [pc, #48]	; (801062c <etharp_find_entry+0x278>)
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	4403      	add	r3, r0
 8010606:	3304      	adds	r3, #4
 8010608:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801060a:	7f3a      	ldrb	r2, [r7, #28]
 801060c:	4907      	ldr	r1, [pc, #28]	; (801062c <etharp_find_entry+0x278>)
 801060e:	4613      	mov	r3, r2
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	4413      	add	r3, r2
 8010614:	00db      	lsls	r3, r3, #3
 8010616:	440b      	add	r3, r1
 8010618:	3312      	adds	r3, #18
 801061a:	2200      	movs	r2, #0
 801061c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801061e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3720      	adds	r7, #32
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	20000290 	.word	0x20000290
 8010630:	0801a9a4 	.word	0x0801a9a4
 8010634:	0801a9dc 	.word	0x0801a9dc
 8010638:	0801aa1c 	.word	0x0801aa1c
 801063c:	0801aa44 	.word	0x0801aa44
 8010640:	0801aa5c 	.word	0x0801aa5c
 8010644:	0801aa70 	.word	0x0801aa70

08010648 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b088      	sub	sp, #32
 801064c:	af02      	add	r7, sp, #8
 801064e:	60f8      	str	r0, [r7, #12]
 8010650:	60b9      	str	r1, [r7, #8]
 8010652:	607a      	str	r2, [r7, #4]
 8010654:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801065c:	2b06      	cmp	r3, #6
 801065e:	d006      	beq.n	801066e <etharp_update_arp_entry+0x26>
 8010660:	4b48      	ldr	r3, [pc, #288]	; (8010784 <etharp_update_arp_entry+0x13c>)
 8010662:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010666:	4948      	ldr	r1, [pc, #288]	; (8010788 <etharp_update_arp_entry+0x140>)
 8010668:	4848      	ldr	r0, [pc, #288]	; (801078c <etharp_update_arp_entry+0x144>)
 801066a:	f006 fccf 	bl	801700c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d012      	beq.n	801069a <etharp_update_arp_entry+0x52>
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00e      	beq.n	801069a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68f9      	ldr	r1, [r7, #12]
 8010682:	4618      	mov	r0, r3
 8010684:	f001 f8fc 	bl	8011880 <ip4_addr_isbroadcast_u32>
 8010688:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010696:	2be0      	cmp	r3, #224	; 0xe0
 8010698:	d102      	bne.n	80106a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801069a:	f06f 030f 	mvn.w	r3, #15
 801069e:	e06c      	b.n	801077a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80106a0:	78fb      	ldrb	r3, [r7, #3]
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	4619      	mov	r1, r3
 80106a6:	68b8      	ldr	r0, [r7, #8]
 80106a8:	f7ff fe84 	bl	80103b4 <etharp_find_entry>
 80106ac:	4603      	mov	r3, r0
 80106ae:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80106b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	da02      	bge.n	80106be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80106b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106bc:	e05d      	b.n	801077a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80106be:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80106c2:	4933      	ldr	r1, [pc, #204]	; (8010790 <etharp_update_arp_entry+0x148>)
 80106c4:	4613      	mov	r3, r2
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	4413      	add	r3, r2
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	440b      	add	r3, r1
 80106ce:	3314      	adds	r3, #20
 80106d0:	2202      	movs	r2, #2
 80106d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80106d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80106d8:	492d      	ldr	r1, [pc, #180]	; (8010790 <etharp_update_arp_entry+0x148>)
 80106da:	4613      	mov	r3, r2
 80106dc:	005b      	lsls	r3, r3, #1
 80106de:	4413      	add	r3, r2
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	440b      	add	r3, r1
 80106e4:	3308      	adds	r3, #8
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80106ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80106ee:	4613      	mov	r3, r2
 80106f0:	005b      	lsls	r3, r3, #1
 80106f2:	4413      	add	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	3308      	adds	r3, #8
 80106f8:	4a25      	ldr	r2, [pc, #148]	; (8010790 <etharp_update_arp_entry+0x148>)
 80106fa:	4413      	add	r3, r2
 80106fc:	3304      	adds	r3, #4
 80106fe:	2206      	movs	r2, #6
 8010700:	6879      	ldr	r1, [r7, #4]
 8010702:	4618      	mov	r0, r3
 8010704:	f006 fbc7 	bl	8016e96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010708:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801070c:	4920      	ldr	r1, [pc, #128]	; (8010790 <etharp_update_arp_entry+0x148>)
 801070e:	4613      	mov	r3, r2
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	4413      	add	r3, r2
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	440b      	add	r3, r1
 8010718:	3312      	adds	r3, #18
 801071a:	2200      	movs	r2, #0
 801071c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801071e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010722:	491b      	ldr	r1, [pc, #108]	; (8010790 <etharp_update_arp_entry+0x148>)
 8010724:	4613      	mov	r3, r2
 8010726:	005b      	lsls	r3, r3, #1
 8010728:	4413      	add	r3, r2
 801072a:	00db      	lsls	r3, r3, #3
 801072c:	440b      	add	r3, r1
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d021      	beq.n	8010778 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010734:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010738:	4915      	ldr	r1, [pc, #84]	; (8010790 <etharp_update_arp_entry+0x148>)
 801073a:	4613      	mov	r3, r2
 801073c:	005b      	lsls	r3, r3, #1
 801073e:	4413      	add	r3, r2
 8010740:	00db      	lsls	r3, r3, #3
 8010742:	440b      	add	r3, r1
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010748:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801074c:	4910      	ldr	r1, [pc, #64]	; (8010790 <etharp_update_arp_entry+0x148>)
 801074e:	4613      	mov	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4413      	add	r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	2200      	movs	r2, #0
 801075a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6939      	ldr	r1, [r7, #16]
 801076c:	68f8      	ldr	r0, [r7, #12]
 801076e:	f001 ff29 	bl	80125c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010772:	6938      	ldr	r0, [r7, #16]
 8010774:	f7f8 fb58 	bl	8008e28 <pbuf_free>
  }
  return ERR_OK;
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3718      	adds	r7, #24
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	0801a9a4 	.word	0x0801a9a4
 8010788:	0801aa9c 	.word	0x0801aa9c
 801078c:	0801aa1c 	.word	0x0801aa1c
 8010790:	20000290 	.word	0x20000290

08010794 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801079c:	2300      	movs	r3, #0
 801079e:	73fb      	strb	r3, [r7, #15]
 80107a0:	e01f      	b.n	80107e2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80107a2:	7bfa      	ldrb	r2, [r7, #15]
 80107a4:	4912      	ldr	r1, [pc, #72]	; (80107f0 <etharp_cleanup_netif+0x5c>)
 80107a6:	4613      	mov	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	4413      	add	r3, r2
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	440b      	add	r3, r1
 80107b0:	3314      	adds	r3, #20
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80107b6:	7bbb      	ldrb	r3, [r7, #14]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d00f      	beq.n	80107dc <etharp_cleanup_netif+0x48>
 80107bc:	7bfa      	ldrb	r2, [r7, #15]
 80107be:	490c      	ldr	r1, [pc, #48]	; (80107f0 <etharp_cleanup_netif+0x5c>)
 80107c0:	4613      	mov	r3, r2
 80107c2:	005b      	lsls	r3, r3, #1
 80107c4:	4413      	add	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	440b      	add	r3, r1
 80107ca:	3308      	adds	r3, #8
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d103      	bne.n	80107dc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80107d4:	7bfb      	ldrb	r3, [r7, #15]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7ff fd12 	bl	8010200 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107dc:	7bfb      	ldrb	r3, [r7, #15]
 80107de:	3301      	adds	r3, #1
 80107e0:	73fb      	strb	r3, [r7, #15]
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	2b09      	cmp	r3, #9
 80107e6:	d9dc      	bls.n	80107a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80107e8:	bf00      	nop
 80107ea:	3710      	adds	r7, #16
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	20000290 	.word	0x20000290

080107f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80107f4:	b5b0      	push	{r4, r5, r7, lr}
 80107f6:	b08a      	sub	sp, #40	; 0x28
 80107f8:	af04      	add	r7, sp, #16
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d107      	bne.n	8010814 <etharp_input+0x20>
 8010804:	4b3f      	ldr	r3, [pc, #252]	; (8010904 <etharp_input+0x110>)
 8010806:	f44f 7222 	mov.w	r2, #648	; 0x288
 801080a:	493f      	ldr	r1, [pc, #252]	; (8010908 <etharp_input+0x114>)
 801080c:	483f      	ldr	r0, [pc, #252]	; (801090c <etharp_input+0x118>)
 801080e:	f006 fbfd 	bl	801700c <iprintf>
 8010812:	e074      	b.n	80108fe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	685b      	ldr	r3, [r3, #4]
 8010818:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	881b      	ldrh	r3, [r3, #0]
 801081e:	b29b      	uxth	r3, r3
 8010820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010824:	d10c      	bne.n	8010840 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801082a:	2b06      	cmp	r3, #6
 801082c:	d108      	bne.n	8010840 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010832:	2b04      	cmp	r3, #4
 8010834:	d104      	bne.n	8010840 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	885b      	ldrh	r3, [r3, #2]
 801083a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801083c:	2b08      	cmp	r3, #8
 801083e:	d003      	beq.n	8010848 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7f8 faf1 	bl	8008e28 <pbuf_free>
    return;
 8010846:	e05a      	b.n	80108fe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	330e      	adds	r3, #14
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	3318      	adds	r3, #24
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	3304      	adds	r3, #4
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d102      	bne.n	8010868 <etharp_input+0x74>
    for_us = 0;
 8010862:	2300      	movs	r3, #0
 8010864:	75fb      	strb	r3, [r7, #23]
 8010866:	e009      	b.n	801087c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010868:	68ba      	ldr	r2, [r7, #8]
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	3304      	adds	r3, #4
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	429a      	cmp	r2, r3
 8010872:	bf0c      	ite	eq
 8010874:	2301      	moveq	r3, #1
 8010876:	2300      	movne	r3, #0
 8010878:	b2db      	uxtb	r3, r3
 801087a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	f103 0208 	add.w	r2, r3, #8
 8010882:	7dfb      	ldrb	r3, [r7, #23]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <etharp_input+0x98>
 8010888:	2301      	movs	r3, #1
 801088a:	e000      	b.n	801088e <etharp_input+0x9a>
 801088c:	2302      	movs	r3, #2
 801088e:	f107 010c 	add.w	r1, r7, #12
 8010892:	6838      	ldr	r0, [r7, #0]
 8010894:	f7ff fed8 	bl	8010648 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	88db      	ldrh	r3, [r3, #6]
 801089c:	b29b      	uxth	r3, r3
 801089e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108a2:	d003      	beq.n	80108ac <etharp_input+0xb8>
 80108a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108a8:	d01e      	beq.n	80108e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80108aa:	e025      	b.n	80108f8 <etharp_input+0x104>
    if (for_us) {
 80108ac:	7dfb      	ldrb	r3, [r7, #23]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d021      	beq.n	80108f6 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80108c8:	693a      	ldr	r2, [r7, #16]
 80108ca:	3208      	adds	r2, #8
      etharp_raw(netif,
 80108cc:	2102      	movs	r1, #2
 80108ce:	9103      	str	r1, [sp, #12]
 80108d0:	f107 010c 	add.w	r1, r7, #12
 80108d4:	9102      	str	r1, [sp, #8]
 80108d6:	9201      	str	r2, [sp, #4]
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	462b      	mov	r3, r5
 80108dc:	4622      	mov	r2, r4
 80108de:	4601      	mov	r1, r0
 80108e0:	6838      	ldr	r0, [r7, #0]
 80108e2:	f000 fae7 	bl	8010eb4 <etharp_raw>
    break;
 80108e6:	e006      	b.n	80108f6 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80108e8:	f107 030c 	add.w	r3, r7, #12
 80108ec:	4619      	mov	r1, r3
 80108ee:	6838      	ldr	r0, [r7, #0]
 80108f0:	f7fe fd32 	bl	800f358 <dhcp_arp_reply>
    break;
 80108f4:	e000      	b.n	80108f8 <etharp_input+0x104>
    break;
 80108f6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7f8 fa95 	bl	8008e28 <pbuf_free>
}
 80108fe:	3718      	adds	r7, #24
 8010900:	46bd      	mov	sp, r7
 8010902:	bdb0      	pop	{r4, r5, r7, pc}
 8010904:	0801a9a4 	.word	0x0801a9a4
 8010908:	0801aaf4 	.word	0x0801aaf4
 801090c:	0801aa1c 	.word	0x0801aa1c

08010910 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b086      	sub	sp, #24
 8010914:	af02      	add	r7, sp, #8
 8010916:	60f8      	str	r0, [r7, #12]
 8010918:	60b9      	str	r1, [r7, #8]
 801091a:	4613      	mov	r3, r2
 801091c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801091e:	79fa      	ldrb	r2, [r7, #7]
 8010920:	4944      	ldr	r1, [pc, #272]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 8010922:	4613      	mov	r3, r2
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	4413      	add	r3, r2
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	440b      	add	r3, r1
 801092c:	3314      	adds	r3, #20
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	2b01      	cmp	r3, #1
 8010932:	d806      	bhi.n	8010942 <etharp_output_to_arp_index+0x32>
 8010934:	4b40      	ldr	r3, [pc, #256]	; (8010a38 <etharp_output_to_arp_index+0x128>)
 8010936:	f240 22ed 	movw	r2, #749	; 0x2ed
 801093a:	4940      	ldr	r1, [pc, #256]	; (8010a3c <etharp_output_to_arp_index+0x12c>)
 801093c:	4840      	ldr	r0, [pc, #256]	; (8010a40 <etharp_output_to_arp_index+0x130>)
 801093e:	f006 fb65 	bl	801700c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010942:	79fa      	ldrb	r2, [r7, #7]
 8010944:	493b      	ldr	r1, [pc, #236]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 8010946:	4613      	mov	r3, r2
 8010948:	005b      	lsls	r3, r3, #1
 801094a:	4413      	add	r3, r2
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	440b      	add	r3, r1
 8010950:	3314      	adds	r3, #20
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	2b02      	cmp	r3, #2
 8010956:	d153      	bne.n	8010a00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010958:	79fa      	ldrb	r2, [r7, #7]
 801095a:	4936      	ldr	r1, [pc, #216]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 801095c:	4613      	mov	r3, r2
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	4413      	add	r3, r2
 8010962:	00db      	lsls	r3, r3, #3
 8010964:	440b      	add	r3, r1
 8010966:	3312      	adds	r3, #18
 8010968:	881b      	ldrh	r3, [r3, #0]
 801096a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801096e:	d919      	bls.n	80109a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010970:	79fa      	ldrb	r2, [r7, #7]
 8010972:	4613      	mov	r3, r2
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	4413      	add	r3, r2
 8010978:	00db      	lsls	r3, r3, #3
 801097a:	4a2e      	ldr	r2, [pc, #184]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 801097c:	4413      	add	r3, r2
 801097e:	3304      	adds	r3, #4
 8010980:	4619      	mov	r1, r3
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f000 fb44 	bl	8011010 <etharp_request>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d138      	bne.n	8010a00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801098e:	79fa      	ldrb	r2, [r7, #7]
 8010990:	4928      	ldr	r1, [pc, #160]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	3314      	adds	r3, #20
 801099e:	2203      	movs	r2, #3
 80109a0:	701a      	strb	r2, [r3, #0]
 80109a2:	e02d      	b.n	8010a00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80109a4:	79fa      	ldrb	r2, [r7, #7]
 80109a6:	4923      	ldr	r1, [pc, #140]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 80109a8:	4613      	mov	r3, r2
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	4413      	add	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	440b      	add	r3, r1
 80109b2:	3312      	adds	r3, #18
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80109ba:	d321      	bcc.n	8010a00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80109bc:	79fa      	ldrb	r2, [r7, #7]
 80109be:	4613      	mov	r3, r2
 80109c0:	005b      	lsls	r3, r3, #1
 80109c2:	4413      	add	r3, r2
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	4a1b      	ldr	r2, [pc, #108]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 80109c8:	4413      	add	r3, r2
 80109ca:	1d19      	adds	r1, r3, #4
 80109cc:	79fa      	ldrb	r2, [r7, #7]
 80109ce:	4613      	mov	r3, r2
 80109d0:	005b      	lsls	r3, r3, #1
 80109d2:	4413      	add	r3, r2
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	3308      	adds	r3, #8
 80109d8:	4a16      	ldr	r2, [pc, #88]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 80109da:	4413      	add	r3, r2
 80109dc:	3304      	adds	r3, #4
 80109de:	461a      	mov	r2, r3
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f000 faf3 	bl	8010fcc <etharp_request_dst>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d109      	bne.n	8010a00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80109ec:	79fa      	ldrb	r2, [r7, #7]
 80109ee:	4911      	ldr	r1, [pc, #68]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 80109f0:	4613      	mov	r3, r2
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	4413      	add	r3, r2
 80109f6:	00db      	lsls	r3, r3, #3
 80109f8:	440b      	add	r3, r1
 80109fa:	3314      	adds	r3, #20
 80109fc:	2203      	movs	r2, #3
 80109fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8010a06:	79fa      	ldrb	r2, [r7, #7]
 8010a08:	4613      	mov	r3, r2
 8010a0a:	005b      	lsls	r3, r3, #1
 8010a0c:	4413      	add	r3, r2
 8010a0e:	00db      	lsls	r3, r3, #3
 8010a10:	3308      	adds	r3, #8
 8010a12:	4a08      	ldr	r2, [pc, #32]	; (8010a34 <etharp_output_to_arp_index+0x124>)
 8010a14:	4413      	add	r3, r2
 8010a16:	1d1a      	adds	r2, r3, #4
 8010a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	460a      	mov	r2, r1
 8010a22:	68b9      	ldr	r1, [r7, #8]
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f001 fdcd 	bl	80125c4 <ethernet_output>
 8010a2a:	4603      	mov	r3, r0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	20000290 	.word	0x20000290
 8010a38:	0801a9a4 	.word	0x0801a9a4
 8010a3c:	0801ab14 	.word	0x0801ab14
 8010a40:	0801aa1c 	.word	0x0801aa1c

08010a44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b08a      	sub	sp, #40	; 0x28
 8010a48:	af02      	add	r7, sp, #8
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	60b9      	str	r1, [r7, #8]
 8010a4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <etharp_output+0x24>
 8010a5a:	4b69      	ldr	r3, [pc, #420]	; (8010c00 <etharp_output+0x1bc>)
 8010a5c:	f240 321b 	movw	r2, #795	; 0x31b
 8010a60:	4968      	ldr	r1, [pc, #416]	; (8010c04 <etharp_output+0x1c0>)
 8010a62:	4869      	ldr	r0, [pc, #420]	; (8010c08 <etharp_output+0x1c4>)
 8010a64:	f006 fad2 	bl	801700c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d106      	bne.n	8010a7c <etharp_output+0x38>
 8010a6e:	4b64      	ldr	r3, [pc, #400]	; (8010c00 <etharp_output+0x1bc>)
 8010a70:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010a74:	4965      	ldr	r1, [pc, #404]	; (8010c0c <etharp_output+0x1c8>)
 8010a76:	4864      	ldr	r0, [pc, #400]	; (8010c08 <etharp_output+0x1c4>)
 8010a78:	f006 fac8 	bl	801700c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <etharp_output+0x4c>
 8010a82:	4b5f      	ldr	r3, [pc, #380]	; (8010c00 <etharp_output+0x1bc>)
 8010a84:	f240 321d 	movw	r2, #797	; 0x31d
 8010a88:	4961      	ldr	r1, [pc, #388]	; (8010c10 <etharp_output+0x1cc>)
 8010a8a:	485f      	ldr	r0, [pc, #380]	; (8010c08 <etharp_output+0x1c4>)
 8010a8c:	f006 fabe 	bl	801700c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	68f9      	ldr	r1, [r7, #12]
 8010a96:	4618      	mov	r0, r3
 8010a98:	f000 fef2 	bl	8011880 <ip4_addr_isbroadcast_u32>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d002      	beq.n	8010aa8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010aa2:	4b5c      	ldr	r3, [pc, #368]	; (8010c14 <etharp_output+0x1d0>)
 8010aa4:	61fb      	str	r3, [r7, #28]
 8010aa6:	e09b      	b.n	8010be0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ab0:	2be0      	cmp	r3, #224	; 0xe0
 8010ab2:	d118      	bne.n	8010ae6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010abc:	235e      	movs	r3, #94	; 0x5e
 8010abe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3302      	adds	r3, #2
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	3303      	adds	r3, #3
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010ade:	f107 0310 	add.w	r3, r7, #16
 8010ae2:	61fb      	str	r3, [r7, #28]
 8010ae4:	e07c      	b.n	8010be0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3304      	adds	r3, #4
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	405a      	eors	r2, r3
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	3308      	adds	r3, #8
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4013      	ands	r3, r2
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d012      	beq.n	8010b24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b04:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d00b      	beq.n	8010b24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	330c      	adds	r3, #12
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d003      	beq.n	8010b1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	330c      	adds	r3, #12
 8010b1a:	61bb      	str	r3, [r7, #24]
 8010b1c:	e002      	b.n	8010b24 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010b1e:	f06f 0303 	mvn.w	r3, #3
 8010b22:	e069      	b.n	8010bf8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b24:	4b3c      	ldr	r3, [pc, #240]	; (8010c18 <etharp_output+0x1d4>)
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	4a3c      	ldr	r2, [pc, #240]	; (8010c1c <etharp_output+0x1d8>)
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	440b      	add	r3, r1
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	4413      	add	r3, r2
 8010b36:	3314      	adds	r3, #20
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d917      	bls.n	8010b6e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010b3e:	69bb      	ldr	r3, [r7, #24]
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	4b35      	ldr	r3, [pc, #212]	; (8010c18 <etharp_output+0x1d4>)
 8010b44:	781b      	ldrb	r3, [r3, #0]
 8010b46:	4618      	mov	r0, r3
 8010b48:	4934      	ldr	r1, [pc, #208]	; (8010c1c <etharp_output+0x1d8>)
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4403      	add	r3, r0
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	440b      	add	r3, r1
 8010b54:	3304      	adds	r3, #4
 8010b56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d108      	bne.n	8010b6e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010b5c:	4b2e      	ldr	r3, [pc, #184]	; (8010c18 <etharp_output+0x1d4>)
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	461a      	mov	r2, r3
 8010b62:	68b9      	ldr	r1, [r7, #8]
 8010b64:	68f8      	ldr	r0, [r7, #12]
 8010b66:	f7ff fed3 	bl	8010910 <etharp_output_to_arp_index>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	e044      	b.n	8010bf8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010b6e:	2300      	movs	r3, #0
 8010b70:	75fb      	strb	r3, [r7, #23]
 8010b72:	e02a      	b.n	8010bca <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010b74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b78:	4928      	ldr	r1, [pc, #160]	; (8010c1c <etharp_output+0x1d8>)
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	440b      	add	r3, r1
 8010b84:	3314      	adds	r3, #20
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d918      	bls.n	8010bbe <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	6819      	ldr	r1, [r3, #0]
 8010b90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010b94:	4821      	ldr	r0, [pc, #132]	; (8010c1c <etharp_output+0x1d8>)
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	4403      	add	r3, r0
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ba4:	4299      	cmp	r1, r3
 8010ba6:	d10a      	bne.n	8010bbe <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010ba8:	7dfa      	ldrb	r2, [r7, #23]
 8010baa:	4b1b      	ldr	r3, [pc, #108]	; (8010c18 <etharp_output+0x1d4>)
 8010bac:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010bae:	7dfb      	ldrb	r3, [r7, #23]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	68b9      	ldr	r1, [r7, #8]
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f7ff feab 	bl	8010910 <etharp_output_to_arp_index>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	e01c      	b.n	8010bf8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	75fb      	strb	r3, [r7, #23]
 8010bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010bce:	2b09      	cmp	r3, #9
 8010bd0:	ddd0      	ble.n	8010b74 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010bd2:	68ba      	ldr	r2, [r7, #8]
 8010bd4:	69b9      	ldr	r1, [r7, #24]
 8010bd6:	68f8      	ldr	r0, [r7, #12]
 8010bd8:	f000 f822 	bl	8010c20 <etharp_query>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	e00b      	b.n	8010bf8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bea:	9300      	str	r3, [sp, #0]
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f001 fce7 	bl	80125c4 <ethernet_output>
 8010bf6:	4603      	mov	r3, r0
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3720      	adds	r7, #32
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	0801a9a4 	.word	0x0801a9a4
 8010c04:	0801aaf4 	.word	0x0801aaf4
 8010c08:	0801aa1c 	.word	0x0801aa1c
 8010c0c:	0801ab44 	.word	0x0801ab44
 8010c10:	0801aae4 	.word	0x0801aae4
 8010c14:	0801b348 	.word	0x0801b348
 8010c18:	20000380 	.word	0x20000380
 8010c1c:	20000290 	.word	0x20000290

08010c20 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08c      	sub	sp, #48	; 0x30
 8010c24:	af02      	add	r7, sp, #8
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	3329      	adds	r3, #41	; 0x29
 8010c30:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010c32:	23ff      	movs	r3, #255	; 0xff
 8010c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	68f9      	ldr	r1, [r7, #12]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 fe1c 	bl	8011880 <ip4_addr_isbroadcast_u32>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10c      	bne.n	8010c68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c56:	2be0      	cmp	r3, #224	; 0xe0
 8010c58:	d006      	beq.n	8010c68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d003      	beq.n	8010c68 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d102      	bne.n	8010c6e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010c68:	f06f 030f 	mvn.w	r3, #15
 8010c6c:	e10f      	b.n	8010e8e <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	2101      	movs	r1, #1
 8010c72:	68b8      	ldr	r0, [r7, #8]
 8010c74:	f7ff fb9e 	bl	80103b4 <etharp_find_entry>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010c7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	da02      	bge.n	8010c8a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c88:	e101      	b.n	8010e8e <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010c8a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010c8e:	4982      	ldr	r1, [pc, #520]	; (8010e98 <etharp_query+0x278>)
 8010c90:	4613      	mov	r3, r2
 8010c92:	005b      	lsls	r3, r3, #1
 8010c94:	4413      	add	r3, r2
 8010c96:	00db      	lsls	r3, r3, #3
 8010c98:	440b      	add	r3, r1
 8010c9a:	3314      	adds	r3, #20
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d117      	bne.n	8010cd2 <etharp_query+0xb2>
    is_new_entry = 1;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010ca6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010caa:	497b      	ldr	r1, [pc, #492]	; (8010e98 <etharp_query+0x278>)
 8010cac:	4613      	mov	r3, r2
 8010cae:	005b      	lsls	r3, r3, #1
 8010cb0:	4413      	add	r3, r2
 8010cb2:	00db      	lsls	r3, r3, #3
 8010cb4:	440b      	add	r3, r1
 8010cb6:	3314      	adds	r3, #20
 8010cb8:	2201      	movs	r2, #1
 8010cba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010cbc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cc0:	4975      	ldr	r1, [pc, #468]	; (8010e98 <etharp_query+0x278>)
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	4413      	add	r3, r2
 8010cc8:	00db      	lsls	r3, r3, #3
 8010cca:	440b      	add	r3, r1
 8010ccc:	3308      	adds	r3, #8
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010cd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cd6:	4970      	ldr	r1, [pc, #448]	; (8010e98 <etharp_query+0x278>)
 8010cd8:	4613      	mov	r3, r2
 8010cda:	005b      	lsls	r3, r3, #1
 8010cdc:	4413      	add	r3, r2
 8010cde:	00db      	lsls	r3, r3, #3
 8010ce0:	440b      	add	r3, r1
 8010ce2:	3314      	adds	r3, #20
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d012      	beq.n	8010d10 <etharp_query+0xf0>
 8010cea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cee:	496a      	ldr	r1, [pc, #424]	; (8010e98 <etharp_query+0x278>)
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	005b      	lsls	r3, r3, #1
 8010cf4:	4413      	add	r3, r2
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	440b      	add	r3, r1
 8010cfa:	3314      	adds	r3, #20
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d806      	bhi.n	8010d10 <etharp_query+0xf0>
 8010d02:	4b66      	ldr	r3, [pc, #408]	; (8010e9c <etharp_query+0x27c>)
 8010d04:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010d08:	4965      	ldr	r1, [pc, #404]	; (8010ea0 <etharp_query+0x280>)
 8010d0a:	4866      	ldr	r0, [pc, #408]	; (8010ea4 <etharp_query+0x284>)
 8010d0c:	f006 f97e 	bl	801700c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010d10:	6a3b      	ldr	r3, [r7, #32]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d102      	bne.n	8010d1c <etharp_query+0xfc>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10c      	bne.n	8010d36 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010d1c:	68b9      	ldr	r1, [r7, #8]
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	f000 f976 	bl	8011010 <etharp_request>
 8010d24:	4603      	mov	r3, r0
 8010d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d102      	bne.n	8010d36 <etharp_query+0x116>
      return result;
 8010d30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d34:	e0ab      	b.n	8010e8e <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d106      	bne.n	8010d4a <etharp_query+0x12a>
 8010d3c:	4b57      	ldr	r3, [pc, #348]	; (8010e9c <etharp_query+0x27c>)
 8010d3e:	f240 32db 	movw	r2, #987	; 0x3db
 8010d42:	4959      	ldr	r1, [pc, #356]	; (8010ea8 <etharp_query+0x288>)
 8010d44:	4857      	ldr	r0, [pc, #348]	; (8010ea4 <etharp_query+0x284>)
 8010d46:	f006 f961 	bl	801700c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010d4a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d4e:	4952      	ldr	r1, [pc, #328]	; (8010e98 <etharp_query+0x278>)
 8010d50:	4613      	mov	r3, r2
 8010d52:	005b      	lsls	r3, r3, #1
 8010d54:	4413      	add	r3, r2
 8010d56:	00db      	lsls	r3, r3, #3
 8010d58:	440b      	add	r3, r1
 8010d5a:	3314      	adds	r3, #20
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d919      	bls.n	8010d96 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8010d62:	7cfa      	ldrb	r2, [r7, #19]
 8010d64:	4b51      	ldr	r3, [pc, #324]	; (8010eac <etharp_query+0x28c>)
 8010d66:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010d68:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	005b      	lsls	r3, r3, #1
 8010d70:	4413      	add	r3, r2
 8010d72:	00db      	lsls	r3, r3, #3
 8010d74:	3308      	adds	r3, #8
 8010d76:	4a48      	ldr	r2, [pc, #288]	; (8010e98 <etharp_query+0x278>)
 8010d78:	4413      	add	r3, r2
 8010d7a:	1d1a      	adds	r2, r3, #4
 8010d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d80:	9300      	str	r3, [sp, #0]
 8010d82:	4613      	mov	r3, r2
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	6879      	ldr	r1, [r7, #4]
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f001 fc1b 	bl	80125c4 <ethernet_output>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d94:	e079      	b.n	8010e8a <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010d96:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d9a:	493f      	ldr	r1, [pc, #252]	; (8010e98 <etharp_query+0x278>)
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	005b      	lsls	r3, r3, #1
 8010da0:	4413      	add	r3, r2
 8010da2:	00db      	lsls	r3, r3, #3
 8010da4:	440b      	add	r3, r1
 8010da6:	3314      	adds	r3, #20
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d16d      	bne.n	8010e8a <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010db6:	e01a      	b.n	8010dee <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	895a      	ldrh	r2, [r3, #10]
 8010dbc:	69fb      	ldr	r3, [r7, #28]
 8010dbe:	891b      	ldrh	r3, [r3, #8]
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d10a      	bne.n	8010dda <etharp_query+0x1ba>
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d006      	beq.n	8010dda <etharp_query+0x1ba>
 8010dcc:	4b33      	ldr	r3, [pc, #204]	; (8010e9c <etharp_query+0x27c>)
 8010dce:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8010dd2:	4937      	ldr	r1, [pc, #220]	; (8010eb0 <etharp_query+0x290>)
 8010dd4:	4833      	ldr	r0, [pc, #204]	; (8010ea4 <etharp_query+0x284>)
 8010dd6:	f006 f919 	bl	801700c <iprintf>
      if (p->type != PBUF_ROM) {
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	7b1b      	ldrb	r3, [r3, #12]
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d002      	beq.n	8010de8 <etharp_query+0x1c8>
        copy_needed = 1;
 8010de2:	2301      	movs	r3, #1
 8010de4:	61bb      	str	r3, [r7, #24]
        break;
 8010de6:	e005      	b.n	8010df4 <etharp_query+0x1d4>
      }
      p = p->next;
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1e1      	bne.n	8010db8 <etharp_query+0x198>
    }
    if (copy_needed) {
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d017      	beq.n	8010e2a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	891b      	ldrh	r3, [r3, #8]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	4619      	mov	r1, r3
 8010e02:	2002      	movs	r0, #2
 8010e04:	f7f7 fc9e 	bl	8008744 <pbuf_alloc>
 8010e08:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d011      	beq.n	8010e34 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010e10:	6879      	ldr	r1, [r7, #4]
 8010e12:	69f8      	ldr	r0, [r7, #28]
 8010e14:	f7f8 f93c 	bl	8009090 <pbuf_copy>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00a      	beq.n	8010e34 <etharp_query+0x214>
          pbuf_free(p);
 8010e1e:	69f8      	ldr	r0, [r7, #28]
 8010e20:	f7f8 f802 	bl	8008e28 <pbuf_free>
          p = NULL;
 8010e24:	2300      	movs	r3, #0
 8010e26:	61fb      	str	r3, [r7, #28]
 8010e28:	e004      	b.n	8010e34 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010e2e:	69f8      	ldr	r0, [r7, #28]
 8010e30:	f7f8 f8a6 	bl	8008f80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d024      	beq.n	8010e84 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010e3a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e3e:	4916      	ldr	r1, [pc, #88]	; (8010e98 <etharp_query+0x278>)
 8010e40:	4613      	mov	r3, r2
 8010e42:	005b      	lsls	r3, r3, #1
 8010e44:	4413      	add	r3, r2
 8010e46:	00db      	lsls	r3, r3, #3
 8010e48:	440b      	add	r3, r1
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00b      	beq.n	8010e68 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8010e50:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e54:	4910      	ldr	r1, [pc, #64]	; (8010e98 <etharp_query+0x278>)
 8010e56:	4613      	mov	r3, r2
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	4413      	add	r3, r2
 8010e5c:	00db      	lsls	r3, r3, #3
 8010e5e:	440b      	add	r3, r1
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7f7 ffe0 	bl	8008e28 <pbuf_free>
      }
      arp_table[i].q = p;
 8010e68:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010e6c:	490a      	ldr	r1, [pc, #40]	; (8010e98 <etharp_query+0x278>)
 8010e6e:	4613      	mov	r3, r2
 8010e70:	005b      	lsls	r3, r3, #1
 8010e72:	4413      	add	r3, r2
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	440b      	add	r3, r1
 8010e78:	69fa      	ldr	r2, [r7, #28]
 8010e7a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e82:	e002      	b.n	8010e8a <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010e84:	23ff      	movs	r3, #255	; 0xff
 8010e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010e8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3728      	adds	r7, #40	; 0x28
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	20000290 	.word	0x20000290
 8010e9c:	0801a9a4 	.word	0x0801a9a4
 8010ea0:	0801ab50 	.word	0x0801ab50
 8010ea4:	0801aa1c 	.word	0x0801aa1c
 8010ea8:	0801ab44 	.word	0x0801ab44
 8010eac:	20000380 	.word	0x20000380
 8010eb0:	0801ab78 	.word	0x0801ab78

08010eb4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b08a      	sub	sp, #40	; 0x28
 8010eb8:	af02      	add	r7, sp, #8
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
 8010ec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d106      	bne.n	8010eda <etharp_raw+0x26>
 8010ecc:	4b3a      	ldr	r3, [pc, #232]	; (8010fb8 <etharp_raw+0x104>)
 8010ece:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8010ed2:	493a      	ldr	r1, [pc, #232]	; (8010fbc <etharp_raw+0x108>)
 8010ed4:	483a      	ldr	r0, [pc, #232]	; (8010fc0 <etharp_raw+0x10c>)
 8010ed6:	f006 f899 	bl	801700c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010eda:	2200      	movs	r2, #0
 8010edc:	211c      	movs	r1, #28
 8010ede:	2002      	movs	r0, #2
 8010ee0:	f7f7 fc30 	bl	8008744 <pbuf_alloc>
 8010ee4:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d102      	bne.n	8010ef2 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ef0:	e05d      	b.n	8010fae <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	895b      	ldrh	r3, [r3, #10]
 8010ef6:	2b1b      	cmp	r3, #27
 8010ef8:	d806      	bhi.n	8010f08 <etharp_raw+0x54>
 8010efa:	4b2f      	ldr	r3, [pc, #188]	; (8010fb8 <etharp_raw+0x104>)
 8010efc:	f240 4264 	movw	r2, #1124	; 0x464
 8010f00:	4930      	ldr	r1, [pc, #192]	; (8010fc4 <etharp_raw+0x110>)
 8010f02:	482f      	ldr	r0, [pc, #188]	; (8010fc0 <etharp_raw+0x10c>)
 8010f04:	f006 f882 	bl	801700c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010f0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7f6 fe5d 	bl	8007bd0 <lwip_htons>
 8010f16:	4603      	mov	r3, r0
 8010f18:	461a      	mov	r2, r3
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f24:	2b06      	cmp	r3, #6
 8010f26:	d006      	beq.n	8010f36 <etharp_raw+0x82>
 8010f28:	4b23      	ldr	r3, [pc, #140]	; (8010fb8 <etharp_raw+0x104>)
 8010f2a:	f240 426b 	movw	r2, #1131	; 0x46b
 8010f2e:	4926      	ldr	r1, [pc, #152]	; (8010fc8 <etharp_raw+0x114>)
 8010f30:	4823      	ldr	r0, [pc, #140]	; (8010fc0 <etharp_raw+0x10c>)
 8010f32:	f006 f86b 	bl	801700c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	3308      	adds	r3, #8
 8010f3a:	2206      	movs	r2, #6
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f005 ffa9 	bl	8016e96 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	3312      	adds	r3, #18
 8010f48:	2206      	movs	r2, #6
 8010f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f005 ffa2 	bl	8016e96 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	330e      	adds	r3, #14
 8010f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f58:	6812      	ldr	r2, [r2, #0]
 8010f5a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	3318      	adds	r3, #24
 8010f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f62:	6812      	ldr	r2, [r2, #0]
 8010f64:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	701a      	strb	r2, [r3, #0]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f042 0201 	orr.w	r2, r2, #1
 8010f72:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f042 0208 	orr.w	r2, r2, #8
 8010f7c:	709a      	strb	r2, [r3, #2]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2206      	movs	r2, #6
 8010f86:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2204      	movs	r2, #4
 8010f8c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010f8e:	f640 0306 	movw	r3, #2054	; 0x806
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68ba      	ldr	r2, [r7, #8]
 8010f98:	69b9      	ldr	r1, [r7, #24]
 8010f9a:	68f8      	ldr	r0, [r7, #12]
 8010f9c:	f001 fb12 	bl	80125c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010fa0:	69b8      	ldr	r0, [r7, #24]
 8010fa2:	f7f7 ff41 	bl	8008e28 <pbuf_free>
  p = NULL;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010faa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3720      	adds	r7, #32
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	0801a9a4 	.word	0x0801a9a4
 8010fbc:	0801aaf4 	.word	0x0801aaf4
 8010fc0:	0801aa1c 	.word	0x0801aa1c
 8010fc4:	0801ab94 	.word	0x0801ab94
 8010fc8:	0801abc8 	.word	0x0801abc8

08010fcc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b088      	sub	sp, #32
 8010fd0:	af04      	add	r7, sp, #16
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010fe8:	2201      	movs	r2, #1
 8010fea:	9203      	str	r2, [sp, #12]
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	9202      	str	r2, [sp, #8]
 8010ff0:	4a06      	ldr	r2, [pc, #24]	; (801100c <etharp_request_dst+0x40>)
 8010ff2:	9201      	str	r2, [sp, #4]
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f7ff ff5a 	bl	8010eb4 <etharp_raw>
 8011000:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011002:	4618      	mov	r0, r3
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	0801b350 	.word	0x0801b350

08011010 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b082      	sub	sp, #8
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801101a:	4a05      	ldr	r2, [pc, #20]	; (8011030 <etharp_request+0x20>)
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7ff ffd4 	bl	8010fcc <etharp_request_dst>
 8011024:	4603      	mov	r3, r0
}
 8011026:	4618      	mov	r0, r3
 8011028:	3708      	adds	r7, #8
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}
 801102e:	bf00      	nop
 8011030:	0801b348 	.word	0x0801b348

08011034 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b08e      	sub	sp, #56	; 0x38
 8011038:	af04      	add	r7, sp, #16
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801103e:	4b7a      	ldr	r3, [pc, #488]	; (8011228 <icmp_input+0x1f4>)
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	b29b      	uxth	r3, r3
 801104a:	f003 030f 	and.w	r3, r3, #15
 801104e:	b29b      	uxth	r3, r3
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011056:	2b13      	cmp	r3, #19
 8011058:	f240 80d1 	bls.w	80111fe <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	895b      	ldrh	r3, [r3, #10]
 8011060:	2b03      	cmp	r3, #3
 8011062:	f240 80ce 	bls.w	8011202 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011070:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011074:	2b00      	cmp	r3, #0
 8011076:	f000 80bb 	beq.w	80111f0 <icmp_input+0x1bc>
 801107a:	2b08      	cmp	r3, #8
 801107c:	f040 80bb 	bne.w	80111f6 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8011080:	4b6a      	ldr	r3, [pc, #424]	; (801122c <icmp_input+0x1f8>)
 8011082:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011084:	4b68      	ldr	r3, [pc, #416]	; (8011228 <icmp_input+0x1f4>)
 8011086:	695b      	ldr	r3, [r3, #20]
 8011088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801108c:	2be0      	cmp	r3, #224	; 0xe0
 801108e:	f000 80bf 	beq.w	8011210 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011092:	4b65      	ldr	r3, [pc, #404]	; (8011228 <icmp_input+0x1f4>)
 8011094:	695a      	ldr	r2, [r3, #20]
 8011096:	4b64      	ldr	r3, [pc, #400]	; (8011228 <icmp_input+0x1f4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4619      	mov	r1, r3
 801109c:	4610      	mov	r0, r2
 801109e:	f000 fbef 	bl	8011880 <ip4_addr_isbroadcast_u32>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f040 80b5 	bne.w	8011214 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	891b      	ldrh	r3, [r3, #8]
 80110ae:	2b07      	cmp	r3, #7
 80110b0:	f240 80a9 	bls.w	8011206 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80110b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110b6:	330e      	adds	r3, #14
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	b21b      	sxth	r3, r3
 80110bc:	4619      	mov	r1, r3
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f7f7 fe8e 	bl	8008de0 <pbuf_header>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d046      	beq.n	8011158 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	891a      	ldrh	r2, [r3, #8]
 80110ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110d0:	4413      	add	r3, r2
 80110d2:	b29b      	uxth	r3, r3
 80110d4:	2200      	movs	r2, #0
 80110d6:	4619      	mov	r1, r3
 80110d8:	2002      	movs	r0, #2
 80110da:	f7f7 fb33 	bl	8008744 <pbuf_alloc>
 80110de:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80110e0:	69bb      	ldr	r3, [r7, #24]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 8098 	beq.w	8011218 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	895b      	ldrh	r3, [r3, #10]
 80110ec:	461a      	mov	r2, r3
 80110ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110f0:	3308      	adds	r3, #8
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d203      	bcs.n	80110fe <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80110f6:	69b8      	ldr	r0, [r7, #24]
 80110f8:	f7f7 fe96 	bl	8008e28 <pbuf_free>
        goto icmperr;
 80110fc:	e08d      	b.n	801121a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011106:	4618      	mov	r0, r3
 8011108:	f005 fec5 	bl	8016e96 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801110c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801110e:	425b      	negs	r3, r3
 8011110:	b29b      	uxth	r3, r3
 8011112:	b21b      	sxth	r3, r3
 8011114:	4619      	mov	r1, r3
 8011116:	69b8      	ldr	r0, [r7, #24]
 8011118:	f7f7 fe62 	bl	8008de0 <pbuf_header>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d009      	beq.n	8011136 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011122:	4b43      	ldr	r3, [pc, #268]	; (8011230 <icmp_input+0x1fc>)
 8011124:	22af      	movs	r2, #175	; 0xaf
 8011126:	4943      	ldr	r1, [pc, #268]	; (8011234 <icmp_input+0x200>)
 8011128:	4843      	ldr	r0, [pc, #268]	; (8011238 <icmp_input+0x204>)
 801112a:	f005 ff6f 	bl	801700c <iprintf>
        pbuf_free(r);
 801112e:	69b8      	ldr	r0, [r7, #24]
 8011130:	f7f7 fe7a 	bl	8008e28 <pbuf_free>
        goto icmperr;
 8011134:	e071      	b.n	801121a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	69b8      	ldr	r0, [r7, #24]
 801113a:	f7f7 ffa9 	bl	8009090 <pbuf_copy>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d003      	beq.n	801114c <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011144:	69b8      	ldr	r0, [r7, #24]
 8011146:	f7f7 fe6f 	bl	8008e28 <pbuf_free>
        goto icmperr;
 801114a:	e066      	b.n	801121a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7f7 fe6b 	bl	8008e28 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	607b      	str	r3, [r7, #4]
 8011156:	e015      	b.n	8011184 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801115a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801115e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8011162:	33f2      	adds	r3, #242	; 0xf2
 8011164:	b29b      	uxth	r3, r3
 8011166:	b21b      	sxth	r3, r3
 8011168:	4619      	mov	r1, r3
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7f7 fe38 	bl	8008de0 <pbuf_header>
 8011170:	4603      	mov	r3, r0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d006      	beq.n	8011184 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011176:	4b2e      	ldr	r3, [pc, #184]	; (8011230 <icmp_input+0x1fc>)
 8011178:	22c0      	movs	r2, #192	; 0xc0
 801117a:	4930      	ldr	r1, [pc, #192]	; (801123c <icmp_input+0x208>)
 801117c:	482e      	ldr	r0, [pc, #184]	; (8011238 <icmp_input+0x204>)
 801117e:	f005 ff45 	bl	801700c <iprintf>
        goto icmperr;
 8011182:	e04a      	b.n	801121a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801118a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801118e:	4619      	mov	r1, r3
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7f7 fe25 	bl	8008de0 <pbuf_header>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d12b      	bne.n	80111f4 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80111aa:	4b1f      	ldr	r3, [pc, #124]	; (8011228 <icmp_input+0x1f4>)
 80111ac:	691a      	ldr	r2, [r3, #16]
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	2200      	movs	r2, #0
 80111b6:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	2200      	movs	r2, #0
 80111bc:	709a      	strb	r2, [r3, #2]
 80111be:	2200      	movs	r2, #0
 80111c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	22ff      	movs	r2, #255	; 0xff
 80111c6:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	2200      	movs	r2, #0
 80111cc:	729a      	strb	r2, [r3, #10]
 80111ce:	2200      	movs	r2, #0
 80111d0:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	9302      	str	r3, [sp, #8]
 80111d6:	2301      	movs	r3, #1
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	2300      	movs	r3, #0
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	23ff      	movs	r3, #255	; 0xff
 80111e0:	2200      	movs	r2, #0
 80111e2:	69f9      	ldr	r1, [r7, #28]
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f000 fa79 	bl	80116dc <ip4_output_if>
 80111ea:	4603      	mov	r3, r0
 80111ec:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80111ee:	e001      	b.n	80111f4 <icmp_input+0x1c0>
    break;
 80111f0:	bf00      	nop
 80111f2:	e000      	b.n	80111f6 <icmp_input+0x1c2>
    break;
 80111f4:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f7f7 fe16 	bl	8008e28 <pbuf_free>
  return;
 80111fc:	e011      	b.n	8011222 <icmp_input+0x1ee>
    goto lenerr;
 80111fe:	bf00      	nop
 8011200:	e002      	b.n	8011208 <icmp_input+0x1d4>
    goto lenerr;
 8011202:	bf00      	nop
 8011204:	e000      	b.n	8011208 <icmp_input+0x1d4>
      goto lenerr;
 8011206:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7f7 fe0d 	bl	8008e28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801120e:	e008      	b.n	8011222 <icmp_input+0x1ee>
      goto icmperr;
 8011210:	bf00      	nop
 8011212:	e002      	b.n	801121a <icmp_input+0x1e6>
      goto icmperr;
 8011214:	bf00      	nop
 8011216:	e000      	b.n	801121a <icmp_input+0x1e6>
        goto icmperr;
 8011218:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7f7 fe04 	bl	8008e28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011220:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011222:	3728      	adds	r7, #40	; 0x28
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	200003fc 	.word	0x200003fc
 801122c:	20000410 	.word	0x20000410
 8011230:	0801ac0c 	.word	0x0801ac0c
 8011234:	0801ac44 	.word	0x0801ac44
 8011238:	0801ac7c 	.word	0x0801ac7c
 801123c:	0801aca4 	.word	0x0801aca4

08011240 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
 8011248:	460b      	mov	r3, r1
 801124a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801124c:	78fb      	ldrb	r3, [r7, #3]
 801124e:	461a      	mov	r2, r3
 8011250:	2103      	movs	r1, #3
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 f814 	bl	8011280 <icmp_send_response>
}
 8011258:	bf00      	nop
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	460b      	mov	r3, r1
 801126a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801126c:	78fb      	ldrb	r3, [r7, #3]
 801126e:	461a      	mov	r2, r3
 8011270:	210b      	movs	r1, #11
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f804 	bl	8011280 <icmp_send_response>
}
 8011278:	bf00      	nop
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b08c      	sub	sp, #48	; 0x30
 8011284:	af04      	add	r7, sp, #16
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
 801128c:	4613      	mov	r3, r2
 801128e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011290:	2200      	movs	r2, #0
 8011292:	2124      	movs	r1, #36	; 0x24
 8011294:	2001      	movs	r0, #1
 8011296:	f7f7 fa55 	bl	8008744 <pbuf_alloc>
 801129a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d04c      	beq.n	801133c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	895b      	ldrh	r3, [r3, #10]
 80112a6:	2b23      	cmp	r3, #35	; 0x23
 80112a8:	d806      	bhi.n	80112b8 <icmp_send_response+0x38>
 80112aa:	4b26      	ldr	r3, [pc, #152]	; (8011344 <icmp_send_response+0xc4>)
 80112ac:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80112b0:	4925      	ldr	r1, [pc, #148]	; (8011348 <icmp_send_response+0xc8>)
 80112b2:	4826      	ldr	r0, [pc, #152]	; (801134c <icmp_send_response+0xcc>)
 80112b4:	f005 feaa 	bl	801700c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	78fa      	ldrb	r2, [r7, #3]
 80112c8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	78ba      	ldrb	r2, [r7, #2]
 80112ce:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	2200      	movs	r2, #0
 80112d4:	711a      	strb	r2, [r3, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	2200      	movs	r2, #0
 80112de:	719a      	strb	r2, [r3, #6]
 80112e0:	2200      	movs	r2, #0
 80112e2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	f103 0008 	add.w	r0, r3, #8
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	221c      	movs	r2, #28
 80112f2:	4619      	mov	r1, r3
 80112f4:	f005 fdcf 	bl	8016e96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80112fe:	f107 030c 	add.w	r3, r7, #12
 8011302:	4618      	mov	r0, r3
 8011304:	f000 f824 	bl	8011350 <ip4_route>
 8011308:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d011      	beq.n	8011334 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	2200      	movs	r2, #0
 8011314:	709a      	strb	r2, [r3, #2]
 8011316:	2200      	movs	r2, #0
 8011318:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801131a:	f107 020c 	add.w	r2, r7, #12
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	9302      	str	r3, [sp, #8]
 8011322:	2301      	movs	r3, #1
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	2300      	movs	r3, #0
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	23ff      	movs	r3, #255	; 0xff
 801132c:	2100      	movs	r1, #0
 801132e:	69f8      	ldr	r0, [r7, #28]
 8011330:	f000 f9d4 	bl	80116dc <ip4_output_if>
  }
  pbuf_free(q);
 8011334:	69f8      	ldr	r0, [r7, #28]
 8011336:	f7f7 fd77 	bl	8008e28 <pbuf_free>
 801133a:	e000      	b.n	801133e <icmp_send_response+0xbe>
    return;
 801133c:	bf00      	nop
}
 801133e:	3720      	adds	r7, #32
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}
 8011344:	0801ac0c 	.word	0x0801ac0c
 8011348:	0801acd8 	.word	0x0801acd8
 801134c:	0801ac7c 	.word	0x0801ac7c

08011350 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011350:	b480      	push	{r7}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011358:	4b30      	ldr	r3, [pc, #192]	; (801141c <ip4_route+0xcc>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	60fb      	str	r3, [r7, #12]
 801135e:	e036      	b.n	80113ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011366:	f003 0301 	and.w	r3, r3, #1
 801136a:	b2db      	uxtb	r3, r3
 801136c:	2b00      	cmp	r3, #0
 801136e:	d02b      	beq.n	80113c8 <ip4_route+0x78>
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011376:	089b      	lsrs	r3, r3, #2
 8011378:	f003 0301 	and.w	r3, r3, #1
 801137c:	b2db      	uxtb	r3, r3
 801137e:	2b00      	cmp	r3, #0
 8011380:	d022      	beq.n	80113c8 <ip4_route+0x78>
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	3304      	adds	r3, #4
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d01d      	beq.n	80113c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	3304      	adds	r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	405a      	eors	r2, r3
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	3308      	adds	r3, #8
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4013      	ands	r3, r2
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d101      	bne.n	80113a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	e033      	b.n	8011410 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80113ae:	f003 0302 	and.w	r3, r3, #2
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d108      	bne.n	80113c8 <ip4_route+0x78>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	330c      	adds	r3, #12
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d101      	bne.n	80113c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	e023      	b.n	8011410 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	60fb      	str	r3, [r7, #12]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1c5      	bne.n	8011360 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80113d4:	4b12      	ldr	r3, [pc, #72]	; (8011420 <ip4_route+0xd0>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d015      	beq.n	8011408 <ip4_route+0xb8>
 80113dc:	4b10      	ldr	r3, [pc, #64]	; (8011420 <ip4_route+0xd0>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80113e4:	f003 0301 	and.w	r3, r3, #1
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00d      	beq.n	8011408 <ip4_route+0xb8>
 80113ec:	4b0c      	ldr	r3, [pc, #48]	; (8011420 <ip4_route+0xd0>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80113f4:	f003 0304 	and.w	r3, r3, #4
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d005      	beq.n	8011408 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80113fc:	4b08      	ldr	r3, [pc, #32]	; (8011420 <ip4_route+0xd0>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3304      	adds	r3, #4
 8011402:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011408:	2300      	movs	r3, #0
 801140a:	e001      	b.n	8011410 <ip4_route+0xc0>
  }

  return netif_default;
 801140c:	4b04      	ldr	r3, [pc, #16]	; (8011420 <ip4_route+0xd0>)
 801140e:	681b      	ldr	r3, [r3, #0]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3714      	adds	r7, #20
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	2000393c 	.word	0x2000393c
 8011420:	20003940 	.word	0x20003940

08011424 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b088      	sub	sp, #32
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801142e:	2301      	movs	r3, #1
 8011430:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	091b      	lsrs	r3, r3, #4
 801143e:	b2db      	uxtb	r3, r3
 8011440:	2b04      	cmp	r3, #4
 8011442:	d004      	beq.n	801144e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7f7 fcef 	bl	8008e28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801144a:	2300      	movs	r3, #0
 801144c:	e13e      	b.n	80116cc <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	b29b      	uxth	r3, r3
 8011454:	f003 030f 	and.w	r3, r3, #15
 8011458:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801145a:	89fb      	ldrh	r3, [r7, #14]
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	885b      	ldrh	r3, [r3, #2]
 8011464:	b29b      	uxth	r3, r3
 8011466:	4618      	mov	r0, r3
 8011468:	f7f6 fbb2 	bl	8007bd0 <lwip_htons>
 801146c:	4603      	mov	r3, r0
 801146e:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	891b      	ldrh	r3, [r3, #8]
 8011474:	89ba      	ldrh	r2, [r7, #12]
 8011476:	429a      	cmp	r2, r3
 8011478:	d204      	bcs.n	8011484 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 801147a:	89bb      	ldrh	r3, [r7, #12]
 801147c:	4619      	mov	r1, r3
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7f7 fb5e 	bl	8008b40 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	895b      	ldrh	r3, [r3, #10]
 8011488:	89fa      	ldrh	r2, [r7, #14]
 801148a:	429a      	cmp	r2, r3
 801148c:	d807      	bhi.n	801149e <ip4_input+0x7a>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	891b      	ldrh	r3, [r3, #8]
 8011492:	89ba      	ldrh	r2, [r7, #12]
 8011494:	429a      	cmp	r2, r3
 8011496:	d802      	bhi.n	801149e <ip4_input+0x7a>
 8011498:	89fb      	ldrh	r3, [r7, #14]
 801149a:	2b13      	cmp	r3, #19
 801149c:	d804      	bhi.n	80114a8 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7f7 fcc2 	bl	8008e28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80114a4:	2300      	movs	r3, #0
 80114a6:	e111      	b.n	80116cc <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	691b      	ldr	r3, [r3, #16]
 80114ac:	4a89      	ldr	r2, [pc, #548]	; (80116d4 <ip4_input+0x2b0>)
 80114ae:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	4a87      	ldr	r2, [pc, #540]	; (80116d4 <ip4_input+0x2b0>)
 80114b6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114b8:	4b86      	ldr	r3, [pc, #536]	; (80116d4 <ip4_input+0x2b0>)
 80114ba:	695b      	ldr	r3, [r3, #20]
 80114bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114c0:	2be0      	cmp	r3, #224	; 0xe0
 80114c2:	d112      	bne.n	80114ea <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d007      	beq.n	80114e4 <ip4_input+0xc0>
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	3304      	adds	r3, #4
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d002      	beq.n	80114e4 <ip4_input+0xc0>
      netif = inp;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	61bb      	str	r3, [r7, #24]
 80114e2:	e041      	b.n	8011568 <ip4_input+0x144>
    } else {
      netif = NULL;
 80114e4:	2300      	movs	r3, #0
 80114e6:	61bb      	str	r3, [r7, #24]
 80114e8:	e03e      	b.n	8011568 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80114ea:	2301      	movs	r3, #1
 80114ec:	613b      	str	r3, [r7, #16]
    netif = inp;
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80114f8:	f003 0301 	and.w	r3, r3, #1
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d014      	beq.n	801152c <ip4_input+0x108>
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	3304      	adds	r3, #4
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d00f      	beq.n	801152c <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801150c:	4b71      	ldr	r3, [pc, #452]	; (80116d4 <ip4_input+0x2b0>)
 801150e:	695a      	ldr	r2, [r3, #20]
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	3304      	adds	r3, #4
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	d026      	beq.n	8011568 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801151a:	4b6e      	ldr	r3, [pc, #440]	; (80116d4 <ip4_input+0x2b0>)
 801151c:	695b      	ldr	r3, [r3, #20]
 801151e:	69b9      	ldr	r1, [r7, #24]
 8011520:	4618      	mov	r0, r3
 8011522:	f000 f9ad 	bl	8011880 <ip4_addr_isbroadcast_u32>
 8011526:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011528:	2b00      	cmp	r3, #0
 801152a:	d11d      	bne.n	8011568 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d00d      	beq.n	801154e <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011532:	4b68      	ldr	r3, [pc, #416]	; (80116d4 <ip4_input+0x2b0>)
 8011534:	695b      	ldr	r3, [r3, #20]
 8011536:	b2db      	uxtb	r3, r3
 8011538:	2b7f      	cmp	r3, #127	; 0x7f
 801153a:	d102      	bne.n	8011542 <ip4_input+0x11e>
          netif = NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	61bb      	str	r3, [r7, #24]
          break;
 8011540:	e012      	b.n	8011568 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8011546:	4b64      	ldr	r3, [pc, #400]	; (80116d8 <ip4_input+0x2b4>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	61bb      	str	r3, [r7, #24]
 801154c:	e002      	b.n	8011554 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8011554:	69ba      	ldr	r2, [r7, #24]
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	429a      	cmp	r2, r3
 801155a:	d102      	bne.n	8011562 <ip4_input+0x13e>
        netif = netif->next;
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8011562:	69bb      	ldr	r3, [r7, #24]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d1c4      	bne.n	80114f2 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d111      	bne.n	8011592 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	7a5b      	ldrb	r3, [r3, #9]
 8011572:	2b11      	cmp	r3, #17
 8011574:	d10d      	bne.n	8011592 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8011576:	89fb      	ldrh	r3, [r7, #14]
 8011578:	69fa      	ldr	r2, [r7, #28]
 801157a:	4413      	add	r3, r2
 801157c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	885b      	ldrh	r3, [r3, #2]
 8011582:	b29b      	uxth	r3, r3
 8011584:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011588:	d103      	bne.n	8011592 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801158e:	2300      	movs	r3, #0
 8011590:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d017      	beq.n	80115c8 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011598:	4b4e      	ldr	r3, [pc, #312]	; (80116d4 <ip4_input+0x2b0>)
 801159a:	691b      	ldr	r3, [r3, #16]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d013      	beq.n	80115c8 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80115a0:	4b4c      	ldr	r3, [pc, #304]	; (80116d4 <ip4_input+0x2b0>)
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	6839      	ldr	r1, [r7, #0]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f000 f96a 	bl	8011880 <ip4_addr_isbroadcast_u32>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d105      	bne.n	80115be <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80115b2:	4b48      	ldr	r3, [pc, #288]	; (80116d4 <ip4_input+0x2b0>)
 80115b4:	691b      	ldr	r3, [r3, #16]
 80115b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80115ba:	2be0      	cmp	r3, #224	; 0xe0
 80115bc:	d104      	bne.n	80115c8 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7f7 fc32 	bl	8008e28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	e081      	b.n	80116cc <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d104      	bne.n	80115d8 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7f7 fc2a 	bl	8008e28 <pbuf_free>
    return ERR_OK;
 80115d4:	2300      	movs	r3, #0
 80115d6:	e079      	b.n	80116cc <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	88db      	ldrh	r3, [r3, #6]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	461a      	mov	r2, r3
 80115e0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80115e4:	4013      	ands	r3, r2
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00b      	beq.n	8011602 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f000 fc8e 	bl	8011f0c <ip4_reass>
 80115f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d101      	bne.n	80115fc <ip4_input+0x1d8>
      return ERR_OK;
 80115f8:	2300      	movs	r3, #0
 80115fa:	e067      	b.n	80116cc <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011602:	4a34      	ldr	r2, [pc, #208]	; (80116d4 <ip4_input+0x2b0>)
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011608:	4a32      	ldr	r2, [pc, #200]	; (80116d4 <ip4_input+0x2b0>)
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801160e:	4a31      	ldr	r2, [pc, #196]	; (80116d4 <ip4_input+0x2b0>)
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	b29b      	uxth	r3, r3
 801161a:	f003 030f 	and.w	r3, r3, #15
 801161e:	b29b      	uxth	r3, r3
 8011620:	009b      	lsls	r3, r3, #2
 8011622:	b29a      	uxth	r2, r3
 8011624:	4b2b      	ldr	r3, [pc, #172]	; (80116d4 <ip4_input+0x2b0>)
 8011626:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011628:	89fb      	ldrh	r3, [r7, #14]
 801162a:	425b      	negs	r3, r3
 801162c:	b29b      	uxth	r3, r3
 801162e:	b21b      	sxth	r3, r3
 8011630:	4619      	mov	r1, r3
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7f7 fbd4 	bl	8008de0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	7a5b      	ldrb	r3, [r3, #9]
 801163c:	2b06      	cmp	r3, #6
 801163e:	d009      	beq.n	8011654 <ip4_input+0x230>
 8011640:	2b11      	cmp	r3, #17
 8011642:	d002      	beq.n	801164a <ip4_input+0x226>
 8011644:	2b01      	cmp	r3, #1
 8011646:	d00a      	beq.n	801165e <ip4_input+0x23a>
 8011648:	e00e      	b.n	8011668 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801164a:	6839      	ldr	r1, [r7, #0]
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f7fd fa1b 	bl	800ea88 <udp_input>
      break;
 8011652:	e028      	b.n	80116a6 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011654:	6839      	ldr	r1, [r7, #0]
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7f9 fa86 	bl	800ab68 <tcp_input>
      break;
 801165c:	e023      	b.n	80116a6 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801165e:	6839      	ldr	r1, [r7, #0]
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f7ff fce7 	bl	8011034 <icmp_input>
      break;
 8011666:	e01e      	b.n	80116a6 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011668:	4b1a      	ldr	r3, [pc, #104]	; (80116d4 <ip4_input+0x2b0>)
 801166a:	695b      	ldr	r3, [r3, #20]
 801166c:	69b9      	ldr	r1, [r7, #24]
 801166e:	4618      	mov	r0, r3
 8011670:	f000 f906 	bl	8011880 <ip4_addr_isbroadcast_u32>
 8011674:	4603      	mov	r3, r0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d112      	bne.n	80116a0 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801167a:	4b16      	ldr	r3, [pc, #88]	; (80116d4 <ip4_input+0x2b0>)
 801167c:	695b      	ldr	r3, [r3, #20]
 801167e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011682:	2be0      	cmp	r3, #224	; 0xe0
 8011684:	d00c      	beq.n	80116a0 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8011686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801168a:	4619      	mov	r1, r3
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7f7 fbb9 	bl	8008e04 <pbuf_header_force>
        p->payload = iphdr;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	69fa      	ldr	r2, [r7, #28]
 8011696:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011698:	2102      	movs	r1, #2
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff fdd0 	bl	8011240 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7f7 fbc1 	bl	8008e28 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80116a6:	4b0b      	ldr	r3, [pc, #44]	; (80116d4 <ip4_input+0x2b0>)
 80116a8:	2200      	movs	r2, #0
 80116aa:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80116ac:	4b09      	ldr	r3, [pc, #36]	; (80116d4 <ip4_input+0x2b0>)
 80116ae:	2200      	movs	r2, #0
 80116b0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80116b2:	4b08      	ldr	r3, [pc, #32]	; (80116d4 <ip4_input+0x2b0>)
 80116b4:	2200      	movs	r2, #0
 80116b6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80116b8:	4b06      	ldr	r3, [pc, #24]	; (80116d4 <ip4_input+0x2b0>)
 80116ba:	2200      	movs	r2, #0
 80116bc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80116be:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <ip4_input+0x2b0>)
 80116c0:	2200      	movs	r2, #0
 80116c2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80116c4:	4b03      	ldr	r3, [pc, #12]	; (80116d4 <ip4_input+0x2b0>)
 80116c6:	2200      	movs	r2, #0
 80116c8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80116ca:	2300      	movs	r3, #0
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3720      	adds	r7, #32
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	200003fc 	.word	0x200003fc
 80116d8:	2000393c 	.word	0x2000393c

080116dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b08a      	sub	sp, #40	; 0x28
 80116e0:	af04      	add	r7, sp, #16
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d009      	beq.n	8011708 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d003      	beq.n	8011702 <ip4_output_if+0x26>
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d102      	bne.n	8011708 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011704:	3304      	adds	r3, #4
 8011706:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011708:	78fa      	ldrb	r2, [r7, #3]
 801170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170c:	9302      	str	r3, [sp, #8]
 801170e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011712:	9301      	str	r3, [sp, #4]
 8011714:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	4613      	mov	r3, r2
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	6979      	ldr	r1, [r7, #20]
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f000 f805 	bl	8011730 <ip4_output_if_src>
 8011726:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011728:	4618      	mov	r0, r3
 801172a:	3718      	adds	r7, #24
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}

08011730 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b088      	sub	sp, #32
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	89db      	ldrh	r3, [r3, #14]
 8011742:	2b01      	cmp	r3, #1
 8011744:	d006      	beq.n	8011754 <ip4_output_if_src+0x24>
 8011746:	4b48      	ldr	r3, [pc, #288]	; (8011868 <ip4_output_if_src+0x138>)
 8011748:	f240 3233 	movw	r2, #819	; 0x333
 801174c:	4947      	ldr	r1, [pc, #284]	; (801186c <ip4_output_if_src+0x13c>)
 801174e:	4848      	ldr	r0, [pc, #288]	; (8011870 <ip4_output_if_src+0x140>)
 8011750:	f005 fc5c 	bl	801700c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d060      	beq.n	801181c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801175a:	2314      	movs	r3, #20
 801175c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801175e:	2114      	movs	r1, #20
 8011760:	68f8      	ldr	r0, [r7, #12]
 8011762:	f7f7 fb3d 	bl	8008de0 <pbuf_header>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d002      	beq.n	8011772 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801176c:	f06f 0301 	mvn.w	r3, #1
 8011770:	e075      	b.n	801185e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	895b      	ldrh	r3, [r3, #10]
 801177c:	2b13      	cmp	r3, #19
 801177e:	d806      	bhi.n	801178e <ip4_output_if_src+0x5e>
 8011780:	4b39      	ldr	r3, [pc, #228]	; (8011868 <ip4_output_if_src+0x138>)
 8011782:	f240 3261 	movw	r2, #865	; 0x361
 8011786:	493b      	ldr	r1, [pc, #236]	; (8011874 <ip4_output_if_src+0x144>)
 8011788:	4839      	ldr	r0, [pc, #228]	; (8011870 <ip4_output_if_src+0x140>)
 801178a:	f005 fc3f 	bl	801700c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	78fa      	ldrb	r2, [r7, #3]
 8011792:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801179a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80117a4:	8b7b      	ldrh	r3, [r7, #26]
 80117a6:	089b      	lsrs	r3, r3, #2
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80117bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	891b      	ldrh	r3, [r3, #8]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7f6 fa04 	bl	8007bd0 <lwip_htons>
 80117c8:	4603      	mov	r3, r0
 80117ca:	461a      	mov	r2, r3
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	2200      	movs	r2, #0
 80117d4:	719a      	strb	r2, [r3, #6]
 80117d6:	2200      	movs	r2, #0
 80117d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80117da:	4b27      	ldr	r3, [pc, #156]	; (8011878 <ip4_output_if_src+0x148>)
 80117dc:	881b      	ldrh	r3, [r3, #0]
 80117de:	4618      	mov	r0, r3
 80117e0:	f7f6 f9f6 	bl	8007bd0 <lwip_htons>
 80117e4:	4603      	mov	r3, r0
 80117e6:	461a      	mov	r2, r3
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80117ec:	4b22      	ldr	r3, [pc, #136]	; (8011878 <ip4_output_if_src+0x148>)
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	3301      	adds	r3, #1
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	4b20      	ldr	r3, [pc, #128]	; (8011878 <ip4_output_if_src+0x148>)
 80117f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d104      	bne.n	8011808 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80117fe:	4b1f      	ldr	r3, [pc, #124]	; (801187c <ip4_output_if_src+0x14c>)
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	60da      	str	r2, [r3, #12]
 8011806:	e003      	b.n	8011810 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	2200      	movs	r2, #0
 8011814:	729a      	strb	r2, [r3, #10]
 8011816:	2200      	movs	r2, #0
 8011818:	72da      	strb	r2, [r3, #11]
 801181a:	e008      	b.n	801182e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	691b      	ldr	r3, [r3, #16]
 8011826:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011828:	f107 0314 	add.w	r3, r7, #20
 801182c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00c      	beq.n	8011850 <ip4_output_if_src+0x120>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	891a      	ldrh	r2, [r3, #8]
 801183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801183e:	429a      	cmp	r2, r3
 8011840:	d906      	bls.n	8011850 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f000 fd0a 	bl	8012260 <ip4_frag>
 801184c:	4603      	mov	r3, r0
 801184e:	e006      	b.n	801185e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011852:	695b      	ldr	r3, [r3, #20]
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	68f9      	ldr	r1, [r7, #12]
 8011858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801185a:	4798      	blx	r3
 801185c:	4603      	mov	r3, r0
}
 801185e:	4618      	mov	r0, r3
 8011860:	3720      	adds	r7, #32
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	0801ad04 	.word	0x0801ad04
 801186c:	0801ad38 	.word	0x0801ad38
 8011870:	0801ad44 	.word	0x0801ad44
 8011874:	0801ad6c 	.word	0x0801ad6c
 8011878:	20000382 	.word	0x20000382
 801187c:	0801b340 	.word	0x0801b340

08011880 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011894:	d002      	beq.n	801189c <ip4_addr_isbroadcast_u32+0x1c>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d101      	bne.n	80118a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801189c:	2301      	movs	r3, #1
 801189e:	e02a      	b.n	80118f6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118a6:	f003 0302 	and.w	r3, r3, #2
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d101      	bne.n	80118b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80118ae:	2300      	movs	r3, #0
 80118b0:	e021      	b.n	80118f6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	3304      	adds	r3, #4
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d101      	bne.n	80118c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80118be:	2300      	movs	r3, #0
 80118c0:	e019      	b.n	80118f6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80118c2:	68fa      	ldr	r2, [r7, #12]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	3304      	adds	r3, #4
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	405a      	eors	r2, r3
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	3308      	adds	r3, #8
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	4013      	ands	r3, r2
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d10d      	bne.n	80118f4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	3308      	adds	r3, #8
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	43da      	mvns	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	3308      	adds	r3, #8
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d101      	bne.n	80118f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80118f0:	2301      	movs	r3, #1
 80118f2:	e000      	b.n	80118f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80118f4:	2300      	movs	r3, #0
  }
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3714      	adds	r7, #20
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
	...

08011904 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801190a:	2300      	movs	r3, #0
 801190c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801190e:	4b12      	ldr	r3, [pc, #72]	; (8011958 <ip_reass_tmr+0x54>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011914:	e018      	b.n	8011948 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	7fdb      	ldrb	r3, [r3, #31]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00b      	beq.n	8011936 <ip_reass_tmr+0x32>
      r->timer--;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	7fdb      	ldrb	r3, [r3, #31]
 8011922:	3b01      	subs	r3, #1
 8011924:	b2da      	uxtb	r2, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	60fb      	str	r3, [r7, #12]
 8011934:	e008      	b.n	8011948 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011940:	68b9      	ldr	r1, [r7, #8]
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f000 f80a 	bl	801195c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d1e3      	bne.n	8011916 <ip_reass_tmr+0x12>
     }
   }
}
 801194e:	bf00      	nop
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	20000384 	.word	0x20000384

0801195c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b088      	sub	sp, #32
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801196a:	683a      	ldr	r2, [r7, #0]
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	429a      	cmp	r2, r3
 8011970:	d105      	bne.n	801197e <ip_reass_free_complete_datagram+0x22>
 8011972:	4b45      	ldr	r3, [pc, #276]	; (8011a88 <ip_reass_free_complete_datagram+0x12c>)
 8011974:	22ab      	movs	r2, #171	; 0xab
 8011976:	4945      	ldr	r1, [pc, #276]	; (8011a8c <ip_reass_free_complete_datagram+0x130>)
 8011978:	4845      	ldr	r0, [pc, #276]	; (8011a90 <ip_reass_free_complete_datagram+0x134>)
 801197a:	f005 fb47 	bl	801700c <iprintf>
  if (prev != NULL) {
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00a      	beq.n	801199a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	429a      	cmp	r2, r3
 801198c:	d005      	beq.n	801199a <ip_reass_free_complete_datagram+0x3e>
 801198e:	4b3e      	ldr	r3, [pc, #248]	; (8011a88 <ip_reass_free_complete_datagram+0x12c>)
 8011990:	22ad      	movs	r2, #173	; 0xad
 8011992:	4940      	ldr	r1, [pc, #256]	; (8011a94 <ip_reass_free_complete_datagram+0x138>)
 8011994:	483e      	ldr	r0, [pc, #248]	; (8011a90 <ip_reass_free_complete_datagram+0x134>)
 8011996:	f005 fb39 	bl	801700c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	889b      	ldrh	r3, [r3, #4]
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d12a      	bne.n	8011a02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	6858      	ldr	r0, [r3, #4]
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	3308      	adds	r3, #8
 80119c2:	2214      	movs	r2, #20
 80119c4:	4619      	mov	r1, r3
 80119c6:	f005 fa66 	bl	8016e96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80119ca:	2101      	movs	r1, #1
 80119cc:	69b8      	ldr	r0, [r7, #24]
 80119ce:	f7ff fc47 	bl	8011260 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80119d2:	69b8      	ldr	r0, [r7, #24]
 80119d4:	f7f7 fabc 	bl	8008f50 <pbuf_clen>
 80119d8:	4603      	mov	r3, r0
 80119da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80119dc:	8bfa      	ldrh	r2, [r7, #30]
 80119de:	8a7b      	ldrh	r3, [r7, #18]
 80119e0:	4413      	add	r3, r2
 80119e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119e6:	db05      	blt.n	80119f4 <ip_reass_free_complete_datagram+0x98>
 80119e8:	4b27      	ldr	r3, [pc, #156]	; (8011a88 <ip_reass_free_complete_datagram+0x12c>)
 80119ea:	22bc      	movs	r2, #188	; 0xbc
 80119ec:	492a      	ldr	r1, [pc, #168]	; (8011a98 <ip_reass_free_complete_datagram+0x13c>)
 80119ee:	4828      	ldr	r0, [pc, #160]	; (8011a90 <ip_reass_free_complete_datagram+0x134>)
 80119f0:	f005 fb0c 	bl	801700c <iprintf>
    pbufs_freed += clen;
 80119f4:	8bfa      	ldrh	r2, [r7, #30]
 80119f6:	8a7b      	ldrh	r3, [r7, #18]
 80119f8:	4413      	add	r3, r2
 80119fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80119fc:	69b8      	ldr	r0, [r7, #24]
 80119fe:	f7f7 fa13 	bl	8008e28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011a08:	e01f      	b.n	8011a4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f7f7 fa98 	bl	8008f50 <pbuf_clen>
 8011a20:	4603      	mov	r3, r0
 8011a22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011a24:	8bfa      	ldrh	r2, [r7, #30]
 8011a26:	8a7b      	ldrh	r3, [r7, #18]
 8011a28:	4413      	add	r3, r2
 8011a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a2e:	db05      	blt.n	8011a3c <ip_reass_free_complete_datagram+0xe0>
 8011a30:	4b15      	ldr	r3, [pc, #84]	; (8011a88 <ip_reass_free_complete_datagram+0x12c>)
 8011a32:	22cc      	movs	r2, #204	; 0xcc
 8011a34:	4918      	ldr	r1, [pc, #96]	; (8011a98 <ip_reass_free_complete_datagram+0x13c>)
 8011a36:	4816      	ldr	r0, [pc, #88]	; (8011a90 <ip_reass_free_complete_datagram+0x134>)
 8011a38:	f005 fae8 	bl	801700c <iprintf>
    pbufs_freed += clen;
 8011a3c:	8bfa      	ldrh	r2, [r7, #30]
 8011a3e:	8a7b      	ldrh	r3, [r7, #18]
 8011a40:	4413      	add	r3, r2
 8011a42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f7f7 f9ef 	bl	8008e28 <pbuf_free>
  while (p != NULL) {
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1dc      	bne.n	8011a0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011a50:	6839      	ldr	r1, [r7, #0]
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 f8c2 	bl	8011bdc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011a58:	4b10      	ldr	r3, [pc, #64]	; (8011a9c <ip_reass_free_complete_datagram+0x140>)
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	8bfa      	ldrh	r2, [r7, #30]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d905      	bls.n	8011a6e <ip_reass_free_complete_datagram+0x112>
 8011a62:	4b09      	ldr	r3, [pc, #36]	; (8011a88 <ip_reass_free_complete_datagram+0x12c>)
 8011a64:	22d2      	movs	r2, #210	; 0xd2
 8011a66:	490e      	ldr	r1, [pc, #56]	; (8011aa0 <ip_reass_free_complete_datagram+0x144>)
 8011a68:	4809      	ldr	r0, [pc, #36]	; (8011a90 <ip_reass_free_complete_datagram+0x134>)
 8011a6a:	f005 facf 	bl	801700c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011a6e:	4b0b      	ldr	r3, [pc, #44]	; (8011a9c <ip_reass_free_complete_datagram+0x140>)
 8011a70:	881a      	ldrh	r2, [r3, #0]
 8011a72:	8bfb      	ldrh	r3, [r7, #30]
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	4b08      	ldr	r3, [pc, #32]	; (8011a9c <ip_reass_free_complete_datagram+0x140>)
 8011a7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011a7c:	8bfb      	ldrh	r3, [r7, #30]
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3720      	adds	r7, #32
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	0801ad9c 	.word	0x0801ad9c
 8011a8c:	0801add8 	.word	0x0801add8
 8011a90:	0801ade4 	.word	0x0801ade4
 8011a94:	0801ae0c 	.word	0x0801ae0c
 8011a98:	0801ae20 	.word	0x0801ae20
 8011a9c:	20000388 	.word	0x20000388
 8011aa0:	0801ae40 	.word	0x0801ae40

08011aa4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b08a      	sub	sp, #40	; 0x28
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011aba:	2300      	movs	r3, #0
 8011abc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011ac2:	4b28      	ldr	r3, [pc, #160]	; (8011b64 <ip_reass_remove_oldest_datagram+0xc0>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ac8:	e030      	b.n	8011b2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011acc:	695a      	ldr	r2, [r3, #20]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d10c      	bne.n	8011af0 <ip_reass_remove_oldest_datagram+0x4c>
 8011ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad8:	699a      	ldr	r2, [r3, #24]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d106      	bne.n	8011af0 <ip_reass_remove_oldest_datagram+0x4c>
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae4:	899a      	ldrh	r2, [r3, #12]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	889b      	ldrh	r3, [r3, #4]
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d014      	beq.n	8011b1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	3301      	adds	r3, #1
 8011af4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d104      	bne.n	8011b06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b00:	69fb      	ldr	r3, [r7, #28]
 8011b02:	61bb      	str	r3, [r7, #24]
 8011b04:	e009      	b.n	8011b1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b08:	7fda      	ldrb	r2, [r3, #31]
 8011b0a:	6a3b      	ldr	r3, [r7, #32]
 8011b0c:	7fdb      	ldrb	r3, [r3, #31]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d803      	bhi.n	8011b1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d001      	beq.n	8011b26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1cb      	bne.n	8011aca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011b32:	6a3b      	ldr	r3, [r7, #32]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d008      	beq.n	8011b4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011b38:	69b9      	ldr	r1, [r7, #24]
 8011b3a:	6a38      	ldr	r0, [r7, #32]
 8011b3c:	f7ff ff0e 	bl	801195c <ip_reass_free_complete_datagram>
 8011b40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4413      	add	r3, r2
 8011b48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011b4a:	697a      	ldr	r2, [r7, #20]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	da02      	bge.n	8011b58 <ip_reass_remove_oldest_datagram+0xb4>
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	dcac      	bgt.n	8011ab2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011b58:	697b      	ldr	r3, [r7, #20]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3728      	adds	r7, #40	; 0x28
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	20000384 	.word	0x20000384

08011b68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011b72:	2004      	movs	r0, #4
 8011b74:	f7f6 fbda 	bl	800832c <memp_malloc>
 8011b78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d110      	bne.n	8011ba2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ff ff8e 	bl	8011aa4 <ip_reass_remove_oldest_datagram>
 8011b88:	4602      	mov	r2, r0
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	dc03      	bgt.n	8011b98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011b90:	2004      	movs	r0, #4
 8011b92:	f7f6 fbcb 	bl	800832c <memp_malloc>
 8011b96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d101      	bne.n	8011ba2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	e016      	b.n	8011bd0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011ba2:	2220      	movs	r2, #32
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f005 f980 	bl	8016eac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2203      	movs	r2, #3
 8011bb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011bb2:	4b09      	ldr	r3, [pc, #36]	; (8011bd8 <ip_reass_enqueue_new_datagram+0x70>)
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011bba:	4a07      	ldr	r2, [pc, #28]	; (8011bd8 <ip_reass_enqueue_new_datagram+0x70>)
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	3308      	adds	r3, #8
 8011bc4:	2214      	movs	r2, #20
 8011bc6:	6879      	ldr	r1, [r7, #4]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f005 f964 	bl	8016e96 <memcpy>
  return ipr;
 8011bce:	68fb      	ldr	r3, [r7, #12]
}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	20000384 	.word	0x20000384

08011bdc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011be6:	4b10      	ldr	r3, [pc, #64]	; (8011c28 <ip_reass_dequeue_datagram+0x4c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d104      	bne.n	8011bfa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	4a0c      	ldr	r2, [pc, #48]	; (8011c28 <ip_reass_dequeue_datagram+0x4c>)
 8011bf6:	6013      	str	r3, [r2, #0]
 8011bf8:	e00d      	b.n	8011c16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d106      	bne.n	8011c0e <ip_reass_dequeue_datagram+0x32>
 8011c00:	4b0a      	ldr	r3, [pc, #40]	; (8011c2c <ip_reass_dequeue_datagram+0x50>)
 8011c02:	f240 1245 	movw	r2, #325	; 0x145
 8011c06:	490a      	ldr	r1, [pc, #40]	; (8011c30 <ip_reass_dequeue_datagram+0x54>)
 8011c08:	480a      	ldr	r0, [pc, #40]	; (8011c34 <ip_reass_dequeue_datagram+0x58>)
 8011c0a:	f005 f9ff 	bl	801700c <iprintf>
    prev->next = ipr->next;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681a      	ldr	r2, [r3, #0]
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011c16:	6879      	ldr	r1, [r7, #4]
 8011c18:	2004      	movs	r0, #4
 8011c1a:	f7f6 fbd3 	bl	80083c4 <memp_free>
}
 8011c1e:	bf00      	nop
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	20000384 	.word	0x20000384
 8011c2c:	0801ad9c 	.word	0x0801ad9c
 8011c30:	0801ae5c 	.word	0x0801ae5c
 8011c34:	0801ade4 	.word	0x0801ade4

08011c38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b08c      	sub	sp, #48	; 0x30
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011c44:	2300      	movs	r3, #0
 8011c46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	885b      	ldrh	r3, [r3, #2]
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7f5 ffb9 	bl	8007bd0 <lwip_htons>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	461a      	mov	r2, r3
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	f003 030f 	and.w	r3, r3, #15
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	1ad3      	subs	r3, r2, r3
 8011c74:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	88db      	ldrh	r3, [r3, #6]
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7f5 ffa7 	bl	8007bd0 <lwip_htons>
 8011c82:	4603      	mov	r3, r0
 8011c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c96:	2200      	movs	r2, #0
 8011c98:	701a      	strb	r2, [r3, #0]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	705a      	strb	r2, [r3, #1]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	709a      	strb	r2, [r3, #2]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca8:	8b3a      	ldrh	r2, [r7, #24]
 8011caa:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011cac:	8b3a      	ldrh	r2, [r7, #24]
 8011cae:	8b7b      	ldrh	r3, [r7, #26]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8011cbe:	e061      	b.n	8011d84 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8011cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cc8:	889b      	ldrh	r3, [r3, #4]
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	889b      	ldrh	r3, [r3, #4]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d232      	bcs.n	8011d3c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cda:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d01f      	beq.n	8011d22 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce4:	889b      	ldrh	r3, [r3, #4]
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cea:	88db      	ldrh	r3, [r3, #6]
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	f0c0 80e3 	bcc.w	8011eba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8011cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf6:	88db      	ldrh	r3, [r3, #6]
 8011cf8:	b29a      	uxth	r2, r3
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	889b      	ldrh	r3, [r3, #4]
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	429a      	cmp	r2, r3
 8011d02:	f200 80da 	bhi.w	8011eba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0e:	88db      	ldrh	r3, [r3, #6]
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d14:	889b      	ldrh	r3, [r3, #4]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d037      	beq.n	8011d8c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011d20:	e034      	b.n	8011d8c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8011d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d24:	88db      	ldrh	r3, [r3, #6]
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	889b      	ldrh	r3, [r3, #4]
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	f200 80c5 	bhi.w	8011ebe <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	68ba      	ldr	r2, [r7, #8]
 8011d38:	605a      	str	r2, [r3, #4]
      break;
 8011d3a:	e027      	b.n	8011d8c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3e:	889b      	ldrh	r3, [r3, #4]
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	889b      	ldrh	r3, [r3, #4]
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	f000 80ba 	beq.w	8011ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d50:	889b      	ldrh	r3, [r3, #4]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	88db      	ldrh	r3, [r3, #6]
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	f0c0 80b3 	bcc.w	8011ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d009      	beq.n	8011d7a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8011d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d68:	88db      	ldrh	r3, [r3, #6]
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	889b      	ldrh	r3, [r3, #4]
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d001      	beq.n	8011d7a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d19a      	bne.n	8011cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8011d8a:	e000      	b.n	8011d8e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8011d8c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d12d      	bne.n	8011df0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8011d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d01c      	beq.n	8011dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9c:	88db      	ldrh	r3, [r3, #6]
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da2:	889b      	ldrh	r3, [r3, #4]
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d906      	bls.n	8011db8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8011daa:	4b51      	ldr	r3, [pc, #324]	; (8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011dac:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011db0:	4950      	ldr	r1, [pc, #320]	; (8011ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011db2:	4851      	ldr	r0, [pc, #324]	; (8011ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011db4:	f005 f92a 	bl	801700c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	88db      	ldrh	r3, [r3, #6]
 8011dc2:	b29a      	uxth	r2, r3
 8011dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc6:	889b      	ldrh	r3, [r3, #4]
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d010      	beq.n	8011df0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	623b      	str	r3, [r7, #32]
 8011dd2:	e00d      	b.n	8011df0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d006      	beq.n	8011dea <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8011ddc:	4b44      	ldr	r3, [pc, #272]	; (8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011dde:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8011de2:	4946      	ldr	r1, [pc, #280]	; (8011efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011de4:	4844      	ldr	r0, [pc, #272]	; (8011ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011de6:	f005 f911 	bl	801700c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	68ba      	ldr	r2, [r7, #8]
 8011dee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d105      	bne.n	8011e02 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	7f9b      	ldrb	r3, [r3, #30]
 8011dfa:	f003 0301 	and.w	r3, r3, #1
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d059      	beq.n	8011eb6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8011e02:	6a3b      	ldr	r3, [r7, #32]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d04f      	beq.n	8011ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d006      	beq.n	8011e1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	889b      	ldrh	r3, [r3, #4]
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d002      	beq.n	8011e24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	623b      	str	r3, [r7, #32]
 8011e22:	e041      	b.n	8011ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011e2e:	e012      	b.n	8011e56 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8011e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	88db      	ldrh	r3, [r3, #6]
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3e:	889b      	ldrh	r3, [r3, #4]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d002      	beq.n	8011e4c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8011e46:	2300      	movs	r3, #0
 8011e48:	623b      	str	r3, [r7, #32]
            break;
 8011e4a:	e007      	b.n	8011e5c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d1e9      	bne.n	8011e30 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011e5c:	6a3b      	ldr	r3, [r7, #32]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d022      	beq.n	8011ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d106      	bne.n	8011e78 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8011e6a:	4b21      	ldr	r3, [pc, #132]	; (8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011e6c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8011e70:	4923      	ldr	r1, [pc, #140]	; (8011f00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011e72:	4821      	ldr	r0, [pc, #132]	; (8011ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e74:	f005 f8ca 	bl	801700c <iprintf>
          LWIP_ASSERT("sanity check",
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d106      	bne.n	8011e92 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8011e84:	4b1a      	ldr	r3, [pc, #104]	; (8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011e86:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011e8a:	491d      	ldr	r1, [pc, #116]	; (8011f00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011e8c:	481a      	ldr	r0, [pc, #104]	; (8011ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e8e:	f005 f8bd 	bl	801700c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d006      	beq.n	8011ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8011e9a:	4b15      	ldr	r3, [pc, #84]	; (8011ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011e9c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011ea0:	4918      	ldr	r1, [pc, #96]	; (8011f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011ea2:	4815      	ldr	r0, [pc, #84]	; (8011ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011ea4:	f005 f8b2 	bl	801700c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	bf14      	ite	ne
 8011eae:	2301      	movne	r3, #1
 8011eb0:	2300      	moveq	r3, #0
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	e018      	b.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	e016      	b.n	8011ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8011eba:	bf00      	nop
 8011ebc:	e004      	b.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8011ebe:	bf00      	nop
 8011ec0:	e002      	b.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011ec2:	bf00      	nop
 8011ec4:	e000      	b.n	8011ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8011ec6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8011ec8:	68b8      	ldr	r0, [r7, #8]
 8011eca:	f7f7 f841 	bl	8008f50 <pbuf_clen>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	4b0d      	ldr	r3, [pc, #52]	; (8011f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	1a9b      	subs	r3, r3, r2
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	4b0b      	ldr	r3, [pc, #44]	; (8011f08 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011edc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8011ede:	68b8      	ldr	r0, [r7, #8]
 8011ee0:	f7f6 ffa2 	bl	8008e28 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3730      	adds	r7, #48	; 0x30
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	0801ad9c 	.word	0x0801ad9c
 8011ef4:	0801ae78 	.word	0x0801ae78
 8011ef8:	0801ade4 	.word	0x0801ade4
 8011efc:	0801ae98 	.word	0x0801ae98
 8011f00:	0801aed0 	.word	0x0801aed0
 8011f04:	0801aee0 	.word	0x0801aee0
 8011f08:	20000388 	.word	0x20000388

08011f0c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08e      	sub	sp, #56	; 0x38
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8011f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	f003 030f 	and.w	r3, r3, #15
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	2b14      	cmp	r3, #20
 8011f26:	f040 8131 	bne.w	801218c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2c:	88db      	ldrh	r3, [r3, #6]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7f5 fe4d 	bl	8007bd0 <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	00db      	lsls	r3, r3, #3
 8011f40:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f44:	885b      	ldrh	r3, [r3, #2]
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7f5 fe41 	bl	8007bd0 <lwip_htons>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	461a      	mov	r2, r3
 8011f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f54:	781b      	ldrb	r3, [r3, #0]
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	f003 030f 	and.w	r3, r3, #15
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	1ad3      	subs	r3, r2, r3
 8011f64:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7f6 fff2 	bl	8008f50 <pbuf_clen>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011f70:	4b8d      	ldr	r3, [pc, #564]	; (80121a8 <ip4_reass+0x29c>)
 8011f72:	881b      	ldrh	r3, [r3, #0]
 8011f74:	461a      	mov	r2, r3
 8011f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f78:	4413      	add	r3, r2
 8011f7a:	2b0a      	cmp	r3, #10
 8011f7c:	dd10      	ble.n	8011fa0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f80:	4619      	mov	r1, r3
 8011f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f84:	f7ff fd8e 	bl	8011aa4 <ip_reass_remove_oldest_datagram>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	f000 8100 	beq.w	8012190 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011f90:	4b85      	ldr	r3, [pc, #532]	; (80121a8 <ip4_reass+0x29c>)
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	461a      	mov	r2, r3
 8011f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f98:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011f9a:	2b0a      	cmp	r3, #10
 8011f9c:	f300 80f8 	bgt.w	8012190 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011fa0:	4b82      	ldr	r3, [pc, #520]	; (80121ac <ip4_reass+0x2a0>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	633b      	str	r3, [r7, #48]	; 0x30
 8011fa6:	e015      	b.n	8011fd4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	695a      	ldr	r2, [r3, #20]
 8011fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d10c      	bne.n	8011fce <ip4_reass+0xc2>
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	699a      	ldr	r2, [r3, #24]
 8011fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fba:	691b      	ldr	r3, [r3, #16]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d106      	bne.n	8011fce <ip4_reass+0xc2>
 8011fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc2:	899a      	ldrh	r2, [r3, #12]
 8011fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc6:	889b      	ldrh	r3, [r3, #4]
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d006      	beq.n	8011fdc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	633b      	str	r3, [r7, #48]	; 0x30
 8011fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e6      	bne.n	8011fa8 <ip4_reass+0x9c>
 8011fda:	e000      	b.n	8011fde <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011fdc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d109      	bne.n	8011ff8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fea:	f7ff fdbd 	bl	8011b68 <ip_reass_enqueue_new_datagram>
 8011fee:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d11c      	bne.n	8012030 <ip4_reass+0x124>
      goto nullreturn;
 8011ff6:	e0ce      	b.n	8012196 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffa:	88db      	ldrh	r3, [r3, #6]
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7f5 fde6 	bl	8007bd0 <lwip_htons>
 8012004:	4603      	mov	r3, r0
 8012006:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801200a:	2b00      	cmp	r3, #0
 801200c:	d110      	bne.n	8012030 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012010:	89db      	ldrh	r3, [r3, #14]
 8012012:	4618      	mov	r0, r3
 8012014:	f7f5 fddc 	bl	8007bd0 <lwip_htons>
 8012018:	4603      	mov	r3, r0
 801201a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801201e:	2b00      	cmp	r3, #0
 8012020:	d006      	beq.n	8012030 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012024:	3308      	adds	r3, #8
 8012026:	2214      	movs	r2, #20
 8012028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801202a:	4618      	mov	r0, r3
 801202c:	f004 ff33 	bl	8016e96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012032:	88db      	ldrh	r3, [r3, #6]
 8012034:	b29b      	uxth	r3, r3
 8012036:	f003 0320 	and.w	r3, r3, #32
 801203a:	2b00      	cmp	r3, #0
 801203c:	bf0c      	ite	eq
 801203e:	2301      	moveq	r3, #1
 8012040:	2300      	movne	r3, #0
 8012042:	b2db      	uxtb	r3, r3
 8012044:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00e      	beq.n	801206a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801204c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801204e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012050:	4413      	add	r3, r2
 8012052:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012054:	8b7a      	ldrh	r2, [r7, #26]
 8012056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012058:	429a      	cmp	r2, r3
 801205a:	f0c0 8099 	bcc.w	8012190 <ip4_reass+0x284>
 801205e:	8b7b      	ldrh	r3, [r7, #26]
 8012060:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012064:	4293      	cmp	r3, r2
 8012066:	f200 8093 	bhi.w	8012190 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801206a:	69fa      	ldr	r2, [r7, #28]
 801206c:	6879      	ldr	r1, [r7, #4]
 801206e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012070:	f7ff fde2 	bl	8011c38 <ip_reass_chain_frag_into_datagram_and_validate>
 8012074:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801207c:	f000 808a 	beq.w	8012194 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012080:	4b49      	ldr	r3, [pc, #292]	; (80121a8 <ip4_reass+0x29c>)
 8012082:	881a      	ldrh	r2, [r3, #0]
 8012084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012086:	4413      	add	r3, r2
 8012088:	b29a      	uxth	r2, r3
 801208a:	4b47      	ldr	r3, [pc, #284]	; (80121a8 <ip4_reass+0x29c>)
 801208c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d00d      	beq.n	80120b0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8012094:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012098:	4413      	add	r3, r2
 801209a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209e:	8a7a      	ldrh	r2, [r7, #18]
 80120a0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	7f9b      	ldrb	r3, [r3, #30]
 80120a6:	f043 0301 	orr.w	r3, r3, #1
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ae:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	2b01      	cmp	r3, #1
 80120b4:	d168      	bne.n	8012188 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80120b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b8:	8b9b      	ldrh	r3, [r3, #28]
 80120ba:	3314      	adds	r3, #20
 80120bc:	b29a      	uxth	r2, r3
 80120be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80120c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80120cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80120d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d6:	3308      	adds	r3, #8
 80120d8:	2214      	movs	r2, #20
 80120da:	4619      	mov	r1, r3
 80120dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120de:	f004 feda 	bl	8016e96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	8b9b      	ldrh	r3, [r3, #28]
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7f5 fd72 	bl	8007bd0 <lwip_htons>
 80120ec:	4603      	mov	r3, r0
 80120ee:	461a      	mov	r2, r3
 80120f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80120f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f6:	2200      	movs	r2, #0
 80120f8:	719a      	strb	r2, [r3, #6]
 80120fa:	2200      	movs	r2, #0
 80120fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80120fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012100:	2200      	movs	r2, #0
 8012102:	729a      	strb	r2, [r3, #10]
 8012104:	2200      	movs	r2, #0
 8012106:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801210e:	e00e      	b.n	801212e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8012110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012116:	f06f 0113 	mvn.w	r1, #19
 801211a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801211c:	f7f6 fe60 	bl	8008de0 <pbuf_header>
      pbuf_cat(p, r);
 8012120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f7f6 ff4e 	bl	8008fc4 <pbuf_cat>
      r = iprh->next_pbuf;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1ed      	bne.n	8012110 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012134:	4b1d      	ldr	r3, [pc, #116]	; (80121ac <ip4_reass+0x2a0>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801213a:	429a      	cmp	r2, r3
 801213c:	d102      	bne.n	8012144 <ip4_reass+0x238>
      ipr_prev = NULL;
 801213e:	2300      	movs	r3, #0
 8012140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012142:	e010      	b.n	8012166 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012144:	4b19      	ldr	r3, [pc, #100]	; (80121ac <ip4_reass+0x2a0>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	62fb      	str	r3, [r7, #44]	; 0x2c
 801214a:	e007      	b.n	801215c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012152:	429a      	cmp	r2, r3
 8012154:	d006      	beq.n	8012164 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215e:	2b00      	cmp	r3, #0
 8012160:	d1f4      	bne.n	801214c <ip4_reass+0x240>
 8012162:	e000      	b.n	8012166 <ip4_reass+0x25a>
          break;
 8012164:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801216a:	f7ff fd37 	bl	8011bdc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f7f6 feee 	bl	8008f50 <pbuf_clen>
 8012174:	4603      	mov	r3, r0
 8012176:	461a      	mov	r2, r3
 8012178:	4b0b      	ldr	r3, [pc, #44]	; (80121a8 <ip4_reass+0x29c>)
 801217a:	881b      	ldrh	r3, [r3, #0]
 801217c:	1a9b      	subs	r3, r3, r2
 801217e:	b29a      	uxth	r2, r3
 8012180:	4b09      	ldr	r3, [pc, #36]	; (80121a8 <ip4_reass+0x29c>)
 8012182:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	e00a      	b.n	801219e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012188:	2300      	movs	r3, #0
 801218a:	e008      	b.n	801219e <ip4_reass+0x292>
    goto nullreturn;
 801218c:	bf00      	nop
 801218e:	e002      	b.n	8012196 <ip4_reass+0x28a>

nullreturn:
 8012190:	bf00      	nop
 8012192:	e000      	b.n	8012196 <ip4_reass+0x28a>
    goto nullreturn;
 8012194:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f7f6 fe46 	bl	8008e28 <pbuf_free>
  return NULL;
 801219c:	2300      	movs	r3, #0
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3738      	adds	r7, #56	; 0x38
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	20000388 	.word	0x20000388
 80121ac:	20000384 	.word	0x20000384

080121b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80121b4:	2005      	movs	r0, #5
 80121b6:	f7f6 f8b9 	bl	800832c <memp_malloc>
 80121ba:	4603      	mov	r3, r0
}
 80121bc:	4618      	mov	r0, r3
 80121be:	bd80      	pop	{r7, pc}

080121c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d106      	bne.n	80121dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80121ce:	4b07      	ldr	r3, [pc, #28]	; (80121ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80121d0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80121d4:	4906      	ldr	r1, [pc, #24]	; (80121f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80121d6:	4807      	ldr	r0, [pc, #28]	; (80121f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80121d8:	f004 ff18 	bl	801700c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80121dc:	6879      	ldr	r1, [r7, #4]
 80121de:	2005      	movs	r0, #5
 80121e0:	f7f6 f8f0 	bl	80083c4 <memp_free>
}
 80121e4:	bf00      	nop
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	0801ad9c 	.word	0x0801ad9c
 80121f0:	0801af04 	.word	0x0801af04
 80121f4:	0801ade4 	.word	0x0801ade4

080121f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <ipfrag_free_pbuf_custom+0x20>
 801220a:	4b11      	ldr	r3, [pc, #68]	; (8012250 <ipfrag_free_pbuf_custom+0x58>)
 801220c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8012210:	4910      	ldr	r1, [pc, #64]	; (8012254 <ipfrag_free_pbuf_custom+0x5c>)
 8012212:	4811      	ldr	r0, [pc, #68]	; (8012258 <ipfrag_free_pbuf_custom+0x60>)
 8012214:	f004 fefa 	bl	801700c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	429a      	cmp	r2, r3
 801221e:	d006      	beq.n	801222e <ipfrag_free_pbuf_custom+0x36>
 8012220:	4b0b      	ldr	r3, [pc, #44]	; (8012250 <ipfrag_free_pbuf_custom+0x58>)
 8012222:	f240 22b9 	movw	r2, #697	; 0x2b9
 8012226:	490d      	ldr	r1, [pc, #52]	; (801225c <ipfrag_free_pbuf_custom+0x64>)
 8012228:	480b      	ldr	r0, [pc, #44]	; (8012258 <ipfrag_free_pbuf_custom+0x60>)
 801222a:	f004 feef 	bl	801700c <iprintf>
  if (pcr->original != NULL) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	695b      	ldr	r3, [r3, #20]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d004      	beq.n	8012240 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	695b      	ldr	r3, [r3, #20]
 801223a:	4618      	mov	r0, r3
 801223c:	f7f6 fdf4 	bl	8008e28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f7ff ffbd 	bl	80121c0 <ip_frag_free_pbuf_custom_ref>
}
 8012246:	bf00      	nop
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	0801ad9c 	.word	0x0801ad9c
 8012254:	0801af10 	.word	0x0801af10
 8012258:	0801ade4 	.word	0x0801ade4
 801225c:	0801af1c 	.word	0x0801af1c

08012260 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b092      	sub	sp, #72	; 0x48
 8012264:	af02      	add	r7, sp, #8
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801226c:	2300      	movs	r3, #0
 801226e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012274:	3b14      	subs	r3, #20
 8012276:	2b00      	cmp	r3, #0
 8012278:	da00      	bge.n	801227c <ip4_frag+0x1c>
 801227a:	3307      	adds	r3, #7
 801227c:	10db      	asrs	r3, r3, #3
 801227e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012280:	2314      	movs	r3, #20
 8012282:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	f003 030f 	and.w	r3, r3, #15
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	2b14      	cmp	r3, #20
 801229a:	d009      	beq.n	80122b0 <ip4_frag+0x50>
 801229c:	4b79      	ldr	r3, [pc, #484]	; (8012484 <ip4_frag+0x224>)
 801229e:	f240 22e1 	movw	r2, #737	; 0x2e1
 80122a2:	4979      	ldr	r1, [pc, #484]	; (8012488 <ip4_frag+0x228>)
 80122a4:	4879      	ldr	r0, [pc, #484]	; (801248c <ip4_frag+0x22c>)
 80122a6:	f004 feb1 	bl	801700c <iprintf>
 80122aa:	f06f 0305 	mvn.w	r3, #5
 80122ae:	e0e5      	b.n	801247c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80122b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b2:	88db      	ldrh	r3, [r3, #6]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7f5 fc8a 	bl	8007bd0 <lwip_htons>
 80122bc:	4603      	mov	r3, r0
 80122be:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80122c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122c6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80122c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80122ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d009      	beq.n	80122e6 <ip4_frag+0x86>
 80122d2:	4b6c      	ldr	r3, [pc, #432]	; (8012484 <ip4_frag+0x224>)
 80122d4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80122d8:	496d      	ldr	r1, [pc, #436]	; (8012490 <ip4_frag+0x230>)
 80122da:	486c      	ldr	r0, [pc, #432]	; (801248c <ip4_frag+0x22c>)
 80122dc:	f004 fe96 	bl	801700c <iprintf>
 80122e0:	f06f 0305 	mvn.w	r3, #5
 80122e4:	e0ca      	b.n	801247c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	891b      	ldrh	r3, [r3, #8]
 80122ea:	3b14      	subs	r3, #20
 80122ec:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80122ee:	e0bc      	b.n	801246a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80122f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80122f2:	00da      	lsls	r2, r3, #3
 80122f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122f6:	4293      	cmp	r3, r2
 80122f8:	bfa8      	it	ge
 80122fa:	4613      	movge	r3, r2
 80122fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80122fe:	2200      	movs	r2, #0
 8012300:	2114      	movs	r1, #20
 8012302:	2002      	movs	r0, #2
 8012304:	f7f6 fa1e 	bl	8008744 <pbuf_alloc>
 8012308:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801230a:	6a3b      	ldr	r3, [r7, #32]
 801230c:	2b00      	cmp	r3, #0
 801230e:	f000 80b2 	beq.w	8012476 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	895b      	ldrh	r3, [r3, #10]
 8012316:	2b13      	cmp	r3, #19
 8012318:	d806      	bhi.n	8012328 <ip4_frag+0xc8>
 801231a:	4b5a      	ldr	r3, [pc, #360]	; (8012484 <ip4_frag+0x224>)
 801231c:	f240 3209 	movw	r2, #777	; 0x309
 8012320:	495c      	ldr	r1, [pc, #368]	; (8012494 <ip4_frag+0x234>)
 8012322:	485a      	ldr	r0, [pc, #360]	; (801248c <ip4_frag+0x22c>)
 8012324:	f004 fe72 	bl	801700c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	2214      	movs	r2, #20
 801232e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012330:	4618      	mov	r0, r3
 8012332:	f004 fdb0 	bl	8016e96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801233c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801233e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8012340:	e04f      	b.n	80123e2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	895a      	ldrh	r2, [r3, #10]
 8012346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801234c:	8b7a      	ldrh	r2, [r7, #26]
 801234e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012350:	4293      	cmp	r3, r2
 8012352:	bf28      	it	cs
 8012354:	4613      	movcs	r3, r2
 8012356:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801235a:	2b00      	cmp	r3, #0
 801235c:	d105      	bne.n	801236a <ip4_frag+0x10a>
        poff = 0;
 801235e:	2300      	movs	r3, #0
 8012360:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	60fb      	str	r3, [r7, #12]
        continue;
 8012368:	e03b      	b.n	80123e2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801236a:	f7ff ff21 	bl	80121b0 <ip_frag_alloc_pbuf_custom_ref>
 801236e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d103      	bne.n	801237e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8012376:	6a38      	ldr	r0, [r7, #32]
 8012378:	f7f6 fd56 	bl	8008e28 <pbuf_free>
        goto memerr;
 801237c:	e07c      	b.n	8012478 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801237e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012384:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012386:	4413      	add	r3, r2
 8012388:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801238a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801238c:	9201      	str	r2, [sp, #4]
 801238e:	9300      	str	r3, [sp, #0]
 8012390:	4603      	mov	r3, r0
 8012392:	2202      	movs	r2, #2
 8012394:	2004      	movs	r0, #4
 8012396:	f7f6 fb69 	bl	8008a6c <pbuf_alloced_custom>
 801239a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d106      	bne.n	80123b0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80123a2:	6978      	ldr	r0, [r7, #20]
 80123a4:	f7ff ff0c 	bl	80121c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80123a8:	6a38      	ldr	r0, [r7, #32]
 80123aa:	f7f6 fd3d 	bl	8008e28 <pbuf_free>
        goto memerr;
 80123ae:	e063      	b.n	8012478 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f7f6 fde5 	bl	8008f80 <pbuf_ref>
      pcr->original = p;
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	4a36      	ldr	r2, [pc, #216]	; (8012498 <ip4_frag+0x238>)
 80123c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80123c2:	6939      	ldr	r1, [r7, #16]
 80123c4:	6a38      	ldr	r0, [r7, #32]
 80123c6:	f7f6 fdfd 	bl	8008fc4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80123ca:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80123cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123ce:	1ad3      	subs	r3, r2, r3
 80123d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80123d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d004      	beq.n	80123e2 <ip4_frag+0x182>
        poff = 0;
 80123d8:	2300      	movs	r3, #0
 80123da:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80123e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d1ac      	bne.n	8012342 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80123e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80123ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123ec:	4413      	add	r3, r2
 80123ee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80123f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80123f6:	3b14      	subs	r3, #20
 80123f8:	429a      	cmp	r2, r3
 80123fa:	bfd4      	ite	le
 80123fc:	2301      	movle	r3, #1
 80123fe:	2300      	movgt	r3, #0
 8012400:	b2db      	uxtb	r3, r3
 8012402:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801240a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801240c:	69fb      	ldr	r3, [r7, #28]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d103      	bne.n	801241a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8012412:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012418:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801241a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801241c:	4618      	mov	r0, r3
 801241e:	f7f5 fbd7 	bl	8007bd0 <lwip_htons>
 8012422:	4603      	mov	r3, r0
 8012424:	461a      	mov	r2, r3
 8012426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012428:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801242a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801242c:	3314      	adds	r3, #20
 801242e:	b29b      	uxth	r3, r3
 8012430:	4618      	mov	r0, r3
 8012432:	f7f5 fbcd 	bl	8007bd0 <lwip_htons>
 8012436:	4603      	mov	r3, r0
 8012438:	461a      	mov	r2, r3
 801243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012440:	2200      	movs	r2, #0
 8012442:	729a      	strb	r2, [r3, #10]
 8012444:	2200      	movs	r2, #0
 8012446:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	695b      	ldr	r3, [r3, #20]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	6a39      	ldr	r1, [r7, #32]
 8012450:	68b8      	ldr	r0, [r7, #8]
 8012452:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012454:	6a38      	ldr	r0, [r7, #32]
 8012456:	f7f6 fce7 	bl	8008e28 <pbuf_free>
    left -= fragsize;
 801245a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801245c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8012462:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012464:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012466:	4413      	add	r3, r2
 8012468:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801246a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801246c:	2b00      	cmp	r3, #0
 801246e:	f47f af3f 	bne.w	80122f0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	e002      	b.n	801247c <ip4_frag+0x21c>
      goto memerr;
 8012476:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801247c:	4618      	mov	r0, r3
 801247e:	3740      	adds	r7, #64	; 0x40
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	0801ad9c 	.word	0x0801ad9c
 8012488:	0801af28 	.word	0x0801af28
 801248c:	0801ade4 	.word	0x0801ade4
 8012490:	0801af50 	.word	0x0801af50
 8012494:	0801af6c 	.word	0x0801af6c
 8012498:	080121f9 	.word	0x080121f9

0801249c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b086      	sub	sp, #24
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80124a6:	230e      	movs	r3, #14
 80124a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	895b      	ldrh	r3, [r3, #10]
 80124ae:	2b0e      	cmp	r3, #14
 80124b0:	d977      	bls.n	80125a2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	7b1a      	ldrb	r2, [r3, #12]
 80124bc:	7b5b      	ldrb	r3, [r3, #13]
 80124be:	021b      	lsls	r3, r3, #8
 80124c0:	4313      	orrs	r3, r2
 80124c2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	f003 0301 	and.w	r3, r3, #1
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d023      	beq.n	8012518 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d10f      	bne.n	80124f8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	785b      	ldrb	r3, [r3, #1]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d11b      	bne.n	8012518 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124e4:	2b5e      	cmp	r3, #94	; 0x5e
 80124e6:	d117      	bne.n	8012518 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	7b5b      	ldrb	r3, [r3, #13]
 80124ec:	f043 0310 	orr.w	r3, r3, #16
 80124f0:	b2da      	uxtb	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	735a      	strb	r2, [r3, #13]
 80124f6:	e00f      	b.n	8012518 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	2206      	movs	r2, #6
 80124fc:	4930      	ldr	r1, [pc, #192]	; (80125c0 <ethernet_input+0x124>)
 80124fe:	4618      	mov	r0, r3
 8012500:	f004 fcba 	bl	8016e78 <memcmp>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	7b5b      	ldrb	r3, [r3, #13]
 801250e:	f043 0308 	orr.w	r3, r3, #8
 8012512:	b2da      	uxtb	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012518:	89fb      	ldrh	r3, [r7, #14]
 801251a:	2b08      	cmp	r3, #8
 801251c:	d003      	beq.n	8012526 <ethernet_input+0x8a>
 801251e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012522:	d01e      	beq.n	8012562 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012524:	e044      	b.n	80125b0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012526:	683b      	ldr	r3, [r7, #0]
 8012528:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801252c:	f003 0308 	and.w	r3, r3, #8
 8012530:	2b00      	cmp	r3, #0
 8012532:	d038      	beq.n	80125a6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	895b      	ldrh	r3, [r3, #10]
 8012538:	461a      	mov	r2, r3
 801253a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801253e:	429a      	cmp	r2, r3
 8012540:	db33      	blt.n	80125aa <ethernet_input+0x10e>
 8012542:	8afb      	ldrh	r3, [r7, #22]
 8012544:	425b      	negs	r3, r3
 8012546:	b29b      	uxth	r3, r3
 8012548:	b21b      	sxth	r3, r3
 801254a:	4619      	mov	r1, r3
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7f6 fc47 	bl	8008de0 <pbuf_header>
 8012552:	4603      	mov	r3, r0
 8012554:	2b00      	cmp	r3, #0
 8012556:	d128      	bne.n	80125aa <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012558:	6839      	ldr	r1, [r7, #0]
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f7fe ff62 	bl	8011424 <ip4_input>
      break;
 8012560:	e01d      	b.n	801259e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012568:	f003 0308 	and.w	r3, r3, #8
 801256c:	2b00      	cmp	r3, #0
 801256e:	d01e      	beq.n	80125ae <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	895b      	ldrh	r3, [r3, #10]
 8012574:	461a      	mov	r2, r3
 8012576:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801257a:	429a      	cmp	r2, r3
 801257c:	db15      	blt.n	80125aa <ethernet_input+0x10e>
 801257e:	8afb      	ldrh	r3, [r7, #22]
 8012580:	425b      	negs	r3, r3
 8012582:	b29b      	uxth	r3, r3
 8012584:	b21b      	sxth	r3, r3
 8012586:	4619      	mov	r1, r3
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f7f6 fc29 	bl	8008de0 <pbuf_header>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10a      	bne.n	80125aa <ethernet_input+0x10e>
        etharp_input(p, netif);
 8012594:	6839      	ldr	r1, [r7, #0]
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f7fe f92c 	bl	80107f4 <etharp_input>
      break;
 801259c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801259e:	2300      	movs	r3, #0
 80125a0:	e00a      	b.n	80125b8 <ethernet_input+0x11c>
    goto free_and_return;
 80125a2:	bf00      	nop
 80125a4:	e004      	b.n	80125b0 <ethernet_input+0x114>
        goto free_and_return;
 80125a6:	bf00      	nop
 80125a8:	e002      	b.n	80125b0 <ethernet_input+0x114>

free_and_return:
 80125aa:	bf00      	nop
 80125ac:	e000      	b.n	80125b0 <ethernet_input+0x114>
        goto free_and_return;
 80125ae:	bf00      	nop
  pbuf_free(p);
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f7f6 fc39 	bl	8008e28 <pbuf_free>
  return ERR_OK;
 80125b6:	2300      	movs	r3, #0
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	0801b348 	.word	0x0801b348

080125c4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	60b9      	str	r1, [r7, #8]
 80125ce:	607a      	str	r2, [r7, #4]
 80125d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80125d2:	8c3b      	ldrh	r3, [r7, #32]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7f5 fafb 	bl	8007bd0 <lwip_htons>
 80125da:	4603      	mov	r3, r0
 80125dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80125de:	210e      	movs	r1, #14
 80125e0:	68b8      	ldr	r0, [r7, #8]
 80125e2:	f7f6 fbfd 	bl	8008de0 <pbuf_header>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d125      	bne.n	8012638 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80125ec:	68bb      	ldr	r3, [r7, #8]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	8afa      	ldrh	r2, [r7, #22]
 80125f6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	2206      	movs	r2, #6
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	4618      	mov	r0, r3
 8012600:	f004 fc49 	bl	8016e96 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	3306      	adds	r3, #6
 8012608:	2206      	movs	r2, #6
 801260a:	6879      	ldr	r1, [r7, #4]
 801260c:	4618      	mov	r0, r3
 801260e:	f004 fc42 	bl	8016e96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012618:	2b06      	cmp	r3, #6
 801261a:	d006      	beq.n	801262a <ethernet_output+0x66>
 801261c:	4b0a      	ldr	r3, [pc, #40]	; (8012648 <ethernet_output+0x84>)
 801261e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012622:	490a      	ldr	r1, [pc, #40]	; (801264c <ethernet_output+0x88>)
 8012624:	480a      	ldr	r0, [pc, #40]	; (8012650 <ethernet_output+0x8c>)
 8012626:	f004 fcf1 	bl	801700c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	699b      	ldr	r3, [r3, #24]
 801262e:	68b9      	ldr	r1, [r7, #8]
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	4798      	blx	r3
 8012634:	4603      	mov	r3, r0
 8012636:	e002      	b.n	801263e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012638:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801263a:	f06f 0301 	mvn.w	r3, #1
}
 801263e:	4618      	mov	r0, r3
 8012640:	3718      	adds	r7, #24
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	0801af8c 	.word	0x0801af8c
 801264c:	0801afc4 	.word	0x0801afc4
 8012650:	0801aff8 	.word	0x0801aff8

08012654 <F_Init_TimerServo>:
 */

#include "A_Servo.h"

void F_Init_TimerServo()
{
 8012654:	b480      	push	{r7}
 8012656:	af00      	add	r7, sp, #0
	// Enable the Timer 9
	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8012658:	4b55      	ldr	r3, [pc, #340]	; (80127b0 <F_Init_TimerServo+0x15c>)
 801265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801265c:	4a54      	ldr	r2, [pc, #336]	; (80127b0 <F_Init_TimerServo+0x15c>)
 801265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012662:	6453      	str	r3, [r2, #68]	; 0x44

	// Init GPIO
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; // Port E : clock enable
 8012664:	4b52      	ldr	r3, [pc, #328]	; (80127b0 <F_Init_TimerServo+0x15c>)
 8012666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012668:	4a51      	ldr	r2, [pc, #324]	; (80127b0 <F_Init_TimerServo+0x15c>)
 801266a:	f043 0310 	orr.w	r3, r3, #16
 801266e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOE->MODER &= ~(GPIO_MODER_MODER5);	// PE5: Alternate --> ServoMotor 1
 8012670:	4b50      	ldr	r3, [pc, #320]	; (80127b4 <F_Init_TimerServo+0x160>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a4f      	ldr	r2, [pc, #316]	; (80127b4 <F_Init_TimerServo+0x160>)
 8012676:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801267a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |=  (0x02 << 10);
 801267c:	4b4d      	ldr	r3, [pc, #308]	; (80127b4 <F_Init_TimerServo+0x160>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a4c      	ldr	r2, [pc, #304]	; (80127b4 <F_Init_TimerServo+0x160>)
 8012682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012686:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(GPIO_MODER_MODER6);	// PE6: Alternate --> ServoMotor 2
 8012688:	4b4a      	ldr	r3, [pc, #296]	; (80127b4 <F_Init_TimerServo+0x160>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	4a49      	ldr	r2, [pc, #292]	; (80127b4 <F_Init_TimerServo+0x160>)
 801268e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8012692:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |=  (0x02 << 12);
 8012694:	4b47      	ldr	r3, [pc, #284]	; (80127b4 <F_Init_TimerServo+0x160>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	4a46      	ldr	r2, [pc, #280]	; (80127b4 <F_Init_TimerServo+0x160>)
 801269a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801269e:	6013      	str	r3, [r2, #0]

	GPIOE->AFR[0] &= ~(0x0F << 20);	// AF3 on PE5--> Timer 9 channel 1 --> ServoMotor 1
 80126a0:	4b44      	ldr	r3, [pc, #272]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126a2:	6a1b      	ldr	r3, [r3, #32]
 80126a4:	4a43      	ldr	r2, [pc, #268]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80126aa:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |=  (3    << 20);
 80126ac:	4b41      	ldr	r3, [pc, #260]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126ae:	6a1b      	ldr	r3, [r3, #32]
 80126b0:	4a40      	ldr	r2, [pc, #256]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80126b6:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] &= ~(0x0F << 24);	// AF3 on PE6--> Timer 9 channel 2 --> ServoMotor 2
 80126b8:	4b3e      	ldr	r3, [pc, #248]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126ba:	6a1b      	ldr	r3, [r3, #32]
 80126bc:	4a3d      	ldr	r2, [pc, #244]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80126c2:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |=  (3    << 24);
 80126c4:	4b3b      	ldr	r3, [pc, #236]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126c6:	6a1b      	ldr	r3, [r3, #32]
 80126c8:	4a3a      	ldr	r2, [pc, #232]	; (80127b4 <F_Init_TimerServo+0x160>)
 80126ca:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80126ce:	6213      	str	r3, [r2, #32]


	TIM9->PSC = 840-1;	// Prescaler
 80126d0:	4b39      	ldr	r3, [pc, #228]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126d2:	f240 3247 	movw	r2, #839	; 0x347
 80126d6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM9->ARR = 4100-1;	// 20 ms (PWM Frequency)
 80126d8:	4b37      	ldr	r3, [pc, #220]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126da:	f241 0203 	movw	r2, #4099	; 0x1003
 80126de:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM9->CCMR1 |= TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;	// PWM mode 1 upcounting
 80126e0:	4b35      	ldr	r3, [pc, #212]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126e2:	699b      	ldr	r3, [r3, #24]
 80126e4:	4a34      	ldr	r2, [pc, #208]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126e6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80126ea:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 80126ec:	4b32      	ldr	r3, [pc, #200]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	4a31      	ldr	r2, [pc, #196]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126f6:	6193      	str	r3, [r2, #24]

	TIM9->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;	// PWM mode 1 upcounting
 80126f8:	4b2f      	ldr	r3, [pc, #188]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126fa:	699b      	ldr	r3, [r3, #24]
 80126fc:	4a2e      	ldr	r2, [pc, #184]	; (80127b8 <F_Init_TimerServo+0x164>)
 80126fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8012702:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8012704:	4b2c      	ldr	r3, [pc, #176]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012706:	699b      	ldr	r3, [r3, #24]
 8012708:	4a2b      	ldr	r2, [pc, #172]	; (80127b8 <F_Init_TimerServo+0x164>)
 801270a:	f023 0310 	bic.w	r3, r3, #16
 801270e:	6193      	str	r3, [r2, #24]

	TIM9->CCMR1 |= TIM_CCMR1_OC2PE;	// Preload Enable
 8012710:	4b29      	ldr	r3, [pc, #164]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012712:	699b      	ldr	r3, [r3, #24]
 8012714:	4a28      	ldr	r2, [pc, #160]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012716:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801271a:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_CC2S;	// Output
 801271c:	4b26      	ldr	r3, [pc, #152]	; (80127b8 <F_Init_TimerServo+0x164>)
 801271e:	699b      	ldr	r3, [r3, #24]
 8012720:	4a25      	ldr	r2, [pc, #148]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012726:	6193      	str	r3, [r2, #24]
	TIM9->CCER 	|= TIM_CCER_CC2E;	// Channel is ON
 8012728:	4b23      	ldr	r3, [pc, #140]	; (80127b8 <F_Init_TimerServo+0x164>)
 801272a:	6a1b      	ldr	r3, [r3, #32]
 801272c:	4a22      	ldr	r2, [pc, #136]	; (80127b8 <F_Init_TimerServo+0x164>)
 801272e:	f043 0310 	orr.w	r3, r3, #16
 8012732:	6213      	str	r3, [r2, #32]
	TIM9->CCMR1 |= TIM_CCMR1_OC1PE;	// Preload Enable
 8012734:	4b20      	ldr	r3, [pc, #128]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012736:	699b      	ldr	r3, [r3, #24]
 8012738:	4a1f      	ldr	r2, [pc, #124]	; (80127b8 <F_Init_TimerServo+0x164>)
 801273a:	f043 0308 	orr.w	r3, r3, #8
 801273e:	6193      	str	r3, [r2, #24]
	TIM9->CCMR1 &= ~TIM_CCMR1_CC1S;	// Output
 8012740:	4b1d      	ldr	r3, [pc, #116]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012742:	699b      	ldr	r3, [r3, #24]
 8012744:	4a1c      	ldr	r2, [pc, #112]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012746:	f023 0303 	bic.w	r3, r3, #3
 801274a:	6193      	str	r3, [r2, #24]
	TIM9->CCER 	|= TIM_CCER_CC1E;	// Channel is ON
 801274c:	4b1a      	ldr	r3, [pc, #104]	; (80127b8 <F_Init_TimerServo+0x164>)
 801274e:	6a1b      	ldr	r3, [r3, #32]
 8012750:	4a19      	ldr	r2, [pc, #100]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012752:	f043 0301 	orr.w	r3, r3, #1
 8012756:	6213      	str	r3, [r2, #32]

	TIM9->CR1 	|= TIM_CR1_ARPE;	// Auto reload
 8012758:	4b17      	ldr	r3, [pc, #92]	; (80127b8 <F_Init_TimerServo+0x164>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	4a16      	ldr	r2, [pc, #88]	; (80127b8 <F_Init_TimerServo+0x164>)
 801275e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012762:	6013      	str	r3, [r2, #0]
	TIM9->EGR 	|= TIM_EGR_UG;		// Reinitialize the counter
 8012764:	4b14      	ldr	r3, [pc, #80]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012766:	695b      	ldr	r3, [r3, #20]
 8012768:	4a13      	ldr	r2, [pc, #76]	; (80127b8 <F_Init_TimerServo+0x164>)
 801276a:	f043 0301 	orr.w	r3, r3, #1
 801276e:	6153      	str	r3, [r2, #20]
	TIM9->SR 	&= TIM_SR_UIF;		// Clear update interrupt flag
 8012770:	4b11      	ldr	r3, [pc, #68]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	4a10      	ldr	r2, [pc, #64]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012776:	f003 0301 	and.w	r3, r3, #1
 801277a:	6113      	str	r3, [r2, #16]
	TIM9->BDTR 	|= TIM_BDTR_MOE;	// Main output Enable
 801277c:	4b0e      	ldr	r3, [pc, #56]	; (80127b8 <F_Init_TimerServo+0x164>)
 801277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012780:	4a0d      	ldr	r2, [pc, #52]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012786:	6453      	str	r3, [r2, #68]	; 0x44

	TIM9->CCR1 = 500-1; 	// Set duty cycle
 8012788:	4b0b      	ldr	r3, [pc, #44]	; (80127b8 <F_Init_TimerServo+0x164>)
 801278a:	f240 12f3 	movw	r2, #499	; 0x1f3
 801278e:	635a      	str	r2, [r3, #52]	; 0x34

	TIM9->CCR2 = 500-1; 	// Set duty cycle
 8012790:	4b09      	ldr	r3, [pc, #36]	; (80127b8 <F_Init_TimerServo+0x164>)
 8012792:	f240 12f3 	movw	r2, #499	; 0x1f3
 8012796:	639a      	str	r2, [r3, #56]	; 0x38

	// Start Timer 1
	TIM9->CR1 |= TIM_CR1_CEN;
 8012798:	4b07      	ldr	r3, [pc, #28]	; (80127b8 <F_Init_TimerServo+0x164>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4a06      	ldr	r2, [pc, #24]	; (80127b8 <F_Init_TimerServo+0x164>)
 801279e:	f043 0301 	orr.w	r3, r3, #1
 80127a2:	6013      	str	r3, [r2, #0]
}
 80127a4:	bf00      	nop
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	40023800 	.word	0x40023800
 80127b4:	40021000 	.word	0x40021000
 80127b8:	40014000 	.word	0x40014000

080127bc <F_Servo_Ouvrir>:


void F_Servo_Ouvrir(void)
{
 80127bc:	b480      	push	{r7}
 80127be:	af00      	add	r7, sp, #0
	TIM9->CCR1 = 500-1; 	// Set duty cycle
 80127c0:	4b06      	ldr	r3, [pc, #24]	; (80127dc <F_Servo_Ouvrir+0x20>)
 80127c2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80127c6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM9->CCR2 = 500-1; 	// Set duty cycle
 80127c8:	4b04      	ldr	r3, [pc, #16]	; (80127dc <F_Servo_Ouvrir+0x20>)
 80127ca:	f240 12f3 	movw	r2, #499	; 0x1f3
 80127ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80127d0:	bf00      	nop
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	40014000 	.word	0x40014000

080127e0 <F_Servo_Fermer>:

void F_Servo_Fermer(void)
{
 80127e0:	b480      	push	{r7}
 80127e2:	af00      	add	r7, sp, #0

	TIM9->CCR1 = 200-1; 	// Set duty cycle
 80127e4:	4b05      	ldr	r3, [pc, #20]	; (80127fc <F_Servo_Fermer+0x1c>)
 80127e6:	22c7      	movs	r2, #199	; 0xc7
 80127e8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM9->CCR2 = 200-1; 	// Set duty cycle
 80127ea:	4b04      	ldr	r3, [pc, #16]	; (80127fc <F_Servo_Fermer+0x1c>)
 80127ec:	22c7      	movs	r2, #199	; 0xc7
 80127ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80127f0:	bf00      	nop
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	40014000 	.word	0x40014000

08012800 <F_TCP_paquetTocmd>:




void F_TCP_paquetTocmd(struct pbuf *p, struct tcp_command *s_cmd_received)
{
 8012800:	b480      	push	{r7}
 8012802:	b08b      	sub	sp, #44	; 0x2c
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
	uint8_t *tempPtr;
	uint8_t i = 0;
 801280a:	2300      	movs	r3, #0
 801280c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tempPtr = (uint8_t *)p->payload;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint8_t tab_reveived[20] = {0};
 8012816:	f107 030c 	add.w	r3, r7, #12
 801281a:	2200      	movs	r2, #0
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	605a      	str	r2, [r3, #4]
 8012820:	609a      	str	r2, [r3, #8]
 8012822:	60da      	str	r2, [r3, #12]
 8012824:	611a      	str	r2, [r3, #16]

	for(i=0; i<(p->len);i++)
 8012826:	2300      	movs	r3, #0
 8012828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801282c:	e010      	b.n	8012850 <F_TCP_paquetTocmd+0x50>
	{

		tab_reveived[i] = (uint8_t) *(tempPtr++);
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	1c5a      	adds	r2, r3, #1
 8012832:	627a      	str	r2, [r7, #36]	; 0x24
 8012834:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8012838:	7819      	ldrb	r1, [r3, #0]
 801283a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801283e:	4413      	add	r3, r2
 8012840:	460a      	mov	r2, r1
 8012842:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(i=0; i<(p->len);i++)
 8012846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801284a:	3301      	adds	r3, #1
 801284c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012854:	b29a      	uxth	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	895b      	ldrh	r3, [r3, #10]
 801285a:	429a      	cmp	r2, r3
 801285c:	d3e7      	bcc.n	801282e <F_TCP_paquetTocmd+0x2e>

	}

	s_cmd_received->id = (uint32_t)((tab_reveived[0] << 24) + (tab_reveived[1] << 16) + (tab_reveived[2] << 8) + tab_reveived[3]);
 801285e:	7b3b      	ldrb	r3, [r7, #12]
 8012860:	b2db      	uxtb	r3, r3
 8012862:	061a      	lsls	r2, r3, #24
 8012864:	7b7b      	ldrb	r3, [r7, #13]
 8012866:	b2db      	uxtb	r3, r3
 8012868:	041b      	lsls	r3, r3, #16
 801286a:	441a      	add	r2, r3
 801286c:	7bbb      	ldrb	r3, [r7, #14]
 801286e:	b2db      	uxtb	r3, r3
 8012870:	021b      	lsls	r3, r3, #8
 8012872:	4413      	add	r3, r2
 8012874:	7bfa      	ldrb	r2, [r7, #15]
 8012876:	b2d2      	uxtb	r2, r2
 8012878:	4413      	add	r3, r2
 801287a:	461a      	mov	r2, r3
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	601a      	str	r2, [r3, #0]
	s_cmd_received->nb_octet = tab_reveived[4];
 8012880:	7c3b      	ldrb	r3, [r7, #16]
 8012882:	b2da      	uxtb	r2, r3
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	711a      	strb	r2, [r3, #4]
	s_cmd_received->cmd = tab_reveived[5];
 8012888:	7c7b      	ldrb	r3, [r7, #17]
 801288a:	b2da      	uxtb	r2, r3
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	715a      	strb	r2, [r3, #5]
	s_cmd_received->nb_param = tab_reveived[6];
 8012890:	7cbb      	ldrb	r3, [r7, #18]
 8012892:	b2da      	uxtb	r2, r3
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	719a      	strb	r2, [r3, #6]
	s_cmd_received->params[0] = (uint16_t)((tab_reveived[7] << 8) + tab_reveived[8]);
 8012898:	7cfb      	ldrb	r3, [r7, #19]
 801289a:	b2db      	uxtb	r3, r3
 801289c:	b29b      	uxth	r3, r3
 801289e:	021b      	lsls	r3, r3, #8
 80128a0:	b29a      	uxth	r2, r3
 80128a2:	7d3b      	ldrb	r3, [r7, #20]
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	4413      	add	r3, r2
 80128aa:	b29a      	uxth	r2, r3
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	811a      	strh	r2, [r3, #8]
	s_cmd_received->params[1] = (uint16_t)((tab_reveived[9] << 8) + tab_reveived[10]);
 80128b0:	7d7b      	ldrb	r3, [r7, #21]
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	021b      	lsls	r3, r3, #8
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	7dbb      	ldrb	r3, [r7, #22]
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	b29b      	uxth	r3, r3
 80128c0:	4413      	add	r3, r2
 80128c2:	b29a      	uxth	r2, r3
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	815a      	strh	r2, [r3, #10]
	s_cmd_received->params[2] = (uint16_t)((tab_reveived[11] << 8) +tab_reveived[12]);
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	021b      	lsls	r3, r3, #8
 80128d0:	b29a      	uxth	r2, r3
 80128d2:	7e3b      	ldrb	r3, [r7, #24]
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	4413      	add	r3, r2
 80128da:	b29a      	uxth	r2, r3
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	819a      	strh	r2, [r3, #12]
	s_cmd_received->params[3] = (uint16_t)((tab_reveived[13] << 8) + tab_reveived[14]);
 80128e0:	7e7b      	ldrb	r3, [r7, #25]
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	021b      	lsls	r3, r3, #8
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	7ebb      	ldrb	r3, [r7, #26]
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	4413      	add	r3, r2
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	81da      	strh	r2, [r3, #14]

}
 80128f8:	bf00      	nop
 80128fa:	372c      	adds	r7, #44	; 0x2c
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr

08012904 <F_TCP_answerTotab>:

void F_TCP_answerTotab(uint8_t *array, struct tcp_answer s_cmd_answer)
{
 8012904:	b084      	sub	sp, #16
 8012906:	b480      	push	{r7}
 8012908:	b085      	sub	sp, #20
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
 801290e:	f107 001c 	add.w	r0, r7, #28
 8012912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t i = 0, j = 0;
 8012916:	2300      	movs	r3, #0
 8012918:	73fb      	strb	r3, [r7, #15]
 801291a:	2300      	movs	r3, #0
 801291c:	73bb      	strb	r3, [r7, #14]

	array[0] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 24));
 801291e:	69fb      	ldr	r3, [r7, #28]
 8012920:	0e1b      	lsrs	r3, r3, #24
 8012922:	b2da      	uxtb	r2, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	701a      	strb	r2, [r3, #0]
	array[1] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 16));
 8012928:	69fb      	ldr	r3, [r7, #28]
 801292a:	0c1a      	lsrs	r2, r3, #16
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	3301      	adds	r3, #1
 8012930:	b2d2      	uxtb	r2, r2
 8012932:	701a      	strb	r2, [r3, #0]
	array[2] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 8));
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	0a1a      	lsrs	r2, r3, #8
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	3302      	adds	r3, #2
 801293c:	b2d2      	uxtb	r2, r2
 801293e:	701a      	strb	r2, [r3, #0]
	array[3] = (uint8_t)(0x00FF & s_cmd_answer.id);
 8012940:	69fa      	ldr	r2, [r7, #28]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	3303      	adds	r3, #3
 8012946:	b2d2      	uxtb	r2, r2
 8012948:	701a      	strb	r2, [r3, #0]
	array[4] = s_cmd_answer.nb_octet;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3304      	adds	r3, #4
 801294e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8012952:	701a      	strb	r2, [r3, #0]
	array[5] = s_cmd_answer.cmd;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	3305      	adds	r3, #5
 8012958:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 801295c:	701a      	strb	r2, [r3, #0]
	array[6] = s_cmd_answer.code_retour;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	3306      	adds	r3, #6
 8012962:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012966:	701a      	strb	r2, [r3, #0]

	for(i=0;i<SIZE_PARAM_CMD;i++)
 8012968:	2300      	movs	r3, #0
 801296a:	73fb      	strb	r3, [r7, #15]
 801296c:	e022      	b.n	80129b4 <F_TCP_answerTotab+0xb0>
	{
		array[7+j] = (uint8_t)(0x00FF & (s_cmd_answer.reponse[i] >> 8));
 801296e:	7bfb      	ldrb	r3, [r7, #15]
 8012970:	3304      	adds	r3, #4
 8012972:	005b      	lsls	r3, r3, #1
 8012974:	f107 0218 	add.w	r2, r7, #24
 8012978:	4413      	add	r3, r2
 801297a:	889b      	ldrh	r3, [r3, #4]
 801297c:	0a1b      	lsrs	r3, r3, #8
 801297e:	b29a      	uxth	r2, r3
 8012980:	7bbb      	ldrb	r3, [r7, #14]
 8012982:	3307      	adds	r3, #7
 8012984:	4619      	mov	r1, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	440b      	add	r3, r1
 801298a:	b2d2      	uxtb	r2, r2
 801298c:	701a      	strb	r2, [r3, #0]
		array[7+j+1] = (uint8_t)(0x00FF & s_cmd_answer.reponse[i]);
 801298e:	7bfb      	ldrb	r3, [r7, #15]
 8012990:	3304      	adds	r3, #4
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	f107 0218 	add.w	r2, r7, #24
 8012998:	4413      	add	r3, r2
 801299a:	8899      	ldrh	r1, [r3, #4]
 801299c:	7bbb      	ldrb	r3, [r7, #14]
 801299e:	3308      	adds	r3, #8
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	4413      	add	r3, r2
 80129a4:	b2ca      	uxtb	r2, r1
 80129a6:	701a      	strb	r2, [r3, #0]

		j+=2;
 80129a8:	7bbb      	ldrb	r3, [r7, #14]
 80129aa:	3302      	adds	r3, #2
 80129ac:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<SIZE_PARAM_CMD;i++)
 80129ae:	7bfb      	ldrb	r3, [r7, #15]
 80129b0:	3301      	adds	r3, #1
 80129b2:	73fb      	strb	r3, [r7, #15]
 80129b4:	7bfb      	ldrb	r3, [r7, #15]
 80129b6:	2b03      	cmp	r3, #3
 80129b8:	d9d9      	bls.n	801296e <F_TCP_answerTotab+0x6a>
	}


}
 80129ba:	bf00      	nop
 80129bc:	3714      	adds	r7, #20
 80129be:	46bd      	mov	sp, r7
 80129c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c4:	b004      	add	sp, #16
 80129c6:	4770      	bx	lr

080129c8 <F_Process_Command>:

/**
 *
 */
void F_Process_Command(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b089      	sub	sp, #36	; 0x24
 80129cc:	af02      	add	r7, sp, #8
 80129ce:	463c      	mov	r4, r7
 80129d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80129d4:	2300      	movs	r3, #0
 80129d6:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->id = s_cmd_received.id; 	// same ID as the received command
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129dc:	601a      	str	r2, [r3, #0]
	s_cmd_answer->nb_octet = NB_OCTETS_CMD;
 80129de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e0:	220f      	movs	r2, #15
 80129e2:	711a      	strb	r2, [r3, #4]
	s_cmd_answer->cmd = s_cmd_received.cmd;	// recall the command executed
 80129e4:	797a      	ldrb	r2, [r7, #5]
 80129e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e8:	715a      	strb	r2, [r3, #5]

	// Process the command depending on the command number
	switch(s_cmd_received.cmd)
 80129ea:	797b      	ldrb	r3, [r7, #5]
 80129ec:	3b01      	subs	r3, #1
 80129ee:	2b0b      	cmp	r3, #11
 80129f0:	d86b      	bhi.n	8012aca <F_Process_Command+0x102>
 80129f2:	a201      	add	r2, pc, #4	; (adr r2, 80129f8 <F_Process_Command+0x30>)
 80129f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129f8:	08012a29 	.word	0x08012a29
 80129fc:	08012a37 	.word	0x08012a37
 8012a00:	08012a49 	.word	0x08012a49
 8012a04:	08012a5b 	.word	0x08012a5b
 8012a08:	08012a69 	.word	0x08012a69
 8012a0c:	08012a77 	.word	0x08012a77
 8012a10:	08012a85 	.word	0x08012a85
 8012a14:	08012a93 	.word	0x08012a93
 8012a18:	08012aa1 	.word	0x08012aa1
 8012a1c:	08012acb 	.word	0x08012acb
 8012a20:	08012aaf 	.word	0x08012aaf
 8012a24:	08012abd 	.word	0x08012abd
	{
		// Get info
		case CMD_INFO:
			F_Cmd_Info(s_cmd_received, s_cmd_answer);
 8012a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2a:	9300      	str	r3, [sp, #0]
 8012a2c:	463b      	mov	r3, r7
 8012a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a30:	f000 f850 	bl	8012ad4 <F_Cmd_Info>
			break;
 8012a34:	e04a      	b.n	8012acc <F_Process_Command+0x104>

		// Set LED
		case CMD_SET_LED:
			status = F_Cmd_SetLED(s_cmd_received, s_cmd_answer);
 8012a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a38:	9300      	str	r3, [sp, #0]
 8012a3a:	463b      	mov	r3, r7
 8012a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a3e:	f000 f8ad 	bl	8012b9c <F_Cmd_SetLED>
 8012a42:	4603      	mov	r3, r0
 8012a44:	75fb      	strb	r3, [r7, #23]
			break;
 8012a46:	e041      	b.n	8012acc <F_Process_Command+0x104>

		// Get LED
		case CMD_GET_LED:
			status = F_Cmd_GetLED(s_cmd_received, s_cmd_answer);
 8012a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4a:	9300      	str	r3, [sp, #0]
 8012a4c:	463b      	mov	r3, r7
 8012a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a50:	f000 f8e2 	bl	8012c18 <F_Cmd_GetLED>
 8012a54:	4603      	mov	r3, r0
 8012a56:	75fb      	strb	r3, [r7, #23]
			break;
 8012a58:	e038      	b.n	8012acc <F_Process_Command+0x104>
		// Get distances from sensors
		case CMD_GET_DISTANCES:
			F_Cmd_GetDistance(s_cmd_received, s_cmd_answer);
 8012a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5c:	9300      	str	r3, [sp, #0]
 8012a5e:	463b      	mov	r3, r7
 8012a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a62:	f000 f913 	bl	8012c8c <F_Cmd_GetDistance>
			break;
 8012a66:	e031      	b.n	8012acc <F_Process_Command+0x104>

		// Set robot's position
		case CMD_SET_POSITION:
			F_Cmd_SetPosition(s_cmd_received, s_cmd_answer);
 8012a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6a:	9300      	str	r3, [sp, #0]
 8012a6c:	463b      	mov	r3, r7
 8012a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a70:	f000 f9b8 	bl	8012de4 <F_Cmd_SetPosition>
			break;
 8012a74:	e02a      	b.n	8012acc <F_Process_Command+0x104>

		// get robot's position
		case CMD_GET_POSITION:
			F_Cmd_GetPosition(s_cmd_received, s_cmd_answer);
 8012a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	463b      	mov	r3, r7
 8012a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a7e:	f000 f973 	bl	8012d68 <F_Cmd_GetPosition>
			break;
 8012a82:	e023      	b.n	8012acc <F_Process_Command+0x104>

		// Start navigation
		case CMD_GO:
			F_Cmd_StartStopRegulation(s_cmd_received, s_cmd_answer);
 8012a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	463b      	mov	r3, r7
 8012a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a8c:	f000 fa0a 	bl	8012ea4 <F_Cmd_StartStopRegulation>
			break;
 8012a90:	e01c      	b.n	8012acc <F_Process_Command+0x104>

		// Add a new point to the list of points
		case CMD_ADD_POINT:
			F_Cmd_AddWayPoint(s_cmd_received, s_cmd_answer);
 8012a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a94:	9300      	str	r3, [sp, #0]
 8012a96:	463b      	mov	r3, r7
 8012a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012a9a:	f000 f9ca 	bl	8012e32 <F_Cmd_AddWayPoint>
			break;
 8012a9e:	e015      	b.n	8012acc <F_Process_Command+0x104>

		// Remove one point from the list of points
		case CMD_RESET_LIST_WAYPOINTS:
			F_Cmd_ResetWayPointsList(s_cmd_received, s_cmd_answer);
 8012aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa2:	9300      	str	r3, [sp, #0]
 8012aa4:	463b      	mov	r3, r7
 8012aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012aa8:	f000 fa24 	bl	8012ef4 <F_Cmd_ResetWayPointsList>
			break;
 8012aac:	e00e      	b.n	8012acc <F_Process_Command+0x104>
		case CMD_GET_LIST_POINTS:
			break;

		// Get the list of points
			case CMD_GET_TIRETTE:
				F_Cmd_GetTirette(s_cmd_received, s_cmd_answer);
 8012aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	463b      	mov	r3, r7
 8012ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ab6:	f000 f913 	bl	8012ce0 <F_Cmd_GetTirette>
			break;
 8012aba:	e007      	b.n	8012acc <F_Process_Command+0x104>

		// Get the list of points
			case CMD_MOVE_SERVO:
				F_Cmd_MoveServo(s_cmd_received, s_cmd_answer);
 8012abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	463b      	mov	r3, r7
 8012ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ac4:	f000 f92b 	bl	8012d1e <F_Cmd_MoveServo>
			break;
 8012ac8:	e000      	b.n	8012acc <F_Process_Command+0x104>


		// Error, unknown command
		default:
			break;
 8012aca:	bf00      	nop

	}


}
 8012acc:	bf00      	nop
 8012ace:	371c      	adds	r7, #28
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd90      	pop	{r4, r7, pc}

08012ad4 <F_Cmd_Info>:
       - bit 0 : Distance 1 & Distance 2 & Distance 3 ==> = 1 if distance < 30cm otherwise 0


 */
uint8_t F_Cmd_Info(Tcp_command s_cmd_received, Tcp_answer *s_cmd_answer)
{
 8012ad4:	b490      	push	{r4, r7}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	463c      	mov	r4, r7
 8012adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	75bb      	strb	r3, [r7, #22]
	uint8_t distance_warning = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	75fb      	strb	r3, [r7, #23]
	if((distance_avant_1 < DISTANCE_WARNING) || (distance_avant_2 < DISTANCE_WARNING) || (distance_avant_3 < DISTANCE_WARNING))
 8012ae8:	4b26      	ldr	r3, [pc, #152]	; (8012b84 <F_Cmd_Info+0xb0>)
 8012aea:	881b      	ldrh	r3, [r3, #0]
 8012aec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012af0:	d309      	bcc.n	8012b06 <F_Cmd_Info+0x32>
 8012af2:	4b25      	ldr	r3, [pc, #148]	; (8012b88 <F_Cmd_Info+0xb4>)
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012afa:	d304      	bcc.n	8012b06 <F_Cmd_Info+0x32>
 8012afc:	4b23      	ldr	r3, [pc, #140]	; (8012b8c <F_Cmd_Info+0xb8>)
 8012afe:	881b      	ldrh	r3, [r3, #0]
 8012b00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012b04:	d201      	bcs.n	8012b0a <F_Cmd_Info+0x36>
	{
		distance_warning = 1;
 8012b06:	2301      	movs	r3, #1
 8012b08:	75fb      	strb	r3, [r7, #23]
	}


	s_cmd_answer->code_retour = status;
 8012b0a:	6a3b      	ldr	r3, [r7, #32]
 8012b0c:	7dba      	ldrb	r2, [r7, #22]
 8012b0e:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (int16_t)(g_estimate.x);
 8012b10:	4b1f      	ldr	r3, [pc, #124]	; (8012b90 <F_Cmd_Info+0xbc>)
 8012b12:	edd3 7a00 	vldr	s15, [r3]
 8012b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b1a:	ee17 3a90 	vmov	r3, s15
 8012b1e:	b21b      	sxth	r3, r3
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	6a3b      	ldr	r3, [r7, #32]
 8012b24:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = (int16_t)(g_estimate.y);
 8012b26:	4b1a      	ldr	r3, [pc, #104]	; (8012b90 <F_Cmd_Info+0xbc>)
 8012b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b30:	ee17 3a90 	vmov	r3, s15
 8012b34:	b21b      	sxth	r3, r3
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	6a3b      	ldr	r3, [r7, #32]
 8012b3a:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = (int16_t)(g_estimate.teta*1000);
 8012b3c:	4b14      	ldr	r3, [pc, #80]	; (8012b90 <F_Cmd_Info+0xbc>)
 8012b3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012b42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8012b94 <F_Cmd_Info+0xc0>
 8012b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b4e:	ee17 3a90 	vmov	r3, s15
 8012b52:	b21b      	sxth	r3, r3
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	6a3b      	ldr	r3, [r7, #32]
 8012b58:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = (uint16_t)((g_nbPoints << 1) | (0x01 & distance_warning));
 8012b5a:	4b0f      	ldr	r3, [pc, #60]	; (8012b98 <F_Cmd_Info+0xc4>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	005b      	lsls	r3, r3, #1
 8012b60:	b21a      	sxth	r2, r3
 8012b62:	7dfb      	ldrb	r3, [r7, #23]
 8012b64:	b21b      	sxth	r3, r3
 8012b66:	f003 0301 	and.w	r3, r3, #1
 8012b6a:	b21b      	sxth	r3, r3
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	b21b      	sxth	r3, r3
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	6a3b      	ldr	r3, [r7, #32]
 8012b74:	81da      	strh	r2, [r3, #14]

	return status;
 8012b76:	7dbb      	ldrb	r3, [r7, #22]

}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3718      	adds	r7, #24
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bc90      	pop	{r4, r7}
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	200003cc 	.word	0x200003cc
 8012b88:	200003ce 	.word	0x200003ce
 8012b8c:	200003d0 	.word	0x200003d0
 8012b90:	20003988 	.word	0x20003988
 8012b94:	447a0000 	.word	0x447a0000
 8012b98:	200003c4 	.word	0x200003c4

08012b9c <F_Cmd_SetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_SetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012b9c:	b590      	push	{r4, r7, lr}
 8012b9e:	b087      	sub	sp, #28
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	463c      	mov	r4, r7
 8012ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	75fb      	strb	r3, [r7, #23]
	// All LEDs

		F_GPIO_SetLedRed(0);
 8012bac:	2000      	movs	r0, #0
 8012bae:	f002 f89d 	bl	8014cec <F_GPIO_SetLedRed>
		F_GPIO_SetLedBlue(0);
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	f002 f8b6 	bl	8014d24 <F_GPIO_SetLedBlue>
		F_GPIO_SetLedGreen(0);
 8012bb8:	2000      	movs	r0, #0
 8012bba:	f002 f8cf 	bl	8014d5c <F_GPIO_SetLedGreen>

	// Red
	if(s_cmd_received.params[0] & 0x01)
 8012bbe:	893b      	ldrh	r3, [r7, #8]
 8012bc0:	f003 0301 	and.w	r3, r3, #1
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d003      	beq.n	8012bd0 <F_Cmd_SetLED+0x34>
	{
		F_GPIO_SetLedBlue(1);
 8012bc8:	2001      	movs	r0, #1
 8012bca:	f002 f8ab 	bl	8014d24 <F_GPIO_SetLedBlue>
 8012bce:	e00f      	b.n	8012bf0 <F_Cmd_SetLED+0x54>
	}
	// blue
	else if(s_cmd_received.params[0] == 2)
 8012bd0:	893b      	ldrh	r3, [r7, #8]
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	d103      	bne.n	8012bde <F_Cmd_SetLED+0x42>
	{
		F_GPIO_SetLedGreen(1);
 8012bd6:	2001      	movs	r0, #1
 8012bd8:	f002 f8c0 	bl	8014d5c <F_GPIO_SetLedGreen>
 8012bdc:	e008      	b.n	8012bf0 <F_Cmd_SetLED+0x54>
	}
	// Green
	else if(s_cmd_received.params[0] == 4)
 8012bde:	893b      	ldrh	r3, [r7, #8]
 8012be0:	2b04      	cmp	r3, #4
 8012be2:	d103      	bne.n	8012bec <F_Cmd_SetLED+0x50>
	{
		F_GPIO_SetLedRed(1);
 8012be4:	2001      	movs	r0, #1
 8012be6:	f002 f881 	bl	8014cec <F_GPIO_SetLedRed>
 8012bea:	e001      	b.n	8012bf0 <F_Cmd_SetLED+0x54>
	}
	else
	{
		status = STATUS_ERROR_PARAM;
 8012bec:	2302      	movs	r3, #2
 8012bee:	75fb      	strb	r3, [r7, #23]
	}

	s_cmd_answer->code_retour = status;
 8012bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf2:	7dfa      	ldrb	r2, [r7, #23]
 8012bf4:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfe:	2200      	movs	r2, #0
 8012c00:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c04:	2200      	movs	r2, #0
 8012c06:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	81da      	strh	r2, [r3, #14]

	return status;
 8012c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	371c      	adds	r7, #28
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd90      	pop	{r4, r7, pc}

08012c18 <F_Cmd_GetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012c18:	b490      	push	{r4, r7}
 8012c1a:	b086      	sub	sp, #24
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	463c      	mov	r4, r7
 8012c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012c24:	2300      	movs	r3, #0
 8012c26:	75fb      	strb	r3, [r7, #23]


	s_cmd_answer->code_retour = status;
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	7dfa      	ldrb	r2, [r7, #23]
 8012c2c:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (((GPIOB->ODR & LED_Red) >> 14) << 2) + ((GPIOB->ODR & LED_Green) << 1) + (((GPIOB->ODR & LED_Blue) >> 7));
 8012c2e:	4b16      	ldr	r3, [pc, #88]	; (8012c88 <F_Cmd_GetLED+0x70>)
 8012c30:	695b      	ldr	r3, [r3, #20]
 8012c32:	0b9b      	lsrs	r3, r3, #14
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	f003 0304 	and.w	r3, r3, #4
 8012c3e:	b29a      	uxth	r2, r3
 8012c40:	4b11      	ldr	r3, [pc, #68]	; (8012c88 <F_Cmd_GetLED+0x70>)
 8012c42:	695b      	ldr	r3, [r3, #20]
 8012c44:	b29b      	uxth	r3, r3
 8012c46:	005b      	lsls	r3, r3, #1
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	f003 0302 	and.w	r3, r3, #2
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	4413      	add	r3, r2
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	4b0c      	ldr	r3, [pc, #48]	; (8012c88 <F_Cmd_GetLED+0x70>)
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	09db      	lsrs	r3, r3, #7
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	f003 0301 	and.w	r3, r3, #1
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	4413      	add	r3, r2
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	6a3b      	ldr	r3, [r7, #32]
 8012c68:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012c6a:	6a3b      	ldr	r3, [r7, #32]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012c70:	6a3b      	ldr	r3, [r7, #32]
 8012c72:	2200      	movs	r2, #0
 8012c74:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012c76:	6a3b      	ldr	r3, [r7, #32]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	81da      	strh	r2, [r3, #14]

	return status;
 8012c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3718      	adds	r7, #24
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bc90      	pop	{r4, r7}
 8012c86:	4770      	bx	lr
 8012c88:	40020400 	.word	0x40020400

08012c8c <F_Cmd_GetDistance>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetDistance(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012c8c:	b490      	push	{r4, r7}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	463c      	mov	r4, r7
 8012c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8012c9c:	6a3b      	ldr	r3, [r7, #32]
 8012c9e:	7dfa      	ldrb	r2, [r7, #23]
 8012ca0:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = distance_avant_1;
 8012ca2:	4b0b      	ldr	r3, [pc, #44]	; (8012cd0 <F_Cmd_GetDistance+0x44>)
 8012ca4:	881a      	ldrh	r2, [r3, #0]
 8012ca6:	6a3b      	ldr	r3, [r7, #32]
 8012ca8:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = distance_avant_2;
 8012caa:	4b0a      	ldr	r3, [pc, #40]	; (8012cd4 <F_Cmd_GetDistance+0x48>)
 8012cac:	881a      	ldrh	r2, [r3, #0]
 8012cae:	6a3b      	ldr	r3, [r7, #32]
 8012cb0:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = distance_avant_3;
 8012cb2:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <F_Cmd_GetDistance+0x4c>)
 8012cb4:	881a      	ldrh	r2, [r3, #0]
 8012cb6:	6a3b      	ldr	r3, [r7, #32]
 8012cb8:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = distance_arriere_1;
 8012cba:	4b08      	ldr	r3, [pc, #32]	; (8012cdc <F_Cmd_GetDistance+0x50>)
 8012cbc:	881a      	ldrh	r2, [r3, #0]
 8012cbe:	6a3b      	ldr	r3, [r7, #32]
 8012cc0:	81da      	strh	r2, [r3, #14]

	return status;
 8012cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bc90      	pop	{r4, r7}
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	200003cc 	.word	0x200003cc
 8012cd4:	200003ce 	.word	0x200003ce
 8012cd8:	200003d0 	.word	0x200003d0
 8012cdc:	200003d2 	.word	0x200003d2

08012ce0 <F_Cmd_GetTirette>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetTirette(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012ce0:	b590      	push	{r4, r7, lr}
 8012ce2:	b087      	sub	sp, #28
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	463c      	mov	r4, r7
 8012ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012cec:	2300      	movs	r3, #0
 8012cee:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8012cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf2:	7dfa      	ldrb	r2, [r7, #23]
 8012cf4:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (uint16_t)(F_GPIO_GetTirette());
 8012cf6:	f002 f84d 	bl	8014d94 <F_GPIO_GetTirette>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d00:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d04:	2200      	movs	r2, #0
 8012d06:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d10:	2200      	movs	r2, #0
 8012d12:	81da      	strh	r2, [r3, #14]

	return status;
 8012d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	371c      	adds	r7, #28
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd90      	pop	{r4, r7, pc}

08012d1e <F_Cmd_MoveServo>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_MoveServo(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012d1e:	b590      	push	{r4, r7, lr}
 8012d20:	b087      	sub	sp, #28
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	463c      	mov	r4, r7
 8012d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	75fb      	strb	r3, [r7, #23]

	if(s_cmd_received.params[0] == 0)
 8012d2e:	893b      	ldrh	r3, [r7, #8]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d102      	bne.n	8012d3a <F_Cmd_MoveServo+0x1c>
	{
		F_Servo_Fermer();
 8012d34:	f7ff fd54 	bl	80127e0 <F_Servo_Fermer>
 8012d38:	e001      	b.n	8012d3e <F_Cmd_MoveServo+0x20>
	}
	else
	{
		F_Servo_Ouvrir();
 8012d3a:	f7ff fd3f 	bl	80127bc <F_Servo_Ouvrir>
	}

	s_cmd_answer->code_retour = status;
 8012d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d40:	7dfa      	ldrb	r2, [r7, #23]
 8012d42:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8012d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d46:	2200      	movs	r2, #0
 8012d48:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d52:	2200      	movs	r2, #0
 8012d54:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d58:	2200      	movs	r2, #0
 8012d5a:	81da      	strh	r2, [r3, #14]

	return status;
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	371c      	adds	r7, #28
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd90      	pop	{r4, r7, pc}
	...

08012d68 <F_Cmd_GetPosition>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetPosition(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012d68:	b490      	push	{r4, r7}
 8012d6a:	b086      	sub	sp, #24
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	463c      	mov	r4, r7
 8012d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012d74:	2300      	movs	r3, #0
 8012d76:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8012d78:	6a3b      	ldr	r3, [r7, #32]
 8012d7a:	7dfa      	ldrb	r2, [r7, #23]
 8012d7c:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (int16_t)(g_estimate.x);
 8012d7e:	4b17      	ldr	r3, [pc, #92]	; (8012ddc <F_Cmd_GetPosition+0x74>)
 8012d80:	edd3 7a00 	vldr	s15, [r3]
 8012d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d88:	ee17 3a90 	vmov	r3, s15
 8012d8c:	b21b      	sxth	r3, r3
 8012d8e:	b29a      	uxth	r2, r3
 8012d90:	6a3b      	ldr	r3, [r7, #32]
 8012d92:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = (int16_t)(g_estimate.y);
 8012d94:	4b11      	ldr	r3, [pc, #68]	; (8012ddc <F_Cmd_GetPosition+0x74>)
 8012d96:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d9e:	ee17 3a90 	vmov	r3, s15
 8012da2:	b21b      	sxth	r3, r3
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	6a3b      	ldr	r3, [r7, #32]
 8012da8:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = (int16_t)(g_estimate.teta*1000);
 8012daa:	4b0c      	ldr	r3, [pc, #48]	; (8012ddc <F_Cmd_GetPosition+0x74>)
 8012dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8012db0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8012de0 <F_Cmd_GetPosition+0x78>
 8012db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012dbc:	ee17 3a90 	vmov	r3, s15
 8012dc0:	b21b      	sxth	r3, r3
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	6a3b      	ldr	r3, [r7, #32]
 8012dc6:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	81da      	strh	r2, [r3, #14]

	return status;
 8012dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3718      	adds	r7, #24
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bc90      	pop	{r4, r7}
 8012dd8:	4770      	bx	lr
 8012dda:	bf00      	nop
 8012ddc:	20003988 	.word	0x20003988
 8012de0:	447a0000 	.word	0x447a0000

08012de4 <F_Cmd_SetPosition>:

/**
 * Set the position of the Robot
 */
uint8_t F_Cmd_SetPosition(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012de4:	b590      	push	{r4, r7, lr}
 8012de6:	b087      	sub	sp, #28
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	463c      	mov	r4, r7
 8012dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012df0:	2300      	movs	r3, #0
 8012df2:	75fb      	strb	r3, [r7, #23]

	F_QEI_setPosition((int16_t)s_cmd_received.params[0], (int16_t)s_cmd_received.params[1], (int16_t)s_cmd_received.params[2]);
 8012df4:	893b      	ldrh	r3, [r7, #8]
 8012df6:	b21b      	sxth	r3, r3
 8012df8:	4618      	mov	r0, r3
 8012dfa:	897b      	ldrh	r3, [r7, #10]
 8012dfc:	b21b      	sxth	r3, r3
 8012dfe:	4619      	mov	r1, r3
 8012e00:	89bb      	ldrh	r3, [r7, #12]
 8012e02:	b21b      	sxth	r3, r3
 8012e04:	461a      	mov	r2, r3
 8012e06:	f000 fb09 	bl	801341c <F_QEI_setPosition>

	s_cmd_answer->code_retour = status;
 8012e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0c:	7dfa      	ldrb	r2, [r7, #23]
 8012e0e:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8012e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e12:	2200      	movs	r2, #0
 8012e14:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e18:	2200      	movs	r2, #0
 8012e1a:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1e:	2200      	movs	r2, #0
 8012e20:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e24:	2200      	movs	r2, #0
 8012e26:	81da      	strh	r2, [r3, #14]

	return status;
 8012e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	371c      	adds	r7, #28
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd90      	pop	{r4, r7, pc}

08012e32 <F_Cmd_AddWayPoint>:

/**
 * Add a new WayPoint to the list of WayPoints
 */
uint8_t F_Cmd_AddWayPoint(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012e32:	b590      	push	{r4, r7, lr}
 8012e34:	b087      	sub	sp, #28
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	463c      	mov	r4, r7
 8012e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	75fb      	strb	r3, [r7, #23]

	status = F_AUTO_AddTargetPoint((float)((int16_t)s_cmd_received.params[0]) , (float)((int16_t)s_cmd_received.params[1]), (float)((int16_t)s_cmd_received.params[2]));
 8012e42:	893b      	ldrh	r3, [r7, #8]
 8012e44:	b21b      	sxth	r3, r3
 8012e46:	ee07 3a90 	vmov	s15, r3
 8012e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e4e:	897b      	ldrh	r3, [r7, #10]
 8012e50:	b21b      	sxth	r3, r3
 8012e52:	ee07 3a10 	vmov	s14, r3
 8012e56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e5a:	89bb      	ldrh	r3, [r7, #12]
 8012e5c:	b21b      	sxth	r3, r3
 8012e5e:	ee06 3a90 	vmov	s13, r3
 8012e62:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012e66:	eeb0 1a66 	vmov.f32	s2, s13
 8012e6a:	eef0 0a47 	vmov.f32	s1, s14
 8012e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8012e72:	f000 fefb 	bl	8013c6c <F_AUTO_AddTargetPoint>
 8012e76:	4603      	mov	r3, r0
 8012e78:	75fb      	strb	r3, [r7, #23]


	s_cmd_answer->code_retour = status;
 8012e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e7c:	7dfa      	ldrb	r2, [r7, #23]
 8012e7e:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = status;
 8012e80:	7dfb      	ldrb	r3, [r7, #23]
 8012e82:	b29a      	uxth	r2, r3
 8012e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e86:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e90:	2200      	movs	r2, #0
 8012e92:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e96:	2200      	movs	r2, #0
 8012e98:	81da      	strh	r2, [r3, #14]

	return status;
 8012e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	371c      	adds	r7, #28
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd90      	pop	{r4, r7, pc}

08012ea4 <F_Cmd_StartStopRegulation>:

/**
 * Start / Stop the regulation
 */
uint8_t F_Cmd_StartStopRegulation(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012ea4:	b590      	push	{r4, r7, lr}
 8012ea6:	b087      	sub	sp, #28
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	463c      	mov	r4, r7
 8012eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	75fb      	strb	r3, [r7, #23]

	// If param 1 = 1, then start regulation
	if(s_cmd_received.params[0] == 1)
 8012eb4:	893b      	ldrh	r3, [r7, #8]
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d102      	bne.n	8012ec0 <F_Cmd_StartStopRegulation+0x1c>
	{
		F_AUTO_Enable();
 8012eba:	f001 f8b3 	bl	8014024 <F_AUTO_Enable>
 8012ebe:	e001      	b.n	8012ec4 <F_Cmd_StartStopRegulation+0x20>
	}
	else
	{
		F_AUTO_Disable();
 8012ec0:	f001 f8bc 	bl	801403c <F_AUTO_Disable>
	}

	s_cmd_answer->code_retour = status;
 8012ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec6:	7dfa      	ldrb	r2, [r7, #23]
 8012ec8:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = (uint16_t)g_enableAUTO;
 8012eca:	4b09      	ldr	r3, [pc, #36]	; (8012ef0 <F_Cmd_StartStopRegulation+0x4c>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed2:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012edc:	2200      	movs	r2, #0
 8012ede:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	81da      	strh	r2, [r3, #14]

	return status;
 8012ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	371c      	adds	r7, #28
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd90      	pop	{r4, r7, pc}
 8012ef0:	2000038c 	.word	0x2000038c

08012ef4 <F_Cmd_ResetWayPointsList>:

/**
 * Reset the list of WayPoints
 */
uint8_t F_Cmd_ResetWayPointsList(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8012ef4:	b590      	push	{r4, r7, lr}
 8012ef6:	b087      	sub	sp, #28
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	463c      	mov	r4, r7
 8012efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8012f00:	2300      	movs	r3, #0
 8012f02:	75fb      	strb	r3, [r7, #23]

	F_AUTO_ResetTargetList();
 8012f04:	f000 ff12 	bl	8013d2c <F_AUTO_ResetTargetList>

	s_cmd_answer->code_retour = status;
 8012f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0a:	7dfa      	ldrb	r2, [r7, #23]
 8012f0c:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8012f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f10:	2200      	movs	r2, #0
 8012f12:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8012f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f16:	2200      	movs	r2, #0
 8012f18:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8012f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8012f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f22:	2200      	movs	r2, #0
 8012f24:	81da      	strh	r2, [r3, #14]

	return status;
 8012f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	371c      	adds	r7, #28
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd90      	pop	{r4, r7, pc}

08012f30 <Init_Motors>:
 *
 */

#include "D_MOTORS.h"

void Init_Motors(void){
 8012f30:	b580      	push	{r7, lr}
 8012f32:	af00      	add	r7, sp, #0
	F_GPIO_SetEnableMotors(1);
 8012f34:	2001      	movs	r0, #1
 8012f36:	f001 ff7f 	bl	8014e38 <F_GPIO_SetEnableMotors>

	MX_TIM4_Init();
 8012f3a:	f003 f851 	bl	8015fe0 <MX_TIM4_Init>
}
 8012f3e:	bf00      	nop
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <F_PWM_SetCmdMotorDroit>:
 *
 * Cela permet de s'interfacer avec les moteurs via une commande +100/-100
 * Pour faire l'automatique c'est obligatoire
 *
 */
void F_PWM_SetCmdMotorDroit(int speed){
 8012f42:	b580      	push	{r7, lr}
 8012f44:	b084      	sub	sp, #16
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
	int dir=0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	60fb      	str	r3, [r7, #12]
	// Bornage de la donnée d'entrée
	if(speed<-100) speed= -100;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8012f54:	da02      	bge.n	8012f5c <F_PWM_SetCmdMotorDroit+0x1a>
 8012f56:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8012f5a:	607b      	str	r3, [r7, #4]
	if(speed> 100) speed=  100;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2b64      	cmp	r3, #100	; 0x64
 8012f60:	dd01      	ble.n	8012f66 <F_PWM_SetCmdMotorDroit+0x24>
 8012f62:	2364      	movs	r3, #100	; 0x64
 8012f64:	607b      	str	r3, [r7, #4]

	// Commande du pont en H
	if(speed < 0){
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	da03      	bge.n	8012f74 <F_PWM_SetCmdMotorDroit+0x32>
		dir = -1;
 8012f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f70:	60fb      	str	r3, [r7, #12]
 8012f72:	e001      	b.n	8012f78 <F_PWM_SetCmdMotorDroit+0x36>
	}else{
		dir = 1;
 8012f74:	2301      	movs	r3, #1
 8012f76:	60fb      	str	r3, [r7, #12]
	}
	F_GPIO_SetMotorDroitDir(dir);
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f001 ff25 	bl	8014dc8 <F_GPIO_SetMotorDroitDir>
	F_PWM_SetDCMotorDroit(speed*dir);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	68fa      	ldr	r2, [r7, #12]
 8012f82:	fb02 f303 	mul.w	r3, r2, r3
 8012f86:	4618      	mov	r0, r3
 8012f88:	f000 f82d 	bl	8012fe6 <F_PWM_SetDCMotorDroit>
}
 8012f8c:	bf00      	nop
 8012f8e:	3710      	adds	r7, #16
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}

08012f94 <F_PWM_SetCmdMotorGauche>:
/**
 *	@param[in] new_pwm_value new Duty cycle value in percentage %
 */
void F_PWM_SetCmdMotorGauche(int speed){
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
	int dir=0;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	60fb      	str	r3, [r7, #12]
	// Bornage de la donnée d'entrée
	if(speed<-100) speed= -100;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8012fa6:	da02      	bge.n	8012fae <F_PWM_SetCmdMotorGauche+0x1a>
 8012fa8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8012fac:	607b      	str	r3, [r7, #4]
	if(speed> 100) speed=  100;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b64      	cmp	r3, #100	; 0x64
 8012fb2:	dd01      	ble.n	8012fb8 <F_PWM_SetCmdMotorGauche+0x24>
 8012fb4:	2364      	movs	r3, #100	; 0x64
 8012fb6:	607b      	str	r3, [r7, #4]

	// Commande du pont en H
	if(speed < 0){
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	da03      	bge.n	8012fc6 <F_PWM_SetCmdMotorGauche+0x32>
		(dir = -1);
 8012fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fc2:	60fb      	str	r3, [r7, #12]
 8012fc4:	e001      	b.n	8012fca <F_PWM_SetCmdMotorGauche+0x36>
	}else{
		(dir = 1);
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	60fb      	str	r3, [r7, #12]
	}
	F_GPIO_SetMotorGaucheDir(dir);
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	f001 ff18 	bl	8014e00 <F_GPIO_SetMotorGaucheDir>
	F_PWM_SetDCMotorGauche(speed*dir);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	fb02 f303 	mul.w	r3, r2, r3
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f000 f80f 	bl	8012ffc <F_PWM_SetDCMotorGauche>
}
 8012fde:	bf00      	nop
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}

08012fe6 <F_PWM_SetDCMotorDroit>:
/**
 *	@param[in] new_pwm_value new Duty cycle value in percentage %
 *
 *	Validé sur NUCLEO F429 ZI le 18-09-2018
 */
void F_PWM_SetDCMotorDroit(int dc){
 8012fe6:	b580      	push	{r7, lr}
 8012fe8:	b082      	sub	sp, #8
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	6078      	str	r0, [r7, #4]
	F_TIM4_CH3_SetDC(dc);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f003 f8cc 	bl	801618c <F_TIM4_CH3_SetDC>
}
 8012ff4:	bf00      	nop
 8012ff6:	3708      	adds	r7, #8
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <F_PWM_SetDCMotorGauche>:
/**
 *	@param[in] new_pwm_value new Duty cycle value in percentage %
 *
 *	Validé sur NUCLEO F429 ZI le 18-09-2018
 */
void F_PWM_SetDCMotorGauche(int dc){
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
	F_TIM4_CH4_SetDC(dc);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f003 f8e1 	bl	80161cc <F_TIM4_CH4_SetDC>
}
 801300a:	bf00      	nop
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <Init_QEI>:

/*
 * Init_QEI Initialize timers 2 and timer 3 as encoder mode
 * Init_QEI Initialize data to zero
 */
void Init_QEI(void){
 8013012:	b580      	push	{r7, lr}
 8013014:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8013016:	f002 ff49 	bl	8015eac <MX_TIM2_Init>
	MX_TIM3_Init();
 801301a:	f002 ffa1 	bl	8015f60 <MX_TIM3_Init>

	F_QEI_Reset();
 801301e:	f000 f803 	bl	8013028 <F_QEI_Reset>
}
 8013022:	bf00      	nop
 8013024:	bd80      	pop	{r7, pc}
	...

08013028 <F_QEI_Reset>:
/*
 * F_QEI_Reset Localization data are reseted to zero;
 */
void F_QEI_Reset(void){
 8013028:	b580      	push	{r7, lr}
 801302a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801302c:	b672      	cpsid	i
	__disable_irq();

	g_oldLeftCount	= 0;
 801302e:	4b12      	ldr	r3, [pc, #72]	; (8013078 <F_QEI_Reset+0x50>)
 8013030:	2200      	movs	r2, #0
 8013032:	601a      	str	r2, [r3, #0]
	g_oldRightCount	= 0;
 8013034:	4b11      	ldr	r3, [pc, #68]	; (801307c <F_QEI_Reset+0x54>)
 8013036:	2200      	movs	r2, #0
 8013038:	601a      	str	r2, [r3, #0]
	g_leftSpeed		= 0;
 801303a:	4b11      	ldr	r3, [pc, #68]	; (8013080 <F_QEI_Reset+0x58>)
 801303c:	2200      	movs	r2, #0
 801303e:	601a      	str	r2, [r3, #0]
	g_rightSpeed	= 0;
 8013040:	4b10      	ldr	r3, [pc, #64]	; (8013084 <F_QEI_Reset+0x5c>)
 8013042:	2200      	movs	r2, #0
 8013044:	601a      	str	r2, [r3, #0]

	g_estimate.x = RBT_OF7_X;
 8013046:	4b10      	ldr	r3, [pc, #64]	; (8013088 <F_QEI_Reset+0x60>)
 8013048:	f04f 0200 	mov.w	r2, #0
 801304c:	601a      	str	r2, [r3, #0]
	g_estimate.y = RBT_OF7_Y;
 801304e:	4b0e      	ldr	r3, [pc, #56]	; (8013088 <F_QEI_Reset+0x60>)
 8013050:	f04f 0200 	mov.w	r2, #0
 8013054:	605a      	str	r2, [r3, #4]
	g_estimate.teta = 0;
 8013056:	4b0c      	ldr	r3, [pc, #48]	; (8013088 <F_QEI_Reset+0x60>)
 8013058:	f04f 0200 	mov.w	r2, #0
 801305c:	609a      	str	r2, [r3, #8]

	TIM2->CNT=0;
 801305e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013062:	2200      	movs	r2, #0
 8013064:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 8013066:	4b09      	ldr	r3, [pc, #36]	; (801308c <F_QEI_Reset+0x64>)
 8013068:	2200      	movs	r2, #0
 801306a:	625a      	str	r2, [r3, #36]	; 0x24

	F_QEI_Read();
 801306c:	f000 f810 	bl	8013090 <F_QEI_Read>
  __ASM volatile ("cpsie i" : : : "memory");
 8013070:	b662      	cpsie	i
	__enable_irq();
}
 8013072:	bf00      	nop
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	2000396c 	.word	0x2000396c
 801307c:	20003984 	.word	0x20003984
 8013080:	2000397c 	.word	0x2000397c
 8013084:	20003980 	.word	0x20003980
 8013088:	20003988 	.word	0x20003988
 801308c:	40000400 	.word	0x40000400

08013090 <F_QEI_Read>:
/*
 * F_QEI_Read is called every Timer 9 interrupt to update encoder's data
 */
void F_QEI_Read (void){
 8013090:	b580      	push	{r7, lr}
 8013092:	af00      	add	r7, sp, #0

	g_oldLeftCount  = g_leftCount ;
 8013094:	4b3f      	ldr	r3, [pc, #252]	; (8013194 <F_QEI_Read+0x104>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	4a3f      	ldr	r2, [pc, #252]	; (8013198 <F_QEI_Read+0x108>)
 801309a:	6013      	str	r3, [r2, #0]
	g_oldRightCount = g_rightCount;
 801309c:	4b3f      	ldr	r3, [pc, #252]	; (801319c <F_QEI_Read+0x10c>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	4a3f      	ldr	r2, [pc, #252]	; (80131a0 <F_QEI_Read+0x110>)
 80130a2:	6013      	str	r3, [r2, #0]

	g_rightCount = TIM2->CNT ;
 80130a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130aa:	461a      	mov	r2, r3
 80130ac:	4b3b      	ldr	r3, [pc, #236]	; (801319c <F_QEI_Read+0x10c>)
 80130ae:	601a      	str	r2, [r3, #0]
	g_leftCount  = TIM3->CNT ;
 80130b0:	4b3c      	ldr	r3, [pc, #240]	; (80131a4 <F_QEI_Read+0x114>)
 80130b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b4:	461a      	mov	r2, r3
 80130b6:	4b37      	ldr	r3, [pc, #220]	; (8013194 <F_QEI_Read+0x104>)
 80130b8:	601a      	str	r2, [r3, #0]

	g_leftSpeed  = g_leftCount  - g_oldLeftCount ;
 80130ba:	4b36      	ldr	r3, [pc, #216]	; (8013194 <F_QEI_Read+0x104>)
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	4b36      	ldr	r3, [pc, #216]	; (8013198 <F_QEI_Read+0x108>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	4a38      	ldr	r2, [pc, #224]	; (80131a8 <F_QEI_Read+0x118>)
 80130c6:	6013      	str	r3, [r2, #0]
	g_rightSpeed = g_rightCount - g_oldRightCount;
 80130c8:	4b34      	ldr	r3, [pc, #208]	; (801319c <F_QEI_Read+0x10c>)
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	4b34      	ldr	r3, [pc, #208]	; (80131a0 <F_QEI_Read+0x110>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	4a36      	ldr	r2, [pc, #216]	; (80131ac <F_QEI_Read+0x11c>)
 80130d4:	6013      	str	r3, [r2, #0]

	// Si on passe par zero en phase descendante
	if(g_leftSpeed  > 4096) g_leftSpeed = -(g_oldLeftCount  + (65535-g_leftCount));
 80130d6:	4b34      	ldr	r3, [pc, #208]	; (80131a8 <F_QEI_Read+0x118>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80130de:	dd0a      	ble.n	80130f6 <F_QEI_Read+0x66>
 80130e0:	4b2c      	ldr	r3, [pc, #176]	; (8013194 <F_QEI_Read+0x104>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80130e8:	33ff      	adds	r3, #255	; 0xff
 80130ea:	4a2b      	ldr	r2, [pc, #172]	; (8013198 <F_QEI_Read+0x108>)
 80130ec:	6812      	ldr	r2, [r2, #0]
 80130ee:	4413      	add	r3, r2
 80130f0:	425b      	negs	r3, r3
 80130f2:	4a2d      	ldr	r2, [pc, #180]	; (80131a8 <F_QEI_Read+0x118>)
 80130f4:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed > 4096) g_rightSpeed= -(g_oldRightCount + (65535-g_rightCount));
 80130f6:	4b2d      	ldr	r3, [pc, #180]	; (80131ac <F_QEI_Read+0x11c>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80130fe:	dd0a      	ble.n	8013116 <F_QEI_Read+0x86>
 8013100:	4b26      	ldr	r3, [pc, #152]	; (801319c <F_QEI_Read+0x10c>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8013108:	33ff      	adds	r3, #255	; 0xff
 801310a:	4a25      	ldr	r2, [pc, #148]	; (80131a0 <F_QEI_Read+0x110>)
 801310c:	6812      	ldr	r2, [r2, #0]
 801310e:	4413      	add	r3, r2
 8013110:	425b      	negs	r3, r3
 8013112:	4a26      	ldr	r2, [pc, #152]	; (80131ac <F_QEI_Read+0x11c>)
 8013114:	6013      	str	r3, [r2, #0]
	// Si on passe par zero en phase montante
	if(g_leftSpeed  < -4096) g_leftSpeed = (g_leftCount + (65535  - g_oldLeftCount));
 8013116:	4b24      	ldr	r3, [pc, #144]	; (80131a8 <F_QEI_Read+0x118>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 801311e:	da09      	bge.n	8013134 <F_QEI_Read+0xa4>
 8013120:	4b1d      	ldr	r3, [pc, #116]	; (8013198 <F_QEI_Read+0x108>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8013128:	33ff      	adds	r3, #255	; 0xff
 801312a:	4a1a      	ldr	r2, [pc, #104]	; (8013194 <F_QEI_Read+0x104>)
 801312c:	6812      	ldr	r2, [r2, #0]
 801312e:	4413      	add	r3, r2
 8013130:	4a1d      	ldr	r2, [pc, #116]	; (80131a8 <F_QEI_Read+0x118>)
 8013132:	6013      	str	r3, [r2, #0]
	if(g_rightSpeed < -4096) g_rightSpeed= (g_rightCount + (65535 - g_oldRightCount));
 8013134:	4b1d      	ldr	r3, [pc, #116]	; (80131ac <F_QEI_Read+0x11c>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 801313c:	da09      	bge.n	8013152 <F_QEI_Read+0xc2>
 801313e:	4b18      	ldr	r3, [pc, #96]	; (80131a0 <F_QEI_Read+0x110>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8013146:	33ff      	adds	r3, #255	; 0xff
 8013148:	4a14      	ldr	r2, [pc, #80]	; (801319c <F_QEI_Read+0x10c>)
 801314a:	6812      	ldr	r2, [r2, #0]
 801314c:	4413      	add	r3, r2
 801314e:	4a17      	ldr	r2, [pc, #92]	; (80131ac <F_QEI_Read+0x11c>)
 8013150:	6013      	str	r3, [r2, #0]

	g_fwdSpeed = (float)( g_leftSpeed + g_rightSpeed ) / 2;
 8013152:	4b15      	ldr	r3, [pc, #84]	; (80131a8 <F_QEI_Read+0x118>)
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	4b15      	ldr	r3, [pc, #84]	; (80131ac <F_QEI_Read+0x11c>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4413      	add	r3, r2
 801315c:	ee07 3a90 	vmov	s15, r3
 8013160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013164:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801316c:	4b10      	ldr	r3, [pc, #64]	; (80131b0 <F_QEI_Read+0x120>)
 801316e:	edc3 7a00 	vstr	s15, [r3]
	g_rotSpeed =  g_rightSpeed - g_leftSpeed;
 8013172:	4b0e      	ldr	r3, [pc, #56]	; (80131ac <F_QEI_Read+0x11c>)
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	4b0c      	ldr	r3, [pc, #48]	; (80131a8 <F_QEI_Read+0x118>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	ee07 3a90 	vmov	s15, r3
 8013180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013184:	4b0b      	ldr	r3, [pc, #44]	; (80131b4 <F_QEI_Read+0x124>)
 8013186:	edc3 7a00 	vstr	s15, [r3]

	F_QEI_XYTetaProcessing();
 801318a:	f000 f815 	bl	80131b8 <F_QEI_XYTetaProcessing>
}
 801318e:	bf00      	nop
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	20003978 	.word	0x20003978
 8013198:	2000396c 	.word	0x2000396c
 801319c:	20003974 	.word	0x20003974
 80131a0:	20003984 	.word	0x20003984
 80131a4:	40000400 	.word	0x40000400
 80131a8:	2000397c 	.word	0x2000397c
 80131ac:	20003980 	.word	0x20003980
 80131b0:	20003968 	.word	0x20003968
 80131b4:	20003970 	.word	0x20003970

080131b8 <F_QEI_XYTetaProcessing>:
/*
 * F_QEI_XYTetaProcessing - Update localization state vector
 */
void F_QEI_XYTetaProcessing(void){
 80131b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80131bc:	ed2d 8b02 	vpush	{d8}
 80131c0:	af00      	add	r7, sp, #0
	g_estimate.x +=  TICKTOMM * g_fwdSpeed  * cosf(g_estimate.teta);
 80131c2:	4b51      	ldr	r3, [pc, #324]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7ed f9c6 	bl	8000558 <__aeabi_f2d>
 80131cc:	4604      	mov	r4, r0
 80131ce:	460d      	mov	r5, r1
 80131d0:	4b4e      	ldr	r3, [pc, #312]	; (801330c <F_QEI_XYTetaProcessing+0x154>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ed f9bf 	bl	8000558 <__aeabi_f2d>
 80131da:	a349      	add	r3, pc, #292	; (adr r3, 8013300 <F_QEI_XYTetaProcessing+0x148>)
 80131dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e0:	f7ed fa12 	bl	8000608 <__aeabi_dmul>
 80131e4:	4602      	mov	r2, r0
 80131e6:	460b      	mov	r3, r1
 80131e8:	4690      	mov	r8, r2
 80131ea:	4699      	mov	r9, r3
 80131ec:	4b46      	ldr	r3, [pc, #280]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 80131ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80131f2:	eeb0 0a67 	vmov.f32	s0, s15
 80131f6:	f004 feb1 	bl	8017f5c <cosf>
 80131fa:	ee10 3a10 	vmov	r3, s0
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ed f9aa 	bl	8000558 <__aeabi_f2d>
 8013204:	4602      	mov	r2, r0
 8013206:	460b      	mov	r3, r1
 8013208:	4640      	mov	r0, r8
 801320a:	4649      	mov	r1, r9
 801320c:	f7ed f9fc 	bl	8000608 <__aeabi_dmul>
 8013210:	4602      	mov	r2, r0
 8013212:	460b      	mov	r3, r1
 8013214:	4620      	mov	r0, r4
 8013216:	4629      	mov	r1, r5
 8013218:	f7ed f840 	bl	800029c <__adddf3>
 801321c:	4603      	mov	r3, r0
 801321e:	460c      	mov	r4, r1
 8013220:	4618      	mov	r0, r3
 8013222:	4621      	mov	r1, r4
 8013224:	f7ed fc22 	bl	8000a6c <__aeabi_d2f>
 8013228:	4602      	mov	r2, r0
 801322a:	4b37      	ldr	r3, [pc, #220]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 801322c:	601a      	str	r2, [r3, #0]
	g_estimate.y +=  TICKTOMM * g_fwdSpeed  * sinf(g_estimate.teta);
 801322e:	4b36      	ldr	r3, [pc, #216]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f7ed f990 	bl	8000558 <__aeabi_f2d>
 8013238:	4604      	mov	r4, r0
 801323a:	460d      	mov	r5, r1
 801323c:	4b33      	ldr	r3, [pc, #204]	; (801330c <F_QEI_XYTetaProcessing+0x154>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4618      	mov	r0, r3
 8013242:	f7ed f989 	bl	8000558 <__aeabi_f2d>
 8013246:	a32e      	add	r3, pc, #184	; (adr r3, 8013300 <F_QEI_XYTetaProcessing+0x148>)
 8013248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801324c:	f7ed f9dc 	bl	8000608 <__aeabi_dmul>
 8013250:	4602      	mov	r2, r0
 8013252:	460b      	mov	r3, r1
 8013254:	4690      	mov	r8, r2
 8013256:	4699      	mov	r9, r3
 8013258:	4b2b      	ldr	r3, [pc, #172]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 801325a:	edd3 7a02 	vldr	s15, [r3, #8]
 801325e:	eeb0 0a67 	vmov.f32	s0, s15
 8013262:	f004 fec3 	bl	8017fec <sinf>
 8013266:	ee10 3a10 	vmov	r3, s0
 801326a:	4618      	mov	r0, r3
 801326c:	f7ed f974 	bl	8000558 <__aeabi_f2d>
 8013270:	4602      	mov	r2, r0
 8013272:	460b      	mov	r3, r1
 8013274:	4640      	mov	r0, r8
 8013276:	4649      	mov	r1, r9
 8013278:	f7ed f9c6 	bl	8000608 <__aeabi_dmul>
 801327c:	4602      	mov	r2, r0
 801327e:	460b      	mov	r3, r1
 8013280:	4620      	mov	r0, r4
 8013282:	4629      	mov	r1, r5
 8013284:	f7ed f80a 	bl	800029c <__adddf3>
 8013288:	4603      	mov	r3, r0
 801328a:	460c      	mov	r4, r1
 801328c:	4618      	mov	r0, r3
 801328e:	4621      	mov	r1, r4
 8013290:	f7ed fbec 	bl	8000a6c <__aeabi_d2f>
 8013294:	4602      	mov	r2, r0
 8013296:	4b1c      	ldr	r3, [pc, #112]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 8013298:	605a      	str	r2, [r3, #4]
	g_estimate.teta +=  tanf( TICKTOMM * g_rotSpeed  / ENTRAXE ) ;
 801329a:	4b1b      	ldr	r3, [pc, #108]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 801329c:	ed93 8a02 	vldr	s16, [r3, #8]
 80132a0:	4b1b      	ldr	r3, [pc, #108]	; (8013310 <F_QEI_XYTetaProcessing+0x158>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7ed f957 	bl	8000558 <__aeabi_f2d>
 80132aa:	a315      	add	r3, pc, #84	; (adr r3, 8013300 <F_QEI_XYTetaProcessing+0x148>)
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	f7ed f9aa 	bl	8000608 <__aeabi_dmul>
 80132b4:	4603      	mov	r3, r0
 80132b6:	460c      	mov	r4, r1
 80132b8:	4618      	mov	r0, r3
 80132ba:	4621      	mov	r1, r4
 80132bc:	f04f 0200 	mov.w	r2, #0
 80132c0:	4b14      	ldr	r3, [pc, #80]	; (8013314 <F_QEI_XYTetaProcessing+0x15c>)
 80132c2:	f7ed facb 	bl	800085c <__aeabi_ddiv>
 80132c6:	4603      	mov	r3, r0
 80132c8:	460c      	mov	r4, r1
 80132ca:	4618      	mov	r0, r3
 80132cc:	4621      	mov	r1, r4
 80132ce:	f7ed fbcd 	bl	8000a6c <__aeabi_d2f>
 80132d2:	4603      	mov	r3, r0
 80132d4:	ee00 3a10 	vmov	s0, r3
 80132d8:	f004 feca 	bl	8018070 <tanf>
 80132dc:	eef0 7a40 	vmov.f32	s15, s0
 80132e0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80132e4:	4b08      	ldr	r3, [pc, #32]	; (8013308 <F_QEI_XYTetaProcessing+0x150>)
 80132e6:	edc3 7a02 	vstr	s15, [r3, #8]

	F_Math_ModuloPi(&g_estimate.teta);
 80132ea:	480b      	ldr	r0, [pc, #44]	; (8013318 <F_QEI_XYTetaProcessing+0x160>)
 80132ec:	f000 feea 	bl	80140c4 <F_Math_ModuloPi>
}
 80132f0:	bf00      	nop
 80132f2:	46bd      	mov	sp, r7
 80132f4:	ecbd 8b02 	vpop	{d8}
 80132f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80132fc:	f3af 8000 	nop.w
 8013300:	611d9602 	.word	0x611d9602
 8013304:	3fb8209f 	.word	0x3fb8209f
 8013308:	20003988 	.word	0x20003988
 801330c:	20003968 	.word	0x20003968
 8013310:	20003970 	.word	0x20003970
 8013314:	406e0000 	.word	0x406e0000
 8013318:	20003990 	.word	0x20003990
 801331c:	00000000 	.word	0x00000000

08013320 <F_QEI_getspeed>:
/*
 * F_QEI_getspeed - Return speed of each motor
 */
void F_QEI_getspeed(float * left, float * right){
 8013320:	b590      	push	{r4, r7, lr}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
	*left  = (float)g_leftSpeed  * TICKTOMM * FREQ_ECH; // In mm per s
 801332a:	4b37      	ldr	r3, [pc, #220]	; (8013408 <F_QEI_getspeed+0xe8>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	ee07 3a90 	vmov	s15, r3
 8013332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013336:	ee17 0a90 	vmov	r0, s15
 801333a:	f7ed f90d 	bl	8000558 <__aeabi_f2d>
 801333e:	a330      	add	r3, pc, #192	; (adr r3, 8013400 <F_QEI_getspeed+0xe0>)
 8013340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013344:	f7ed f960 	bl	8000608 <__aeabi_dmul>
 8013348:	4603      	mov	r3, r0
 801334a:	460c      	mov	r4, r1
 801334c:	4618      	mov	r0, r3
 801334e:	4621      	mov	r1, r4
 8013350:	f04f 0200 	mov.w	r2, #0
 8013354:	4b2d      	ldr	r3, [pc, #180]	; (801340c <F_QEI_getspeed+0xec>)
 8013356:	f7ed f957 	bl	8000608 <__aeabi_dmul>
 801335a:	4603      	mov	r3, r0
 801335c:	460c      	mov	r4, r1
 801335e:	4618      	mov	r0, r3
 8013360:	4621      	mov	r1, r4
 8013362:	f04f 0200 	mov.w	r2, #0
 8013366:	4b2a      	ldr	r3, [pc, #168]	; (8013410 <F_QEI_getspeed+0xf0>)
 8013368:	f7ed fa78 	bl	800085c <__aeabi_ddiv>
 801336c:	4603      	mov	r3, r0
 801336e:	460c      	mov	r4, r1
 8013370:	4618      	mov	r0, r3
 8013372:	4621      	mov	r1, r4
 8013374:	f04f 0200 	mov.w	r2, #0
 8013378:	4b26      	ldr	r3, [pc, #152]	; (8013414 <F_QEI_getspeed+0xf4>)
 801337a:	f7ed f945 	bl	8000608 <__aeabi_dmul>
 801337e:	4603      	mov	r3, r0
 8013380:	460c      	mov	r4, r1
 8013382:	4618      	mov	r0, r3
 8013384:	4621      	mov	r1, r4
 8013386:	f7ed fb71 	bl	8000a6c <__aeabi_d2f>
 801338a:	4602      	mov	r2, r0
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	601a      	str	r2, [r3, #0]
	*right = (float)g_rightSpeed * TICKTOMM * FREQ_ECH;
 8013390:	4b21      	ldr	r3, [pc, #132]	; (8013418 <F_QEI_getspeed+0xf8>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	ee07 3a90 	vmov	s15, r3
 8013398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801339c:	ee17 0a90 	vmov	r0, s15
 80133a0:	f7ed f8da 	bl	8000558 <__aeabi_f2d>
 80133a4:	a316      	add	r3, pc, #88	; (adr r3, 8013400 <F_QEI_getspeed+0xe0>)
 80133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133aa:	f7ed f92d 	bl	8000608 <__aeabi_dmul>
 80133ae:	4603      	mov	r3, r0
 80133b0:	460c      	mov	r4, r1
 80133b2:	4618      	mov	r0, r3
 80133b4:	4621      	mov	r1, r4
 80133b6:	f04f 0200 	mov.w	r2, #0
 80133ba:	4b14      	ldr	r3, [pc, #80]	; (801340c <F_QEI_getspeed+0xec>)
 80133bc:	f7ed f924 	bl	8000608 <__aeabi_dmul>
 80133c0:	4603      	mov	r3, r0
 80133c2:	460c      	mov	r4, r1
 80133c4:	4618      	mov	r0, r3
 80133c6:	4621      	mov	r1, r4
 80133c8:	f04f 0200 	mov.w	r2, #0
 80133cc:	4b10      	ldr	r3, [pc, #64]	; (8013410 <F_QEI_getspeed+0xf0>)
 80133ce:	f7ed fa45 	bl	800085c <__aeabi_ddiv>
 80133d2:	4603      	mov	r3, r0
 80133d4:	460c      	mov	r4, r1
 80133d6:	4618      	mov	r0, r3
 80133d8:	4621      	mov	r1, r4
 80133da:	f04f 0200 	mov.w	r2, #0
 80133de:	4b0d      	ldr	r3, [pc, #52]	; (8013414 <F_QEI_getspeed+0xf4>)
 80133e0:	f7ed f912 	bl	8000608 <__aeabi_dmul>
 80133e4:	4603      	mov	r3, r0
 80133e6:	460c      	mov	r4, r1
 80133e8:	4618      	mov	r0, r3
 80133ea:	4621      	mov	r1, r4
 80133ec:	f7ed fb3e 	bl	8000a6c <__aeabi_d2f>
 80133f0:	4602      	mov	r2, r0
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	601a      	str	r2, [r3, #0]
}
 80133f6:	bf00      	nop
 80133f8:	370c      	adds	r7, #12
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}
 80133fe:	bf00      	nop
 8013400:	5a7ed197 	.word	0x5a7ed197
 8013404:	400921fb 	.word	0x400921fb
 8013408:	2000397c 	.word	0x2000397c
 801340c:	40520000 	.word	0x40520000
 8013410:	40a2c000 	.word	0x40a2c000
 8013414:	40490000 	.word	0x40490000
 8013418:	20003980 	.word	0x20003980

0801341c <F_QEI_setPosition>:
	__enable_irq();
}
/*
 * F_QEI_setLocalisation - Set position and angle
 */
void F_QEI_setPosition( int x_mm, int y_mm, int teta_deg){
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8013428:	b672      	cpsid	i
	__disable_irq();

	g_estimate.x = x_mm ;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	ee07 3a90 	vmov	s15, r3
 8013430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013434:	4b13      	ldr	r3, [pc, #76]	; (8013484 <F_QEI_setPosition+0x68>)
 8013436:	edc3 7a00 	vstr	s15, [r3]
	g_estimate.y = y_mm ;
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	ee07 3a90 	vmov	s15, r3
 8013440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013444:	4b0f      	ldr	r3, [pc, #60]	; (8013484 <F_QEI_setPosition+0x68>)
 8013446:	edc3 7a01 	vstr	s15, [r3, #4]

	if(teta_deg < 360){
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8013450:	da0e      	bge.n	8013470 <F_QEI_setPosition+0x54>
		g_estimate.teta = F_Math_toRad( (float) teta_deg);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	ee07 3a90 	vmov	s15, r3
 8013458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801345c:	eeb0 0a67 	vmov.f32	s0, s15
 8013460:	f000 fdfa 	bl	8014058 <F_Math_toRad>
 8013464:	eef0 7a40 	vmov.f32	s15, s0
 8013468:	4b06      	ldr	r3, [pc, #24]	; (8013484 <F_QEI_setPosition+0x68>)
 801346a:	edc3 7a02 	vstr	s15, [r3, #8]
 801346e:	e003      	b.n	8013478 <F_QEI_setPosition+0x5c>
	}else{
		g_estimate.teta = 0;
 8013470:	4b04      	ldr	r3, [pc, #16]	; (8013484 <F_QEI_setPosition+0x68>)
 8013472:	f04f 0200 	mov.w	r2, #0
 8013476:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8013478:	b662      	cpsie	i
	}

	__enable_irq();
}
 801347a:	bf00      	nop
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	20003988 	.word	0x20003988

08013488 <F_AUTO_SpeedRegulator>:
Localisation consigne[NB_POINT_MAX];

/*
 * Speed regulator for each wheel
 */
void F_AUTO_SpeedRegulator(void){
 8013488:	b5b0      	push	{r4, r5, r7, lr}
 801348a:	b08a      	sub	sp, #40	; 0x28
 801348c:	af00      	add	r7, sp, #0
	// Variables de sortie
	float l_cmd_right;
	float l_cmd_left;

	// Données d'entée de régulateur
	F_QEI_getspeed(&l_leftSpeed,&l_rightSpeed);
 801348e:	1d3a      	adds	r2, r7, #4
 8013490:	463b      	mov	r3, r7
 8013492:	4611      	mov	r1, r2
 8013494:	4618      	mov	r0, r3
 8013496:	f7ff ff43 	bl	8013320 <F_QEI_getspeed>

	// Calcul des erreurs
	l_errLeft  = g_cons_speed_left  - l_leftSpeed;
 801349a:	4bb1      	ldr	r3, [pc, #708]	; (8013760 <F_AUTO_SpeedRegulator+0x2d8>)
 801349c:	ed93 7a00 	vldr	s14, [r3]
 80134a0:	edd7 7a00 	vldr	s15, [r7]
 80134a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134a8:	edc7 7a07 	vstr	s15, [r7, #28]
	l_errRigth = g_cons_speed_right - l_rightSpeed;
 80134ac:	4bad      	ldr	r3, [pc, #692]	; (8013764 <F_AUTO_SpeedRegulator+0x2dc>)
 80134ae:	ed93 7a00 	vldr	s14, [r3]
 80134b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80134b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134ba:	edc7 7a06 	vstr	s15, [r7, #24]

	l_errLeftDt  = l_errLeft - g_errLeftOld ;
 80134be:	4baa      	ldr	r3, [pc, #680]	; (8013768 <F_AUTO_SpeedRegulator+0x2e0>)
 80134c0:	edd3 7a00 	vldr	s15, [r3]
 80134c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80134c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134cc:	edc7 7a05 	vstr	s15, [r7, #20]
	l_errRigthDt = l_errRigth - g_errRightOld ;
 80134d0:	4ba6      	ldr	r3, [pc, #664]	; (801376c <F_AUTO_SpeedRegulator+0x2e4>)
 80134d2:	edd3 7a00 	vldr	s15, [r3]
 80134d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80134da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134de:	edc7 7a04 	vstr	s15, [r7, #16]

	if(token==REG_TETA)
 80134e2:	4ba3      	ldr	r3, [pc, #652]	; (8013770 <F_AUTO_SpeedRegulator+0x2e8>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d124      	bne.n	8013534 <F_AUTO_SpeedRegulator+0xac>
	{
		g_errLeftSum  += l_errLeft  * g_enableAUTO;
 80134ea:	4ba2      	ldr	r3, [pc, #648]	; (8013774 <F_AUTO_SpeedRegulator+0x2ec>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	ee07 3a90 	vmov	s15, r3
 80134f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80134f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80134fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134fe:	4b9e      	ldr	r3, [pc, #632]	; (8013778 <F_AUTO_SpeedRegulator+0x2f0>)
 8013500:	edd3 7a00 	vldr	s15, [r3]
 8013504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013508:	4b9b      	ldr	r3, [pc, #620]	; (8013778 <F_AUTO_SpeedRegulator+0x2f0>)
 801350a:	edc3 7a00 	vstr	s15, [r3]
		g_errRightSum += l_errRigth * g_enableAUTO;
 801350e:	4b99      	ldr	r3, [pc, #612]	; (8013774 <F_AUTO_SpeedRegulator+0x2ec>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	ee07 3a90 	vmov	s15, r3
 8013516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801351a:	edd7 7a06 	vldr	s15, [r7, #24]
 801351e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013522:	4b96      	ldr	r3, [pc, #600]	; (801377c <F_AUTO_SpeedRegulator+0x2f4>)
 8013524:	edd3 7a00 	vldr	s15, [r3]
 8013528:	ee77 7a27 	vadd.f32	s15, s14, s15
 801352c:	4b93      	ldr	r3, [pc, #588]	; (801377c <F_AUTO_SpeedRegulator+0x2f4>)
 801352e:	edc3 7a00 	vstr	s15, [r3]
 8013532:	e033      	b.n	801359c <F_AUTO_SpeedRegulator+0x114>
	}
	else
	{
		g_errLeftSum  += l_errLeft  * g_enableAUTO * g_obstacle_not;
 8013534:	4b8f      	ldr	r3, [pc, #572]	; (8013774 <F_AUTO_SpeedRegulator+0x2ec>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	ee07 3a90 	vmov	s15, r3
 801353c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013540:	edd7 7a07 	vldr	s15, [r7, #28]
 8013544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013548:	4b8d      	ldr	r3, [pc, #564]	; (8013780 <F_AUTO_SpeedRegulator+0x2f8>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	ee07 3a90 	vmov	s15, r3
 8013550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013558:	4b87      	ldr	r3, [pc, #540]	; (8013778 <F_AUTO_SpeedRegulator+0x2f0>)
 801355a:	edd3 7a00 	vldr	s15, [r3]
 801355e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013562:	4b85      	ldr	r3, [pc, #532]	; (8013778 <F_AUTO_SpeedRegulator+0x2f0>)
 8013564:	edc3 7a00 	vstr	s15, [r3]
		g_errRightSum += l_errRigth * g_enableAUTO * g_obstacle_not;
 8013568:	4b82      	ldr	r3, [pc, #520]	; (8013774 <F_AUTO_SpeedRegulator+0x2ec>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	ee07 3a90 	vmov	s15, r3
 8013570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013574:	edd7 7a06 	vldr	s15, [r7, #24]
 8013578:	ee27 7a27 	vmul.f32	s14, s14, s15
 801357c:	4b80      	ldr	r3, [pc, #512]	; (8013780 <F_AUTO_SpeedRegulator+0x2f8>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	ee07 3a90 	vmov	s15, r3
 8013584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013588:	ee27 7a27 	vmul.f32	s14, s14, s15
 801358c:	4b7b      	ldr	r3, [pc, #492]	; (801377c <F_AUTO_SpeedRegulator+0x2f4>)
 801358e:	edd3 7a00 	vldr	s15, [r3]
 8013592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013596:	4b79      	ldr	r3, [pc, #484]	; (801377c <F_AUTO_SpeedRegulator+0x2f4>)
 8013598:	edc3 7a00 	vstr	s15, [r3]
	}
	g_errLeftOld  = l_errLeft;
 801359c:	4a72      	ldr	r2, [pc, #456]	; (8013768 <F_AUTO_SpeedRegulator+0x2e0>)
 801359e:	69fb      	ldr	r3, [r7, #28]
 80135a0:	6013      	str	r3, [r2, #0]
	g_errRightOld = l_errRigth;
 80135a2:	4a72      	ldr	r2, [pc, #456]	; (801376c <F_AUTO_SpeedRegulator+0x2e4>)
 80135a4:	69bb      	ldr	r3, [r7, #24]
 80135a6:	6013      	str	r3, [r2, #0]

	// Calcul de la commande

	l_cmd_left  = (l_errLeft  * KP_SPEED) + (g_errLeftSum  * KI_SPEED) + (l_errLeftDt  * KD_SPEED);
 80135a8:	69f8      	ldr	r0, [r7, #28]
 80135aa:	f7ec ffd5 	bl	8000558 <__aeabi_f2d>
 80135ae:	a368      	add	r3, pc, #416	; (adr r3, 8013750 <F_AUTO_SpeedRegulator+0x2c8>)
 80135b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b4:	f7ed f828 	bl	8000608 <__aeabi_dmul>
 80135b8:	4603      	mov	r3, r0
 80135ba:	460c      	mov	r4, r1
 80135bc:	4625      	mov	r5, r4
 80135be:	461c      	mov	r4, r3
 80135c0:	4b6d      	ldr	r3, [pc, #436]	; (8013778 <F_AUTO_SpeedRegulator+0x2f0>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7ec ffc7 	bl	8000558 <__aeabi_f2d>
 80135ca:	a363      	add	r3, pc, #396	; (adr r3, 8013758 <F_AUTO_SpeedRegulator+0x2d0>)
 80135cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d0:	f7ed f81a 	bl	8000608 <__aeabi_dmul>
 80135d4:	4602      	mov	r2, r0
 80135d6:	460b      	mov	r3, r1
 80135d8:	4620      	mov	r0, r4
 80135da:	4629      	mov	r1, r5
 80135dc:	f7ec fe5e 	bl	800029c <__adddf3>
 80135e0:	4603      	mov	r3, r0
 80135e2:	460c      	mov	r4, r1
 80135e4:	4625      	mov	r5, r4
 80135e6:	461c      	mov	r4, r3
 80135e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80135ec:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013784 <F_AUTO_SpeedRegulator+0x2fc>
 80135f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80135f4:	ee17 0a90 	vmov	r0, s15
 80135f8:	f7ec ffae 	bl	8000558 <__aeabi_f2d>
 80135fc:	4602      	mov	r2, r0
 80135fe:	460b      	mov	r3, r1
 8013600:	4620      	mov	r0, r4
 8013602:	4629      	mov	r1, r5
 8013604:	f7ec fe4a 	bl	800029c <__adddf3>
 8013608:	4603      	mov	r3, r0
 801360a:	460c      	mov	r4, r1
 801360c:	4618      	mov	r0, r3
 801360e:	4621      	mov	r1, r4
 8013610:	f7ed fa2c 	bl	8000a6c <__aeabi_d2f>
 8013614:	4603      	mov	r3, r0
 8013616:	623b      	str	r3, [r7, #32]
	l_cmd_right = (l_errRigth * KP_SPEED) + (g_errRightSum * KI_SPEED) + (l_errRigthDt * KD_SPEED);
 8013618:	69b8      	ldr	r0, [r7, #24]
 801361a:	f7ec ff9d 	bl	8000558 <__aeabi_f2d>
 801361e:	a34c      	add	r3, pc, #304	; (adr r3, 8013750 <F_AUTO_SpeedRegulator+0x2c8>)
 8013620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013624:	f7ec fff0 	bl	8000608 <__aeabi_dmul>
 8013628:	4603      	mov	r3, r0
 801362a:	460c      	mov	r4, r1
 801362c:	4625      	mov	r5, r4
 801362e:	461c      	mov	r4, r3
 8013630:	4b52      	ldr	r3, [pc, #328]	; (801377c <F_AUTO_SpeedRegulator+0x2f4>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	4618      	mov	r0, r3
 8013636:	f7ec ff8f 	bl	8000558 <__aeabi_f2d>
 801363a:	a347      	add	r3, pc, #284	; (adr r3, 8013758 <F_AUTO_SpeedRegulator+0x2d0>)
 801363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013640:	f7ec ffe2 	bl	8000608 <__aeabi_dmul>
 8013644:	4602      	mov	r2, r0
 8013646:	460b      	mov	r3, r1
 8013648:	4620      	mov	r0, r4
 801364a:	4629      	mov	r1, r5
 801364c:	f7ec fe26 	bl	800029c <__adddf3>
 8013650:	4603      	mov	r3, r0
 8013652:	460c      	mov	r4, r1
 8013654:	4625      	mov	r5, r4
 8013656:	461c      	mov	r4, r3
 8013658:	edd7 7a04 	vldr	s15, [r7, #16]
 801365c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013784 <F_AUTO_SpeedRegulator+0x2fc>
 8013660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013664:	ee17 0a90 	vmov	r0, s15
 8013668:	f7ec ff76 	bl	8000558 <__aeabi_f2d>
 801366c:	4602      	mov	r2, r0
 801366e:	460b      	mov	r3, r1
 8013670:	4620      	mov	r0, r4
 8013672:	4629      	mov	r1, r5
 8013674:	f7ec fe12 	bl	800029c <__adddf3>
 8013678:	4603      	mov	r3, r0
 801367a:	460c      	mov	r4, r1
 801367c:	4618      	mov	r0, r3
 801367e:	4621      	mov	r1, r4
 8013680:	f7ed f9f4 	bl	8000a6c <__aeabi_d2f>
 8013684:	4603      	mov	r3, r0
 8013686:	627b      	str	r3, [r7, #36]	; 0x24

	// Gestion de l'acceleration
	l_cmd_right_dV = l_cmd_right - g_cmd_right_old ;
 8013688:	4b3f      	ldr	r3, [pc, #252]	; (8013788 <F_AUTO_SpeedRegulator+0x300>)
 801368a:	edd3 7a00 	vldr	s15, [r3]
 801368e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8013692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013696:	edc7 7a03 	vstr	s15, [r7, #12]
	l_cmd_left_dV  = l_cmd_left  - g_cmd_left_old  ;
 801369a:	4b3c      	ldr	r3, [pc, #240]	; (801378c <F_AUTO_SpeedRegulator+0x304>)
 801369c:	edd3 7a00 	vldr	s15, [r3]
 80136a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80136a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136a8:	edc7 7a02 	vstr	s15, [r7, #8]
	g_cmd_left_old  = l_cmd_left ;
 80136ac:	4a37      	ldr	r2, [pc, #220]	; (801378c <F_AUTO_SpeedRegulator+0x304>)
 80136ae:	6a3b      	ldr	r3, [r7, #32]
 80136b0:	6013      	str	r3, [r2, #0]
	g_cmd_right_old = l_cmd_right;
 80136b2:	4a35      	ldr	r2, [pc, #212]	; (8013788 <F_AUTO_SpeedRegulator+0x300>)
 80136b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b6:	6013      	str	r3, [r2, #0]
	if(l_cmd_right_dV > DV_MAX) l_cmd_right += DV_MAX ;
 80136b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80136bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80136c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80136c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c8:	dd07      	ble.n	80136da <F_AUTO_SpeedRegulator+0x252>
 80136ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80136ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80136d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(l_cmd_left_dV  > DV_MAX) l_cmd_left  += DV_MAX ;
 80136da:	edd7 7a02 	vldr	s15, [r7, #8]
 80136de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80136e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80136e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ea:	dd07      	ble.n	80136fc <F_AUTO_SpeedRegulator+0x274>
 80136ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80136f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80136f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136f8:	edc7 7a08 	vstr	s15, [r7, #32]

	// Application de la commande
	if((g_enableAUTO==0)|| (g_obstacle_not==0 && token!=REG_TETA) ){
 80136fc:	4b1d      	ldr	r3, [pc, #116]	; (8013774 <F_AUTO_SpeedRegulator+0x2ec>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d007      	beq.n	8013714 <F_AUTO_SpeedRegulator+0x28c>
 8013704:	4b1e      	ldr	r3, [pc, #120]	; (8013780 <F_AUTO_SpeedRegulator+0x2f8>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10a      	bne.n	8013722 <F_AUTO_SpeedRegulator+0x29a>
 801370c:	4b18      	ldr	r3, [pc, #96]	; (8013770 <F_AUTO_SpeedRegulator+0x2e8>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	2b03      	cmp	r3, #3
 8013712:	d006      	beq.n	8013722 <F_AUTO_SpeedRegulator+0x29a>
		F_PWM_SetCmdMotorGauche( 0 );
 8013714:	2000      	movs	r0, #0
 8013716:	f7ff fc3d 	bl	8012f94 <F_PWM_SetCmdMotorGauche>
		F_PWM_SetCmdMotorDroit( 0 );
 801371a:	2000      	movs	r0, #0
 801371c:	f7ff fc11 	bl	8012f42 <F_PWM_SetCmdMotorDroit>
 8013720:	e00f      	b.n	8013742 <F_AUTO_SpeedRegulator+0x2ba>
	}else{
		F_PWM_SetCmdMotorGauche((int)l_cmd_left);
 8013722:	edd7 7a08 	vldr	s15, [r7, #32]
 8013726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801372a:	ee17 0a90 	vmov	r0, s15
 801372e:	f7ff fc31 	bl	8012f94 <F_PWM_SetCmdMotorGauche>
		F_PWM_SetCmdMotorDroit((int)l_cmd_right);
 8013732:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8013736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801373a:	ee17 0a90 	vmov	r0, s15
 801373e:	f7ff fc00 	bl	8012f42 <F_PWM_SetCmdMotorDroit>
	}
}
 8013742:	bf00      	nop
 8013744:	3728      	adds	r7, #40	; 0x28
 8013746:	46bd      	mov	sp, r7
 8013748:	bdb0      	pop	{r4, r5, r7, pc}
 801374a:	bf00      	nop
 801374c:	f3af 8000 	nop.w
 8013750:	9999999a 	.word	0x9999999a
 8013754:	3fb99999 	.word	0x3fb99999
 8013758:	47ae147b 	.word	0x47ae147b
 801375c:	3fa47ae1 	.word	0x3fa47ae1
 8013760:	20000398 	.word	0x20000398
 8013764:	20000394 	.word	0x20000394
 8013768:	200003b0 	.word	0x200003b0
 801376c:	200003ac 	.word	0x200003ac
 8013770:	200003c8 	.word	0x200003c8
 8013774:	2000038c 	.word	0x2000038c
 8013778:	200003a8 	.word	0x200003a8
 801377c:	200003a4 	.word	0x200003a4
 8013780:	20000390 	.word	0x20000390
 8013784:	00000000 	.word	0x00000000
 8013788:	2000039c 	.word	0x2000039c
 801378c:	200003a0 	.word	0x200003a0

08013790 <F_AUTO_PositionRegulator>:
	F_AUTO_Normalise(&g_cons_speed_right, &g_cons_speed_left,V_MAX);
}
/*
 * Position regulator called in Timer 10 interrupt
 */
void F_AUTO_PositionRegulator(void){
 8013790:	b590      	push	{r4, r7, lr}
 8013792:	ed2d 8b02 	vpush	{d8}
 8013796:	b089      	sub	sp, #36	; 0x24
 8013798:	af00      	add	r7, sp, #0
	// Variables local
	float l_errT;		// Angular error
	float l_errT_D;		// Angular error evolution
	float l_errD=0;		// Distance error
 801379a:	f04f 0300 	mov.w	r3, #0
 801379e:	61fb      	str	r3, [r7, #28]
	float l_angularReg;	// Sum of proportional, derivative and integral terms of angular error
	float l_distanceReg;// Sum of proportional, derivative and integral terms of distance error
	float l_cap;		// Cape needed to join the following point
	float l_ralentissement=0;
 80137a0:	f04f 0300 	mov.w	r3, #0
 80137a4:	61bb      	str	r3, [r7, #24]

	switch(token){
 80137a6:	4bb6      	ldr	r3, [pc, #728]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	3b01      	subs	r3, #1
 80137ac:	2b05      	cmp	r3, #5
 80137ae:	f200 822e 	bhi.w	8013c0e <F_AUTO_PositionRegulator+0x47e>
 80137b2:	a201      	add	r2, pc, #4	; (adr r2, 80137b8 <F_AUTO_PositionRegulator+0x28>)
 80137b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137b8:	080137fb 	.word	0x080137fb
 80137bc:	08013861 	.word	0x08013861
 80137c0:	08013acd 	.word	0x08013acd
 80137c4:	08013bfd 	.word	0x08013bfd
 80137c8:	08013c0f 	.word	0x08013c0f
 80137cc:	080137d1 	.word	0x080137d1
		case WAIT_LOOP: // Attente de l'activation de g_enableAuto
			if(g_enableAUTO==1 && g_nbPoints!=0){
 80137d0:	4bac      	ldr	r3, [pc, #688]	; (8013a84 <F_AUTO_PositionRegulator+0x2f4>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d107      	bne.n	80137e8 <F_AUTO_PositionRegulator+0x58>
 80137d8:	4bab      	ldr	r3, [pc, #684]	; (8013a88 <F_AUTO_PositionRegulator+0x2f8>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d003      	beq.n	80137e8 <F_AUTO_PositionRegulator+0x58>
				token=REG_CAP_DIST;
 80137e0:	4ba7      	ldr	r3, [pc, #668]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 80137e2:	2202      	movs	r2, #2
 80137e4:	601a      	str	r2, [r3, #0]
			}else{
				g_cons_speed_right = 0 ;
				g_cons_speed_left  = 0 ;
			}
			break;
 80137e6:	e21b      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
				g_cons_speed_right = 0 ;
 80137e8:	4ba8      	ldr	r3, [pc, #672]	; (8013a8c <F_AUTO_PositionRegulator+0x2fc>)
 80137ea:	f04f 0200 	mov.w	r2, #0
 80137ee:	601a      	str	r2, [r3, #0]
				g_cons_speed_left  = 0 ;
 80137f0:	4ba7      	ldr	r3, [pc, #668]	; (8013a90 <F_AUTO_PositionRegulator+0x300>)
 80137f2:	f04f 0200 	mov.w	r2, #0
 80137f6:	601a      	str	r2, [r3, #0]
			break;
 80137f8:	e212      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
		case NEXT_POINT: // Passage au point suivant

			if(g_i_point == (g_nbPoints-1) ){	// j'ai atteint le dernier point
 80137fa:	4ba3      	ldr	r3, [pc, #652]	; (8013a88 <F_AUTO_PositionRegulator+0x2f8>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	1e5a      	subs	r2, r3, #1
 8013800:	4ba4      	ldr	r3, [pc, #656]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	429a      	cmp	r2, r3
 8013806:	d10a      	bne.n	801381e <F_AUTO_PositionRegulator+0x8e>
				printf("AUTO__Pos OK \n\r");
 8013808:	48a3      	ldr	r0, [pc, #652]	; (8013a98 <F_AUTO_PositionRegulator+0x308>)
 801380a:	f003 fbff 	bl	801700c <iprintf>
				g_tetaSum=0;
 801380e:	4ba3      	ldr	r3, [pc, #652]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 8013810:	f04f 0200 	mov.w	r2, #0
 8013814:	601a      	str	r2, [r3, #0]
				token = REG_TETA;
 8013816:	4b9a      	ldr	r3, [pc, #616]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 8013818:	2203      	movs	r2, #3
 801381a:	601a      	str	r2, [r3, #0]
 801381c:	e017      	b.n	801384e <F_AUTO_PositionRegulator+0xbe>
			}else{
				if(g_enableAUTO) g_i_point ++ ;				// Je passe au point suivant
 801381e:	4b99      	ldr	r3, [pc, #612]	; (8013a84 <F_AUTO_PositionRegulator+0x2f4>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d004      	beq.n	8013830 <F_AUTO_PositionRegulator+0xa0>
 8013826:	4b9b      	ldr	r3, [pc, #620]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	3301      	adds	r3, #1
 801382c:	4a99      	ldr	r2, [pc, #612]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 801382e:	6013      	str	r3, [r2, #0]
				if(g_i_point !=0) printf("AUTO__Idx : %d NbPts : %d\n\r",g_i_point,g_nbPoints);
 8013830:	4b98      	ldr	r3, [pc, #608]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d007      	beq.n	8013848 <F_AUTO_PositionRegulator+0xb8>
 8013838:	4b96      	ldr	r3, [pc, #600]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 801383a:	6819      	ldr	r1, [r3, #0]
 801383c:	4b92      	ldr	r3, [pc, #584]	; (8013a88 <F_AUTO_PositionRegulator+0x2f8>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	461a      	mov	r2, r3
 8013842:	4897      	ldr	r0, [pc, #604]	; (8013aa0 <F_AUTO_PositionRegulator+0x310>)
 8013844:	f003 fbe2 	bl	801700c <iprintf>
				token = REG_CAP_DIST;
 8013848:	4b8d      	ldr	r3, [pc, #564]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 801384a:	2202      	movs	r2, #2
 801384c:	601a      	str	r2, [r3, #0]
			}

			if(g_enableAUTO==0) token = WAIT_LOOP;
 801384e:	4b8d      	ldr	r3, [pc, #564]	; (8013a84 <F_AUTO_PositionRegulator+0x2f4>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	f040 81df 	bne.w	8013c16 <F_AUTO_PositionRegulator+0x486>
 8013858:	4b89      	ldr	r3, [pc, #548]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 801385a:	2206      	movs	r2, #6
 801385c:	601a      	str	r2, [r3, #0]
			break;
 801385e:	e1da      	b.n	8013c16 <F_AUTO_PositionRegulator+0x486>

		case REG_CAP_DIST: // Regulation en cap et avance

			// #### Est-ce que je suis arrivé ? ####
			if( F_AUTO_DistanceAvantPoint() < 10 ){
 8013860:	f000 fa70 	bl	8013d44 <F_AUTO_DistanceAvantPoint>
 8013864:	eeb0 7a40 	vmov.f32	s14, s0
 8013868:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801386c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013874:	d50f      	bpl.n	8013896 <F_AUTO_PositionRegulator+0x106>
				g_tetaSum=0;
 8013876:	4b89      	ldr	r3, [pc, #548]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 8013878:	f04f 0200 	mov.w	r2, #0
 801387c:	601a      	str	r2, [r3, #0]
				g_errT_old=0;
 801387e:	4b89      	ldr	r3, [pc, #548]	; (8013aa4 <F_AUTO_PositionRegulator+0x314>)
 8013880:	f04f 0200 	mov.w	r2, #0
 8013884:	601a      	str	r2, [r3, #0]
				g_distSum=0;
 8013886:	4b88      	ldr	r3, [pc, #544]	; (8013aa8 <F_AUTO_PositionRegulator+0x318>)
 8013888:	f04f 0200 	mov.w	r2, #0
 801388c:	601a      	str	r2, [r3, #0]

				token = NEXT_POINT;
 801388e:	4b7c      	ldr	r3, [pc, #496]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 8013890:	2201      	movs	r2, #1
 8013892:	601a      	str	r2, [r3, #0]
				break;
 8013894:	e1c4      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
			}
			// #### Je ne suis pas arrivé ####

			// Gestion de l'angle
			l_cap = atan2f(consigne[g_i_point].y - g_estimate.y , consigne[g_i_point].x - g_estimate.x);
 8013896:	4b7f      	ldr	r3, [pc, #508]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	4984      	ldr	r1, [pc, #528]	; (8013aac <F_AUTO_PositionRegulator+0x31c>)
 801389c:	4613      	mov	r3, r2
 801389e:	005b      	lsls	r3, r3, #1
 80138a0:	4413      	add	r3, r2
 80138a2:	009b      	lsls	r3, r3, #2
 80138a4:	440b      	add	r3, r1
 80138a6:	3304      	adds	r3, #4
 80138a8:	ed93 7a00 	vldr	s14, [r3]
 80138ac:	4b80      	ldr	r3, [pc, #512]	; (8013ab0 <F_AUTO_PositionRegulator+0x320>)
 80138ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80138b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80138b6:	4b77      	ldr	r3, [pc, #476]	; (8013a94 <F_AUTO_PositionRegulator+0x304>)
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	497c      	ldr	r1, [pc, #496]	; (8013aac <F_AUTO_PositionRegulator+0x31c>)
 80138bc:	4613      	mov	r3, r2
 80138be:	005b      	lsls	r3, r3, #1
 80138c0:	4413      	add	r3, r2
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	440b      	add	r3, r1
 80138c6:	ed93 7a00 	vldr	s14, [r3]
 80138ca:	4b79      	ldr	r3, [pc, #484]	; (8013ab0 <F_AUTO_PositionRegulator+0x320>)
 80138cc:	edd3 7a00 	vldr	s15, [r3]
 80138d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138d4:	eef0 0a67 	vmov.f32	s1, s15
 80138d8:	eeb0 0a66 	vmov.f32	s0, s13
 80138dc:	f004 fbf0 	bl	80180c0 <atan2f>
 80138e0:	ed87 0a03 	vstr	s0, [r7, #12]
			l_errT = l_cap - g_estimate.teta ;	// Cape error calculating
 80138e4:	4b72      	ldr	r3, [pc, #456]	; (8013ab0 <F_AUTO_PositionRegulator+0x320>)
 80138e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80138ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80138ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138f2:	edc7 7a01 	vstr	s15, [r7, #4]
			F_Math_ModuloPi(&l_errT) ;
 80138f6:	1d3b      	adds	r3, r7, #4
 80138f8:	4618      	mov	r0, r3
 80138fa:	f000 fbe3 	bl	80140c4 <F_Math_ModuloPi>

			l_errT_D   = l_errT - g_errT_old;		// Derivative
 80138fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8013902:	4b68      	ldr	r3, [pc, #416]	; (8013aa4 <F_AUTO_PositionRegulator+0x314>)
 8013904:	edd3 7a00 	vldr	s15, [r3]
 8013908:	ee77 7a67 	vsub.f32	s15, s14, s15
 801390c:	edc7 7a05 	vstr	s15, [r7, #20]

			if(token==REG_TETA)
 8013910:	4b5b      	ldr	r3, [pc, #364]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b03      	cmp	r3, #3
 8013916:	d112      	bne.n	801393e <F_AUTO_PositionRegulator+0x1ae>
			{
				g_tetaSum += l_errT * g_enableAUTO;		// Update sum
 8013918:	4b5a      	ldr	r3, [pc, #360]	; (8013a84 <F_AUTO_PositionRegulator+0x2f4>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	ee07 3a90 	vmov	s15, r3
 8013920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013924:	edd7 7a01 	vldr	s15, [r7, #4]
 8013928:	ee27 7a27 	vmul.f32	s14, s14, s15
 801392c:	4b5b      	ldr	r3, [pc, #364]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 801392e:	edd3 7a00 	vldr	s15, [r3]
 8013932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013936:	4b59      	ldr	r3, [pc, #356]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 8013938:	edc3 7a00 	vstr	s15, [r3]
 801393c:	e019      	b.n	8013972 <F_AUTO_PositionRegulator+0x1e2>
			}
			else
			{
				g_tetaSum += l_errT * g_enableAUTO * g_obstacle_not;		// Update sum
 801393e:	4b51      	ldr	r3, [pc, #324]	; (8013a84 <F_AUTO_PositionRegulator+0x2f4>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	ee07 3a90 	vmov	s15, r3
 8013946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801394a:	edd7 7a01 	vldr	s15, [r7, #4]
 801394e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013952:	4b58      	ldr	r3, [pc, #352]	; (8013ab4 <F_AUTO_PositionRegulator+0x324>)
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	ee07 3a90 	vmov	s15, r3
 801395a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801395e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013962:	4b4e      	ldr	r3, [pc, #312]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 8013964:	edd3 7a00 	vldr	s15, [r3]
 8013968:	ee77 7a27 	vadd.f32	s15, s14, s15
 801396c:	4b4b      	ldr	r3, [pc, #300]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 801396e:	edc3 7a00 	vstr	s15, [r3]
			}

			g_errT_old = l_errT;					// Save value
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4a4b      	ldr	r2, [pc, #300]	; (8013aa4 <F_AUTO_PositionRegulator+0x314>)
 8013976:	6013      	str	r3, [r2, #0]

			// Gestion de la distance
			l_ralentissement = ( F_Math_Abs(l_errT)/PI ) * V_MAX * 8 ;
 8013978:	edd7 7a01 	vldr	s15, [r7, #4]
 801397c:	eeb0 0a67 	vmov.f32	s0, s15
 8013980:	f000 fbc0 	bl	8014104 <F_Math_Abs>
 8013984:	ee10 3a10 	vmov	r3, s0
 8013988:	4618      	mov	r0, r3
 801398a:	f7ec fde5 	bl	8000558 <__aeabi_f2d>
 801398e:	a33a      	add	r3, pc, #232	; (adr r3, 8013a78 <F_AUTO_PositionRegulator+0x2e8>)
 8013990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013994:	f7ec ff62 	bl	800085c <__aeabi_ddiv>
 8013998:	4603      	mov	r3, r0
 801399a:	460c      	mov	r4, r1
 801399c:	4618      	mov	r0, r3
 801399e:	4621      	mov	r1, r4
 80139a0:	f04f 0200 	mov.w	r2, #0
 80139a4:	4b44      	ldr	r3, [pc, #272]	; (8013ab8 <F_AUTO_PositionRegulator+0x328>)
 80139a6:	f7ec fe2f 	bl	8000608 <__aeabi_dmul>
 80139aa:	4603      	mov	r3, r0
 80139ac:	460c      	mov	r4, r1
 80139ae:	4618      	mov	r0, r3
 80139b0:	4621      	mov	r1, r4
 80139b2:	f04f 0200 	mov.w	r2, #0
 80139b6:	4b41      	ldr	r3, [pc, #260]	; (8013abc <F_AUTO_PositionRegulator+0x32c>)
 80139b8:	f7ec fe26 	bl	8000608 <__aeabi_dmul>
 80139bc:	4603      	mov	r3, r0
 80139be:	460c      	mov	r4, r1
 80139c0:	4618      	mov	r0, r3
 80139c2:	4621      	mov	r1, r4
 80139c4:	f7ed f852 	bl	8000a6c <__aeabi_d2f>
 80139c8:	4603      	mov	r3, r0
 80139ca:	61bb      	str	r3, [r7, #24]
			l_errD = V_MAX;//KP_DIST_POS * F_AUTO_DistanceAvantCible() ;
 80139cc:	4b3c      	ldr	r3, [pc, #240]	; (8013ac0 <F_AUTO_PositionRegulator+0x330>)
 80139ce:	61fb      	str	r3, [r7, #28]

			if( l_errD > V_MAX){
 80139d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80139d4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8013ac4 <F_AUTO_PositionRegulator+0x334>
 80139d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80139dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e0:	dd01      	ble.n	80139e6 <F_AUTO_PositionRegulator+0x256>
				l_errD = V_MAX;
 80139e2:	4b37      	ldr	r3, [pc, #220]	; (8013ac0 <F_AUTO_PositionRegulator+0x330>)
 80139e4:	61fb      	str	r3, [r7, #28]
			}
			if(l_ralentissement > l_errD){
 80139e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80139ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80139ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80139f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f6:	dd01      	ble.n	80139fc <F_AUTO_PositionRegulator+0x26c>
				l_ralentissement = l_errD ;
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	61bb      	str	r3, [r7, #24]
			}

			l_errD = l_errD - l_ralentissement;
 80139fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8013a00:	edd7 7a06 	vldr	s15, [r7, #24]
 8013a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a08:	edc7 7a07 	vstr	s15, [r7, #28]
			//g_distSum += l_errD * g_enableAUTO;		// Update sum

			// Calcul de la commande
			l_angularReg  = ( KP_TETA_POS * l_errT + KI_TETA_POS * g_tetaSum + KD_TETA_POS * l_errT_D ) ;
 8013a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8013a10:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8013ac4 <F_AUTO_PositionRegulator+0x334>
 8013a14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013a18:	4b20      	ldr	r3, [pc, #128]	; (8013a9c <F_AUTO_PositionRegulator+0x30c>)
 8013a1a:	edd3 7a00 	vldr	s15, [r3]
 8013a1e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013ac8 <F_AUTO_PositionRegulator+0x338>
 8013a22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8013a2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013ac8 <F_AUTO_PositionRegulator+0x338>
 8013a32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a3a:	edc7 7a04 	vstr	s15, [r7, #16]
			l_distanceReg = ( KP_DIST_POS * l_errD );//+ KI_DIST_POS * g_distSum) ;
 8013a3e:	69fb      	ldr	r3, [r7, #28]
 8013a40:	60bb      	str	r3, [r7, #8]

			g_cons_speed_right = l_distanceReg + l_angularReg ;
 8013a42:	ed97 7a02 	vldr	s14, [r7, #8]
 8013a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a4e:	4b0f      	ldr	r3, [pc, #60]	; (8013a8c <F_AUTO_PositionRegulator+0x2fc>)
 8013a50:	edc3 7a00 	vstr	s15, [r3]
			g_cons_speed_left  = l_distanceReg - l_angularReg ;
 8013a54:	ed97 7a02 	vldr	s14, [r7, #8]
 8013a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8013a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a60:	4b0b      	ldr	r3, [pc, #44]	; (8013a90 <F_AUTO_PositionRegulator+0x300>)
 8013a62:	edc3 7a00 	vstr	s15, [r3]

			if(g_enableAUTO==0) token = WAIT_LOOP;
 8013a66:	4b07      	ldr	r3, [pc, #28]	; (8013a84 <F_AUTO_PositionRegulator+0x2f4>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f040 80d5 	bne.w	8013c1a <F_AUTO_PositionRegulator+0x48a>
 8013a70:	4b03      	ldr	r3, [pc, #12]	; (8013a80 <F_AUTO_PositionRegulator+0x2f0>)
 8013a72:	2206      	movs	r2, #6
 8013a74:	601a      	str	r2, [r3, #0]
			break;
 8013a76:	e0d0      	b.n	8013c1a <F_AUTO_PositionRegulator+0x48a>
 8013a78:	5a7ed197 	.word	0x5a7ed197
 8013a7c:	400921fb 	.word	0x400921fb
 8013a80:	200003c8 	.word	0x200003c8
 8013a84:	2000038c 	.word	0x2000038c
 8013a88:	200003c4 	.word	0x200003c4
 8013a8c:	20000394 	.word	0x20000394
 8013a90:	20000398 	.word	0x20000398
 8013a94:	200003c0 	.word	0x200003c0
 8013a98:	0801b020 	.word	0x0801b020
 8013a9c:	200003b4 	.word	0x200003b4
 8013aa0:	0801b030 	.word	0x0801b030
 8013aa4:	200003b8 	.word	0x200003b8
 8013aa8:	200003bc 	.word	0x200003bc
 8013aac:	20003994 	.word	0x20003994
 8013ab0:	20003988 	.word	0x20003988
 8013ab4:	20000390 	.word	0x20000390
 8013ab8:	40690000 	.word	0x40690000
 8013abc:	40200000 	.word	0x40200000
 8013ac0:	43480000 	.word	0x43480000
 8013ac4:	43480000 	.word	0x43480000
 8013ac8:	00000000 	.word	0x00000000

		case REG_TETA: // Regulation en teta

			l_errT =   consigne[g_i_point].teta - g_estimate.teta ;	// Theta error calculating
 8013acc:	4b5a      	ldr	r3, [pc, #360]	; (8013c38 <F_AUTO_PositionRegulator+0x4a8>)
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	495a      	ldr	r1, [pc, #360]	; (8013c3c <F_AUTO_PositionRegulator+0x4ac>)
 8013ad2:	4613      	mov	r3, r2
 8013ad4:	005b      	lsls	r3, r3, #1
 8013ad6:	4413      	add	r3, r2
 8013ad8:	009b      	lsls	r3, r3, #2
 8013ada:	440b      	add	r3, r1
 8013adc:	3308      	adds	r3, #8
 8013ade:	ed93 7a00 	vldr	s14, [r3]
 8013ae2:	4b57      	ldr	r3, [pc, #348]	; (8013c40 <F_AUTO_PositionRegulator+0x4b0>)
 8013ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8013ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013aec:	edc7 7a01 	vstr	s15, [r7, #4]
			F_Math_ModuloPi(&l_errT);
 8013af0:	1d3b      	adds	r3, r7, #4
 8013af2:	4618      	mov	r0, r3
 8013af4:	f000 fae6 	bl	80140c4 <F_Math_ModuloPi>

			if(F_Math_Abs(l_errT) < F_Math_toRad(1)){
 8013af8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013afc:	eeb0 0a67 	vmov.f32	s0, s15
 8013b00:	f000 fb00 	bl	8014104 <F_Math_Abs>
 8013b04:	eeb0 8a40 	vmov.f32	s16, s0
 8013b08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013b0c:	f000 faa4 	bl	8014058 <F_Math_toRad>
 8013b10:	eef0 7a40 	vmov.f32	s15, s0
 8013b14:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1c:	d506      	bpl.n	8013b2c <F_AUTO_PositionRegulator+0x39c>
				printf("AUTO__Teta OK \n\r");
 8013b1e:	4849      	ldr	r0, [pc, #292]	; (8013c44 <F_AUTO_PositionRegulator+0x4b4>)
 8013b20:	f003 fa74 	bl	801700c <iprintf>
				token = REG_TARGET_OK;
 8013b24:	4b48      	ldr	r3, [pc, #288]	; (8013c48 <F_AUTO_PositionRegulator+0x4b8>)
 8013b26:	2204      	movs	r2, #4
 8013b28:	601a      	str	r2, [r3, #0]
				break;
 8013b2a:	e079      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
			}

			l_errT_D   = l_errT - g_errT_old;		// Derivative
 8013b2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8013b30:	4b46      	ldr	r3, [pc, #280]	; (8013c4c <F_AUTO_PositionRegulator+0x4bc>)
 8013b32:	edd3 7a00 	vldr	s15, [r3]
 8013b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b3a:	edc7 7a05 	vstr	s15, [r7, #20]
			if(token==REG_TETA)
 8013b3e:	4b42      	ldr	r3, [pc, #264]	; (8013c48 <F_AUTO_PositionRegulator+0x4b8>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b03      	cmp	r3, #3
 8013b44:	d112      	bne.n	8013b6c <F_AUTO_PositionRegulator+0x3dc>
			{
				g_tetaSum += l_errT * g_enableAUTO;		// Update sum
 8013b46:	4b42      	ldr	r3, [pc, #264]	; (8013c50 <F_AUTO_PositionRegulator+0x4c0>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	ee07 3a90 	vmov	s15, r3
 8013b4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8013b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b5a:	4b3e      	ldr	r3, [pc, #248]	; (8013c54 <F_AUTO_PositionRegulator+0x4c4>)
 8013b5c:	edd3 7a00 	vldr	s15, [r3]
 8013b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b64:	4b3b      	ldr	r3, [pc, #236]	; (8013c54 <F_AUTO_PositionRegulator+0x4c4>)
 8013b66:	edc3 7a00 	vstr	s15, [r3]
 8013b6a:	e019      	b.n	8013ba0 <F_AUTO_PositionRegulator+0x410>
			}
			else
			{
				g_tetaSum += l_errT * g_enableAUTO * g_obstacle_not;		// Update sum
 8013b6c:	4b38      	ldr	r3, [pc, #224]	; (8013c50 <F_AUTO_PositionRegulator+0x4c0>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	ee07 3a90 	vmov	s15, r3
 8013b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8013b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b80:	4b35      	ldr	r3, [pc, #212]	; (8013c58 <F_AUTO_PositionRegulator+0x4c8>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	ee07 3a90 	vmov	s15, r3
 8013b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b90:	4b30      	ldr	r3, [pc, #192]	; (8013c54 <F_AUTO_PositionRegulator+0x4c4>)
 8013b92:	edd3 7a00 	vldr	s15, [r3]
 8013b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013b9a:	4b2e      	ldr	r3, [pc, #184]	; (8013c54 <F_AUTO_PositionRegulator+0x4c4>)
 8013b9c:	edc3 7a00 	vstr	s15, [r3]
			}

			g_errT_old = l_errT;					// Save value
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	4a2a      	ldr	r2, [pc, #168]	; (8013c4c <F_AUTO_PositionRegulator+0x4bc>)
 8013ba4:	6013      	str	r3, [r2, #0]

			// Calcul de la commande
			l_angularReg  = ( KP_TETA_POS * l_errT + KI_TETA_POS * g_tetaSum + KD_TETA_POS * l_errT_D ) ;
 8013ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8013baa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8013c5c <F_AUTO_PositionRegulator+0x4cc>
 8013bae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013bb2:	4b28      	ldr	r3, [pc, #160]	; (8013c54 <F_AUTO_PositionRegulator+0x4c4>)
 8013bb4:	edd3 7a00 	vldr	s15, [r3]
 8013bb8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013c60 <F_AUTO_PositionRegulator+0x4d0>
 8013bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8013bc8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013c60 <F_AUTO_PositionRegulator+0x4d0>
 8013bcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bd4:	edc7 7a04 	vstr	s15, [r7, #16]

			g_cons_speed_right =  l_angularReg ;
 8013bd8:	4a22      	ldr	r2, [pc, #136]	; (8013c64 <F_AUTO_PositionRegulator+0x4d4>)
 8013bda:	693b      	ldr	r3, [r7, #16]
 8013bdc:	6013      	str	r3, [r2, #0]
			g_cons_speed_left  = -l_angularReg ;
 8013bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8013be2:	eef1 7a67 	vneg.f32	s15, s15
 8013be6:	4b20      	ldr	r3, [pc, #128]	; (8013c68 <F_AUTO_PositionRegulator+0x4d8>)
 8013be8:	edc3 7a00 	vstr	s15, [r3]

			if(g_enableAUTO==0) token = WAIT_LOOP;
 8013bec:	4b18      	ldr	r3, [pc, #96]	; (8013c50 <F_AUTO_PositionRegulator+0x4c0>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d114      	bne.n	8013c1e <F_AUTO_PositionRegulator+0x48e>
 8013bf4:	4b14      	ldr	r3, [pc, #80]	; (8013c48 <F_AUTO_PositionRegulator+0x4b8>)
 8013bf6:	2206      	movs	r2, #6
 8013bf8:	601a      	str	r2, [r3, #0]
			break;
 8013bfa:	e010      	b.n	8013c1e <F_AUTO_PositionRegulator+0x48e>

		case REG_TARGET_OK:// Je suis arrivé
			F_AUTO_ResetTargetList();
 8013bfc:	f000 f896 	bl	8013d2c <F_AUTO_ResetTargetList>
			g_i_point=0;
 8013c00:	4b0d      	ldr	r3, [pc, #52]	; (8013c38 <F_AUTO_PositionRegulator+0x4a8>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	601a      	str	r2, [r3, #0]
			token = WAIT_LOOP;
 8013c06:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <F_AUTO_PositionRegulator+0x4b8>)
 8013c08:	2206      	movs	r2, #6
 8013c0a:	601a      	str	r2, [r3, #0]
			break;
 8013c0c:	e008      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
		default: // Error go to state 1;
			token = WAIT_LOOP;
 8013c0e:	4b0e      	ldr	r3, [pc, #56]	; (8013c48 <F_AUTO_PositionRegulator+0x4b8>)
 8013c10:	2206      	movs	r2, #6
 8013c12:	601a      	str	r2, [r3, #0]
 8013c14:	e004      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
			break;
 8013c16:	bf00      	nop
 8013c18:	e002      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
			break;
 8013c1a:	bf00      	nop
 8013c1c:	e000      	b.n	8013c20 <F_AUTO_PositionRegulator+0x490>
			break;
 8013c1e:	bf00      	nop
	}

	F_AUTO_Normalise(&g_cons_speed_left,&g_cons_speed_right,V_MAX);
 8013c20:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013c5c <F_AUTO_PositionRegulator+0x4cc>
 8013c24:	490f      	ldr	r1, [pc, #60]	; (8013c64 <F_AUTO_PositionRegulator+0x4d4>)
 8013c26:	4810      	ldr	r0, [pc, #64]	; (8013c68 <F_AUTO_PositionRegulator+0x4d8>)
 8013c28:	f000 f976 	bl	8013f18 <F_AUTO_Normalise>

}
 8013c2c:	bf00      	nop
 8013c2e:	3724      	adds	r7, #36	; 0x24
 8013c30:	46bd      	mov	sp, r7
 8013c32:	ecbd 8b02 	vpop	{d8}
 8013c36:	bd90      	pop	{r4, r7, pc}
 8013c38:	200003c0 	.word	0x200003c0
 8013c3c:	20003994 	.word	0x20003994
 8013c40:	20003988 	.word	0x20003988
 8013c44:	0801b04c 	.word	0x0801b04c
 8013c48:	200003c8 	.word	0x200003c8
 8013c4c:	200003b8 	.word	0x200003b8
 8013c50:	2000038c 	.word	0x2000038c
 8013c54:	200003b4 	.word	0x200003b4
 8013c58:	20000390 	.word	0x20000390
 8013c5c:	43480000 	.word	0x43480000
 8013c60:	00000000 	.word	0x00000000
 8013c64:	20000394 	.word	0x20000394
 8013c68:	20000398 	.word	0x20000398

08013c6c <F_AUTO_AddTargetPoint>:
	return returnCode;
}
/*
 * Add point trajectory
 */
uint8_t F_AUTO_AddTargetPoint(float x_mm , float y_mm, float angle_deg){
 8013c6c:	b590      	push	{r4, r7, lr}
 8013c6e:	b085      	sub	sp, #20
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	ed87 0a03 	vstr	s0, [r7, #12]
 8013c76:	edc7 0a02 	vstr	s1, [r7, #8]
 8013c7a:	ed87 1a01 	vstr	s2, [r7, #4]
		//y_mm= -y_mm;
	if(g_nbPoints<NB_POINT_MAX){
 8013c7e:	4b27      	ldr	r3, [pc, #156]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2bfd      	cmp	r3, #253	; 0xfd
 8013c84:	dc42      	bgt.n	8013d0c <F_AUTO_AddTargetPoint+0xa0>
		angle_deg=F_Math_toRad(angle_deg);
 8013c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8013c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8013c8e:	f000 f9e3 	bl	8014058 <F_Math_toRad>
 8013c92:	eef0 7a40 	vmov.f32	s15, s0
 8013c96:	edc7 7a01 	vstr	s15, [r7, #4]
		F_Math_ModuloPi(&angle_deg);
 8013c9a:	1d3b      	adds	r3, r7, #4
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 fa11 	bl	80140c4 <F_Math_ModuloPi>

		consigne[g_nbPoints].x = x_mm;
 8013ca2:	4b1e      	ldr	r3, [pc, #120]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	491e      	ldr	r1, [pc, #120]	; (8013d20 <F_AUTO_AddTargetPoint+0xb4>)
 8013ca8:	4613      	mov	r3, r2
 8013caa:	005b      	lsls	r3, r3, #1
 8013cac:	4413      	add	r3, r2
 8013cae:	009b      	lsls	r3, r3, #2
 8013cb0:	440b      	add	r3, r1
 8013cb2:	68fa      	ldr	r2, [r7, #12]
 8013cb4:	601a      	str	r2, [r3, #0]
		consigne[g_nbPoints].y = y_mm;
 8013cb6:	4b19      	ldr	r3, [pc, #100]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013cb8:	681a      	ldr	r2, [r3, #0]
 8013cba:	4919      	ldr	r1, [pc, #100]	; (8013d20 <F_AUTO_AddTargetPoint+0xb4>)
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	005b      	lsls	r3, r3, #1
 8013cc0:	4413      	add	r3, r2
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	440b      	add	r3, r1
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	68ba      	ldr	r2, [r7, #8]
 8013cca:	601a      	str	r2, [r3, #0]
		consigne[g_nbPoints].teta = angle_deg;
 8013ccc:	4b13      	ldr	r3, [pc, #76]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	6879      	ldr	r1, [r7, #4]
 8013cd2:	4813      	ldr	r0, [pc, #76]	; (8013d20 <F_AUTO_AddTargetPoint+0xb4>)
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	005b      	lsls	r3, r3, #1
 8013cd8:	4413      	add	r3, r2
 8013cda:	009b      	lsls	r3, r3, #2
 8013cdc:	4403      	add	r3, r0
 8013cde:	3308      	adds	r3, #8
 8013ce0:	6019      	str	r1, [r3, #0]

		g_nbPoints++;
 8013ce2:	4b0e      	ldr	r3, [pc, #56]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	4a0c      	ldr	r2, [pc, #48]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013cea:	6013      	str	r3, [r2, #0]
		printf("AUTO: AddPt: Nb de point = %d Dist tot = %d \n\r",g_nbPoints,(int)F_AUTO_DistanceAvantCible());
 8013cec:	4b0b      	ldr	r3, [pc, #44]	; (8013d1c <F_AUTO_AddTargetPoint+0xb0>)
 8013cee:	681c      	ldr	r4, [r3, #0]
 8013cf0:	f000 f870 	bl	8013dd4 <F_AUTO_DistanceAvantCible>
 8013cf4:	eef0 7a40 	vmov.f32	s15, s0
 8013cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013cfc:	ee17 2a90 	vmov	r2, s15
 8013d00:	4621      	mov	r1, r4
 8013d02:	4808      	ldr	r0, [pc, #32]	; (8013d24 <F_AUTO_AddTargetPoint+0xb8>)
 8013d04:	f003 f982 	bl	801700c <iprintf>
		return STATUS_AUTO_OK;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	e003      	b.n	8013d14 <F_AUTO_AddTargetPoint+0xa8>
	}else{
		printf("AUTO: AddPt: Erreur nb de pts trop important \n\r");
 8013d0c:	4806      	ldr	r0, [pc, #24]	; (8013d28 <F_AUTO_AddTargetPoint+0xbc>)
 8013d0e:	f003 f97d 	bl	801700c <iprintf>
		return STATUS_AUTO_ERROR;
 8013d12:	2301      	movs	r3, #1
	}
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3714      	adds	r7, #20
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd90      	pop	{r4, r7, pc}
 8013d1c:	200003c4 	.word	0x200003c4
 8013d20:	20003994 	.word	0x20003994
 8013d24:	0801b060 	.word	0x0801b060
 8013d28:	0801b090 	.word	0x0801b090

08013d2c <F_AUTO_ResetTargetList>:
/*
 *
 */
void F_AUTO_ResetTargetList(void){
 8013d2c:	b480      	push	{r7}
 8013d2e:	af00      	add	r7, sp, #0
	g_nbPoints=0;
 8013d30:	4b03      	ldr	r3, [pc, #12]	; (8013d40 <F_AUTO_ResetTargetList+0x14>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	601a      	str	r2, [r3, #0]
}
 8013d36:	bf00      	nop
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr
 8013d40:	200003c4 	.word	0x200003c4

08013d44 <F_AUTO_DistanceAvantPoint>:
/*
 *
 */
float F_AUTO_DistanceAvantPoint(){
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b084      	sub	sp, #16
 8013d48:	af00      	add	r7, sp, #0
	float a = g_estimate.x - consigne[g_i_point].x;
 8013d4a:	4b1f      	ldr	r3, [pc, #124]	; (8013dc8 <F_AUTO_DistanceAvantPoint+0x84>)
 8013d4c:	ed93 7a00 	vldr	s14, [r3]
 8013d50:	4b1e      	ldr	r3, [pc, #120]	; (8013dcc <F_AUTO_DistanceAvantPoint+0x88>)
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	491e      	ldr	r1, [pc, #120]	; (8013dd0 <F_AUTO_DistanceAvantPoint+0x8c>)
 8013d56:	4613      	mov	r3, r2
 8013d58:	005b      	lsls	r3, r3, #1
 8013d5a:	4413      	add	r3, r2
 8013d5c:	009b      	lsls	r3, r3, #2
 8013d5e:	440b      	add	r3, r1
 8013d60:	edd3 7a00 	vldr	s15, [r3]
 8013d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d68:	edc7 7a03 	vstr	s15, [r7, #12]
	float b = g_estimate.y - consigne[g_i_point].y;
 8013d6c:	4b16      	ldr	r3, [pc, #88]	; (8013dc8 <F_AUTO_DistanceAvantPoint+0x84>)
 8013d6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8013d72:	4b16      	ldr	r3, [pc, #88]	; (8013dcc <F_AUTO_DistanceAvantPoint+0x88>)
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	4916      	ldr	r1, [pc, #88]	; (8013dd0 <F_AUTO_DistanceAvantPoint+0x8c>)
 8013d78:	4613      	mov	r3, r2
 8013d7a:	005b      	lsls	r3, r3, #1
 8013d7c:	4413      	add	r3, r2
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	440b      	add	r3, r1
 8013d82:	3304      	adds	r3, #4
 8013d84:	edd3 7a00 	vldr	s15, [r3]
 8013d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d8c:	edc7 7a02 	vstr	s15, [r7, #8]
	float dist = sqrtf((a*a)+(b*b)) ;
 8013d90:	ed97 7a03 	vldr	s14, [r7, #12]
 8013d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8013d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d9c:	edd7 6a02 	vldr	s13, [r7, #8]
 8013da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8013da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dac:	eeb0 0a67 	vmov.f32	s0, s15
 8013db0:	f004 f988 	bl	80180c4 <sqrtf>
 8013db4:	ed87 0a01 	vstr	s0, [r7, #4]

	return dist;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	ee07 3a90 	vmov	s15, r3
}
 8013dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8013dc2:	3710      	adds	r7, #16
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	20003988 	.word	0x20003988
 8013dcc:	200003c0 	.word	0x200003c0
 8013dd0:	20003994 	.word	0x20003994

08013dd4 <F_AUTO_DistanceAvantCible>:
/*
 * Distance between us and final target point
 */
float F_AUTO_DistanceAvantCible(){
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
	float a = g_estimate.x - consigne[g_i_point].x;
 8013dda:	4b4b      	ldr	r3, [pc, #300]	; (8013f08 <F_AUTO_DistanceAvantCible+0x134>)
 8013ddc:	ed93 7a00 	vldr	s14, [r3]
 8013de0:	4b4a      	ldr	r3, [pc, #296]	; (8013f0c <F_AUTO_DistanceAvantCible+0x138>)
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	494a      	ldr	r1, [pc, #296]	; (8013f10 <F_AUTO_DistanceAvantCible+0x13c>)
 8013de6:	4613      	mov	r3, r2
 8013de8:	005b      	lsls	r3, r3, #1
 8013dea:	4413      	add	r3, r2
 8013dec:	009b      	lsls	r3, r3, #2
 8013dee:	440b      	add	r3, r1
 8013df0:	edd3 7a00 	vldr	s15, [r3]
 8013df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013df8:	edc7 7a01 	vstr	s15, [r7, #4]
	float b = g_estimate.y - consigne[g_i_point].y;
 8013dfc:	4b42      	ldr	r3, [pc, #264]	; (8013f08 <F_AUTO_DistanceAvantCible+0x134>)
 8013dfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8013e02:	4b42      	ldr	r3, [pc, #264]	; (8013f0c <F_AUTO_DistanceAvantCible+0x138>)
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	4942      	ldr	r1, [pc, #264]	; (8013f10 <F_AUTO_DistanceAvantCible+0x13c>)
 8013e08:	4613      	mov	r3, r2
 8013e0a:	005b      	lsls	r3, r3, #1
 8013e0c:	4413      	add	r3, r2
 8013e0e:	009b      	lsls	r3, r3, #2
 8013e10:	440b      	add	r3, r1
 8013e12:	3304      	adds	r3, #4
 8013e14:	edd3 7a00 	vldr	s15, [r3]
 8013e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e1c:	edc7 7a00 	vstr	s15, [r7]
	float dist = sqrtf((a*a)+(b*b)) ;
 8013e20:	ed97 7a01 	vldr	s14, [r7, #4]
 8013e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8013e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e2c:	edd7 6a00 	vldr	s13, [r7]
 8013e30:	edd7 7a00 	vldr	s15, [r7]
 8013e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8013e40:	f004 f940 	bl	80180c4 <sqrtf>
 8013e44:	ed87 0a03 	vstr	s0, [r7, #12]
	int i;

	for( i=g_i_point; i<g_nbPoints-1 ; i++ ){
 8013e48:	4b30      	ldr	r3, [pc, #192]	; (8013f0c <F_AUTO_DistanceAvantCible+0x138>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	60bb      	str	r3, [r7, #8]
 8013e4e:	e04c      	b.n	8013eea <F_AUTO_DistanceAvantCible+0x116>
		a = consigne[i].x - consigne[i+1].x;
 8013e50:	492f      	ldr	r1, [pc, #188]	; (8013f10 <F_AUTO_DistanceAvantCible+0x13c>)
 8013e52:	68ba      	ldr	r2, [r7, #8]
 8013e54:	4613      	mov	r3, r2
 8013e56:	005b      	lsls	r3, r3, #1
 8013e58:	4413      	add	r3, r2
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	440b      	add	r3, r1
 8013e5e:	ed93 7a00 	vldr	s14, [r3]
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	1c5a      	adds	r2, r3, #1
 8013e66:	492a      	ldr	r1, [pc, #168]	; (8013f10 <F_AUTO_DistanceAvantCible+0x13c>)
 8013e68:	4613      	mov	r3, r2
 8013e6a:	005b      	lsls	r3, r3, #1
 8013e6c:	4413      	add	r3, r2
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	440b      	add	r3, r1
 8013e72:	edd3 7a00 	vldr	s15, [r3]
 8013e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e7a:	edc7 7a01 	vstr	s15, [r7, #4]
		b = consigne[i].y - consigne[i+1].y;
 8013e7e:	4924      	ldr	r1, [pc, #144]	; (8013f10 <F_AUTO_DistanceAvantCible+0x13c>)
 8013e80:	68ba      	ldr	r2, [r7, #8]
 8013e82:	4613      	mov	r3, r2
 8013e84:	005b      	lsls	r3, r3, #1
 8013e86:	4413      	add	r3, r2
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	440b      	add	r3, r1
 8013e8c:	3304      	adds	r3, #4
 8013e8e:	ed93 7a00 	vldr	s14, [r3]
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	1c5a      	adds	r2, r3, #1
 8013e96:	491e      	ldr	r1, [pc, #120]	; (8013f10 <F_AUTO_DistanceAvantCible+0x13c>)
 8013e98:	4613      	mov	r3, r2
 8013e9a:	005b      	lsls	r3, r3, #1
 8013e9c:	4413      	add	r3, r2
 8013e9e:	009b      	lsls	r3, r3, #2
 8013ea0:	440b      	add	r3, r1
 8013ea2:	3304      	adds	r3, #4
 8013ea4:	edd3 7a00 	vldr	s15, [r3]
 8013ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013eac:	edc7 7a00 	vstr	s15, [r7]
		dist += sqrtf((a*a)+(b*b)) ;
 8013eb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8013eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8013eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ebc:	edd7 6a00 	vldr	s13, [r7]
 8013ec0:	edd7 7a00 	vldr	s15, [r7]
 8013ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8013ed0:	f004 f8f8 	bl	80180c4 <sqrtf>
 8013ed4:	eeb0 7a40 	vmov.f32	s14, s0
 8013ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8013edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ee0:	edc7 7a03 	vstr	s15, [r7, #12]
	for( i=g_i_point; i<g_nbPoints-1 ; i++ ){
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	3301      	adds	r3, #1
 8013ee8:	60bb      	str	r3, [r7, #8]
 8013eea:	4b0a      	ldr	r3, [pc, #40]	; (8013f14 <F_AUTO_DistanceAvantCible+0x140>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	3b01      	subs	r3, #1
 8013ef0:	68ba      	ldr	r2, [r7, #8]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	dbac      	blt.n	8013e50 <F_AUTO_DistanceAvantCible+0x7c>
	}

	return dist;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	ee07 3a90 	vmov	s15, r3
}
 8013efc:	eeb0 0a67 	vmov.f32	s0, s15
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	20003988 	.word	0x20003988
 8013f0c:	200003c0 	.word	0x200003c0
 8013f10:	20003994 	.word	0x20003994
 8013f14:	200003c4 	.word	0x200003c4

08013f18 <F_AUTO_Normalise>:
/*
 * Return arg % pi
 */
void F_AUTO_Normalise(float *cmd_L , float *cmd_R, float max){
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	ed2d 8b02 	vpush	{d8}
 8013f1e:	b088      	sub	sp, #32
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	60b9      	str	r1, [r7, #8]
 8013f26:	ed87 0a01 	vstr	s0, [r7, #4]
	float x;
	float cmd_right = *cmd_R ;
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	61bb      	str	r3, [r7, #24]
	float cmd_left  = *cmd_L ;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	617b      	str	r3, [r7, #20]

	if(F_Math_Abs(cmd_right) > max || F_Math_Abs(cmd_left) > max){
 8013f36:	ed97 0a06 	vldr	s0, [r7, #24]
 8013f3a:	f000 f8e3 	bl	8014104 <F_Math_Abs>
 8013f3e:	eeb0 7a40 	vmov.f32	s14, s0
 8013f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	d40d      	bmi.n	8013f6c <F_AUTO_Normalise+0x54>
 8013f50:	ed97 0a05 	vldr	s0, [r7, #20]
 8013f54:	f000 f8d6 	bl	8014104 <F_Math_Abs>
 8013f58:	eeb0 7a40 	vmov.f32	s14, s0
 8013f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f68:	d400      	bmi.n	8013f6c <F_AUTO_Normalise+0x54>
		}

		*cmd_R = cmd_right * x;
		*cmd_L  = cmd_left  * x;
	}
}
 8013f6a:	e054      	b.n	8014016 <F_AUTO_Normalise+0xfe>
		if(F_Math_Abs(cmd_right) > max && F_Math_Abs(cmd_right) > F_Math_Abs(cmd_left) ){
 8013f6c:	ed97 0a06 	vldr	s0, [r7, #24]
 8013f70:	f000 f8c8 	bl	8014104 <F_Math_Abs>
 8013f74:	eeb0 7a40 	vmov.f32	s14, s0
 8013f78:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f84:	d523      	bpl.n	8013fce <F_AUTO_Normalise+0xb6>
 8013f86:	ed97 0a06 	vldr	s0, [r7, #24]
 8013f8a:	f000 f8bb 	bl	8014104 <F_Math_Abs>
 8013f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8013f92:	ed97 0a05 	vldr	s0, [r7, #20]
 8013f96:	f000 f8b5 	bl	8014104 <F_Math_Abs>
 8013f9a:	eef0 7a40 	vmov.f32	s15, s0
 8013f9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa6:	dd12      	ble.n	8013fce <F_AUTO_Normalise+0xb6>
			x = F_Math_Sign(cmd_right) * max / cmd_right ;
 8013fa8:	ed97 0a06 	vldr	s0, [r7, #24]
 8013fac:	f000 f874 	bl	8014098 <F_Math_Sign>
 8013fb0:	ee07 0a90 	vmov	s15, r0
 8013fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013fbc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013fc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8013fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fc8:	edc7 7a07 	vstr	s15, [r7, #28]
 8013fcc:	e011      	b.n	8013ff2 <F_AUTO_Normalise+0xda>
			x = F_Math_Sign(cmd_left) * max / cmd_left ;
 8013fce:	ed97 0a05 	vldr	s0, [r7, #20]
 8013fd2:	f000 f861 	bl	8014098 <F_Math_Sign>
 8013fd6:	ee07 0a90 	vmov	s15, r0
 8013fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8013fe2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8013fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fee:	edc7 7a07 	vstr	s15, [r7, #28]
		*cmd_R = cmd_right * x;
 8013ff2:	ed97 7a06 	vldr	s14, [r7, #24]
 8013ff6:	edd7 7a07 	vldr	s15, [r7, #28]
 8013ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	edc3 7a00 	vstr	s15, [r3]
		*cmd_L  = cmd_left  * x;
 8014004:	ed97 7a05 	vldr	s14, [r7, #20]
 8014008:	edd7 7a07 	vldr	s15, [r7, #28]
 801400c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	edc3 7a00 	vstr	s15, [r3]
}
 8014016:	bf00      	nop
 8014018:	3720      	adds	r7, #32
 801401a:	46bd      	mov	sp, r7
 801401c:	ecbd 8b02 	vpop	{d8}
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <F_AUTO_Enable>:
/*
 * Enable automatic loop
 */
void F_AUTO_Enable(void){
 8014024:	b480      	push	{r7}
 8014026:	af00      	add	r7, sp, #0
	g_enableAUTO = 1 ;
 8014028:	4b03      	ldr	r3, [pc, #12]	; (8014038 <F_AUTO_Enable+0x14>)
 801402a:	2201      	movs	r2, #1
 801402c:	601a      	str	r2, [r3, #0]
}
 801402e:	bf00      	nop
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr
 8014038:	2000038c 	.word	0x2000038c

0801403c <F_AUTO_Disable>:
/*
 * Disable automatic loop
 */
void F_AUTO_Disable(void){
 801403c:	b480      	push	{r7}
 801403e:	af00      	add	r7, sp, #0
	g_enableAUTO = 0 ;
 8014040:	4b03      	ldr	r3, [pc, #12]	; (8014050 <F_AUTO_Disable+0x14>)
 8014042:	2200      	movs	r2, #0
 8014044:	601a      	str	r2, [r3, #0]
}
 8014046:	bf00      	nop
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr
 8014050:	2000038c 	.word	0x2000038c
 8014054:	00000000 	.word	0x00000000

08014058 <F_Math_toRad>:
#include "F_Math.h"

/*
 * F_toRad - Convert angle form degree to radius
 */
float F_Math_toRad( float angle_deg){
 8014058:	b590      	push	{r4, r7, lr}
 801405a:	b083      	sub	sp, #12
 801405c:	af00      	add	r7, sp, #0
 801405e:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle_deg*COEF_PI_180;
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f7ec fa78 	bl	8000558 <__aeabi_f2d>
 8014068:	a309      	add	r3, pc, #36	; (adr r3, 8014090 <F_Math_toRad+0x38>)
 801406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801406e:	f7ec facb 	bl	8000608 <__aeabi_dmul>
 8014072:	4603      	mov	r3, r0
 8014074:	460c      	mov	r4, r1
 8014076:	4618      	mov	r0, r3
 8014078:	4621      	mov	r1, r4
 801407a:	f7ec fcf7 	bl	8000a6c <__aeabi_d2f>
 801407e:	4603      	mov	r3, r0
 8014080:	ee07 3a90 	vmov	s15, r3
}
 8014084:	eeb0 0a67 	vmov.f32	s0, s15
 8014088:	370c      	adds	r7, #12
 801408a:	46bd      	mov	sp, r7
 801408c:	bd90      	pop	{r4, r7, pc}
 801408e:	bf00      	nop
 8014090:	7707c94d 	.word	0x7707c94d
 8014094:	3f91df46 	.word	0x3f91df46

08014098 <F_Math_Sign>:
	return angle_rad*COEF_180_PI;
}
/*
 *
 */
int F_Math_Sign(float nb){
 8014098:	b480      	push	{r7}
 801409a:	b083      	sub	sp, #12
 801409c:	af00      	add	r7, sp, #0
 801409e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(nb>=0){
 80140a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80140a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80140aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ae:	db01      	blt.n	80140b4 <F_Math_Sign+0x1c>
		return 1;
 80140b0:	2301      	movs	r3, #1
 80140b2:	e001      	b.n	80140b8 <F_Math_Sign+0x20>
	}else{
		return -1;
 80140b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	370c      	adds	r7, #12
 80140bc:	46bd      	mov	sp, r7
 80140be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c2:	4770      	bx	lr

080140c4 <F_Math_ModuloPi>:
/*
 * Return arg % pi
 */
void F_Math_ModuloPi(float *angleRad){
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
	*angleRad = 2 * atanf(tanf(*angleRad / 2));
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	edd3 7a00 	vldr	s15, [r3]
 80140d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80140d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80140da:	eeb0 0a66 	vmov.f32	s0, s13
 80140de:	f003 ffc7 	bl	8018070 <tanf>
 80140e2:	eef0 7a40 	vmov.f32	s15, s0
 80140e6:	eeb0 0a67 	vmov.f32	s0, s15
 80140ea:	f003 fe63 	bl	8017db4 <atanf>
 80140ee:	eef0 7a40 	vmov.f32	s15, s0
 80140f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	edc3 7a00 	vstr	s15, [r3]

	if(angle >  PI) angle = -( PI_X2 - angle);
	if(angle < -PI) angle =  ( PI_X2 + angle);

	*angleRad=	angle;*/
}
 80140fc:	bf00      	nop
 80140fe:	3708      	adds	r7, #8
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <F_Math_Abs>:
/*
 * Return absolute value
 */
float F_Math_Abs(float nb){
 8014104:	b480      	push	{r7}
 8014106:	b083      	sub	sp, #12
 8014108:	af00      	add	r7, sp, #0
 801410a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(nb>=0){
 801410e:	edd7 7a01 	vldr	s15, [r7, #4]
 8014112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	db02      	blt.n	8014122 <F_Math_Abs+0x1e>
		return nb;
 801411c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014120:	e003      	b.n	801412a <F_Math_Abs+0x26>
	}else{
		return -nb;
 8014122:	edd7 7a01 	vldr	s15, [r7, #4]
 8014126:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 801412a:	eeb0 0a67 	vmov.f32	s0, s15
 801412e:	370c      	adds	r7, #12
 8014130:	46bd      	mov	sp, r7
 8014132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014136:	4770      	bx	lr

08014138 <F_VL53L1X_InitSensors>:
extern int g_obstacle_not;
/**
 * Init all the VL53L1X connected to I2C2
 */
void F_VL53L1X_InitSensors()
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 801413e:	2302      	movs	r3, #2
 8014140:	70fb      	strb	r3, [r7, #3]
	uint32_t i = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	607b      	str	r3, [r7, #4]

	// Set up I2C initial address
	dev_avant_1.addr = 0x52;
 8014146:	4b54      	ldr	r3, [pc, #336]	; (8014298 <F_VL53L1X_InitSensors+0x160>)
 8014148:	2252      	movs	r2, #82	; 0x52
 801414a:	601a      	str	r2, [r3, #0]
	dev_avant_2.addr = 0x52;
 801414c:	4b53      	ldr	r3, [pc, #332]	; (801429c <F_VL53L1X_InitSensors+0x164>)
 801414e:	2252      	movs	r2, #82	; 0x52
 8014150:	601a      	str	r2, [r3, #0]
	dev_avant_3.addr = 0x52;
 8014152:	4b53      	ldr	r3, [pc, #332]	; (80142a0 <F_VL53L1X_InitSensors+0x168>)
 8014154:	2252      	movs	r2, #82	; 0x52
 8014156:	601a      	str	r2, [r3, #0]


	// Configure VL53L1X_AVANT_1_ADDR	0x10	PF2

		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD2;
 8014158:	4b52      	ldr	r3, [pc, #328]	; (80142a4 <F_VL53L1X_InitSensors+0x16c>)
 801415a:	695b      	ldr	r3, [r3, #20]
 801415c:	4a51      	ldr	r2, [pc, #324]	; (80142a4 <F_VL53L1X_InitSensors+0x16c>)
 801415e:	f043 0304 	orr.w	r3, r3, #4
 8014162:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 8014164:	2300      	movs	r3, #0
 8014166:	607b      	str	r3, [r7, #4]
 8014168:	e003      	b.n	8014172 <F_VL53L1X_InitSensors+0x3a>
 801416a:	bf00      	nop
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	3301      	adds	r3, #1
 8014170:	607b      	str	r3, [r7, #4]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8014178:	4293      	cmp	r3, r2
 801417a:	d9f6      	bls.n	801416a <F_VL53L1X_InitSensors+0x32>

		// Wait for device booted
		while((state & 0x01) != 0x01){ VL53L1X_BootState(dev_avant_1, &state); HAL_Delay(2);}
 801417c:	e008      	b.n	8014190 <F_VL53L1X_InitSensors+0x58>
 801417e:	1cfa      	adds	r2, r7, #3
 8014180:	4b45      	ldr	r3, [pc, #276]	; (8014298 <F_VL53L1X_InitSensors+0x160>)
 8014182:	4611      	mov	r1, r2
 8014184:	6818      	ldr	r0, [r3, #0]
 8014186:	f7ec ff3e 	bl	8001006 <VL53L1X_BootState>
 801418a:	2002      	movs	r0, #2
 801418c:	f7ed f8b8 	bl	8001300 <HAL_Delay>
 8014190:	78fb      	ldrb	r3, [r7, #3]
 8014192:	f003 0301 	and.w	r3, r3, #1
 8014196:	2b00      	cmp	r3, #0
 8014198:	d0f1      	beq.n	801417e <F_VL53L1X_InitSensors+0x46>

		VL53L1X_SetI2CAddress(dev_avant_1, VL53L1X_AVANT_1_ADDR);
 801419a:	4b3f      	ldr	r3, [pc, #252]	; (8014298 <F_VL53L1X_InitSensors+0x160>)
 801419c:	2110      	movs	r1, #16
 801419e:	6818      	ldr	r0, [r3, #0]
 80141a0:	f7ec fe34 	bl	8000e0c <VL53L1X_SetI2CAddress>
		dev_avant_1.addr = VL53L1X_AVANT_1_ADDR;
 80141a4:	4b3c      	ldr	r3, [pc, #240]	; (8014298 <F_VL53L1X_InitSensors+0x160>)
 80141a6:	2210      	movs	r2, #16
 80141a8:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80141aa:	2001      	movs	r0, #1
 80141ac:	f7ed f8a8 	bl	8001300 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_1);
 80141b0:	4b39      	ldr	r3, [pc, #228]	; (8014298 <F_VL53L1X_InitSensors+0x160>)
 80141b2:	6818      	ldr	r0, [r3, #0]
 80141b4:	f7ec fe42 	bl	8000e3c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_1);
 80141b8:	4b37      	ldr	r3, [pc, #220]	; (8014298 <F_VL53L1X_InitSensors+0x160>)
 80141ba:	6818      	ldr	r0, [r3, #0]
 80141bc:	f7ec fecc 	bl	8000f58 <VL53L1X_StartRanging>


	// Configure VL53L1X_AVANT_2_ADDR	0x12	PF3
	// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD3;
 80141c0:	4b38      	ldr	r3, [pc, #224]	; (80142a4 <F_VL53L1X_InitSensors+0x16c>)
 80141c2:	695b      	ldr	r3, [r3, #20]
 80141c4:	4a37      	ldr	r2, [pc, #220]	; (80142a4 <F_VL53L1X_InitSensors+0x16c>)
 80141c6:	f043 0308 	orr.w	r3, r3, #8
 80141ca:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 80141cc:	2300      	movs	r3, #0
 80141ce:	607b      	str	r3, [r7, #4]
 80141d0:	e003      	b.n	80141da <F_VL53L1X_InitSensors+0xa2>
 80141d2:	bf00      	nop
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	3301      	adds	r3, #1
 80141d8:	607b      	str	r3, [r7, #4]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d9f6      	bls.n	80141d2 <F_VL53L1X_InitSensors+0x9a>

		// Wait for device booted
		while((state & 0x01) != 0x01){VL53L1X_BootState(dev_avant_2, &state); HAL_Delay(2);}
 80141e4:	e008      	b.n	80141f8 <F_VL53L1X_InitSensors+0xc0>
 80141e6:	1cfa      	adds	r2, r7, #3
 80141e8:	4b2c      	ldr	r3, [pc, #176]	; (801429c <F_VL53L1X_InitSensors+0x164>)
 80141ea:	4611      	mov	r1, r2
 80141ec:	6818      	ldr	r0, [r3, #0]
 80141ee:	f7ec ff0a 	bl	8001006 <VL53L1X_BootState>
 80141f2:	2002      	movs	r0, #2
 80141f4:	f7ed f884 	bl	8001300 <HAL_Delay>
 80141f8:	78fb      	ldrb	r3, [r7, #3]
 80141fa:	f003 0301 	and.w	r3, r3, #1
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d0f1      	beq.n	80141e6 <F_VL53L1X_InitSensors+0xae>

		VL53L1X_SetI2CAddress(dev_avant_2, VL53L1X_AVANT_2_ADDR);
 8014202:	4b26      	ldr	r3, [pc, #152]	; (801429c <F_VL53L1X_InitSensors+0x164>)
 8014204:	2112      	movs	r1, #18
 8014206:	6818      	ldr	r0, [r3, #0]
 8014208:	f7ec fe00 	bl	8000e0c <VL53L1X_SetI2CAddress>
		dev_avant_2.addr = VL53L1X_AVANT_2_ADDR;
 801420c:	4b23      	ldr	r3, [pc, #140]	; (801429c <F_VL53L1X_InitSensors+0x164>)
 801420e:	2212      	movs	r2, #18
 8014210:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8014212:	2001      	movs	r0, #1
 8014214:	f7ed f874 	bl	8001300 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_2);
 8014218:	4b20      	ldr	r3, [pc, #128]	; (801429c <F_VL53L1X_InitSensors+0x164>)
 801421a:	6818      	ldr	r0, [r3, #0]
 801421c:	f7ec fe0e 	bl	8000e3c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_2);
 8014220:	4b1e      	ldr	r3, [pc, #120]	; (801429c <F_VL53L1X_InitSensors+0x164>)
 8014222:	6818      	ldr	r0, [r3, #0]
 8014224:	f7ec fe98 	bl	8000f58 <VL53L1X_StartRanging>


	// Configure VL53L1X_AVANT_3_ADDR	0x14	PF5
		// Set PF2 high
		GPIOF->ODR |= GPIO_ODR_OD5;
 8014228:	4b1e      	ldr	r3, [pc, #120]	; (80142a4 <F_VL53L1X_InitSensors+0x16c>)
 801422a:	695b      	ldr	r3, [r3, #20]
 801422c:	4a1d      	ldr	r2, [pc, #116]	; (80142a4 <F_VL53L1X_InitSensors+0x16c>)
 801422e:	f043 0320 	orr.w	r3, r3, #32
 8014232:	6153      	str	r3, [r2, #20]

		// small delay
		for(i=0;i<65000;i++){__asm("NOP");}
 8014234:	2300      	movs	r3, #0
 8014236:	607b      	str	r3, [r7, #4]
 8014238:	e003      	b.n	8014242 <F_VL53L1X_InitSensors+0x10a>
 801423a:	bf00      	nop
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	3301      	adds	r3, #1
 8014240:	607b      	str	r3, [r7, #4]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8014248:	4293      	cmp	r3, r2
 801424a:	d9f6      	bls.n	801423a <F_VL53L1X_InitSensors+0x102>

		// Wait for device booted
		while((state & 0x01) != 0x01){VL53L1X_BootState(dev_avant_3, &state); HAL_Delay(2);}
 801424c:	e008      	b.n	8014260 <F_VL53L1X_InitSensors+0x128>
 801424e:	1cfa      	adds	r2, r7, #3
 8014250:	4b13      	ldr	r3, [pc, #76]	; (80142a0 <F_VL53L1X_InitSensors+0x168>)
 8014252:	4611      	mov	r1, r2
 8014254:	6818      	ldr	r0, [r3, #0]
 8014256:	f7ec fed6 	bl	8001006 <VL53L1X_BootState>
 801425a:	2002      	movs	r0, #2
 801425c:	f7ed f850 	bl	8001300 <HAL_Delay>
 8014260:	78fb      	ldrb	r3, [r7, #3]
 8014262:	f003 0301 	and.w	r3, r3, #1
 8014266:	2b00      	cmp	r3, #0
 8014268:	d0f1      	beq.n	801424e <F_VL53L1X_InitSensors+0x116>

		VL53L1X_SetI2CAddress(dev_avant_3, VL53L1X_AVANT_3_ADDR);
 801426a:	4b0d      	ldr	r3, [pc, #52]	; (80142a0 <F_VL53L1X_InitSensors+0x168>)
 801426c:	2114      	movs	r1, #20
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	f7ec fdcc 	bl	8000e0c <VL53L1X_SetI2CAddress>
		dev_avant_3.addr = VL53L1X_AVANT_3_ADDR;
 8014274:	4b0a      	ldr	r3, [pc, #40]	; (80142a0 <F_VL53L1X_InitSensors+0x168>)
 8014276:	2214      	movs	r2, #20
 8014278:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 801427a:	2001      	movs	r0, #1
 801427c:	f7ed f840 	bl	8001300 <HAL_Delay>

		VL53L1X_SensorInit(dev_avant_3);
 8014280:	4b07      	ldr	r3, [pc, #28]	; (80142a0 <F_VL53L1X_InitSensors+0x168>)
 8014282:	6818      	ldr	r0, [r3, #0]
 8014284:	f7ec fdda 	bl	8000e3c <VL53L1X_SensorInit>
		VL53L1X_StartRanging(dev_avant_3);
 8014288:	4b05      	ldr	r3, [pc, #20]	; (80142a0 <F_VL53L1X_InitSensors+0x168>)
 801428a:	6818      	ldr	r0, [r3, #0]
 801428c:	f7ec fe64 	bl	8000f58 <VL53L1X_StartRanging>

		HAL_Delay(1);

		VL53L1X_SensorInit(dev_arriere_1);
		VL53L1X_StartRanging(dev_arriere_1);*/
}
 8014290:	bf00      	nop
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	20004580 	.word	0x20004580
 801429c:	20004588 	.word	0x20004588
 80142a0:	20004584 	.word	0x20004584
 80142a4:	40021400 	.word	0x40021400

080142a8 <F_VL53L1X_CheckSensors>:
/**
 * Check the VL53L1X connected to the STM32
 * If data is ready ,update the value of distance_avant_1, distance_avant_2, distance_avant_3, distance_arriere_1
 */
void F_VL53L1X_CheckSensors(void)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
	uint8_t dataReady = 0;
 80142ae:	2300      	movs	r3, #0
 80142b0:	71fb      	strb	r3, [r7, #7]
	uint8_t rangeStatus = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	71bb      	strb	r3, [r7, #6]

	// dev_avant_1;
	VL53L1X_CheckForDataReady(dev_avant_1, &dataReady);
 80142b6:	1dfa      	adds	r2, r7, #7
 80142b8:	4b3a      	ldr	r3, [pc, #232]	; (80143a4 <F_VL53L1X_CheckSensors+0xfc>)
 80142ba:	4611      	mov	r1, r2
 80142bc:	6818      	ldr	r0, [r3, #0]
 80142be:	f7ec fe73 	bl	8000fa8 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 80142c2:	79fb      	ldrb	r3, [r7, #7]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d016      	beq.n	80142f6 <F_VL53L1X_CheckSensors+0x4e>
	{
		VL53L1X_GetRangeStatus(dev_avant_1, &rangeStatus);
 80142c8:	1dba      	adds	r2, r7, #6
 80142ca:	4b36      	ldr	r3, [pc, #216]	; (80143a4 <F_VL53L1X_CheckSensors+0xfc>)
 80142cc:	4611      	mov	r1, r2
 80142ce:	6818      	ldr	r0, [r3, #0]
 80142d0:	f7ec fece 	bl	8001070 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 80142d4:	79bb      	ldrb	r3, [r7, #6]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d105      	bne.n	80142e6 <F_VL53L1X_CheckSensors+0x3e>
		{
			VL53L1X_GetDistance(dev_avant_1, &distance_avant_1);
 80142da:	4b32      	ldr	r3, [pc, #200]	; (80143a4 <F_VL53L1X_CheckSensors+0xfc>)
 80142dc:	4932      	ldr	r1, [pc, #200]	; (80143a8 <F_VL53L1X_CheckSensors+0x100>)
 80142de:	6818      	ldr	r0, [r3, #0]
 80142e0:	f7ec feac 	bl	800103c <VL53L1X_GetDistance>
 80142e4:	e003      	b.n	80142ee <F_VL53L1X_CheckSensors+0x46>
		}
		else
		{
			distance_avant_1 = 1000;
 80142e6:	4b30      	ldr	r3, [pc, #192]	; (80143a8 <F_VL53L1X_CheckSensors+0x100>)
 80142e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80142ec:	801a      	strh	r2, [r3, #0]
		}
		VL53L1X_ClearInterrupt(dev_avant_1);
 80142ee:	4b2d      	ldr	r3, [pc, #180]	; (80143a4 <F_VL53L1X_CheckSensors+0xfc>)
 80142f0:	6818      	ldr	r0, [r3, #0]
 80142f2:	f7ec fdf7 	bl	8000ee4 <VL53L1X_ClearInterrupt>

	}

	// dev_avant_2;
	VL53L1X_CheckForDataReady(dev_avant_2, &dataReady);
 80142f6:	1dfa      	adds	r2, r7, #7
 80142f8:	4b2c      	ldr	r3, [pc, #176]	; (80143ac <F_VL53L1X_CheckSensors+0x104>)
 80142fa:	4611      	mov	r1, r2
 80142fc:	6818      	ldr	r0, [r3, #0]
 80142fe:	f7ec fe53 	bl	8000fa8 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 8014302:	79fb      	ldrb	r3, [r7, #7]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d016      	beq.n	8014336 <F_VL53L1X_CheckSensors+0x8e>
	{
		VL53L1X_GetRangeStatus(dev_avant_2, &rangeStatus);
 8014308:	1dba      	adds	r2, r7, #6
 801430a:	4b28      	ldr	r3, [pc, #160]	; (80143ac <F_VL53L1X_CheckSensors+0x104>)
 801430c:	4611      	mov	r1, r2
 801430e:	6818      	ldr	r0, [r3, #0]
 8014310:	f7ec feae 	bl	8001070 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 8014314:	79bb      	ldrb	r3, [r7, #6]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d105      	bne.n	8014326 <F_VL53L1X_CheckSensors+0x7e>
		{
			VL53L1X_GetDistance(dev_avant_2, &distance_avant_2);
 801431a:	4b24      	ldr	r3, [pc, #144]	; (80143ac <F_VL53L1X_CheckSensors+0x104>)
 801431c:	4924      	ldr	r1, [pc, #144]	; (80143b0 <F_VL53L1X_CheckSensors+0x108>)
 801431e:	6818      	ldr	r0, [r3, #0]
 8014320:	f7ec fe8c 	bl	800103c <VL53L1X_GetDistance>
 8014324:	e003      	b.n	801432e <F_VL53L1X_CheckSensors+0x86>
		}
		else
		{
			distance_avant_2 = 1000;
 8014326:	4b22      	ldr	r3, [pc, #136]	; (80143b0 <F_VL53L1X_CheckSensors+0x108>)
 8014328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801432c:	801a      	strh	r2, [r3, #0]
		}
		VL53L1X_ClearInterrupt(dev_avant_2);
 801432e:	4b1f      	ldr	r3, [pc, #124]	; (80143ac <F_VL53L1X_CheckSensors+0x104>)
 8014330:	6818      	ldr	r0, [r3, #0]
 8014332:	f7ec fdd7 	bl	8000ee4 <VL53L1X_ClearInterrupt>
	}

	// dev_avant_3;
	VL53L1X_CheckForDataReady(dev_avant_3, &dataReady);
 8014336:	1dfa      	adds	r2, r7, #7
 8014338:	4b1e      	ldr	r3, [pc, #120]	; (80143b4 <F_VL53L1X_CheckSensors+0x10c>)
 801433a:	4611      	mov	r1, r2
 801433c:	6818      	ldr	r0, [r3, #0]
 801433e:	f7ec fe33 	bl	8000fa8 <VL53L1X_CheckForDataReady>

	if(dataReady  != 0)
 8014342:	79fb      	ldrb	r3, [r7, #7]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d016      	beq.n	8014376 <F_VL53L1X_CheckSensors+0xce>
	{
		VL53L1X_GetRangeStatus(dev_avant_3, &rangeStatus);
 8014348:	1dba      	adds	r2, r7, #6
 801434a:	4b1a      	ldr	r3, [pc, #104]	; (80143b4 <F_VL53L1X_CheckSensors+0x10c>)
 801434c:	4611      	mov	r1, r2
 801434e:	6818      	ldr	r0, [r3, #0]
 8014350:	f7ec fe8e 	bl	8001070 <VL53L1X_GetRangeStatus>
		if(rangeStatus == 0)
 8014354:	79bb      	ldrb	r3, [r7, #6]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d105      	bne.n	8014366 <F_VL53L1X_CheckSensors+0xbe>
		{
			VL53L1X_GetDistance(dev_avant_3, &distance_avant_3);
 801435a:	4b16      	ldr	r3, [pc, #88]	; (80143b4 <F_VL53L1X_CheckSensors+0x10c>)
 801435c:	4916      	ldr	r1, [pc, #88]	; (80143b8 <F_VL53L1X_CheckSensors+0x110>)
 801435e:	6818      	ldr	r0, [r3, #0]
 8014360:	f7ec fe6c 	bl	800103c <VL53L1X_GetDistance>
 8014364:	e003      	b.n	801436e <F_VL53L1X_CheckSensors+0xc6>
		}
		else
		{
			distance_avant_3 = 1000;
 8014366:	4b14      	ldr	r3, [pc, #80]	; (80143b8 <F_VL53L1X_CheckSensors+0x110>)
 8014368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801436c:	801a      	strh	r2, [r3, #0]
		}
		VL53L1X_ClearInterrupt(dev_avant_3);
 801436e:	4b11      	ldr	r3, [pc, #68]	; (80143b4 <F_VL53L1X_CheckSensors+0x10c>)
 8014370:	6818      	ldr	r0, [r3, #0]
 8014372:	f7ec fdb7 	bl	8000ee4 <VL53L1X_ClearInterrupt>
		VL53L1X_ClearInterrupt(dev_arriere_1);
	}*/



	if(((distance_avant_1 < 100) || (distance_avant_2 < 100) || (distance_avant_3 < 100)))
 8014376:	4b0c      	ldr	r3, [pc, #48]	; (80143a8 <F_VL53L1X_CheckSensors+0x100>)
 8014378:	881b      	ldrh	r3, [r3, #0]
 801437a:	2b63      	cmp	r3, #99	; 0x63
 801437c:	d907      	bls.n	801438e <F_VL53L1X_CheckSensors+0xe6>
 801437e:	4b0c      	ldr	r3, [pc, #48]	; (80143b0 <F_VL53L1X_CheckSensors+0x108>)
 8014380:	881b      	ldrh	r3, [r3, #0]
 8014382:	2b63      	cmp	r3, #99	; 0x63
 8014384:	d903      	bls.n	801438e <F_VL53L1X_CheckSensors+0xe6>
 8014386:	4b0c      	ldr	r3, [pc, #48]	; (80143b8 <F_VL53L1X_CheckSensors+0x110>)
 8014388:	881b      	ldrh	r3, [r3, #0]
 801438a:	2b63      	cmp	r3, #99	; 0x63
 801438c:	d803      	bhi.n	8014396 <F_VL53L1X_CheckSensors+0xee>
	{
		g_obstacle_not = 0;
 801438e:	4b0b      	ldr	r3, [pc, #44]	; (80143bc <F_VL53L1X_CheckSensors+0x114>)
 8014390:	2200      	movs	r2, #0
 8014392:	601a      	str	r2, [r3, #0]
 8014394:	e002      	b.n	801439c <F_VL53L1X_CheckSensors+0xf4>
	}
	else
	{
		g_obstacle_not = 1;
 8014396:	4b09      	ldr	r3, [pc, #36]	; (80143bc <F_VL53L1X_CheckSensors+0x114>)
 8014398:	2201      	movs	r2, #1
 801439a:	601a      	str	r2, [r3, #0]
	}


}
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	20004580 	.word	0x20004580
 80143a8:	200003cc 	.word	0x200003cc
 80143ac:	20004588 	.word	0x20004588
 80143b0:	200003ce 	.word	0x200003ce
 80143b4:	20004584 	.word	0x20004584
 80143b8:	200003d0 	.word	0x200003d0
 80143bc:	20000390 	.word	0x20000390

080143c0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b08e      	sub	sp, #56	; 0x38
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80143c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143cc:	2200      	movs	r2, #0
 80143ce:	601a      	str	r2, [r3, #0]
 80143d0:	605a      	str	r2, [r3, #4]
 80143d2:	609a      	str	r2, [r3, #8]
 80143d4:	60da      	str	r2, [r3, #12]
 80143d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4a55      	ldr	r2, [pc, #340]	; (8014534 <HAL_ETH_MspInit+0x174>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	f040 80a4 	bne.w	801452c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80143e4:	2300      	movs	r3, #0
 80143e6:	623b      	str	r3, [r7, #32]
 80143e8:	4b53      	ldr	r3, [pc, #332]	; (8014538 <HAL_ETH_MspInit+0x178>)
 80143ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ec:	4a52      	ldr	r2, [pc, #328]	; (8014538 <HAL_ETH_MspInit+0x178>)
 80143ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80143f2:	6313      	str	r3, [r2, #48]	; 0x30
 80143f4:	4b50      	ldr	r3, [pc, #320]	; (8014538 <HAL_ETH_MspInit+0x178>)
 80143f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80143fc:	623b      	str	r3, [r7, #32]
 80143fe:	6a3b      	ldr	r3, [r7, #32]
 8014400:	2300      	movs	r3, #0
 8014402:	61fb      	str	r3, [r7, #28]
 8014404:	4b4c      	ldr	r3, [pc, #304]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014408:	4a4b      	ldr	r2, [pc, #300]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801440a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801440e:	6313      	str	r3, [r2, #48]	; 0x30
 8014410:	4b49      	ldr	r3, [pc, #292]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014418:	61fb      	str	r3, [r7, #28]
 801441a:	69fb      	ldr	r3, [r7, #28]
 801441c:	2300      	movs	r3, #0
 801441e:	61bb      	str	r3, [r7, #24]
 8014420:	4b45      	ldr	r3, [pc, #276]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014424:	4a44      	ldr	r2, [pc, #272]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801442a:	6313      	str	r3, [r2, #48]	; 0x30
 801442c:	4b42      	ldr	r3, [pc, #264]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014434:	61bb      	str	r3, [r7, #24]
 8014436:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014438:	2300      	movs	r3, #0
 801443a:	617b      	str	r3, [r7, #20]
 801443c:	4b3e      	ldr	r3, [pc, #248]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014440:	4a3d      	ldr	r2, [pc, #244]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014442:	f043 0304 	orr.w	r3, r3, #4
 8014446:	6313      	str	r3, [r2, #48]	; 0x30
 8014448:	4b3b      	ldr	r3, [pc, #236]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801444c:	f003 0304 	and.w	r3, r3, #4
 8014450:	617b      	str	r3, [r7, #20]
 8014452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014454:	2300      	movs	r3, #0
 8014456:	613b      	str	r3, [r7, #16]
 8014458:	4b37      	ldr	r3, [pc, #220]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801445c:	4a36      	ldr	r2, [pc, #216]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801445e:	f043 0301 	orr.w	r3, r3, #1
 8014462:	6313      	str	r3, [r2, #48]	; 0x30
 8014464:	4b34      	ldr	r3, [pc, #208]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014468:	f003 0301 	and.w	r3, r3, #1
 801446c:	613b      	str	r3, [r7, #16]
 801446e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014470:	2300      	movs	r3, #0
 8014472:	60fb      	str	r3, [r7, #12]
 8014474:	4b30      	ldr	r3, [pc, #192]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014478:	4a2f      	ldr	r2, [pc, #188]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801447a:	f043 0302 	orr.w	r3, r3, #2
 801447e:	6313      	str	r3, [r2, #48]	; 0x30
 8014480:	4b2d      	ldr	r3, [pc, #180]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014484:	f003 0302 	and.w	r3, r3, #2
 8014488:	60fb      	str	r3, [r7, #12]
 801448a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801448c:	2300      	movs	r3, #0
 801448e:	60bb      	str	r3, [r7, #8]
 8014490:	4b29      	ldr	r3, [pc, #164]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014494:	4a28      	ldr	r2, [pc, #160]	; (8014538 <HAL_ETH_MspInit+0x178>)
 8014496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801449a:	6313      	str	r3, [r2, #48]	; 0x30
 801449c:	4b26      	ldr	r3, [pc, #152]	; (8014538 <HAL_ETH_MspInit+0x178>)
 801449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80144a4:	60bb      	str	r3, [r7, #8]
 80144a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80144a8:	2332      	movs	r3, #50	; 0x32
 80144aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144ac:	2302      	movs	r3, #2
 80144ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144b0:	2300      	movs	r3, #0
 80144b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144b4:	2303      	movs	r3, #3
 80144b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80144b8:	230b      	movs	r3, #11
 80144ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80144bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144c0:	4619      	mov	r1, r3
 80144c2:	481e      	ldr	r0, [pc, #120]	; (801453c <HAL_ETH_MspInit+0x17c>)
 80144c4:	f7ed ffe4 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80144c8:	2386      	movs	r3, #134	; 0x86
 80144ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144cc:	2302      	movs	r3, #2
 80144ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144d0:	2300      	movs	r3, #0
 80144d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144d4:	2303      	movs	r3, #3
 80144d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80144d8:	230b      	movs	r3, #11
 80144da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80144dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144e0:	4619      	mov	r1, r3
 80144e2:	4817      	ldr	r0, [pc, #92]	; (8014540 <HAL_ETH_MspInit+0x180>)
 80144e4:	f7ed ffd4 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80144e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80144ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144ee:	2302      	movs	r3, #2
 80144f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144f2:	2300      	movs	r3, #0
 80144f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144f6:	2303      	movs	r3, #3
 80144f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80144fa:	230b      	movs	r3, #11
 80144fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80144fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014502:	4619      	mov	r1, r3
 8014504:	480f      	ldr	r0, [pc, #60]	; (8014544 <HAL_ETH_MspInit+0x184>)
 8014506:	f7ed ffc3 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801450a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801450e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014510:	2302      	movs	r3, #2
 8014512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014514:	2300      	movs	r3, #0
 8014516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014518:	2303      	movs	r3, #3
 801451a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801451c:	230b      	movs	r3, #11
 801451e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014524:	4619      	mov	r1, r3
 8014526:	4808      	ldr	r0, [pc, #32]	; (8014548 <HAL_ETH_MspInit+0x188>)
 8014528:	f7ed ffb2 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801452c:	bf00      	nop
 801452e:	3738      	adds	r7, #56	; 0x38
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	40028000 	.word	0x40028000
 8014538:	40023800 	.word	0x40023800
 801453c:	40020800 	.word	0x40020800
 8014540:	40020000 	.word	0x40020000
 8014544:	40020400 	.word	0x40020400
 8014548:	40021800 	.word	0x40021800

0801454c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8014554:	2300      	movs	r3, #0
 8014556:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8014558:	4b49      	ldr	r3, [pc, #292]	; (8014680 <low_level_init+0x134>)
 801455a:	4a4a      	ldr	r2, [pc, #296]	; (8014684 <low_level_init+0x138>)
 801455c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 801455e:	4b48      	ldr	r3, [pc, #288]	; (8014680 <low_level_init+0x134>)
 8014560:	2201      	movs	r2, #1
 8014562:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8014564:	4b46      	ldr	r3, [pc, #280]	; (8014680 <low_level_init+0x134>)
 8014566:	2200      	movs	r2, #0
 8014568:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801456a:	2300      	movs	r3, #0
 801456c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801456e:	2380      	movs	r3, #128	; 0x80
 8014570:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8014572:	23e1      	movs	r3, #225	; 0xe1
 8014574:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8014576:	2300      	movs	r3, #0
 8014578:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801457a:	2300      	movs	r3, #0
 801457c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801457e:	2300      	movs	r3, #0
 8014580:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8014582:	4a3f      	ldr	r2, [pc, #252]	; (8014680 <low_level_init+0x134>)
 8014584:	f107 0308 	add.w	r3, r7, #8
 8014588:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 801458a:	4b3d      	ldr	r3, [pc, #244]	; (8014680 <low_level_init+0x134>)
 801458c:	2200      	movs	r2, #0
 801458e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8014590:	4b3b      	ldr	r3, [pc, #236]	; (8014680 <low_level_init+0x134>)
 8014592:	2200      	movs	r2, #0
 8014594:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8014596:	4b3a      	ldr	r3, [pc, #232]	; (8014680 <low_level_init+0x134>)
 8014598:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801459c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801459e:	4838      	ldr	r0, [pc, #224]	; (8014680 <low_level_init+0x134>)
 80145a0:	f7ec ffe2 	bl	8001568 <HAL_ETH_Init>
 80145a4:	4603      	mov	r3, r0
 80145a6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80145a8:	7dfb      	ldrb	r3, [r7, #23]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d108      	bne.n	80145c0 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80145b4:	f043 0304 	orr.w	r3, r3, #4
 80145b8:	b2da      	uxtb	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80145c0:	2304      	movs	r3, #4
 80145c2:	4a31      	ldr	r2, [pc, #196]	; (8014688 <low_level_init+0x13c>)
 80145c4:	4931      	ldr	r1, [pc, #196]	; (801468c <low_level_init+0x140>)
 80145c6:	482e      	ldr	r0, [pc, #184]	; (8014680 <low_level_init+0x134>)
 80145c8:	f7ed f96c 	bl	80018a4 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80145cc:	2304      	movs	r3, #4
 80145ce:	4a30      	ldr	r2, [pc, #192]	; (8014690 <low_level_init+0x144>)
 80145d0:	4930      	ldr	r1, [pc, #192]	; (8014694 <low_level_init+0x148>)
 80145d2:	482b      	ldr	r0, [pc, #172]	; (8014680 <low_level_init+0x134>)
 80145d4:	f7ed f9cf 	bl	8001976 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2206      	movs	r2, #6
 80145dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80145e0:	4b27      	ldr	r3, [pc, #156]	; (8014680 <low_level_init+0x134>)
 80145e2:	695b      	ldr	r3, [r3, #20]
 80145e4:	781a      	ldrb	r2, [r3, #0]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80145ec:	4b24      	ldr	r3, [pc, #144]	; (8014680 <low_level_init+0x134>)
 80145ee:	695b      	ldr	r3, [r3, #20]
 80145f0:	785a      	ldrb	r2, [r3, #1]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80145f8:	4b21      	ldr	r3, [pc, #132]	; (8014680 <low_level_init+0x134>)
 80145fa:	695b      	ldr	r3, [r3, #20]
 80145fc:	789a      	ldrb	r2, [r3, #2]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8014604:	4b1e      	ldr	r3, [pc, #120]	; (8014680 <low_level_init+0x134>)
 8014606:	695b      	ldr	r3, [r3, #20]
 8014608:	78da      	ldrb	r2, [r3, #3]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8014610:	4b1b      	ldr	r3, [pc, #108]	; (8014680 <low_level_init+0x134>)
 8014612:	695b      	ldr	r3, [r3, #20]
 8014614:	791a      	ldrb	r2, [r3, #4]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801461c:	4b18      	ldr	r3, [pc, #96]	; (8014680 <low_level_init+0x134>)
 801461e:	695b      	ldr	r3, [r3, #20]
 8014620:	795a      	ldrb	r2, [r3, #5]
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801462e:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014636:	f043 030a 	orr.w	r3, r3, #10
 801463a:	b2da      	uxtb	r2, r3
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8014642:	480f      	ldr	r0, [pc, #60]	; (8014680 <low_level_init+0x134>)
 8014644:	f7ed fc40 	bl	8001ec8 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8014648:	f107 0310 	add.w	r3, r7, #16
 801464c:	461a      	mov	r2, r3
 801464e:	211d      	movs	r1, #29
 8014650:	480b      	ldr	r0, [pc, #44]	; (8014680 <low_level_init+0x134>)
 8014652:	f7ed fb6b 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	f043 030b 	orr.w	r3, r3, #11
 801465c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	461a      	mov	r2, r3
 8014662:	211d      	movs	r1, #29
 8014664:	4806      	ldr	r0, [pc, #24]	; (8014680 <low_level_init+0x134>)
 8014666:	f7ed fbc9 	bl	8001dfc <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801466a:	f107 0310 	add.w	r3, r7, #16
 801466e:	461a      	mov	r2, r3
 8014670:	211d      	movs	r1, #29
 8014672:	4803      	ldr	r0, [pc, #12]	; (8014680 <low_level_init+0x134>)
 8014674:	f7ed fb5a 	bl	8001d2c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8014678:	bf00      	nop
 801467a:	3718      	adds	r7, #24
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}
 8014680:	20005e5c 	.word	0x20005e5c
 8014684:	40028000 	.word	0x40028000
 8014688:	20005ea4 	.word	0x20005ea4
 801468c:	2000458c 	.word	0x2000458c
 8014690:	2000460c 	.word	0x2000460c
 8014694:	20005ddc 	.word	0x20005ddc

08014698 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b08a      	sub	sp, #40	; 0x28
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80146a2:	4b4b      	ldr	r3, [pc, #300]	; (80147d0 <low_level_output+0x138>)
 80146a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a6:	689b      	ldr	r3, [r3, #8]
 80146a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80146aa:	2300      	movs	r3, #0
 80146ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80146ae:	2300      	movs	r3, #0
 80146b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80146b2:	2300      	movs	r3, #0
 80146b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80146b6:	2300      	movs	r3, #0
 80146b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80146ba:	4b45      	ldr	r3, [pc, #276]	; (80147d0 <low_level_output+0x138>)
 80146bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80146c0:	2300      	movs	r3, #0
 80146c2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	623b      	str	r3, [r7, #32]
 80146c8:	e05a      	b.n	8014780 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	da03      	bge.n	80146da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80146d2:	23f8      	movs	r3, #248	; 0xf8
 80146d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80146d8:	e05c      	b.n	8014794 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80146da:	6a3b      	ldr	r3, [r7, #32]
 80146dc:	895b      	ldrh	r3, [r3, #10]
 80146de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80146e0:	2300      	movs	r3, #0
 80146e2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80146e4:	e02f      	b.n	8014746 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80146e6:	69fa      	ldr	r2, [r7, #28]
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	18d0      	adds	r0, r2, r3
 80146ec:	6a3b      	ldr	r3, [r7, #32]
 80146ee:	685a      	ldr	r2, [r3, #4]
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	18d1      	adds	r1, r2, r3
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80146fa:	3304      	adds	r3, #4
 80146fc:	461a      	mov	r2, r3
 80146fe:	f002 fbca 	bl	8016e96 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8014702:	69bb      	ldr	r3, [r7, #24]
 8014704:	68db      	ldr	r3, [r3, #12]
 8014706:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	2b00      	cmp	r3, #0
 801470e:	da03      	bge.n	8014718 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8014710:	23f8      	movs	r3, #248	; 0xf8
 8014712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8014716:	e03d      	b.n	8014794 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801471e:	693a      	ldr	r2, [r7, #16]
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	4413      	add	r3, r2
 8014724:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8014728:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801472a:	68ba      	ldr	r2, [r7, #8]
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	1ad3      	subs	r3, r2, r3
 8014730:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8014734:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8014736:	697a      	ldr	r2, [r7, #20]
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8014740:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8014742:	2300      	movs	r3, #0
 8014744:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8014746:	68fa      	ldr	r2, [r7, #12]
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	4413      	add	r3, r2
 801474c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8014750:	4293      	cmp	r3, r2
 8014752:	d8c8      	bhi.n	80146e6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014754:	69fa      	ldr	r2, [r7, #28]
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	18d0      	adds	r0, r2, r3
 801475a:	6a3b      	ldr	r3, [r7, #32]
 801475c:	685a      	ldr	r2, [r3, #4]
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	4413      	add	r3, r2
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	4619      	mov	r1, r3
 8014766:	f002 fb96 	bl	8016e96 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801476a:	693a      	ldr	r2, [r7, #16]
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	4413      	add	r3, r2
 8014770:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8014772:	697a      	ldr	r2, [r7, #20]
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	4413      	add	r3, r2
 8014778:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 801477a:	6a3b      	ldr	r3, [r7, #32]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	623b      	str	r3, [r7, #32]
 8014780:	6a3b      	ldr	r3, [r7, #32]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d1a1      	bne.n	80146ca <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8014786:	6979      	ldr	r1, [r7, #20]
 8014788:	4811      	ldr	r0, [pc, #68]	; (80147d0 <low_level_output+0x138>)
 801478a:	f7ed f961 	bl	8001a50 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 801478e:	2300      	movs	r3, #0
 8014790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8014794:	4b0e      	ldr	r3, [pc, #56]	; (80147d0 <low_level_output+0x138>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801479c:	3314      	adds	r3, #20
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	f003 0320 	and.w	r3, r3, #32
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d00d      	beq.n	80147c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80147a8:	4b09      	ldr	r3, [pc, #36]	; (80147d0 <low_level_output+0x138>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147b0:	3314      	adds	r3, #20
 80147b2:	2220      	movs	r2, #32
 80147b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80147b6:	4b06      	ldr	r3, [pc, #24]	; (80147d0 <low_level_output+0x138>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147be:	3304      	adds	r3, #4
 80147c0:	2200      	movs	r2, #0
 80147c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80147c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3728      	adds	r7, #40	; 0x28
 80147cc:	46bd      	mov	sp, r7
 80147ce:	bd80      	pop	{r7, pc}
 80147d0:	20005e5c 	.word	0x20005e5c

080147d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b08c      	sub	sp, #48	; 0x30
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80147dc:	2300      	movs	r3, #0
 80147de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80147e0:	2300      	movs	r3, #0
 80147e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80147e8:	2300      	movs	r3, #0
 80147ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80147ec:	2300      	movs	r3, #0
 80147ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80147f0:	2300      	movs	r3, #0
 80147f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80147f4:	2300      	movs	r3, #0
 80147f6:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80147f8:	484e      	ldr	r0, [pc, #312]	; (8014934 <low_level_input+0x160>)
 80147fa:	f7ed fa13 	bl	8001c24 <HAL_ETH_GetReceivedFrame>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	d001      	beq.n	8014808 <low_level_input+0x34>
    return NULL;
 8014804:	2300      	movs	r3, #0
 8014806:	e091      	b.n	801492c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8014808:	4b4a      	ldr	r3, [pc, #296]	; (8014934 <low_level_input+0x160>)
 801480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801480c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801480e:	4b49      	ldr	r3, [pc, #292]	; (8014934 <low_level_input+0x160>)
 8014810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014812:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8014814:	89fb      	ldrh	r3, [r7, #14]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d006      	beq.n	8014828 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801481a:	89fb      	ldrh	r3, [r7, #14]
 801481c:	2203      	movs	r2, #3
 801481e:	4619      	mov	r1, r3
 8014820:	2004      	movs	r0, #4
 8014822:	f7f3 ff8f 	bl	8008744 <pbuf_alloc>
 8014826:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8014828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482a:	2b00      	cmp	r3, #0
 801482c:	d04b      	beq.n	80148c6 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801482e:	4b41      	ldr	r3, [pc, #260]	; (8014934 <low_level_input+0x160>)
 8014830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014832:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8014834:	2300      	movs	r3, #0
 8014836:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8014838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483a:	62bb      	str	r3, [r7, #40]	; 0x28
 801483c:	e040      	b.n	80148c0 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 801483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014840:	895b      	ldrh	r3, [r3, #10]
 8014842:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8014844:	2300      	movs	r3, #0
 8014846:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014848:	e021      	b.n	801488e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	685a      	ldr	r2, [r3, #4]
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	18d0      	adds	r0, r2, r3
 8014852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	18d1      	adds	r1, r2, r3
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 801485e:	3304      	adds	r3, #4
 8014860:	461a      	mov	r2, r3
 8014862:	f002 fb18 	bl	8016e96 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8014866:	6a3b      	ldr	r3, [r7, #32]
 8014868:	68db      	ldr	r3, [r3, #12]
 801486a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801486c:	6a3b      	ldr	r3, [r7, #32]
 801486e:	689b      	ldr	r3, [r3, #8]
 8014870:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8014872:	69fa      	ldr	r2, [r7, #28]
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	4413      	add	r3, r2
 8014878:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801487c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801487e:	69ba      	ldr	r2, [r7, #24]
 8014880:	69fb      	ldr	r3, [r7, #28]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8014888:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 801488a:	2300      	movs	r3, #0
 801488c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801488e:	697a      	ldr	r2, [r7, #20]
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	4413      	add	r3, r2
 8014894:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8014898:	4293      	cmp	r3, r2
 801489a:	d8d6      	bhi.n	801484a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489e:	685a      	ldr	r2, [r3, #4]
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	18d0      	adds	r0, r2, r3
 80148a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148a6:	69fb      	ldr	r3, [r7, #28]
 80148a8:	4413      	add	r3, r2
 80148aa:	697a      	ldr	r2, [r7, #20]
 80148ac:	4619      	mov	r1, r3
 80148ae:	f002 faf2 	bl	8016e96 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80148b2:	69fa      	ldr	r2, [r7, #28]
 80148b4:	697b      	ldr	r3, [r7, #20]
 80148b6:	4413      	add	r3, r2
 80148b8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80148ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	62bb      	str	r3, [r7, #40]	; 0x28
 80148c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d1bb      	bne.n	801483e <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80148c6:	4b1b      	ldr	r3, [pc, #108]	; (8014934 <low_level_input+0x160>)
 80148c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ca:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80148cc:	2300      	movs	r3, #0
 80148ce:	613b      	str	r3, [r7, #16]
 80148d0:	e00b      	b.n	80148ea <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80148d2:	6a3b      	ldr	r3, [r7, #32]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80148da:	6a3b      	ldr	r3, [r7, #32]
 80148dc:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80148de:	6a3b      	ldr	r3, [r7, #32]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	3301      	adds	r3, #1
 80148e8:	613b      	str	r3, [r7, #16]
 80148ea:	4b12      	ldr	r3, [pc, #72]	; (8014934 <low_level_input+0x160>)
 80148ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148ee:	693a      	ldr	r2, [r7, #16]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d3ee      	bcc.n	80148d2 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80148f4:	4b0f      	ldr	r3, [pc, #60]	; (8014934 <low_level_input+0x160>)
 80148f6:	2200      	movs	r2, #0
 80148f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80148fa:	4b0e      	ldr	r3, [pc, #56]	; (8014934 <low_level_input+0x160>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014902:	3314      	adds	r3, #20
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801490a:	2b00      	cmp	r3, #0
 801490c:	d00d      	beq.n	801492a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801490e:	4b09      	ldr	r3, [pc, #36]	; (8014934 <low_level_input+0x160>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014916:	3314      	adds	r3, #20
 8014918:	2280      	movs	r2, #128	; 0x80
 801491a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801491c:	4b05      	ldr	r3, [pc, #20]	; (8014934 <low_level_input+0x160>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014924:	3308      	adds	r3, #8
 8014926:	2200      	movs	r2, #0
 8014928:	601a      	str	r2, [r3, #0]
  }
  return p;
 801492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801492c:	4618      	mov	r0, r3
 801492e:	3730      	adds	r7, #48	; 0x30
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	20005e5c 	.word	0x20005e5c

08014938 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7ff ff47 	bl	80147d4 <low_level_input>
 8014946:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d010      	beq.n	8014970 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	691b      	ldr	r3, [r3, #16]
 8014952:	6879      	ldr	r1, [r7, #4]
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	4798      	blx	r3
 8014958:	4603      	mov	r3, r0
 801495a:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 801495c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d006      	beq.n	8014972 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8014964:	68f8      	ldr	r0, [r7, #12]
 8014966:	f7f4 fa5f 	bl	8008e28 <pbuf_free>
    p = NULL;    
 801496a:	2300      	movs	r3, #0
 801496c:	60fb      	str	r3, [r7, #12]
 801496e:	e000      	b.n	8014972 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8014970:	bf00      	nop
  }
}
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d106      	bne.n	8014994 <ethernetif_init+0x1c>
 8014986:	4b0e      	ldr	r3, [pc, #56]	; (80149c0 <ethernetif_init+0x48>)
 8014988:	f44f 7204 	mov.w	r2, #528	; 0x210
 801498c:	490d      	ldr	r1, [pc, #52]	; (80149c4 <ethernetif_init+0x4c>)
 801498e:	480e      	ldr	r0, [pc, #56]	; (80149c8 <ethernetif_init+0x50>)
 8014990:	f002 fb3c 	bl	801700c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2273      	movs	r2, #115	; 0x73
 8014998:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	2274      	movs	r2, #116	; 0x74
 80149a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	4a09      	ldr	r2, [pc, #36]	; (80149cc <ethernetif_init+0x54>)
 80149a8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	4a08      	ldr	r2, [pc, #32]	; (80149d0 <ethernetif_init+0x58>)
 80149ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f7ff fdcb 	bl	801454c <low_level_init>

  return ERR_OK;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3708      	adds	r7, #8
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	0801b0c0 	.word	0x0801b0c0
 80149c4:	0801b0d4 	.word	0x0801b0d4
 80149c8:	0801b0e4 	.word	0x0801b0e4
 80149cc:	08010a45 	.word	0x08010a45
 80149d0:	08014699 	.word	0x08014699

080149d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80149d8:	f7ec fc86 	bl	80012e8 <HAL_GetTick>
 80149dc:	4603      	mov	r3, r0
}
 80149de:	4618      	mov	r0, r3
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b08e      	sub	sp, #56	; 0x38
 80149e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80149ee:	2200      	movs	r2, #0
 80149f0:	601a      	str	r2, [r3, #0]
 80149f2:	605a      	str	r2, [r3, #4]
 80149f4:	609a      	str	r2, [r3, #8]
 80149f6:	60da      	str	r2, [r3, #12]
 80149f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80149fa:	2300      	movs	r3, #0
 80149fc:	623b      	str	r3, [r7, #32]
 80149fe:	4bb2      	ldr	r3, [pc, #712]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a02:	4ab1      	ldr	r2, [pc, #708]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a04:	f043 0310 	orr.w	r3, r3, #16
 8014a08:	6313      	str	r3, [r2, #48]	; 0x30
 8014a0a:	4baf      	ldr	r3, [pc, #700]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a0e:	f003 0310 	and.w	r3, r3, #16
 8014a12:	623b      	str	r3, [r7, #32]
 8014a14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014a16:	2300      	movs	r3, #0
 8014a18:	61fb      	str	r3, [r7, #28]
 8014a1a:	4bab      	ldr	r3, [pc, #684]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a1e:	4aaa      	ldr	r2, [pc, #680]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a20:	f043 0304 	orr.w	r3, r3, #4
 8014a24:	6313      	str	r3, [r2, #48]	; 0x30
 8014a26:	4ba8      	ldr	r3, [pc, #672]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a2a:	f003 0304 	and.w	r3, r3, #4
 8014a2e:	61fb      	str	r3, [r7, #28]
 8014a30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8014a32:	2300      	movs	r3, #0
 8014a34:	61bb      	str	r3, [r7, #24]
 8014a36:	4ba4      	ldr	r3, [pc, #656]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a3a:	4aa3      	ldr	r2, [pc, #652]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a3c:	f043 0320 	orr.w	r3, r3, #32
 8014a40:	6313      	str	r3, [r2, #48]	; 0x30
 8014a42:	4ba1      	ldr	r3, [pc, #644]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a46:	f003 0320 	and.w	r3, r3, #32
 8014a4a:	61bb      	str	r3, [r7, #24]
 8014a4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8014a4e:	2300      	movs	r3, #0
 8014a50:	617b      	str	r3, [r7, #20]
 8014a52:	4b9d      	ldr	r3, [pc, #628]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a56:	4a9c      	ldr	r2, [pc, #624]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8014a5e:	4b9a      	ldr	r3, [pc, #616]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a66:	617b      	str	r3, [r7, #20]
 8014a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014a6a:	2300      	movs	r3, #0
 8014a6c:	613b      	str	r3, [r7, #16]
 8014a6e:	4b96      	ldr	r3, [pc, #600]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a72:	4a95      	ldr	r2, [pc, #596]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a74:	f043 0301 	orr.w	r3, r3, #1
 8014a78:	6313      	str	r3, [r2, #48]	; 0x30
 8014a7a:	4b93      	ldr	r3, [pc, #588]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	613b      	str	r3, [r7, #16]
 8014a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014a86:	2300      	movs	r3, #0
 8014a88:	60fb      	str	r3, [r7, #12]
 8014a8a:	4b8f      	ldr	r3, [pc, #572]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a8e:	4a8e      	ldr	r2, [pc, #568]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a90:	f043 0302 	orr.w	r3, r3, #2
 8014a94:	6313      	str	r3, [r2, #48]	; 0x30
 8014a96:	4b8c      	ldr	r3, [pc, #560]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a9a:	f003 0302 	and.w	r3, r3, #2
 8014a9e:	60fb      	str	r3, [r7, #12]
 8014aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	60bb      	str	r3, [r7, #8]
 8014aa6:	4b88      	ldr	r3, [pc, #544]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aaa:	4a87      	ldr	r2, [pc, #540]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8014ab2:	4b85      	ldr	r3, [pc, #532]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aba:	60bb      	str	r3, [r7, #8]
 8014abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8014abe:	2300      	movs	r3, #0
 8014ac0:	607b      	str	r3, [r7, #4]
 8014ac2:	4b81      	ldr	r3, [pc, #516]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ac6:	4a80      	ldr	r2, [pc, #512]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014ac8:	f043 0308 	orr.w	r3, r3, #8
 8014acc:	6313      	str	r3, [r2, #48]	; 0x30
 8014ace:	4b7e      	ldr	r3, [pc, #504]	; (8014cc8 <MX_GPIO_Init+0x2e4>)
 8014ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ad2:	f003 0308 	and.w	r3, r3, #8
 8014ad6:	607b      	str	r3, [r7, #4]
 8014ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 8014ada:	2200      	movs	r2, #0
 8014adc:	f247 013c 	movw	r1, #28732	; 0x703c
 8014ae0:	487a      	ldr	r0, [pc, #488]	; (8014ccc <MX_GPIO_Init+0x2e8>)
 8014ae2:	f7ed fe7f 	bl	80027e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LD1_Pin, GPIO_PIN_RESET);
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	f240 2101 	movw	r1, #513	; 0x201
 8014aec:	4878      	ldr	r0, [pc, #480]	; (8014cd0 <MX_GPIO_Init+0x2ec>)
 8014aee:	f7ed fe79 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8014af2:	2200      	movs	r2, #0
 8014af4:	2108      	movs	r1, #8
 8014af6:	4877      	ldr	r0, [pc, #476]	; (8014cd4 <MX_GPIO_Init+0x2f0>)
 8014af8:	f7ed fe74 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8014afc:	2200      	movs	r2, #0
 8014afe:	f244 0181 	movw	r1, #16513	; 0x4081
 8014b02:	4875      	ldr	r0, [pc, #468]	; (8014cd8 <MX_GPIO_Init+0x2f4>)
 8014b04:	f7ed fe6e 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8014b08:	2200      	movs	r2, #0
 8014b0a:	2140      	movs	r1, #64	; 0x40
 8014b0c:	4873      	ldr	r0, [pc, #460]	; (8014cdc <MX_GPIO_Init+0x2f8>)
 8014b0e:	f7ed fe69 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8014b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b16:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014b18:	2303      	movs	r3, #3
 8014b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b24:	4619      	mov	r1, r3
 8014b26:	486e      	ldr	r0, [pc, #440]	; (8014ce0 <MX_GPIO_Init+0x2fc>)
 8014b28:	f7ed fcb2 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8014b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014b32:	4b6c      	ldr	r3, [pc, #432]	; (8014ce4 <MX_GPIO_Init+0x300>)
 8014b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b36:	2300      	movs	r3, #0
 8014b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8014b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b3e:	4619      	mov	r1, r3
 8014b40:	4863      	ldr	r0, [pc, #396]	; (8014cd0 <MX_GPIO_Init+0x2ec>)
 8014b42:	f7ed fca5 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin 
 8014b46:	f247 033c 	movw	r3, #28732	; 0x703c
 8014b4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b50:	2300      	movs	r3, #0
 8014b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b54:	2300      	movs	r3, #0
 8014b56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	485b      	ldr	r0, [pc, #364]	; (8014ccc <MX_GPIO_Init+0x2e8>)
 8014b60:	f7ed fc96 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9 
                           PF10 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8014b64:	f648 73c0 	movw	r3, #36800	; 0x8fc0
 8014b68:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014b6a:	2303      	movs	r3, #3
 8014b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b76:	4619      	mov	r1, r3
 8014b78:	4854      	ldr	r0, [pc, #336]	; (8014ccc <MX_GPIO_Init+0x2e8>)
 8014b7a:	f7ed fc89 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 8014b7e:	f240 2301 	movw	r3, #513	; 0x201
 8014b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014b84:	2301      	movs	r3, #1
 8014b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014b94:	4619      	mov	r1, r3
 8014b96:	484e      	ldr	r0, [pc, #312]	; (8014cd0 <MX_GPIO_Init+0x2ec>)
 8014b98:	f7ed fc7a 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC6 PC7 
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7 
 8014b9c:	f641 53cc 	movw	r3, #7628	; 0x1dcc
 8014ba0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014ba2:	2303      	movs	r3, #3
 8014ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bae:	4619      	mov	r1, r3
 8014bb0:	4847      	ldr	r0, [pc, #284]	; (8014cd0 <MX_GPIO_Init+0x2ec>)
 8014bb2:	f7ed fc6d 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8014bb6:	2331      	movs	r3, #49	; 0x31
 8014bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014bba:	2303      	movs	r3, #3
 8014bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	4842      	ldr	r0, [pc, #264]	; (8014cd4 <MX_GPIO_Init+0x2f0>)
 8014bca:	f7ed fc61 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8014bce:	2308      	movs	r3, #8
 8014bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014be2:	4619      	mov	r1, r3
 8014be4:	483b      	ldr	r0, [pc, #236]	; (8014cd4 <MX_GPIO_Init+0x2f0>)
 8014be6:	f7ed fc53 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014bea:	2340      	movs	r3, #64	; 0x40
 8014bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	4835      	ldr	r0, [pc, #212]	; (8014cd4 <MX_GPIO_Init+0x2f0>)
 8014bfe:	f7ed fc47 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8014c02:	f244 0381 	movw	r3, #16513	; 0x4081
 8014c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014c08:	2301      	movs	r3, #1
 8014c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c10:	2300      	movs	r3, #0
 8014c12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c18:	4619      	mov	r1, r3
 8014c1a:	482f      	ldr	r0, [pc, #188]	; (8014cd8 <MX_GPIO_Init+0x2f4>)
 8014c1c:	f7ed fc38 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB15 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8014c20:	f649 4346 	movw	r3, #40006	; 0x9c46
 8014c24:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014c26:	2303      	movs	r3, #3
 8014c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c32:	4619      	mov	r1, r3
 8014c34:	4828      	ldr	r0, [pc, #160]	; (8014cd8 <MX_GPIO_Init+0x2f4>)
 8014c36:	f7ed fc2b 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG4 PG5 PG8 PG9 
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8014c3a:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8014c3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014c40:	2303      	movs	r3, #3
 8014c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c44:	2300      	movs	r3, #0
 8014c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	4823      	ldr	r0, [pc, #140]	; (8014cdc <MX_GPIO_Init+0x2f8>)
 8014c50:	f7ed fc1e 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 
                           PD0 PD1 PD2 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 8014c54:	f643 43ff 	movw	r3, #15615	; 0x3cff
 8014c58:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014c5a:	2303      	movs	r3, #3
 8014c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c66:	4619      	mov	r1, r3
 8014c68:	481f      	ldr	r0, [pc, #124]	; (8014ce8 <MX_GPIO_Init+0x304>)
 8014c6a:	f7ed fc11 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8014c6e:	2340      	movs	r3, #64	; 0x40
 8014c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014c72:	2301      	movs	r3, #1
 8014c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c76:	2300      	movs	r3, #0
 8014c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8014c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c82:	4619      	mov	r1, r3
 8014c84:	4815      	ldr	r0, [pc, #84]	; (8014cdc <MX_GPIO_Init+0x2f8>)
 8014c86:	f7ed fc03 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8014c8a:	2380      	movs	r3, #128	; 0x80
 8014c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c92:	2300      	movs	r3, #0
 8014c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8014c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	480f      	ldr	r0, [pc, #60]	; (8014cdc <MX_GPIO_Init+0x2f8>)
 8014c9e:	f7ed fbf7 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2 pour la tirette */

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8014ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014ca6:	627b      	str	r3, [r7, #36]	; 0x24

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	62bb      	str	r3, [r7, #40]	; 0x28

    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014cac:	2301      	movs	r3, #1
 8014cae:	62fb      	str	r3, [r7, #44]	; 0x2c

    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	633b      	str	r3, [r7, #48]	; 0x30

    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014cb8:	4619      	mov	r1, r3
 8014cba:	4804      	ldr	r0, [pc, #16]	; (8014ccc <MX_GPIO_Init+0x2e8>)
 8014cbc:	f7ed fbe8 	bl	8002490 <HAL_GPIO_Init>

}
 8014cc0:	bf00      	nop
 8014cc2:	3738      	adds	r7, #56	; 0x38
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	40023800 	.word	0x40023800
 8014ccc:	40021400 	.word	0x40021400
 8014cd0:	40020800 	.word	0x40020800
 8014cd4:	40020000 	.word	0x40020000
 8014cd8:	40020400 	.word	0x40020400
 8014cdc:	40021800 	.word	0x40021800
 8014ce0:	40021000 	.word	0x40021000
 8014ce4:	10110000 	.word	0x10110000
 8014ce8:	40020c00 	.word	0x40020c00

08014cec <F_GPIO_SetLedRed>:

/* USER CODE BEGIN 2 */
void F_GPIO_SetLedRed(int state){
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
	(state) ? (GPIOB->ODR |= LED_Red) : (GPIOB->ODR &= ~LED_Red) ;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d006      	beq.n	8014d08 <F_GPIO_SetLedRed+0x1c>
 8014cfa:	4b09      	ldr	r3, [pc, #36]	; (8014d20 <F_GPIO_SetLedRed+0x34>)
 8014cfc:	695b      	ldr	r3, [r3, #20]
 8014cfe:	4a08      	ldr	r2, [pc, #32]	; (8014d20 <F_GPIO_SetLedRed+0x34>)
 8014d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014d04:	6153      	str	r3, [r2, #20]
}
 8014d06:	e005      	b.n	8014d14 <F_GPIO_SetLedRed+0x28>
	(state) ? (GPIOB->ODR |= LED_Red) : (GPIOB->ODR &= ~LED_Red) ;
 8014d08:	4b05      	ldr	r3, [pc, #20]	; (8014d20 <F_GPIO_SetLedRed+0x34>)
 8014d0a:	695b      	ldr	r3, [r3, #20]
 8014d0c:	4a04      	ldr	r2, [pc, #16]	; (8014d20 <F_GPIO_SetLedRed+0x34>)
 8014d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014d12:	6153      	str	r3, [r2, #20]
}
 8014d14:	bf00      	nop
 8014d16:	370c      	adds	r7, #12
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1e:	4770      	bx	lr
 8014d20:	40020400 	.word	0x40020400

08014d24 <F_GPIO_SetLedBlue>:

void F_GPIO_SetLedBlue(int state){
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
	// Led sur PB7
	(state) ? (GPIOB->ODR |= LED_Blue) : (GPIOB->ODR &= ~LED_Blue) ;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d006      	beq.n	8014d40 <F_GPIO_SetLedBlue+0x1c>
 8014d32:	4b09      	ldr	r3, [pc, #36]	; (8014d58 <F_GPIO_SetLedBlue+0x34>)
 8014d34:	695b      	ldr	r3, [r3, #20]
 8014d36:	4a08      	ldr	r2, [pc, #32]	; (8014d58 <F_GPIO_SetLedBlue+0x34>)
 8014d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d3c:	6153      	str	r3, [r2, #20]
}
 8014d3e:	e005      	b.n	8014d4c <F_GPIO_SetLedBlue+0x28>
	(state) ? (GPIOB->ODR |= LED_Blue) : (GPIOB->ODR &= ~LED_Blue) ;
 8014d40:	4b05      	ldr	r3, [pc, #20]	; (8014d58 <F_GPIO_SetLedBlue+0x34>)
 8014d42:	695b      	ldr	r3, [r3, #20]
 8014d44:	4a04      	ldr	r2, [pc, #16]	; (8014d58 <F_GPIO_SetLedBlue+0x34>)
 8014d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d4a:	6153      	str	r3, [r2, #20]
}
 8014d4c:	bf00      	nop
 8014d4e:	370c      	adds	r7, #12
 8014d50:	46bd      	mov	sp, r7
 8014d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d56:	4770      	bx	lr
 8014d58:	40020400 	.word	0x40020400

08014d5c <F_GPIO_SetLedGreen>:

void F_GPIO_SetLedGreen(int state){
 8014d5c:	b480      	push	{r7}
 8014d5e:	b083      	sub	sp, #12
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
	// Led sur PB14
	(state) ? (GPIOB->ODR |= LED_Green) : (GPIOB->ODR &= ~LED_Green) ;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d006      	beq.n	8014d78 <F_GPIO_SetLedGreen+0x1c>
 8014d6a:	4b09      	ldr	r3, [pc, #36]	; (8014d90 <F_GPIO_SetLedGreen+0x34>)
 8014d6c:	695b      	ldr	r3, [r3, #20]
 8014d6e:	4a08      	ldr	r2, [pc, #32]	; (8014d90 <F_GPIO_SetLedGreen+0x34>)
 8014d70:	f043 0301 	orr.w	r3, r3, #1
 8014d74:	6153      	str	r3, [r2, #20]
}
 8014d76:	e005      	b.n	8014d84 <F_GPIO_SetLedGreen+0x28>
	(state) ? (GPIOB->ODR |= LED_Green) : (GPIOB->ODR &= ~LED_Green) ;
 8014d78:	4b05      	ldr	r3, [pc, #20]	; (8014d90 <F_GPIO_SetLedGreen+0x34>)
 8014d7a:	695b      	ldr	r3, [r3, #20]
 8014d7c:	4a04      	ldr	r2, [pc, #16]	; (8014d90 <F_GPIO_SetLedGreen+0x34>)
 8014d7e:	f023 0301 	bic.w	r3, r3, #1
 8014d82:	6153      	str	r3, [r2, #20]
}
 8014d84:	bf00      	nop
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr
 8014d90:	40020400 	.word	0x40020400

08014d94 <F_GPIO_GetTirette>:
	int l_state = 0;
	(GPIOC->IDR & BP_NUCLEO) ? (l_state=1) : (l_state=0) ;
	return l_state;
}

int F_GPIO_GetTirette(void){
 8014d94:	b480      	push	{r7}
 8014d96:	b083      	sub	sp, #12
 8014d98:	af00      	add	r7, sp, #0
	int l_state = 0;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	607b      	str	r3, [r7, #4]
	(GPIOF->IDR & GPIO_PIN_15) ? (l_state=0) : (l_state=1) ;
 8014d9e:	4b09      	ldr	r3, [pc, #36]	; (8014dc4 <F_GPIO_GetTirette+0x30>)
 8014da0:	691b      	ldr	r3, [r3, #16]
 8014da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d002      	beq.n	8014db0 <F_GPIO_GetTirette+0x1c>
 8014daa:	2300      	movs	r3, #0
 8014dac:	607b      	str	r3, [r7, #4]
 8014dae:	e001      	b.n	8014db4 <F_GPIO_GetTirette+0x20>
 8014db0:	2301      	movs	r3, #1
 8014db2:	607b      	str	r3, [r7, #4]
	return l_state;
 8014db4:	687b      	ldr	r3, [r7, #4]
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	370c      	adds	r7, #12
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop
 8014dc4:	40021400 	.word	0x40021400

08014dc8 <F_GPIO_SetMotorDroitDir>:

void F_GPIO_SetMotorDroitDir(int dir){
 8014dc8:	b480      	push	{r7}
 8014dca:	b083      	sub	sp, #12
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
	// PF 12
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_12) : (GPIOF->ODR &= ~GPIO_ODR_ODR_12) ;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	da06      	bge.n	8014de4 <F_GPIO_SetMotorDroitDir+0x1c>
 8014dd6:	4b09      	ldr	r3, [pc, #36]	; (8014dfc <F_GPIO_SetMotorDroitDir+0x34>)
 8014dd8:	695b      	ldr	r3, [r3, #20]
 8014dda:	4a08      	ldr	r2, [pc, #32]	; (8014dfc <F_GPIO_SetMotorDroitDir+0x34>)
 8014ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014de0:	6153      	str	r3, [r2, #20]
}
 8014de2:	e005      	b.n	8014df0 <F_GPIO_SetMotorDroitDir+0x28>
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_12) : (GPIOF->ODR &= ~GPIO_ODR_ODR_12) ;
 8014de4:	4b05      	ldr	r3, [pc, #20]	; (8014dfc <F_GPIO_SetMotorDroitDir+0x34>)
 8014de6:	695b      	ldr	r3, [r3, #20]
 8014de8:	4a04      	ldr	r2, [pc, #16]	; (8014dfc <F_GPIO_SetMotorDroitDir+0x34>)
 8014dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014dee:	6153      	str	r3, [r2, #20]
}
 8014df0:	bf00      	nop
 8014df2:	370c      	adds	r7, #12
 8014df4:	46bd      	mov	sp, r7
 8014df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfa:	4770      	bx	lr
 8014dfc:	40021400 	.word	0x40021400

08014e00 <F_GPIO_SetMotorGaucheDir>:

void F_GPIO_SetMotorGaucheDir(int dir){
 8014e00:	b480      	push	{r7}
 8014e02:	b083      	sub	sp, #12
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
	// PF 13
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_13) : (GPIOF->ODR &= ~GPIO_ODR_ODR_13) ;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	da06      	bge.n	8014e1c <F_GPIO_SetMotorGaucheDir+0x1c>
 8014e0e:	4b09      	ldr	r3, [pc, #36]	; (8014e34 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014e10:	695b      	ldr	r3, [r3, #20]
 8014e12:	4a08      	ldr	r2, [pc, #32]	; (8014e34 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014e18:	6153      	str	r3, [r2, #20]
}
 8014e1a:	e005      	b.n	8014e28 <F_GPIO_SetMotorGaucheDir+0x28>
	(dir<0) ? (GPIOF->ODR |= GPIO_ODR_ODR_13) : (GPIOF->ODR &= ~GPIO_ODR_ODR_13) ;
 8014e1c:	4b05      	ldr	r3, [pc, #20]	; (8014e34 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014e1e:	695b      	ldr	r3, [r3, #20]
 8014e20:	4a04      	ldr	r2, [pc, #16]	; (8014e34 <F_GPIO_SetMotorGaucheDir+0x34>)
 8014e22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014e26:	6153      	str	r3, [r2, #20]
}
 8014e28:	bf00      	nop
 8014e2a:	370c      	adds	r7, #12
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e32:	4770      	bx	lr
 8014e34:	40021400 	.word	0x40021400

08014e38 <F_GPIO_SetEnableMotors>:

void F_GPIO_SetEnableMotors(int state){
 8014e38:	b480      	push	{r7}
 8014e3a:	b083      	sub	sp, #12
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
	// PF 14
	(state) ? (GPIOF->ODR |= GPIO_ODR_ODR_14) : (GPIOF->ODR &= ~GPIO_ODR_ODR_14) ;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d006      	beq.n	8014e54 <F_GPIO_SetEnableMotors+0x1c>
 8014e46:	4b09      	ldr	r3, [pc, #36]	; (8014e6c <F_GPIO_SetEnableMotors+0x34>)
 8014e48:	695b      	ldr	r3, [r3, #20]
 8014e4a:	4a08      	ldr	r2, [pc, #32]	; (8014e6c <F_GPIO_SetEnableMotors+0x34>)
 8014e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014e50:	6153      	str	r3, [r2, #20]
}
 8014e52:	e005      	b.n	8014e60 <F_GPIO_SetEnableMotors+0x28>
	(state) ? (GPIOF->ODR |= GPIO_ODR_ODR_14) : (GPIOF->ODR &= ~GPIO_ODR_ODR_14) ;
 8014e54:	4b05      	ldr	r3, [pc, #20]	; (8014e6c <F_GPIO_SetEnableMotors+0x34>)
 8014e56:	695b      	ldr	r3, [r3, #20]
 8014e58:	4a04      	ldr	r2, [pc, #16]	; (8014e6c <F_GPIO_SetEnableMotors+0x34>)
 8014e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014e5e:	6153      	str	r3, [r2, #20]
}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr
 8014e6c:	40021400 	.word	0x40021400

08014e70 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8014e74:	4b1b      	ldr	r3, [pc, #108]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e76:	4a1c      	ldr	r2, [pc, #112]	; (8014ee8 <MX_I2C1_Init+0x78>)
 8014e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8014e7a:	4b1a      	ldr	r3, [pc, #104]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e7c:	4a1b      	ldr	r2, [pc, #108]	; (8014eec <MX_I2C1_Init+0x7c>)
 8014e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014e80:	4b18      	ldr	r3, [pc, #96]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e82:	2200      	movs	r2, #0
 8014e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8014e86:	4b17      	ldr	r3, [pc, #92]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014e8c:	4b15      	ldr	r3, [pc, #84]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014e92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014e94:	4b13      	ldr	r3, [pc, #76]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e96:	2200      	movs	r2, #0
 8014e98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8014e9a:	4b12      	ldr	r3, [pc, #72]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014ea0:	4b10      	ldr	r3, [pc, #64]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014ea6:	4b0f      	ldr	r3, [pc, #60]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014eac:	480d      	ldr	r0, [pc, #52]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014eae:	f7ed fcb3 	bl	8002818 <HAL_I2C_Init>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d001      	beq.n	8014ebc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8014eb8:	f000 fc08 	bl	80156cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014ebc:	2100      	movs	r1, #0
 8014ebe:	4809      	ldr	r0, [pc, #36]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014ec0:	f7ed fdd2 	bl	8002a68 <HAL_I2CEx_ConfigAnalogFilter>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d001      	beq.n	8014ece <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8014eca:	f000 fbff 	bl	80156cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8014ece:	2100      	movs	r1, #0
 8014ed0:	4804      	ldr	r0, [pc, #16]	; (8014ee4 <MX_I2C1_Init+0x74>)
 8014ed2:	f7ed fe05 	bl	8002ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d001      	beq.n	8014ee0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8014edc:	f000 fbf6 	bl	80156cc <Error_Handler>
  }

}
 8014ee0:	bf00      	nop
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	20007674 	.word	0x20007674
 8014ee8:	40005400 	.word	0x40005400
 8014eec:	000186a0 	.word	0x000186a0

08014ef0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8014ef4:	4b1b      	ldr	r3, [pc, #108]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014ef6:	4a1c      	ldr	r2, [pc, #112]	; (8014f68 <MX_I2C2_Init+0x78>)
 8014ef8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8014efa:	4b1a      	ldr	r3, [pc, #104]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014efc:	4a1b      	ldr	r2, [pc, #108]	; (8014f6c <MX_I2C2_Init+0x7c>)
 8014efe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014f00:	4b18      	ldr	r3, [pc, #96]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f02:	2200      	movs	r2, #0
 8014f04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8014f06:	4b17      	ldr	r3, [pc, #92]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f08:	2200      	movs	r2, #0
 8014f0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014f0c:	4b15      	ldr	r3, [pc, #84]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014f12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014f14:	4b13      	ldr	r3, [pc, #76]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f16:	2200      	movs	r2, #0
 8014f18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8014f1a:	4b12      	ldr	r3, [pc, #72]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014f20:	4b10      	ldr	r3, [pc, #64]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f22:	2200      	movs	r2, #0
 8014f24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014f26:	4b0f      	ldr	r3, [pc, #60]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f28:	2200      	movs	r2, #0
 8014f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8014f2c:	480d      	ldr	r0, [pc, #52]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f2e:	f7ed fc73 	bl	8002818 <HAL_I2C_Init>
 8014f32:	4603      	mov	r3, r0
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d001      	beq.n	8014f3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8014f38:	f000 fbc8 	bl	80156cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	4809      	ldr	r0, [pc, #36]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f40:	f7ed fd92 	bl	8002a68 <HAL_I2CEx_ConfigAnalogFilter>
 8014f44:	4603      	mov	r3, r0
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d001      	beq.n	8014f4e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8014f4a:	f000 fbbf 	bl	80156cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8014f4e:	2100      	movs	r1, #0
 8014f50:	4804      	ldr	r0, [pc, #16]	; (8014f64 <MX_I2C2_Init+0x74>)
 8014f52:	f7ed fdc5 	bl	8002ae0 <HAL_I2CEx_ConfigDigitalFilter>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d001      	beq.n	8014f60 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8014f5c:	f000 fbb6 	bl	80156cc <Error_Handler>
  }

}
 8014f60:	bf00      	nop
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	200076c8 	.word	0x200076c8
 8014f68:	40005800 	.word	0x40005800
 8014f6c:	000186a0 	.word	0x000186a0

08014f70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08c      	sub	sp, #48	; 0x30
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f78:	f107 031c 	add.w	r3, r7, #28
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	601a      	str	r2, [r3, #0]
 8014f80:	605a      	str	r2, [r3, #4]
 8014f82:	609a      	str	r2, [r3, #8]
 8014f84:	60da      	str	r2, [r3, #12]
 8014f86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	4a32      	ldr	r2, [pc, #200]	; (8015058 <HAL_I2C_MspInit+0xe8>)
 8014f8e:	4293      	cmp	r3, r2
 8014f90:	d12d      	bne.n	8014fee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014f92:	2300      	movs	r3, #0
 8014f94:	61bb      	str	r3, [r7, #24]
 8014f96:	4b31      	ldr	r3, [pc, #196]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f9a:	4a30      	ldr	r2, [pc, #192]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014f9c:	f043 0302 	orr.w	r3, r3, #2
 8014fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8014fa2:	4b2e      	ldr	r3, [pc, #184]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fa6:	f003 0302 	and.w	r3, r3, #2
 8014faa:	61bb      	str	r3, [r7, #24]
 8014fac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8014fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014fb4:	2312      	movs	r3, #18
 8014fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014fb8:	2301      	movs	r3, #1
 8014fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014fbc:	2303      	movs	r3, #3
 8014fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014fc0:	2304      	movs	r3, #4
 8014fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014fc4:	f107 031c 	add.w	r3, r7, #28
 8014fc8:	4619      	mov	r1, r3
 8014fca:	4825      	ldr	r0, [pc, #148]	; (8015060 <HAL_I2C_MspInit+0xf0>)
 8014fcc:	f7ed fa60 	bl	8002490 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	617b      	str	r3, [r7, #20]
 8014fd4:	4b21      	ldr	r3, [pc, #132]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fd8:	4a20      	ldr	r2, [pc, #128]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014fde:	6413      	str	r3, [r2, #64]	; 0x40
 8014fe0:	4b1e      	ldr	r3, [pc, #120]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014fe8:	617b      	str	r3, [r7, #20]
 8014fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8014fec:	e030      	b.n	8015050 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	4a1c      	ldr	r2, [pc, #112]	; (8015064 <HAL_I2C_MspInit+0xf4>)
 8014ff4:	4293      	cmp	r3, r2
 8014ff6:	d12b      	bne.n	8015050 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	613b      	str	r3, [r7, #16]
 8014ffc:	4b17      	ldr	r3, [pc, #92]	; (801505c <HAL_I2C_MspInit+0xec>)
 8014ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015000:	4a16      	ldr	r2, [pc, #88]	; (801505c <HAL_I2C_MspInit+0xec>)
 8015002:	f043 0320 	orr.w	r3, r3, #32
 8015006:	6313      	str	r3, [r2, #48]	; 0x30
 8015008:	4b14      	ldr	r3, [pc, #80]	; (801505c <HAL_I2C_MspInit+0xec>)
 801500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801500c:	f003 0320 	and.w	r3, r3, #32
 8015010:	613b      	str	r3, [r7, #16]
 8015012:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8015014:	2303      	movs	r3, #3
 8015016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015018:	2312      	movs	r3, #18
 801501a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801501c:	2301      	movs	r3, #1
 801501e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015020:	2303      	movs	r3, #3
 8015022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8015024:	2304      	movs	r3, #4
 8015026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015028:	f107 031c 	add.w	r3, r7, #28
 801502c:	4619      	mov	r1, r3
 801502e:	480e      	ldr	r0, [pc, #56]	; (8015068 <HAL_I2C_MspInit+0xf8>)
 8015030:	f7ed fa2e 	bl	8002490 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8015034:	2300      	movs	r3, #0
 8015036:	60fb      	str	r3, [r7, #12]
 8015038:	4b08      	ldr	r3, [pc, #32]	; (801505c <HAL_I2C_MspInit+0xec>)
 801503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801503c:	4a07      	ldr	r2, [pc, #28]	; (801505c <HAL_I2C_MspInit+0xec>)
 801503e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015042:	6413      	str	r3, [r2, #64]	; 0x40
 8015044:	4b05      	ldr	r3, [pc, #20]	; (801505c <HAL_I2C_MspInit+0xec>)
 8015046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801504c:	60fb      	str	r3, [r7, #12]
 801504e:	68fb      	ldr	r3, [r7, #12]
}
 8015050:	bf00      	nop
 8015052:	3730      	adds	r7, #48	; 0x30
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	40005400 	.word	0x40005400
 801505c:	40023800 	.word	0x40023800
 8015060:	40020400 	.word	0x40020400
 8015064:	40005800 	.word	0x40005800
 8015068:	40021400 	.word	0x40021400

0801506c <F_I2C2_WriteRegister>:

/** I2C2 *****/
/**
 * Write a single value in a slave register
 */
uint8_t F_I2C2_WriteRegister(uint8_t slave_addr, uint16_t register_addr, uint8_t *value, uint8_t size){
 801506c:	b480      	push	{r7}
 801506e:	b085      	sub	sp, #20
 8015070:	af00      	add	r7, sp, #0
 8015072:	603a      	str	r2, [r7, #0]
 8015074:	461a      	mov	r2, r3
 8015076:	4603      	mov	r3, r0
 8015078:	71fb      	strb	r3, [r7, #7]
 801507a:	460b      	mov	r3, r1
 801507c:	80bb      	strh	r3, [r7, #4]
 801507e:	4613      	mov	r3, r2
 8015080:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = I2C_STATUS_OK;
 8015082:	2300      	movs	r3, #0
 8015084:	72bb      	strb	r3, [r7, #10]
	uint32_t timeout = 0;
 8015086:	2300      	movs	r3, #0
 8015088:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 801508a:	2300      	movs	r3, #0
 801508c:	72fb      	strb	r3, [r7, #11]

    // Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 801508e:	4b38      	ldr	r3, [pc, #224]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	4a37      	ldr	r2, [pc, #220]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 8015094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015098:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 801509a:	e002      	b.n	80150a2 <F_I2C2_WriteRegister+0x36>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	3301      	adds	r3, #1
 80150a0:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 80150a2:	4b33      	ldr	r3, [pc, #204]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150a4:	695b      	ldr	r3, [r3, #20]
 80150a6:	f003 0301 	and.w	r3, r3, #1
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d0f6      	beq.n	801509c <F_I2C2_WriteRegister+0x30>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 80150ae:	79fb      	ldrb	r3, [r7, #7]
 80150b0:	4a2f      	ldr	r2, [pc, #188]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80150b6:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80150b8:	e002      	b.n	80150c0 <F_I2C2_WriteRegister+0x54>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	3301      	adds	r3, #1
 80150be:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80150c0:	4b2b      	ldr	r3, [pc, #172]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150c2:	695b      	ldr	r3, [r3, #20]
 80150c4:	f003 0302 	and.w	r3, r3, #2
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d0f6      	beq.n	80150ba <F_I2C2_WriteRegister+0x4e>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 80150cc:	4b28      	ldr	r3, [pc, #160]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150ce:	699b      	ldr	r3, [r3, #24]
 80150d0:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 80150d2:	88bb      	ldrh	r3, [r7, #4]
 80150d4:	0a1b      	lsrs	r3, r3, #8
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	b2da      	uxtb	r2, r3
 80150da:	4b25      	ldr	r3, [pc, #148]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150dc:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80150de:	bf00      	nop
 80150e0:	4b23      	ldr	r3, [pc, #140]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150e2:	695b      	ldr	r3, [r3, #20]
 80150e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d105      	bne.n	80150f8 <F_I2C2_WriteRegister+0x8c>
 80150ec:	4b20      	ldr	r3, [pc, #128]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150ee:	695b      	ldr	r3, [r3, #20]
 80150f0:	f003 0304 	and.w	r3, r3, #4
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d0f3      	beq.n	80150e0 <F_I2C2_WriteRegister+0x74>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 80150f8:	88bb      	ldrh	r3, [r7, #4]
 80150fa:	b2da      	uxtb	r2, r3
 80150fc:	4b1c      	ldr	r3, [pc, #112]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 80150fe:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8015100:	bf00      	nop
 8015102:	4b1b      	ldr	r3, [pc, #108]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 8015104:	695b      	ldr	r3, [r3, #20]
 8015106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801510a:	2b00      	cmp	r3, #0
 801510c:	d105      	bne.n	801511a <F_I2C2_WriteRegister+0xae>
 801510e:	4b18      	ldr	r3, [pc, #96]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 8015110:	695b      	ldr	r3, [r3, #20]
 8015112:	f003 0304 	and.w	r3, r3, #4
 8015116:	2b00      	cmp	r3, #0
 8015118:	d0f3      	beq.n	8015102 <F_I2C2_WriteRegister+0x96>

	for(i=0;i<size;i++)
 801511a:	2300      	movs	r3, #0
 801511c:	72fb      	strb	r3, [r7, #11]
 801511e:	e015      	b.n	801514c <F_I2C2_WriteRegister+0xe0>
	{

		// Send new value to write to the register
		I2C2->DR = value[i];
 8015120:	7afb      	ldrb	r3, [r7, #11]
 8015122:	683a      	ldr	r2, [r7, #0]
 8015124:	4413      	add	r3, r2
 8015126:	781a      	ldrb	r2, [r3, #0]
 8015128:	4b11      	ldr	r3, [pc, #68]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 801512a:	611a      	str	r2, [r3, #16]
		while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 801512c:	bf00      	nop
 801512e:	4b10      	ldr	r3, [pc, #64]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 8015130:	695b      	ldr	r3, [r3, #20]
 8015132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015136:	2b00      	cmp	r3, #0
 8015138:	d105      	bne.n	8015146 <F_I2C2_WriteRegister+0xda>
 801513a:	4b0d      	ldr	r3, [pc, #52]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 801513c:	695b      	ldr	r3, [r3, #20]
 801513e:	f003 0304 	and.w	r3, r3, #4
 8015142:	2b00      	cmp	r3, #0
 8015144:	d0f3      	beq.n	801512e <F_I2C2_WriteRegister+0xc2>
	for(i=0;i<size;i++)
 8015146:	7afb      	ldrb	r3, [r7, #11]
 8015148:	3301      	adds	r3, #1
 801514a:	72fb      	strb	r3, [r7, #11]
 801514c:	7afa      	ldrb	r2, [r7, #11]
 801514e:	79bb      	ldrb	r3, [r7, #6]
 8015150:	429a      	cmp	r2, r3
 8015152:	d3e5      	bcc.n	8015120 <F_I2C2_WriteRegister+0xb4>

	}

	I2C2->CR1 |= I2C_CR1_STOP; // send STOP bit
 8015154:	4b06      	ldr	r3, [pc, #24]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4a05      	ldr	r2, [pc, #20]	; (8015170 <F_I2C2_WriteRegister+0x104>)
 801515a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801515e:	6013      	str	r3, [r2, #0]
	return i2c_status;
 8015160:	7abb      	ldrb	r3, [r7, #10]
}
 8015162:	4618      	mov	r0, r3
 8015164:	3714      	adds	r7, #20
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	40005800 	.word	0x40005800

08015174 <F_I2C2_ReadRegisterVL53L1X>:
	return i2c_status;
}


// Read x value from the device
uint8_t F_I2C2_ReadRegisterVL53L1X(uint8_t slave_addr, uint16_t register_addr, uint8_t nb_value_to_read, uint8_t *value_read){
 8015174:	b480      	push	{r7}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	603b      	str	r3, [r7, #0]
 801517c:	4603      	mov	r3, r0
 801517e:	71fb      	strb	r3, [r7, #7]
 8015180:	460b      	mov	r3, r1
 8015182:	80bb      	strh	r3, [r7, #4]
 8015184:	4613      	mov	r3, r2
 8015186:	71bb      	strb	r3, [r7, #6]
	uint8_t i2c_status = 0;	// Init return value to error
 8015188:	2300      	movs	r3, #0
 801518a:	72bb      	strb	r3, [r7, #10]
	uint8_t status = I2C_STATUS_OK;
 801518c:	2300      	movs	r3, #0
 801518e:	727b      	strb	r3, [r7, #9]
	int timeout=0;
 8015190:	2300      	movs	r3, #0
 8015192:	60fb      	str	r3, [r7, #12]

	uint8_t i = 0;
 8015194:	2300      	movs	r3, #0
 8015196:	72fb      	strb	r3, [r7, #11]

	// Send start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8015198:	4b4e      	ldr	r3, [pc, #312]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	4a4d      	ldr	r2, [pc, #308]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801519e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151a2:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 80151a4:	e002      	b.n	80151ac <F_I2C2_ReadRegisterVL53L1X+0x38>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
	timeout++;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	3301      	adds	r3, #1
 80151aa:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 80151ac:	4b49      	ldr	r3, [pc, #292]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151ae:	695b      	ldr	r3, [r3, #20]
 80151b0:	f003 0301 	and.w	r3, r3, #1
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d0f6      	beq.n	80151a6 <F_I2C2_ReadRegisterVL53L1X+0x32>
	}
	// Send slave address
	I2C2->DR = slave_addr & 0xFE  ;	// address + write
 80151b8:	79fb      	ldrb	r3, [r7, #7]
 80151ba:	4a46      	ldr	r2, [pc, #280]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80151c0:	6113      	str	r3, [r2, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80151c2:	e002      	b.n	80151ca <F_I2C2_ReadRegisterVL53L1X+0x56>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	3301      	adds	r3, #1
 80151c8:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 80151ca:	4b42      	ldr	r3, [pc, #264]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151cc:	695b      	ldr	r3, [r3, #20]
 80151ce:	f003 0302 	and.w	r3, r3, #2
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d0f6      	beq.n	80151c4 <F_I2C2_ReadRegisterVL53L1X+0x50>
	}

	i2c_status = I2C2->SR2; // read status to clear flag
 80151d6:	4b3f      	ldr	r3, [pc, #252]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151d8:	699b      	ldr	r3, [r3, #24]
 80151da:	72bb      	strb	r3, [r7, #10]

	// Send register address MSB
	I2C2->DR = (uint8_t)((register_addr>>8) & 0x00FF);
 80151dc:	88bb      	ldrh	r3, [r7, #4]
 80151de:	0a1b      	lsrs	r3, r3, #8
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	b2da      	uxtb	r2, r3
 80151e4:	4b3b      	ldr	r3, [pc, #236]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151e6:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 80151e8:	bf00      	nop
 80151ea:	4b3a      	ldr	r3, [pc, #232]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151ec:	695b      	ldr	r3, [r3, #20]
 80151ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d105      	bne.n	8015202 <F_I2C2_ReadRegisterVL53L1X+0x8e>
 80151f6:	4b37      	ldr	r3, [pc, #220]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80151f8:	695b      	ldr	r3, [r3, #20]
 80151fa:	f003 0304 	and.w	r3, r3, #4
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d0f3      	beq.n	80151ea <F_I2C2_ReadRegisterVL53L1X+0x76>

	// Send register address LSB
	I2C2->DR = (uint8_t)(register_addr & 0x00FF);
 8015202:	88bb      	ldrh	r3, [r7, #4]
 8015204:	b2da      	uxtb	r2, r3
 8015206:	4b33      	ldr	r3, [pc, #204]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015208:	611a      	str	r2, [r3, #16]
	while ((!(I2C2->SR1 & I2C_SR1_TXE)) && (!(I2C2->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 801520a:	bf00      	nop
 801520c:	4b31      	ldr	r3, [pc, #196]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801520e:	695b      	ldr	r3, [r3, #20]
 8015210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015214:	2b00      	cmp	r3, #0
 8015216:	d105      	bne.n	8015224 <F_I2C2_ReadRegisterVL53L1X+0xb0>
 8015218:	4b2e      	ldr	r3, [pc, #184]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801521a:	695b      	ldr	r3, [r3, #20]
 801521c:	f003 0304 	and.w	r3, r3, #4
 8015220:	2b00      	cmp	r3, #0
 8015222:	d0f3      	beq.n	801520c <F_I2C2_ReadRegisterVL53L1X+0x98>


	// Send repeated start
	I2C2->CR1 |= I2C_CR1_START; // send START bit
 8015224:	4b2b      	ldr	r3, [pc, #172]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	4a2a      	ldr	r2, [pc, #168]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801522a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801522e:	6013      	str	r3, [r2, #0]
	while (!(I2C2->SR1 & I2C_SR1_SB));	// wait for START condition (SB=1)
 8015230:	bf00      	nop
 8015232:	4b28      	ldr	r3, [pc, #160]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015234:	695b      	ldr	r3, [r3, #20]
 8015236:	f003 0301 	and.w	r3, r3, #1
 801523a:	2b00      	cmp	r3, #0
 801523c:	d0f9      	beq.n	8015232 <F_I2C2_ReadRegisterVL53L1X+0xbe>

	timeout=0;
 801523e:	2300      	movs	r3, #0
 8015240:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C2->DR = slave_addr | 1;	// address + read
 8015242:	79fb      	ldrb	r3, [r7, #7]
 8015244:	f043 0301 	orr.w	r3, r3, #1
 8015248:	b2da      	uxtb	r2, r3
 801524a:	4b22      	ldr	r3, [pc, #136]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801524c:	611a      	str	r2, [r3, #16]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 801524e:	e002      	b.n	8015256 <F_I2C2_ReadRegisterVL53L1X+0xe2>
		/*if(timeout > I2C_TIMEOUT){

			return I2C_STATUS_KO;
		}*/
		timeout++;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	3301      	adds	r3, #1
 8015254:	60fb      	str	r3, [r7, #12]
	while (!(I2C2->SR1 & I2C_SR1_ADDR)){ // wait for ADDRESS sent (ADDR=1)
 8015256:	4b1f      	ldr	r3, [pc, #124]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	f003 0302 	and.w	r3, r3, #2
 801525e:	2b00      	cmp	r3, #0
 8015260:	d0f6      	beq.n	8015250 <F_I2C2_ReadRegisterVL53L1X+0xdc>
	}
	i2c_status = I2C2->SR2; // read status to clear flag
 8015262:	4b1c      	ldr	r3, [pc, #112]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015264:	699b      	ldr	r3, [r3, #24]
 8015266:	72bb      	strb	r3, [r7, #10]


	// prepare ACK
	I2C2->CR1 |= I2C_CR1_ACK;
 8015268:	4b1a      	ldr	r3, [pc, #104]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4a19      	ldr	r2, [pc, #100]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801526e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015272:	6013      	str	r3, [r2, #0]

	for(i=0;i<nb_value_to_read;i++)
 8015274:	2300      	movs	r3, #0
 8015276:	72fb      	strb	r3, [r7, #11]
 8015278:	e01b      	b.n	80152b2 <F_I2C2_ReadRegisterVL53L1X+0x13e>
	{

		// If this is the last byte to receive
		if((i+1) >= nb_value_to_read)
 801527a:	7afb      	ldrb	r3, [r7, #11]
 801527c:	1c5a      	adds	r2, r3, #1
 801527e:	79bb      	ldrb	r3, [r7, #6]
 8015280:	429a      	cmp	r2, r3
 8015282:	db05      	blt.n	8015290 <F_I2C2_ReadRegisterVL53L1X+0x11c>
		{
			// prepare NACK
			I2C2->CR1 &= ~I2C_CR1_ACK;
 8015284:	4b13      	ldr	r3, [pc, #76]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4a12      	ldr	r2, [pc, #72]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 801528a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801528e:	6013      	str	r3, [r2, #0]
		}

		// Wait for Data available
			while (!(I2C2->SR1 & I2C_SR1_RXNE));
 8015290:	bf00      	nop
 8015292:	4b10      	ldr	r3, [pc, #64]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 8015294:	695b      	ldr	r3, [r3, #20]
 8015296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801529a:	2b00      	cmp	r3, #0
 801529c:	d0f9      	beq.n	8015292 <F_I2C2_ReadRegisterVL53L1X+0x11e>
			value_read[i] = I2C2->DR; 			// Address in chip -> DR & write
 801529e:	4b0d      	ldr	r3, [pc, #52]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80152a0:	6919      	ldr	r1, [r3, #16]
 80152a2:	7afb      	ldrb	r3, [r7, #11]
 80152a4:	683a      	ldr	r2, [r7, #0]
 80152a6:	4413      	add	r3, r2
 80152a8:	b2ca      	uxtb	r2, r1
 80152aa:	701a      	strb	r2, [r3, #0]
	for(i=0;i<nb_value_to_read;i++)
 80152ac:	7afb      	ldrb	r3, [r7, #11]
 80152ae:	3301      	adds	r3, #1
 80152b0:	72fb      	strb	r3, [r7, #11]
 80152b2:	7afa      	ldrb	r2, [r7, #11]
 80152b4:	79bb      	ldrb	r3, [r7, #6]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d3df      	bcc.n	801527a <F_I2C2_ReadRegisterVL53L1X+0x106>
	}


	// send STOP bit
	I2C2->CR1 |= I2C_CR1_STOP;
 80152ba:	4b06      	ldr	r3, [pc, #24]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	4a05      	ldr	r2, [pc, #20]	; (80152d4 <F_I2C2_ReadRegisterVL53L1X+0x160>)
 80152c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80152c4:	6013      	str	r3, [r2, #0]
	return status;
 80152c6:	7a7b      	ldrb	r3, [r7, #9]
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3714      	adds	r7, #20
 80152cc:	46bd      	mov	sp, r7
 80152ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d2:	4770      	bx	lr
 80152d4:	40005800 	.word	0x40005800

080152d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af04      	add	r7, sp, #16

	/* IP addresses initialization */
		  IP_ADDRESS[0] = 192;
 80152de:	4b8b      	ldr	r3, [pc, #556]	; (801550c <MX_LWIP_Init+0x234>)
 80152e0:	22c0      	movs	r2, #192	; 0xc0
 80152e2:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = 168;
 80152e4:	4b89      	ldr	r3, [pc, #548]	; (801550c <MX_LWIP_Init+0x234>)
 80152e6:	22a8      	movs	r2, #168	; 0xa8
 80152e8:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = 2;
 80152ea:	4b88      	ldr	r3, [pc, #544]	; (801550c <MX_LWIP_Init+0x234>)
 80152ec:	2202      	movs	r2, #2
 80152ee:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = 21;
 80152f0:	4b86      	ldr	r3, [pc, #536]	; (801550c <MX_LWIP_Init+0x234>)
 80152f2:	2215      	movs	r2, #21
 80152f4:	70da      	strb	r2, [r3, #3]
		  NETMASK_ADDRESS[0] = 255;
 80152f6:	4b86      	ldr	r3, [pc, #536]	; (8015510 <MX_LWIP_Init+0x238>)
 80152f8:	22ff      	movs	r2, #255	; 0xff
 80152fa:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = 255;
 80152fc:	4b84      	ldr	r3, [pc, #528]	; (8015510 <MX_LWIP_Init+0x238>)
 80152fe:	22ff      	movs	r2, #255	; 0xff
 8015300:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = 255;
 8015302:	4b83      	ldr	r3, [pc, #524]	; (8015510 <MX_LWIP_Init+0x238>)
 8015304:	22ff      	movs	r2, #255	; 0xff
 8015306:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = 0;
 8015308:	4b81      	ldr	r3, [pc, #516]	; (8015510 <MX_LWIP_Init+0x238>)
 801530a:	2200      	movs	r2, #0
 801530c:	70da      	strb	r2, [r3, #3]
		  GATEWAY_ADDRESS[0] = 192;
 801530e:	4b81      	ldr	r3, [pc, #516]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015310:	22c0      	movs	r2, #192	; 0xc0
 8015312:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = 168;
 8015314:	4b7f      	ldr	r3, [pc, #508]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015316:	22a8      	movs	r2, #168	; 0xa8
 8015318:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = 2;
 801531a:	4b7e      	ldr	r3, [pc, #504]	; (8015514 <MX_LWIP_Init+0x23c>)
 801531c:	2202      	movs	r2, #2
 801531e:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = 1;
 8015320:	4b7c      	ldr	r3, [pc, #496]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015322:	2201      	movs	r2, #1
 8015324:	70da      	strb	r2, [r3, #3]

		  /* Initilialize the LwIP stack without RTOS */
		  lwip_init();
 8015326:	f7f2 fc7a 	bl	8007c1e <lwip_init>

		  /* IP addresses initialization without DHCP (IPv4) */
		  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801532a:	4b78      	ldr	r3, [pc, #480]	; (801550c <MX_LWIP_Init+0x234>)
 801532c:	781b      	ldrb	r3, [r3, #0]
 801532e:	061a      	lsls	r2, r3, #24
 8015330:	4b76      	ldr	r3, [pc, #472]	; (801550c <MX_LWIP_Init+0x234>)
 8015332:	785b      	ldrb	r3, [r3, #1]
 8015334:	041b      	lsls	r3, r3, #16
 8015336:	431a      	orrs	r2, r3
 8015338:	4b74      	ldr	r3, [pc, #464]	; (801550c <MX_LWIP_Init+0x234>)
 801533a:	789b      	ldrb	r3, [r3, #2]
 801533c:	021b      	lsls	r3, r3, #8
 801533e:	4313      	orrs	r3, r2
 8015340:	4a72      	ldr	r2, [pc, #456]	; (801550c <MX_LWIP_Init+0x234>)
 8015342:	78d2      	ldrb	r2, [r2, #3]
 8015344:	4313      	orrs	r3, r2
 8015346:	061a      	lsls	r2, r3, #24
 8015348:	4b70      	ldr	r3, [pc, #448]	; (801550c <MX_LWIP_Init+0x234>)
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	0619      	lsls	r1, r3, #24
 801534e:	4b6f      	ldr	r3, [pc, #444]	; (801550c <MX_LWIP_Init+0x234>)
 8015350:	785b      	ldrb	r3, [r3, #1]
 8015352:	041b      	lsls	r3, r3, #16
 8015354:	4319      	orrs	r1, r3
 8015356:	4b6d      	ldr	r3, [pc, #436]	; (801550c <MX_LWIP_Init+0x234>)
 8015358:	789b      	ldrb	r3, [r3, #2]
 801535a:	021b      	lsls	r3, r3, #8
 801535c:	430b      	orrs	r3, r1
 801535e:	496b      	ldr	r1, [pc, #428]	; (801550c <MX_LWIP_Init+0x234>)
 8015360:	78c9      	ldrb	r1, [r1, #3]
 8015362:	430b      	orrs	r3, r1
 8015364:	021b      	lsls	r3, r3, #8
 8015366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801536a:	431a      	orrs	r2, r3
 801536c:	4b67      	ldr	r3, [pc, #412]	; (801550c <MX_LWIP_Init+0x234>)
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	0619      	lsls	r1, r3, #24
 8015372:	4b66      	ldr	r3, [pc, #408]	; (801550c <MX_LWIP_Init+0x234>)
 8015374:	785b      	ldrb	r3, [r3, #1]
 8015376:	041b      	lsls	r3, r3, #16
 8015378:	4319      	orrs	r1, r3
 801537a:	4b64      	ldr	r3, [pc, #400]	; (801550c <MX_LWIP_Init+0x234>)
 801537c:	789b      	ldrb	r3, [r3, #2]
 801537e:	021b      	lsls	r3, r3, #8
 8015380:	430b      	orrs	r3, r1
 8015382:	4962      	ldr	r1, [pc, #392]	; (801550c <MX_LWIP_Init+0x234>)
 8015384:	78c9      	ldrb	r1, [r1, #3]
 8015386:	430b      	orrs	r3, r1
 8015388:	0a1b      	lsrs	r3, r3, #8
 801538a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801538e:	431a      	orrs	r2, r3
 8015390:	4b5e      	ldr	r3, [pc, #376]	; (801550c <MX_LWIP_Init+0x234>)
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	0619      	lsls	r1, r3, #24
 8015396:	4b5d      	ldr	r3, [pc, #372]	; (801550c <MX_LWIP_Init+0x234>)
 8015398:	785b      	ldrb	r3, [r3, #1]
 801539a:	041b      	lsls	r3, r3, #16
 801539c:	4319      	orrs	r1, r3
 801539e:	4b5b      	ldr	r3, [pc, #364]	; (801550c <MX_LWIP_Init+0x234>)
 80153a0:	789b      	ldrb	r3, [r3, #2]
 80153a2:	021b      	lsls	r3, r3, #8
 80153a4:	430b      	orrs	r3, r1
 80153a6:	4959      	ldr	r1, [pc, #356]	; (801550c <MX_LWIP_Init+0x234>)
 80153a8:	78c9      	ldrb	r1, [r1, #3]
 80153aa:	430b      	orrs	r3, r1
 80153ac:	0e1b      	lsrs	r3, r3, #24
 80153ae:	4313      	orrs	r3, r2
 80153b0:	4a59      	ldr	r2, [pc, #356]	; (8015518 <MX_LWIP_Init+0x240>)
 80153b2:	6013      	str	r3, [r2, #0]
		  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80153b4:	4b56      	ldr	r3, [pc, #344]	; (8015510 <MX_LWIP_Init+0x238>)
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	061a      	lsls	r2, r3, #24
 80153ba:	4b55      	ldr	r3, [pc, #340]	; (8015510 <MX_LWIP_Init+0x238>)
 80153bc:	785b      	ldrb	r3, [r3, #1]
 80153be:	041b      	lsls	r3, r3, #16
 80153c0:	431a      	orrs	r2, r3
 80153c2:	4b53      	ldr	r3, [pc, #332]	; (8015510 <MX_LWIP_Init+0x238>)
 80153c4:	789b      	ldrb	r3, [r3, #2]
 80153c6:	021b      	lsls	r3, r3, #8
 80153c8:	4313      	orrs	r3, r2
 80153ca:	4a51      	ldr	r2, [pc, #324]	; (8015510 <MX_LWIP_Init+0x238>)
 80153cc:	78d2      	ldrb	r2, [r2, #3]
 80153ce:	4313      	orrs	r3, r2
 80153d0:	061a      	lsls	r2, r3, #24
 80153d2:	4b4f      	ldr	r3, [pc, #316]	; (8015510 <MX_LWIP_Init+0x238>)
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	0619      	lsls	r1, r3, #24
 80153d8:	4b4d      	ldr	r3, [pc, #308]	; (8015510 <MX_LWIP_Init+0x238>)
 80153da:	785b      	ldrb	r3, [r3, #1]
 80153dc:	041b      	lsls	r3, r3, #16
 80153de:	4319      	orrs	r1, r3
 80153e0:	4b4b      	ldr	r3, [pc, #300]	; (8015510 <MX_LWIP_Init+0x238>)
 80153e2:	789b      	ldrb	r3, [r3, #2]
 80153e4:	021b      	lsls	r3, r3, #8
 80153e6:	430b      	orrs	r3, r1
 80153e8:	4949      	ldr	r1, [pc, #292]	; (8015510 <MX_LWIP_Init+0x238>)
 80153ea:	78c9      	ldrb	r1, [r1, #3]
 80153ec:	430b      	orrs	r3, r1
 80153ee:	021b      	lsls	r3, r3, #8
 80153f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80153f4:	431a      	orrs	r2, r3
 80153f6:	4b46      	ldr	r3, [pc, #280]	; (8015510 <MX_LWIP_Init+0x238>)
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	0619      	lsls	r1, r3, #24
 80153fc:	4b44      	ldr	r3, [pc, #272]	; (8015510 <MX_LWIP_Init+0x238>)
 80153fe:	785b      	ldrb	r3, [r3, #1]
 8015400:	041b      	lsls	r3, r3, #16
 8015402:	4319      	orrs	r1, r3
 8015404:	4b42      	ldr	r3, [pc, #264]	; (8015510 <MX_LWIP_Init+0x238>)
 8015406:	789b      	ldrb	r3, [r3, #2]
 8015408:	021b      	lsls	r3, r3, #8
 801540a:	430b      	orrs	r3, r1
 801540c:	4940      	ldr	r1, [pc, #256]	; (8015510 <MX_LWIP_Init+0x238>)
 801540e:	78c9      	ldrb	r1, [r1, #3]
 8015410:	430b      	orrs	r3, r1
 8015412:	0a1b      	lsrs	r3, r3, #8
 8015414:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015418:	431a      	orrs	r2, r3
 801541a:	4b3d      	ldr	r3, [pc, #244]	; (8015510 <MX_LWIP_Init+0x238>)
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	0619      	lsls	r1, r3, #24
 8015420:	4b3b      	ldr	r3, [pc, #236]	; (8015510 <MX_LWIP_Init+0x238>)
 8015422:	785b      	ldrb	r3, [r3, #1]
 8015424:	041b      	lsls	r3, r3, #16
 8015426:	4319      	orrs	r1, r3
 8015428:	4b39      	ldr	r3, [pc, #228]	; (8015510 <MX_LWIP_Init+0x238>)
 801542a:	789b      	ldrb	r3, [r3, #2]
 801542c:	021b      	lsls	r3, r3, #8
 801542e:	430b      	orrs	r3, r1
 8015430:	4937      	ldr	r1, [pc, #220]	; (8015510 <MX_LWIP_Init+0x238>)
 8015432:	78c9      	ldrb	r1, [r1, #3]
 8015434:	430b      	orrs	r3, r1
 8015436:	0e1b      	lsrs	r3, r3, #24
 8015438:	4313      	orrs	r3, r2
 801543a:	4a38      	ldr	r2, [pc, #224]	; (801551c <MX_LWIP_Init+0x244>)
 801543c:	6013      	str	r3, [r2, #0]
		  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801543e:	4b35      	ldr	r3, [pc, #212]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	061a      	lsls	r2, r3, #24
 8015444:	4b33      	ldr	r3, [pc, #204]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015446:	785b      	ldrb	r3, [r3, #1]
 8015448:	041b      	lsls	r3, r3, #16
 801544a:	431a      	orrs	r2, r3
 801544c:	4b31      	ldr	r3, [pc, #196]	; (8015514 <MX_LWIP_Init+0x23c>)
 801544e:	789b      	ldrb	r3, [r3, #2]
 8015450:	021b      	lsls	r3, r3, #8
 8015452:	4313      	orrs	r3, r2
 8015454:	4a2f      	ldr	r2, [pc, #188]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015456:	78d2      	ldrb	r2, [r2, #3]
 8015458:	4313      	orrs	r3, r2
 801545a:	061a      	lsls	r2, r3, #24
 801545c:	4b2d      	ldr	r3, [pc, #180]	; (8015514 <MX_LWIP_Init+0x23c>)
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	0619      	lsls	r1, r3, #24
 8015462:	4b2c      	ldr	r3, [pc, #176]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015464:	785b      	ldrb	r3, [r3, #1]
 8015466:	041b      	lsls	r3, r3, #16
 8015468:	4319      	orrs	r1, r3
 801546a:	4b2a      	ldr	r3, [pc, #168]	; (8015514 <MX_LWIP_Init+0x23c>)
 801546c:	789b      	ldrb	r3, [r3, #2]
 801546e:	021b      	lsls	r3, r3, #8
 8015470:	430b      	orrs	r3, r1
 8015472:	4928      	ldr	r1, [pc, #160]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015474:	78c9      	ldrb	r1, [r1, #3]
 8015476:	430b      	orrs	r3, r1
 8015478:	021b      	lsls	r3, r3, #8
 801547a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801547e:	431a      	orrs	r2, r3
 8015480:	4b24      	ldr	r3, [pc, #144]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	0619      	lsls	r1, r3, #24
 8015486:	4b23      	ldr	r3, [pc, #140]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015488:	785b      	ldrb	r3, [r3, #1]
 801548a:	041b      	lsls	r3, r3, #16
 801548c:	4319      	orrs	r1, r3
 801548e:	4b21      	ldr	r3, [pc, #132]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015490:	789b      	ldrb	r3, [r3, #2]
 8015492:	021b      	lsls	r3, r3, #8
 8015494:	430b      	orrs	r3, r1
 8015496:	491f      	ldr	r1, [pc, #124]	; (8015514 <MX_LWIP_Init+0x23c>)
 8015498:	78c9      	ldrb	r1, [r1, #3]
 801549a:	430b      	orrs	r3, r1
 801549c:	0a1b      	lsrs	r3, r3, #8
 801549e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80154a2:	431a      	orrs	r2, r3
 80154a4:	4b1b      	ldr	r3, [pc, #108]	; (8015514 <MX_LWIP_Init+0x23c>)
 80154a6:	781b      	ldrb	r3, [r3, #0]
 80154a8:	0619      	lsls	r1, r3, #24
 80154aa:	4b1a      	ldr	r3, [pc, #104]	; (8015514 <MX_LWIP_Init+0x23c>)
 80154ac:	785b      	ldrb	r3, [r3, #1]
 80154ae:	041b      	lsls	r3, r3, #16
 80154b0:	4319      	orrs	r1, r3
 80154b2:	4b18      	ldr	r3, [pc, #96]	; (8015514 <MX_LWIP_Init+0x23c>)
 80154b4:	789b      	ldrb	r3, [r3, #2]
 80154b6:	021b      	lsls	r3, r3, #8
 80154b8:	430b      	orrs	r3, r1
 80154ba:	4916      	ldr	r1, [pc, #88]	; (8015514 <MX_LWIP_Init+0x23c>)
 80154bc:	78c9      	ldrb	r1, [r1, #3]
 80154be:	430b      	orrs	r3, r1
 80154c0:	0e1b      	lsrs	r3, r3, #24
 80154c2:	4313      	orrs	r3, r2
 80154c4:	4a16      	ldr	r2, [pc, #88]	; (8015520 <MX_LWIP_Init+0x248>)
 80154c6:	6013      	str	r3, [r2, #0]

		  /* add the network interface (IPv4/IPv6) without RTOS */
		  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80154c8:	4b16      	ldr	r3, [pc, #88]	; (8015524 <MX_LWIP_Init+0x24c>)
 80154ca:	9302      	str	r3, [sp, #8]
 80154cc:	4b16      	ldr	r3, [pc, #88]	; (8015528 <MX_LWIP_Init+0x250>)
 80154ce:	9301      	str	r3, [sp, #4]
 80154d0:	2300      	movs	r3, #0
 80154d2:	9300      	str	r3, [sp, #0]
 80154d4:	4b12      	ldr	r3, [pc, #72]	; (8015520 <MX_LWIP_Init+0x248>)
 80154d6:	4a11      	ldr	r2, [pc, #68]	; (801551c <MX_LWIP_Init+0x244>)
 80154d8:	490f      	ldr	r1, [pc, #60]	; (8015518 <MX_LWIP_Init+0x240>)
 80154da:	4814      	ldr	r0, [pc, #80]	; (801552c <MX_LWIP_Init+0x254>)
 80154dc:	f7f2 ffa4 	bl	8008428 <netif_add>

		  /* Registers the default network interface */
		  netif_set_default(&gnetif);
 80154e0:	4812      	ldr	r0, [pc, #72]	; (801552c <MX_LWIP_Init+0x254>)
 80154e2:	f7f3 f889 	bl	80085f8 <netif_set_default>

		  if (netif_is_link_up(&gnetif))
 80154e6:	4b11      	ldr	r3, [pc, #68]	; (801552c <MX_LWIP_Init+0x254>)
 80154e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80154ec:	089b      	lsrs	r3, r3, #2
 80154ee:	f003 0301 	and.w	r3, r3, #1
 80154f2:	b2db      	uxtb	r3, r3
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d003      	beq.n	8015500 <MX_LWIP_Init+0x228>
		  {
		    /* When the netif is fully configured this function must be called */
		    netif_set_up(&gnetif);
 80154f8:	480c      	ldr	r0, [pc, #48]	; (801552c <MX_LWIP_Init+0x254>)
 80154fa:	f7f3 f88d 	bl	8008618 <netif_set_up>
		    netif_set_down(&gnetif);
		  }
/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80154fe:	e002      	b.n	8015506 <MX_LWIP_Init+0x22e>
		    netif_set_down(&gnetif);
 8015500:	480a      	ldr	r0, [pc, #40]	; (801552c <MX_LWIP_Init+0x254>)
 8015502:	f7f3 f8cd 	bl	80086a0 <netif_set_down>
}
 8015506:	bf00      	nop
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	2000775c 	.word	0x2000775c
 8015510:	20007758 	.word	0x20007758
 8015514:	2000771c 	.word	0x2000771c
 8015518:	20007754 	.word	0x20007754
 801551c:	20007760 	.word	0x20007760
 8015520:	20007764 	.word	0x20007764
 8015524:	0801249d 	.word	0x0801249d
 8015528:	08014979 	.word	0x08014979
 801552c:	20007720 	.word	0x20007720

08015530 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8015534:	4803      	ldr	r0, [pc, #12]	; (8015544 <MX_LWIP_Process+0x14>)
 8015536:	f7ff f9ff 	bl	8014938 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 801553a:	f7f9 f9d7 	bl	800e8ec <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801553e:	bf00      	nop
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	20007720 	.word	0x20007720

08015548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b086      	sub	sp, #24
 801554c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 801554e:	f7eb fe65 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8015552:	f000 f851 	bl	80155f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015556:	f7ff fa45 	bl	80149e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 801555a:	f7ff fc89 	bl	8014e70 <MX_I2C1_Init>
  MX_I2C2_Init();
 801555e:	f7ff fcc7 	bl	8014ef0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8015562:	f000 fca3 	bl	8015eac <MX_TIM2_Init>
  MX_TIM3_Init();
 8015566:	f000 fcfb 	bl	8015f60 <MX_TIM3_Init>
  MX_TIM4_Init();
 801556a:	f000 fd39 	bl	8015fe0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 801556e:	f000 fea1 	bl	80162b4 <MX_USART3_UART_Init>
#if USE_TCP_SERVER == 1
  MX_LWIP_Init();
 8015572:	f7ff feb1 	bl	80152d8 <MX_LWIP_Init>
#endif
  MX_USB_DEVICE_Init();
 8015576:	f000 ff0f 	bl	8016398 <MX_USB_DEVICE_Init>
  MX_TIM13_Init();
 801557a:	f000 fdbb 	bl	80160f4 <MX_TIM13_Init>

  /* USER CODE BEGIN 2 */
#if PRINTF_USB_UART == 1
  printf("Initializing the VL53L1X sensors....\r\n");
 801557e:	481a      	ldr	r0, [pc, #104]	; (80155e8 <main+0xa0>)
 8015580:	f001 fdb8 	bl	80170f4 <puts>
#endif
  F_VL53L1X_InitSensors();
 8015584:	f7fe fdd8 	bl	8014138 <F_VL53L1X_InitSensors>

  TIM13->DIER |= TIM_DIER_UIE;	// Enable interrupt
 8015588:	4b18      	ldr	r3, [pc, #96]	; (80155ec <main+0xa4>)
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	4a17      	ldr	r2, [pc, #92]	; (80155ec <main+0xa4>)
 801558e:	f043 0301 	orr.w	r3, r3, #1
 8015592:	60d3      	str	r3, [r2, #12]
  TIM13->CR1 |= TIM_CR1_CEN;
 8015594:	4b15      	ldr	r3, [pc, #84]	; (80155ec <main+0xa4>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4a14      	ldr	r2, [pc, #80]	; (80155ec <main+0xa4>)
 801559a:	f043 0301 	orr.w	r3, r3, #1
 801559e:	6013      	str	r3, [r2, #0]




  Init_Motors();
 80155a0:	f7fd fcc6 	bl	8012f30 <Init_Motors>
  Init_QEI();
 80155a4:	f7fd fd35 	bl	8013012 <Init_QEI>
  Init_Timer9();
 80155a8:	f000 fe30 	bl	801620c <Init_Timer9>
  Init_Timer10();
 80155ac:	f000 fe58 	bl	8016260 <Init_Timer10>

    // Initialize the TCP Echo Server
#if PRINTF_USB_UART == 1
  printf("Initializing the TCP server....\r\n");
 80155b0:	480f      	ldr	r0, [pc, #60]	; (80155f0 <main+0xa8>)
 80155b2:	f001 fd9f 	bl	80170f4 <puts>
#endif
  F_GPIO_SetLedRed(1);
 80155b6:	2001      	movs	r0, #1
 80155b8:	f7ff fb98 	bl	8014cec <F_GPIO_SetLedRed>
#if USE_TCP_SERVER == 1
      tcp_server_init();
 80155bc:	f000 fa36 	bl	8015a2c <tcp_server_init>
  F_AUTO_AddTargetPoint(900 , -1350, 0);
  F_AUTO_AddTargetPoint(300 , -727, 180);

*/

  int dcG=0,dcD=0,bp_flag=0,dutyC=25;
 80155c0:	2300      	movs	r3, #0
 80155c2:	617b      	str	r3, [r7, #20]
 80155c4:	2300      	movs	r3, #0
 80155c6:	613b      	str	r3, [r7, #16]
 80155c8:	2300      	movs	r3, #0
 80155ca:	60fb      	str	r3, [r7, #12]
 80155cc:	2319      	movs	r3, #25
 80155ce:	60bb      	str	r3, [r7, #8]
  float speedL,speedR;
  int angleDeg=90;
 80155d0:	235a      	movs	r3, #90	; 0x5a
 80155d2:	607b      	str	r3, [r7, #4]

 // while(F_GPIO_GetTirette() == 1);

 // F_AUTO_Enable();

  F_Init_TimerServo();
 80155d4:	f7fd f83e 	bl	8012654 <F_Init_TimerServo>
  F_Servo_Fermer();
 80155d8:	f7fd f902 	bl	80127e0 <F_Servo_Fermer>

#if PRINTF_USB_UART == 1
  printf("Entering the infinite loop....\r\n");
 80155dc:	4805      	ldr	r0, [pc, #20]	; (80155f4 <main+0xac>)
 80155de:	f001 fd89 	bl	80170f4 <puts>

	     /* USER CODE BEGIN 3 */

	  // Handle the TCP connection
#if USE_TCP_SERVER == 1
	  MX_LWIP_Process();
 80155e2:	f7ff ffa5 	bl	8015530 <MX_LWIP_Process>
 80155e6:	e7fc      	b.n	80155e2 <main+0x9a>
 80155e8:	0801b10c 	.word	0x0801b10c
 80155ec:	40001c00 	.word	0x40001c00
 80155f0:	0801b134 	.word	0x0801b134
 80155f4:	0801b158 	.word	0x0801b158

080155f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b094      	sub	sp, #80	; 0x50
 80155fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80155fe:	f107 0320 	add.w	r3, r7, #32
 8015602:	2230      	movs	r2, #48	; 0x30
 8015604:	2100      	movs	r1, #0
 8015606:	4618      	mov	r0, r3
 8015608:	f001 fc50 	bl	8016eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801560c:	f107 030c 	add.w	r3, r7, #12
 8015610:	2200      	movs	r2, #0
 8015612:	601a      	str	r2, [r3, #0]
 8015614:	605a      	str	r2, [r3, #4]
 8015616:	609a      	str	r2, [r3, #8]
 8015618:	60da      	str	r2, [r3, #12]
 801561a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801561c:	2300      	movs	r3, #0
 801561e:	60bb      	str	r3, [r7, #8]
 8015620:	4b28      	ldr	r3, [pc, #160]	; (80156c4 <SystemClock_Config+0xcc>)
 8015622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015624:	4a27      	ldr	r2, [pc, #156]	; (80156c4 <SystemClock_Config+0xcc>)
 8015626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801562a:	6413      	str	r3, [r2, #64]	; 0x40
 801562c:	4b25      	ldr	r3, [pc, #148]	; (80156c4 <SystemClock_Config+0xcc>)
 801562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015634:	60bb      	str	r3, [r7, #8]
 8015636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015638:	2300      	movs	r3, #0
 801563a:	607b      	str	r3, [r7, #4]
 801563c:	4b22      	ldr	r3, [pc, #136]	; (80156c8 <SystemClock_Config+0xd0>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	4a21      	ldr	r2, [pc, #132]	; (80156c8 <SystemClock_Config+0xd0>)
 8015642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015646:	6013      	str	r3, [r2, #0]
 8015648:	4b1f      	ldr	r3, [pc, #124]	; (80156c8 <SystemClock_Config+0xd0>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8015650:	607b      	str	r3, [r7, #4]
 8015652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8015654:	2301      	movs	r3, #1
 8015656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8015658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801565c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801565e:	2302      	movs	r3, #2
 8015660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8015662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8015668:	2304      	movs	r3, #4
 801566a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 801566c:	23b4      	movs	r3, #180	; 0xb4
 801566e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015670:	2302      	movs	r3, #2
 8015672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8015674:	2307      	movs	r3, #7
 8015676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015678:	f107 0320 	add.w	r3, r7, #32
 801567c:	4618      	mov	r0, r3
 801567e:	f7ee fbf9 	bl	8003e74 <HAL_RCC_OscConfig>
 8015682:	4603      	mov	r3, r0
 8015684:	2b00      	cmp	r3, #0
 8015686:	d001      	beq.n	801568c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8015688:	f000 f820 	bl	80156cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801568c:	230f      	movs	r3, #15
 801568e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015690:	2302      	movs	r3, #2
 8015692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015694:	2300      	movs	r3, #0
 8015696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8015698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801569c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801569e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80156a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80156a4:	f107 030c 	add.w	r3, r7, #12
 80156a8:	2105      	movs	r1, #5
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7ee fe24 	bl	80042f8 <HAL_RCC_ClockConfig>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d001      	beq.n	80156ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80156b6:	f000 f809 	bl	80156cc <Error_Handler>
  }
}
 80156ba:	bf00      	nop
 80156bc:	3750      	adds	r7, #80	; 0x50
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop
 80156c4:	40023800 	.word	0x40023800
 80156c8:	40007000 	.word	0x40007000

080156cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80156cc:	b480      	push	{r7}
 80156ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80156d0:	bf00      	nop
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr
	...

080156dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80156dc:	b480      	push	{r7}
 80156de:	b083      	sub	sp, #12
 80156e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80156e2:	2300      	movs	r3, #0
 80156e4:	607b      	str	r3, [r7, #4]
 80156e6:	4b10      	ldr	r3, [pc, #64]	; (8015728 <HAL_MspInit+0x4c>)
 80156e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156ea:	4a0f      	ldr	r2, [pc, #60]	; (8015728 <HAL_MspInit+0x4c>)
 80156ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80156f0:	6453      	str	r3, [r2, #68]	; 0x44
 80156f2:	4b0d      	ldr	r3, [pc, #52]	; (8015728 <HAL_MspInit+0x4c>)
 80156f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80156fa:	607b      	str	r3, [r7, #4]
 80156fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80156fe:	2300      	movs	r3, #0
 8015700:	603b      	str	r3, [r7, #0]
 8015702:	4b09      	ldr	r3, [pc, #36]	; (8015728 <HAL_MspInit+0x4c>)
 8015704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015706:	4a08      	ldr	r2, [pc, #32]	; (8015728 <HAL_MspInit+0x4c>)
 8015708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801570c:	6413      	str	r3, [r2, #64]	; 0x40
 801570e:	4b06      	ldr	r3, [pc, #24]	; (8015728 <HAL_MspInit+0x4c>)
 8015710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015716:	603b      	str	r3, [r7, #0]
 8015718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801571a:	bf00      	nop
 801571c:	370c      	adds	r7, #12
 801571e:	46bd      	mov	sp, r7
 8015720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015724:	4770      	bx	lr
 8015726:	bf00      	nop
 8015728:	40023800 	.word	0x40023800

0801572c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801572c:	b480      	push	{r7}
 801572e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8015730:	bf00      	nop
 8015732:	46bd      	mov	sp, r7
 8015734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015738:	4770      	bx	lr

0801573a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801573a:	b480      	push	{r7}
 801573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801573e:	e7fe      	b.n	801573e <HardFault_Handler+0x4>

08015740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015740:	b480      	push	{r7}
 8015742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015744:	e7fe      	b.n	8015744 <MemManage_Handler+0x4>

08015746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015746:	b480      	push	{r7}
 8015748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801574a:	e7fe      	b.n	801574a <BusFault_Handler+0x4>

0801574c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801574c:	b480      	push	{r7}
 801574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015750:	e7fe      	b.n	8015750 <UsageFault_Handler+0x4>

08015752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015752:	b480      	push	{r7}
 8015754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015756:	bf00      	nop
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr

08015760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015760:	b480      	push	{r7}
 8015762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015764:	bf00      	nop
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr

0801576e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801576e:	b480      	push	{r7}
 8015770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015772:	bf00      	nop
 8015774:	46bd      	mov	sp, r7
 8015776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577a:	4770      	bx	lr

0801577c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015780:	f7eb fd9e 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015784:	bf00      	nop
 8015786:	bd80      	pop	{r7, pc}

08015788 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	if(TIM13->SR & TIM_SR_UIF)
 801578c:	4b0c      	ldr	r3, [pc, #48]	; (80157c0 <TIM8_UP_TIM13_IRQHandler+0x38>)
 801578e:	691b      	ldr	r3, [r3, #16]
 8015790:	f003 0301 	and.w	r3, r3, #1
 8015794:	2b00      	cmp	r3, #0
 8015796:	d00e      	beq.n	80157b6 <TIM8_UP_TIM13_IRQHandler+0x2e>
	{
		  // Clear interrupt
		  F_VL53L1X_CheckSensors();
 8015798:	f7fe fd86 	bl	80142a8 <F_VL53L1X_CheckSensors>

		  if(i == 10)
 801579c:	4b09      	ldr	r3, [pc, #36]	; (80157c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	2b0a      	cmp	r3, #10
 80157a2:	d102      	bne.n	80157aa <TIM8_UP_TIM13_IRQHandler+0x22>
		  {

			  i = 0;
 80157a4:	4b07      	ldr	r3, [pc, #28]	; (80157c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80157a6:	2200      	movs	r2, #0
 80157a8:	701a      	strb	r2, [r3, #0]
		  }

		  i++;
 80157aa:	4b06      	ldr	r3, [pc, #24]	; (80157c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	3301      	adds	r3, #1
 80157b0:	b2da      	uxtb	r2, r3
 80157b2:	4b04      	ldr	r3, [pc, #16]	; (80157c4 <TIM8_UP_TIM13_IRQHandler+0x3c>)
 80157b4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80157b6:	4804      	ldr	r0, [pc, #16]	; (80157c8 <TIM8_UP_TIM13_IRQHandler+0x40>)
 80157b8:	f7ee ffb7 	bl	800472a <HAL_TIM_IRQHandler>


  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80157bc:	bf00      	nop
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	40001c00 	.word	0x40001c00
 80157c4:	200003e8 	.word	0x200003e8
 80157c8:	20007804 	.word	0x20007804

080157cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80157d0:	4802      	ldr	r0, [pc, #8]	; (80157dc <OTG_FS_IRQHandler+0x10>)
 80157d2:	f7ed fb14 	bl	8002dfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80157d6:	bf00      	nop
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	20008b60 	.word	0x20008b60

080157e0 <TIM1_BRK_TIM9_IRQHandler>:
/**
 * Interrupt process of Timer 9
 * Motor speed regulation
 * T = 5ms;
 */
void TIM1_BRK_TIM9_IRQHandler(void){
 80157e0:	b580      	push	{r7, lr}
 80157e2:	af00      	add	r7, sp, #0

	if(TIM9->SR & TIM_SR_UIF){
 80157e4:	4b15      	ldr	r3, [pc, #84]	; (801583c <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 80157e6:	691b      	ldr	r3, [r3, #16]
 80157e8:	f003 0301 	and.w	r3, r3, #1
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d023      	beq.n	8015838 <TIM1_BRK_TIM9_IRQHandler+0x58>
		TIM9->SR &= ~TIM_SR_UIF;
 80157f0:	4b12      	ldr	r3, [pc, #72]	; (801583c <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 80157f2:	691b      	ldr	r3, [r3, #16]
 80157f4:	4a11      	ldr	r2, [pc, #68]	; (801583c <TIM1_BRK_TIM9_IRQHandler+0x5c>)
 80157f6:	f023 0301 	bic.w	r3, r3, #1
 80157fa:	6113      	str	r3, [r2, #16]

		if(F_GPIO_GetTirette() && g_temps_match<(DUREE_MATCH*1000)){
 80157fc:	f7ff faca 	bl	8014d94 <F_GPIO_GetTirette>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d010      	beq.n	8015828 <TIM1_BRK_TIM9_IRQHandler+0x48>
 8015806:	4b0e      	ldr	r3, [pc, #56]	; (8015840 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	4a0e      	ldr	r2, [pc, #56]	; (8015844 <TIM1_BRK_TIM9_IRQHandler+0x64>)
 801580c:	4293      	cmp	r3, r2
 801580e:	dc0b      	bgt.n	8015828 <TIM1_BRK_TIM9_IRQHandler+0x48>
			g_start_signal=1;
 8015810:	4b0d      	ldr	r3, [pc, #52]	; (8015848 <TIM1_BRK_TIM9_IRQHandler+0x68>)
 8015812:	2201      	movs	r2, #1
 8015814:	601a      	str	r2, [r3, #0]
			g_stop_signal=0;
 8015816:	4b0d      	ldr	r3, [pc, #52]	; (801584c <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 8015818:	2200      	movs	r2, #0
 801581a:	601a      	str	r2, [r3, #0]

			g_temps_match+=5;
 801581c:	4b08      	ldr	r3, [pc, #32]	; (8015840 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	3305      	adds	r3, #5
 8015822:	4a07      	ldr	r2, [pc, #28]	; (8015840 <TIM1_BRK_TIM9_IRQHandler+0x60>)
 8015824:	6013      	str	r3, [r2, #0]
 8015826:	e002      	b.n	801582e <TIM1_BRK_TIM9_IRQHandler+0x4e>
		}else{
			g_stop_signal=1;
 8015828:	4b08      	ldr	r3, [pc, #32]	; (801584c <TIM1_BRK_TIM9_IRQHandler+0x6c>)
 801582a:	2201      	movs	r2, #1
 801582c:	601a      	str	r2, [r3, #0]
		}

		g_timer_9_cnt++;
 801582e:	4b08      	ldr	r3, [pc, #32]	; (8015850 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	3301      	adds	r3, #1
 8015834:	4a06      	ldr	r2, [pc, #24]	; (8015850 <TIM1_BRK_TIM9_IRQHandler+0x70>)
 8015836:	6013      	str	r3, [r2, #0]
	}
}
 8015838:	bf00      	nop
 801583a:	bd80      	pop	{r7, pc}
 801583c:	40014000 	.word	0x40014000
 8015840:	200003dc 	.word	0x200003dc
 8015844:	0001869f 	.word	0x0001869f
 8015848:	200003e0 	.word	0x200003e0
 801584c:	200003e4 	.word	0x200003e4
 8015850:	200003d4 	.word	0x200003d4

08015854 <TIM1_UP_TIM10_IRQHandler>:
/**
 * Interrupt process of Timer 10
 * Robot position regulator
 * T = 20ms;
 */
void TIM1_UP_TIM10_IRQHandler(void){
 8015854:	b580      	push	{r7, lr}
 8015856:	af00      	add	r7, sp, #0
	if(TIM10->SR & TIM_SR_UIF){
 8015858:	4b0f      	ldr	r3, [pc, #60]	; (8015898 <TIM1_UP_TIM10_IRQHandler+0x44>)
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	f003 0301 	and.w	r3, r3, #1
 8015860:	2b00      	cmp	r3, #0
 8015862:	d017      	beq.n	8015894 <TIM1_UP_TIM10_IRQHandler+0x40>
		TIM10->SR &= ~TIM_SR_UIF;
 8015864:	4b0c      	ldr	r3, [pc, #48]	; (8015898 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8015866:	691b      	ldr	r3, [r3, #16]
 8015868:	4a0b      	ldr	r2, [pc, #44]	; (8015898 <TIM1_UP_TIM10_IRQHandler+0x44>)
 801586a:	f023 0301 	bic.w	r3, r3, #1
 801586e:	6113      	str	r3, [r2, #16]

		/* #### Every 20 ms ### */
		F_QEI_Read();			// Update localization data
 8015870:	f7fd fc0e 	bl	8013090 <F_QEI_Read>
		F_AUTO_SpeedRegulator();// Call proportional regulator
 8015874:	f7fd fe08 	bl	8013488 <F_AUTO_SpeedRegulator>

		/* #### Every 40 ms ### */
		if(g_timer_10_cnt>1){
 8015878:	4b08      	ldr	r3, [pc, #32]	; (801589c <TIM1_UP_TIM10_IRQHandler+0x48>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2b01      	cmp	r3, #1
 801587e:	dd04      	ble.n	801588a <TIM1_UP_TIM10_IRQHandler+0x36>
//		F_AUTO_AngularPositionRegulator();// Angular regulation
		F_AUTO_PositionRegulator();// Position regulation
 8015880:	f7fd ff86 	bl	8013790 <F_AUTO_PositionRegulator>
		g_timer_10_cnt=0;
 8015884:	4b05      	ldr	r3, [pc, #20]	; (801589c <TIM1_UP_TIM10_IRQHandler+0x48>)
 8015886:	2200      	movs	r2, #0
 8015888:	601a      	str	r2, [r3, #0]
		}
		g_timer_10_cnt++;
 801588a:	4b04      	ldr	r3, [pc, #16]	; (801589c <TIM1_UP_TIM10_IRQHandler+0x48>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	3301      	adds	r3, #1
 8015890:	4a02      	ldr	r2, [pc, #8]	; (801589c <TIM1_UP_TIM10_IRQHandler+0x48>)
 8015892:	6013      	str	r3, [r2, #0]

	}
}
 8015894:	bf00      	nop
 8015896:	bd80      	pop	{r7, pc}
 8015898:	40014400 	.word	0x40014400
 801589c:	200003d8 	.word	0x200003d8

080158a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read(int file, char *ptr, int len)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b086      	sub	sp, #24
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80158ac:	2300      	movs	r3, #0
 80158ae:	617b      	str	r3, [r7, #20]
 80158b0:	e00a      	b.n	80158c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80158b2:	f000 fda1 	bl	80163f8 <__io_getchar>
 80158b6:	4601      	mov	r1, r0
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	1c5a      	adds	r2, r3, #1
 80158bc:	60ba      	str	r2, [r7, #8]
 80158be:	b2ca      	uxtb	r2, r1
 80158c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	3301      	adds	r3, #1
 80158c6:	617b      	str	r3, [r7, #20]
 80158c8:	697a      	ldr	r2, [r7, #20]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	429a      	cmp	r2, r3
 80158ce:	dbf0      	blt.n	80158b2 <_read+0x12>
	}


return len;
 80158d0:	687b      	ldr	r3, [r7, #4]
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3718      	adds	r7, #24
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}

080158da <_write>:

int _write(int file, char *ptr, int len)
{
 80158da:	b580      	push	{r7, lr}
 80158dc:	b084      	sub	sp, #16
 80158de:	af00      	add	r7, sp, #0
 80158e0:	60f8      	str	r0, [r7, #12]
 80158e2:	60b9      	str	r1, [r7, #8]
 80158e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

#if PRINTF_USB_UART == 1
	CDC_Transmit_FS((uint8_t *)ptr, (uint16_t)len);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	4619      	mov	r1, r3
 80158ec:	68b8      	ldr	r0, [r7, #8]
 80158ee:	f000 fe23 	bl	8016538 <CDC_Transmit_FS>
			__io_putchar(*ptr++);
		}
#endif


	return len;
 80158f2:	687b      	ldr	r3, [r7, #4]
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3710      	adds	r7, #16
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <_close>:

int _close(int file)
{
 80158fc:	b480      	push	{r7}
 80158fe:	b083      	sub	sp, #12
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
	return -1;
 8015904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015908:	4618      	mov	r0, r3
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015914:	b480      	push	{r7}
 8015916:	b083      	sub	sp, #12
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015924:	605a      	str	r2, [r3, #4]
	return 0;
 8015926:	2300      	movs	r3, #0
}
 8015928:	4618      	mov	r0, r3
 801592a:	370c      	adds	r7, #12
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr

08015934 <_isatty>:

int _isatty(int file)
{
 8015934:	b480      	push	{r7}
 8015936:	b083      	sub	sp, #12
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
	return 1;
 801593c:	2301      	movs	r3, #1
}
 801593e:	4618      	mov	r0, r3
 8015940:	370c      	adds	r7, #12
 8015942:	46bd      	mov	sp, r7
 8015944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015948:	4770      	bx	lr

0801594a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801594a:	b480      	push	{r7}
 801594c:	b085      	sub	sp, #20
 801594e:	af00      	add	r7, sp, #0
 8015950:	60f8      	str	r0, [r7, #12]
 8015952:	60b9      	str	r1, [r7, #8]
 8015954:	607a      	str	r2, [r7, #4]
	return 0;
 8015956:	2300      	movs	r3, #0
}
 8015958:	4618      	mov	r0, r3
 801595a:	3714      	adds	r7, #20
 801595c:	46bd      	mov	sp, r7
 801595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015962:	4770      	bx	lr

08015964 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8015964:	b480      	push	{r7}
 8015966:	b085      	sub	sp, #20
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801596c:	4b11      	ldr	r3, [pc, #68]	; (80159b4 <_sbrk+0x50>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d102      	bne.n	801597a <_sbrk+0x16>
		heap_end = &end;
 8015974:	4b0f      	ldr	r3, [pc, #60]	; (80159b4 <_sbrk+0x50>)
 8015976:	4a10      	ldr	r2, [pc, #64]	; (80159b8 <_sbrk+0x54>)
 8015978:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801597a:	4b0e      	ldr	r3, [pc, #56]	; (80159b4 <_sbrk+0x50>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8015980:	4b0c      	ldr	r3, [pc, #48]	; (80159b4 <_sbrk+0x50>)
 8015982:	681a      	ldr	r2, [r3, #0]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	4413      	add	r3, r2
 8015988:	466a      	mov	r2, sp
 801598a:	4293      	cmp	r3, r2
 801598c:	d905      	bls.n	801599a <_sbrk+0x36>
	{
		errno = ENOMEM;
 801598e:	4b0b      	ldr	r3, [pc, #44]	; (80159bc <_sbrk+0x58>)
 8015990:	220c      	movs	r2, #12
 8015992:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8015994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015998:	e006      	b.n	80159a8 <_sbrk+0x44>
	}

	heap_end += incr;
 801599a:	4b06      	ldr	r3, [pc, #24]	; (80159b4 <_sbrk+0x50>)
 801599c:	681a      	ldr	r2, [r3, #0]
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	4413      	add	r3, r2
 80159a2:	4a04      	ldr	r2, [pc, #16]	; (80159b4 <_sbrk+0x50>)
 80159a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80159a6:	68fb      	ldr	r3, [r7, #12]
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3714      	adds	r7, #20
 80159ac:	46bd      	mov	sp, r7
 80159ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b2:	4770      	bx	lr
 80159b4:	200003ec 	.word	0x200003ec
 80159b8:	20009170 	.word	0x20009170
 80159bc:	20009168 	.word	0x20009168

080159c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80159c0:	b480      	push	{r7}
 80159c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80159c4:	4b16      	ldr	r3, [pc, #88]	; (8015a20 <SystemInit+0x60>)
 80159c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159ca:	4a15      	ldr	r2, [pc, #84]	; (8015a20 <SystemInit+0x60>)
 80159cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80159d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80159d4:	4b13      	ldr	r3, [pc, #76]	; (8015a24 <SystemInit+0x64>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	4a12      	ldr	r2, [pc, #72]	; (8015a24 <SystemInit+0x64>)
 80159da:	f043 0301 	orr.w	r3, r3, #1
 80159de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80159e0:	4b10      	ldr	r3, [pc, #64]	; (8015a24 <SystemInit+0x64>)
 80159e2:	2200      	movs	r2, #0
 80159e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80159e6:	4b0f      	ldr	r3, [pc, #60]	; (8015a24 <SystemInit+0x64>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a0e      	ldr	r2, [pc, #56]	; (8015a24 <SystemInit+0x64>)
 80159ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80159f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80159f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80159f6:	4b0b      	ldr	r3, [pc, #44]	; (8015a24 <SystemInit+0x64>)
 80159f8:	4a0b      	ldr	r2, [pc, #44]	; (8015a28 <SystemInit+0x68>)
 80159fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80159fc:	4b09      	ldr	r3, [pc, #36]	; (8015a24 <SystemInit+0x64>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	4a08      	ldr	r2, [pc, #32]	; (8015a24 <SystemInit+0x64>)
 8015a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015a06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8015a08:	4b06      	ldr	r3, [pc, #24]	; (8015a24 <SystemInit+0x64>)
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8015a0e:	4b04      	ldr	r3, [pc, #16]	; (8015a20 <SystemInit+0x60>)
 8015a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015a14:	609a      	str	r2, [r3, #8]
#endif
}
 8015a16:	bf00      	nop
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr
 8015a20:	e000ed00 	.word	0xe000ed00
 8015a24:	40023800 	.word	0x40023800
 8015a28:	24003010 	.word	0x24003010

08015a2c <tcp_server_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b082      	sub	sp, #8
 8015a30:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8015a32:	f7f4 fe83 	bl	800a73c <tcp_new>
 8015a36:	4602      	mov	r2, r0
 8015a38:	4b16      	ldr	r3, [pc, #88]	; (8015a94 <tcp_server_init+0x68>)
 8015a3a:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 8015a3c:	4b15      	ldr	r3, [pc, #84]	; (8015a94 <tcp_server_init+0x68>)
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d022      	beq.n	8015a8a <tcp_server_init+0x5e>
  {
    err_t err;

    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8015a44:	4b13      	ldr	r3, [pc, #76]	; (8015a94 <tcp_server_init+0x68>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2207      	movs	r2, #7
 8015a4a:	4913      	ldr	r1, [pc, #76]	; (8015a98 <tcp_server_init+0x6c>)
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7f3 fef9 	bl	8009844 <tcp_bind>
 8015a52:	4603      	mov	r3, r0
 8015a54:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 8015a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d10f      	bne.n	8015a7e <tcp_server_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8015a5e:	4b0d      	ldr	r3, [pc, #52]	; (8015a94 <tcp_server_init+0x68>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	21ff      	movs	r1, #255	; 0xff
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7f3 ff8f 	bl	8009988 <tcp_listen_with_backlog>
 8015a6a:	4602      	mov	r2, r0
 8015a6c:	4b09      	ldr	r3, [pc, #36]	; (8015a94 <tcp_server_init+0x68>)
 8015a6e:	601a      	str	r2, [r3, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_server_accept);
 8015a70:	4b08      	ldr	r3, [pc, #32]	; (8015a94 <tcp_server_init+0x68>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	4909      	ldr	r1, [pc, #36]	; (8015a9c <tcp_server_init+0x70>)
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7f4 fede 	bl	800a838 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8015a7c:	e005      	b.n	8015a8a <tcp_server_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8015a7e:	4b05      	ldr	r3, [pc, #20]	; (8015a94 <tcp_server_init+0x68>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	4619      	mov	r1, r3
 8015a84:	2001      	movs	r0, #1
 8015a86:	f7f2 fc9d 	bl	80083c4 <memp_free>
}
 8015a8a:	bf00      	nop
 8015a8c:	3708      	adds	r7, #8
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}
 8015a92:	bf00      	nop
 8015a94:	20007780 	.word	0x20007780
 8015a98:	0801b340 	.word	0x0801b340
 8015a9c:	08015aa1 	.word	0x08015aa1

08015aa0 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b086      	sub	sp, #24
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	4613      	mov	r3, r2
 8015aac:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8015aae:	2101      	movs	r1, #1
 8015ab0:	68b8      	ldr	r0, [r7, #8]
 8015ab2:	f7f4 fcb8 	bl	800a426 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8015ab6:	200c      	movs	r0, #12
 8015ab8:	f7f2 fada 	bl	8008070 <mem_malloc>
 8015abc:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d01c      	beq.n	8015afe <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	2201      	movs	r2, #1
 8015ac8:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	68ba      	ldr	r2, [r7, #8]
 8015ace:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8015ad6:	6939      	ldr	r1, [r7, #16]
 8015ad8:	68b8      	ldr	r0, [r7, #8]
 8015ada:	f7f4 fe37 	bl	800a74c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8015ade:	490e      	ldr	r1, [pc, #56]	; (8015b18 <tcp_server_accept+0x78>)
 8015ae0:	68b8      	ldr	r0, [r7, #8]
 8015ae2:	f7f4 fe45 	bl	800a770 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8015ae6:	490d      	ldr	r1, [pc, #52]	; (8015b1c <tcp_server_accept+0x7c>)
 8015ae8:	68b8      	ldr	r0, [r7, #8]
 8015aea:	f7f4 fe83 	bl	800a7f4 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 8015aee:	2201      	movs	r2, #1
 8015af0:	490b      	ldr	r1, [pc, #44]	; (8015b20 <tcp_server_accept+0x80>)
 8015af2:	68b8      	ldr	r0, [r7, #8]
 8015af4:	f7f4 feb8 	bl	800a868 <tcp_poll>

    ret_err = ERR_OK;
 8015af8:	2300      	movs	r3, #0
 8015afa:	75fb      	strb	r3, [r7, #23]
 8015afc:	e005      	b.n	8015b0a <tcp_server_accept+0x6a>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8015afe:	6939      	ldr	r1, [r7, #16]
 8015b00:	68b8      	ldr	r0, [r7, #8]
 8015b02:	f000 f98d 	bl	8015e20 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8015b06:	23ff      	movs	r3, #255	; 0xff
 8015b08:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8015b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3718      	adds	r7, #24
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	08015b25 	.word	0x08015b25
 8015b1c:	08015cd1 	.word	0x08015cd1
 8015b20:	08015cf5 	.word	0x08015cf5

08015b24 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b096      	sub	sp, #88	; 0x58
 8015b28:	af02      	add	r7, sp, #8
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	60b9      	str	r1, [r7, #8]
 8015b2e:	607a      	str	r2, [r7, #4]
 8015b30:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;
  uint8_t array[NB_OCTETS_CMD] = {0};
 8015b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015b36:	2200      	movs	r2, #0
 8015b38:	601a      	str	r2, [r3, #0]
 8015b3a:	605a      	str	r2, [r3, #4]
 8015b3c:	609a      	str	r2, [r3, #8]
 8015b3e:	f8c3 200b 	str.w	r2, [r3, #11]
  struct tcp_answer s_cmd_answer;
  struct tcp_command s_cmd_received;


  LWIP_ASSERT("arg != NULL",arg != NULL);
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d105      	bne.n	8015b54 <tcp_server_recv+0x30>
 8015b48:	4b5d      	ldr	r3, [pc, #372]	; (8015cc0 <tcp_server_recv+0x19c>)
 8015b4a:	22b6      	movs	r2, #182	; 0xb6
 8015b4c:	495d      	ldr	r1, [pc, #372]	; (8015cc4 <tcp_server_recv+0x1a0>)
 8015b4e:	485e      	ldr	r0, [pc, #376]	; (8015cc8 <tcp_server_recv+0x1a4>)
 8015b50:	f001 fa5c 	bl	801700c <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d117      	bne.n	8015b8e <tcp_server_recv+0x6a>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8015b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b60:	2203      	movs	r2, #3
 8015b62:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8015b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b66:	689b      	ldr	r3, [r3, #8]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d104      	bne.n	8015b76 <tcp_server_recv+0x52>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8015b6c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015b6e:	68b8      	ldr	r0, [r7, #8]
 8015b70:	f000 f956 	bl	8015e20 <tcp_server_connection_close>
 8015b74:	e007      	b.n	8015b86 <tcp_server_recv+0x62>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8015b76:	4955      	ldr	r1, [pc, #340]	; (8015ccc <tcp_server_recv+0x1a8>)
 8015b78:	68b8      	ldr	r0, [r7, #8]
 8015b7a:	f7f4 fe1b 	bl	800a7b4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8015b7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015b80:	68b8      	ldr	r0, [r7, #8]
 8015b82:	f000 f8ff 	bl	8015d84 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8015b86:	2300      	movs	r3, #0
 8015b88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015b8c:	e092      	b.n	8015cb4 <tcp_server_recv+0x190>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8015b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d00c      	beq.n	8015bb0 <tcp_server_recv+0x8c>
  {
    /* free received pbuf*/
    if (p != NULL)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d005      	beq.n	8015ba8 <tcp_server_recv+0x84>
    {
      es->p = NULL;
 8015b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8015ba2:	6878      	ldr	r0, [r7, #4]
 8015ba4:	f7f3 f940 	bl	8008e28 <pbuf_free>
    }
    ret_err = err;
 8015ba8:	78fb      	ldrb	r3, [r7, #3]
 8015baa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015bae:	e081      	b.n	8015cb4 <tcp_server_recv+0x190>
  }
  else if(es->state == ES_ACCEPTED)
 8015bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bb2:	781b      	ldrb	r3, [r3, #0]
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d132      	bne.n	8015c1e <tcp_server_recv+0xfa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8015bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bba:	2202      	movs	r2, #2
 8015bbc:	701a      	strb	r2, [r3, #0]

    // Get the command from the data received over TCP
    F_TCP_paquetTocmd(p, &s_cmd_received);
 8015bbe:	f107 0314 	add.w	r3, r7, #20
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7fc fe1b 	bl	8012800 <F_TCP_paquetTocmd>
    // Process the command received

    // Send back the answer of the command received


    F_Process_Command(s_cmd_received,&s_cmd_answer);
 8015bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bce:	9300      	str	r3, [sp, #0]
 8015bd0:	f107 0314 	add.w	r3, r7, #20
 8015bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015bd6:	f7fc fef7 	bl	80129c8 <F_Process_Command>


    F_TCP_answerTotab(array, s_cmd_answer);
 8015bda:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8015bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015be8:	f7fc fe8c 	bl	8012904 <F_TCP_answerTotab>

    p->payload = array;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015bf2:	605a      	str	r2, [r3, #4]
    p->len = NB_OCTETS_CMD;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	220f      	movs	r2, #15
 8015bf8:	815a      	strh	r2, [r3, #10]
    p->tot_len = NB_OCTETS_CMD;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	220f      	movs	r2, #15
 8015bfe:	811a      	strh	r2, [r3, #8]

    /* store reference to incoming pbuf (chain) */
        es->p = p;
 8015c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	609a      	str	r2, [r3, #8]
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8015c06:	4931      	ldr	r1, [pc, #196]	; (8015ccc <tcp_server_recv+0x1a8>)
 8015c08:	68b8      	ldr	r0, [r7, #8]
 8015c0a:	f7f4 fdd3 	bl	800a7b4 <tcp_sent>

    /* send back the received data (echo) */
    tcp_server_send(tpcb, es);
 8015c0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015c10:	68b8      	ldr	r0, [r7, #8]
 8015c12:	f000 f8b7 	bl	8015d84 <tcp_server_send>

    ret_err = ERR_OK;
 8015c16:	2300      	movs	r3, #0
 8015c18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015c1c:	e04a      	b.n	8015cb4 <tcp_server_recv+0x190>

  }
  else if (es->state == ES_RECEIVED)
 8015c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	2b02      	cmp	r3, #2
 8015c24:	d137      	bne.n	8015c96 <tcp_server_recv+0x172>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8015c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c28:	689b      	ldr	r3, [r3, #8]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d128      	bne.n	8015c80 <tcp_server_recv+0x15c>
    {

    	// Get the command from the data received over TCP
		F_TCP_paquetTocmd(p, &s_cmd_received);
 8015c2e:	f107 0314 	add.w	r3, r7, #20
 8015c32:	4619      	mov	r1, r3
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f7fc fde3 	bl	8012800 <F_TCP_paquetTocmd>
		// Process the command received

		// Send back the answer of the command received


		F_Process_Command(s_cmd_received,&s_cmd_answer);
 8015c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	f107 0314 	add.w	r3, r7, #20
 8015c44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015c46:	f7fc febf 	bl	80129c8 <F_Process_Command>


		F_TCP_answerTotab(array, s_cmd_answer);
 8015c4a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8015c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c50:	9300      	str	r3, [sp, #0]
 8015c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015c58:	f7fc fe54 	bl	8012904 <F_TCP_answerTotab>

		p->payload = array;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015c62:	605a      	str	r2, [r3, #4]
		p->len = NB_OCTETS_CMD;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	220f      	movs	r2, #15
 8015c68:	815a      	strh	r2, [r3, #10]
		p->tot_len = NB_OCTETS_CMD;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	220f      	movs	r2, #15
 8015c6e:	811a      	strh	r2, [r3, #8]

		es->p = p;
 8015c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 8015c76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015c78:	68b8      	ldr	r0, [r7, #8]
 8015c7a:	f000 f883 	bl	8015d84 <tcp_server_send>
 8015c7e:	e006      	b.n	8015c8e <tcp_server_recv+0x16a>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8015c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c82:	689b      	ldr	r3, [r3, #8]
 8015c84:	647b      	str	r3, [r7, #68]	; 0x44
      pbuf_chain(ptr,p);
 8015c86:	6879      	ldr	r1, [r7, #4]
 8015c88:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015c8a:	f7f3 f9f1 	bl	8009070 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8015c94:	e00e      	b.n	8015cb4 <tcp_server_recv+0x190>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	891b      	ldrh	r3, [r3, #8]
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	68b8      	ldr	r0, [r7, #8]
 8015c9e:	f7f3 ff6b 	bl	8009b78 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 8015ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7f3 f8bd 	bl	8008e28 <pbuf_free>
    ret_err = ERR_OK;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  return ret_err;
 8015cb4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3750      	adds	r7, #80	; 0x50
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	0801b178 	.word	0x0801b178
 8015cc4:	0801b18c 	.word	0x0801b18c
 8015cc8:	0801b198 	.word	0x0801b198
 8015ccc:	08015d47 	.word	0x08015d47

08015cd0 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b084      	sub	sp, #16
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	460b      	mov	r3, r1
 8015cda:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d002      	beq.n	8015cec <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8015ce6:	68f8      	ldr	r0, [r7, #12]
 8015ce8:	f7f2 f884 	bl	8007df4 <mem_free>
  }
}
 8015cec:	bf00      	nop
 8015cee:	3710      	adds	r7, #16
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}

08015cf4 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b084      	sub	sp, #16
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8015d02:	68bb      	ldr	r3, [r7, #8]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d013      	beq.n	8015d30 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	689b      	ldr	r3, [r3, #8]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d004      	beq.n	8015d1a <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8015d10:	68b9      	ldr	r1, [r7, #8]
 8015d12:	6838      	ldr	r0, [r7, #0]
 8015d14:	f000 f836 	bl	8015d84 <tcp_server_send>
 8015d18:	e007      	b.n	8015d2a <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	2b03      	cmp	r3, #3
 8015d20:	d103      	bne.n	8015d2a <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8015d22:	68b9      	ldr	r1, [r7, #8]
 8015d24:	6838      	ldr	r0, [r7, #0]
 8015d26:	f000 f87b 	bl	8015e20 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	73fb      	strb	r3, [r7, #15]
 8015d2e:	e004      	b.n	8015d3a <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8015d30:	6838      	ldr	r0, [r7, #0]
 8015d32:	f7f3 fd7b 	bl	800982c <tcp_abort>
    ret_err = ERR_ABRT;
 8015d36:	23f3      	movs	r3, #243	; 0xf3
 8015d38:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8015d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3710      	adds	r7, #16
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b086      	sub	sp, #24
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	60f8      	str	r0, [r7, #12]
 8015d4e:	60b9      	str	r1, [r7, #8]
 8015d50:	4613      	mov	r3, r2
 8015d52:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	689b      	ldr	r3, [r3, #8]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d004      	beq.n	8015d6a <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 8015d60:	6979      	ldr	r1, [r7, #20]
 8015d62:	68b8      	ldr	r0, [r7, #8]
 8015d64:	f000 f80e 	bl	8015d84 <tcp_server_send>
 8015d68:	e007      	b.n	8015d7a <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	2b03      	cmp	r3, #3
 8015d70:	d103      	bne.n	8015d7a <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 8015d72:	6979      	ldr	r1, [r7, #20]
 8015d74:	68b8      	ldr	r0, [r7, #8]
 8015d76:	f000 f853 	bl	8015e20 <tcp_server_connection_close>
  }
  return ERR_OK;
 8015d7a:	2300      	movs	r3, #0
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3718      	adds	r7, #24
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b086      	sub	sp, #24
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	75fb      	strb	r3, [r7, #23]


  while ((wr_err == ERR_OK) &&
 8015d92:	e031      	b.n	8015df8 <tcp_server_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	6859      	ldr	r1, [r3, #4]
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	895a      	ldrh	r2, [r3, #10]
 8015da2:	2301      	movs	r3, #1
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f7f7 fb13 	bl	800d3d0 <tcp_write>
 8015daa:	4603      	mov	r3, r0
 8015dac:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8015dae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d118      	bne.n	8015de8 <tcp_server_send+0x64>
    {
      u16_t plen;

      plen = ptr->len;
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	895b      	ldrh	r3, [r3, #10]
 8015dba:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	683b      	ldr	r3, [r7, #0]
 8015dc2:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	689b      	ldr	r3, [r3, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d004      	beq.n	8015dd6 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	689b      	ldr	r3, [r3, #8]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f3 f8d5 	bl	8008f80 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8015dd6:	6938      	ldr	r0, [r7, #16]
 8015dd8:	f7f3 f826 	bl	8008e28 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8015ddc:	89fb      	ldrh	r3, [r7, #14]
 8015dde:	4619      	mov	r1, r3
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f7f3 fec9 	bl	8009b78 <tcp_recved>
 8015de6:	e007      	b.n	8015df8 <tcp_server_send+0x74>
   }
   else if(wr_err == ERR_MEM)
 8015de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015df0:	d102      	bne.n	8015df8 <tcp_server_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	693a      	ldr	r2, [r7, #16]
 8015df6:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8015df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10b      	bne.n	8015e18 <tcp_server_send+0x94>
         (es->p != NULL) &&
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d007      	beq.n	8015e18 <tcp_server_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	689b      	ldr	r3, [r3, #8]
 8015e0c:	895a      	ldrh	r2, [r3, #10]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d9bd      	bls.n	8015d94 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8015e18:	bf00      	nop
 8015e1a:	3718      	adds	r7, #24
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8015e2a:	2100      	movs	r1, #0
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f7f4 fc8d 	bl	800a74c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8015e32:	2100      	movs	r1, #0
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f7f4 fcbd 	bl	800a7b4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8015e3a:	2100      	movs	r1, #0
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7f4 fc97 	bl	800a770 <tcp_recv>
  tcp_err(tpcb, NULL);
 8015e42:	2100      	movs	r1, #0
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	f7f4 fcd5 	bl	800a7f4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7f4 fd0a 	bl	800a868 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d002      	beq.n	8015e60 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8015e5a:	6838      	ldr	r0, [r7, #0]
 8015e5c:	f7f1 ffca 	bl	8007df4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f7f3 fc19 	bl	8009698 <tcp_close>
}
 8015e66:	bf00      	nop
 8015e68:	3708      	adds	r7, #8
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}
	...

08015e70 <__NVIC_EnableIRQ>:
{
 8015e70:	b480      	push	{r7}
 8015e72:	b083      	sub	sp, #12
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	4603      	mov	r3, r0
 8015e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	db0b      	blt.n	8015e9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015e82:	79fb      	ldrb	r3, [r7, #7]
 8015e84:	f003 021f 	and.w	r2, r3, #31
 8015e88:	4907      	ldr	r1, [pc, #28]	; (8015ea8 <__NVIC_EnableIRQ+0x38>)
 8015e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e8e:	095b      	lsrs	r3, r3, #5
 8015e90:	2001      	movs	r0, #1
 8015e92:	fa00 f202 	lsl.w	r2, r0, r2
 8015e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015e9a:	bf00      	nop
 8015e9c:	370c      	adds	r7, #12
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	e000e100 	.word	0xe000e100

08015eac <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b086      	sub	sp, #24
 8015eb0:	af00      	add	r7, sp, #0

		/**TIM2 GPIO Configuration
		PA15     ------> TIM2_CH1
		PB3     ------> TIM2_CH2
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_15;
 8015eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015eb6:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015eb8:	2302      	movs	r3, #2
 8015eba:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ec8:	1d3b      	adds	r3, r7, #4
 8015eca:	4619      	mov	r1, r3
 8015ecc:	4821      	ldr	r0, [pc, #132]	; (8015f54 <MX_TIM2_Init+0xa8>)
 8015ece:	f7ec fadf 	bl	8002490 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8015ed2:	2308      	movs	r3, #8
 8015ed4:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ed6:	2302      	movs	r3, #2
 8015ed8:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015eda:	2301      	movs	r3, #1
 8015edc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015ee6:	1d3b      	adds	r3, r7, #4
 8015ee8:	4619      	mov	r1, r3
 8015eea:	481b      	ldr	r0, [pc, #108]	; (8015f58 <MX_TIM2_Init+0xac>)
 8015eec:	f7ec fad0 	bl	8002490 <HAL_GPIO_Init>

		// Timer peripheral clock enable
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	// Enable clock on Timer 2
 8015ef0:	4b1a      	ldr	r3, [pc, #104]	; (8015f5c <MX_TIM2_Init+0xb0>)
 8015ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ef4:	4a19      	ldr	r2, [pc, #100]	; (8015f5c <MX_TIM2_Init+0xb0>)
 8015ef6:	f043 0301 	orr.w	r3, r3, #1
 8015efa:	6413      	str	r3, [r2, #64]	; 0x40
		// set them up as encoder inputs
		TIM2->CCMR1 |=   TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8015efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f00:	699b      	ldr	r3, [r3, #24]
 8015f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f0a:	f043 0301 	orr.w	r3, r3, #1
 8015f0e:	6193      	str	r3, [r2, #24]
		// set both inputs to rising polarity to let it use both edges
		TIM2->SMCR = 3 ;
 8015f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f14:	2203      	movs	r2, #3
 8015f16:	609a      	str	r2, [r3, #8]
		// Auto Reload Value Enable
		TIM2->CR1 |= TIM_CR1_ARPE;
 8015f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f26:	6013      	str	r3, [r2, #0]
		// Set Auto reload value
		TIM2->ARR = 0xFFFF;
 8015f28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f30:	62da      	str	r2, [r3, #44]	; 0x2c
		// Configure in rising edge
		TIM2->CCER = 0; // Enable channel 1 and 2 timer 2
 8015f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f36:	2200      	movs	r2, #0
 8015f38:	621a      	str	r2, [r3, #32]
		// Turn on the timer/counters
		TIM2->CR1 |= TIM_CR1_CEN;	// Enable Timer 2
 8015f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015f44:	f043 0301 	orr.w	r3, r3, #1
 8015f48:	6013      	str	r3, [r2, #0]

}
 8015f4a:	bf00      	nop
 8015f4c:	3718      	adds	r7, #24
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	40020000 	.word	0x40020000
 8015f58:	40020400 	.word	0x40020400
 8015f5c:	40023800 	.word	0x40023800

08015f60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b086      	sub	sp, #24
 8015f64:	af00      	add	r7, sp, #0

		/**TIM3 GPIO Configuration
		PB4     ------> TIM3_CH1
		PB5     ------> TIM3_CH2
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8015f66:	2330      	movs	r3, #48	; 0x30
 8015f68:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f6a:	2302      	movs	r3, #2
 8015f6c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015f6e:	2301      	movs	r3, #1
 8015f70:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015f72:	2300      	movs	r3, #0
 8015f74:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8015f76:	2302      	movs	r3, #2
 8015f78:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015f7a:	1d3b      	adds	r3, r7, #4
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	4815      	ldr	r0, [pc, #84]	; (8015fd4 <MX_TIM3_Init+0x74>)
 8015f80:	f7ec fa86 	bl	8002490 <HAL_GPIO_Init>

		// Timer peripheral clock enable
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;	// Enable clock on Timer 3
 8015f84:	4b14      	ldr	r3, [pc, #80]	; (8015fd8 <MX_TIM3_Init+0x78>)
 8015f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f88:	4a13      	ldr	r2, [pc, #76]	; (8015fd8 <MX_TIM3_Init+0x78>)
 8015f8a:	f043 0302 	orr.w	r3, r3, #2
 8015f8e:	6413      	str	r3, [r2, #64]	; 0x40
		// set them up as encoder inputs
		TIM3->CCMR1 |=   TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8015f90:	4b12      	ldr	r3, [pc, #72]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015f92:	699b      	ldr	r3, [r3, #24]
 8015f94:	4a11      	ldr	r2, [pc, #68]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f9a:	f043 0301 	orr.w	r3, r3, #1
 8015f9e:	6193      	str	r3, [r2, #24]
		// set both inputs to rising polarity to let it use both edges
		TIM3->SMCR = 3 ;
 8015fa0:	4b0e      	ldr	r3, [pc, #56]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fa2:	2203      	movs	r2, #3
 8015fa4:	609a      	str	r2, [r3, #8]
		// Auto Reload Value Enable
		TIM3->CR1 |= TIM_CR1_ARPE;
 8015fa6:	4b0d      	ldr	r3, [pc, #52]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	4a0c      	ldr	r2, [pc, #48]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fb0:	6013      	str	r3, [r2, #0]
		// Set Auto reload value
		TIM3->ARR = 0xFFFF;
 8015fb2:	4b0a      	ldr	r3, [pc, #40]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fb8:	62da      	str	r2, [r3, #44]	; 0x2c
		// Configure in rising edge
		TIM3->CCER = 0; // Enable channel 1 and 2 timer 3
 8015fba:	4b08      	ldr	r3, [pc, #32]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	621a      	str	r2, [r3, #32]
		// Turn on the timer/counters
		TIM3->CR1 |= TIM_CR1_CEN;	// Enable Timer 3
 8015fc0:	4b06      	ldr	r3, [pc, #24]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4a05      	ldr	r2, [pc, #20]	; (8015fdc <MX_TIM3_Init+0x7c>)
 8015fc6:	f043 0301 	orr.w	r3, r3, #1
 8015fca:	6013      	str	r3, [r2, #0]

}
 8015fcc:	bf00      	nop
 8015fce:	3718      	adds	r7, #24
 8015fd0:	46bd      	mov	sp, r7
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	40020400 	.word	0x40020400
 8015fd8:	40023800 	.word	0x40023800
 8015fdc:	40000400 	.word	0x40000400

08015fe0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b086      	sub	sp, #24
 8015fe4:	af00      	add	r7, sp, #0

		/**TIM4 GPIO Configuration
		PD14     ------> TIM4_CH3
		PD15     ------> TIM4_CH4
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8015fe6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8015fea:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015fec:	2302      	movs	r3, #2
 8015fee:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ff0:	2300      	movs	r3, #0
 8015ff2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8015ff8:	2302      	movs	r3, #2
 8015ffa:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015ffc:	1d3b      	adds	r3, r7, #4
 8015ffe:	4619      	mov	r1, r3
 8016000:	4839      	ldr	r0, [pc, #228]	; (80160e8 <MX_TIM4_Init+0x108>)
 8016002:	f7ec fa45 	bl	8002490 <HAL_GPIO_Init>

		// Init Timer 4 CH4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;	// Enable clock on timer 4
 8016006:	4b39      	ldr	r3, [pc, #228]	; (80160ec <MX_TIM4_Init+0x10c>)
 8016008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801600a:	4a38      	ldr	r2, [pc, #224]	; (80160ec <MX_TIM4_Init+0x10c>)
 801600c:	f043 0304 	orr.w	r3, r3, #4
 8016010:	6413      	str	r3, [r2, #64]	; 0x40
		TIM4->PSC = 1;	// Prescaler
 8016012:	4b37      	ldr	r3, [pc, #220]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016014:	2201      	movs	r2, #1
 8016016:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->ARR = 2250-1;	// 20 KHz (PWM Frequency)
 8016018:	4b35      	ldr	r3, [pc, #212]	; (80160f0 <MX_TIM4_Init+0x110>)
 801601a:	f640 02c9 	movw	r2, #2249	; 0x8c9
 801601e:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;	// PWM mode 1 upcounting
 8016020:	4b33      	ldr	r3, [pc, #204]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016022:	69db      	ldr	r3, [r3, #28]
 8016024:	4a32      	ldr	r2, [pc, #200]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016026:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 801602a:	61d3      	str	r3, [r2, #28]
		TIM4->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 801602c:	4b30      	ldr	r3, [pc, #192]	; (80160f0 <MX_TIM4_Init+0x110>)
 801602e:	69db      	ldr	r3, [r3, #28]
 8016030:	4a2f      	ldr	r2, [pc, #188]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016036:	61d3      	str	r3, [r2, #28]

		TIM4->CCMR2 |= TIM_CCMR2_OC4PE;	// Preload Enable
 8016038:	4b2d      	ldr	r3, [pc, #180]	; (80160f0 <MX_TIM4_Init+0x110>)
 801603a:	69db      	ldr	r3, [r3, #28]
 801603c:	4a2c      	ldr	r2, [pc, #176]	; (80160f0 <MX_TIM4_Init+0x110>)
 801603e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016042:	61d3      	str	r3, [r2, #28]
		TIM4->CCMR2 &= ~TIM_CCMR2_CC4S;	// Output
 8016044:	4b2a      	ldr	r3, [pc, #168]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016046:	69db      	ldr	r3, [r3, #28]
 8016048:	4a29      	ldr	r2, [pc, #164]	; (80160f0 <MX_TIM4_Init+0x110>)
 801604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801604e:	61d3      	str	r3, [r2, #28]
		TIM4->CCER 	|= TIM_CCER_CC4E;	// Channel is ON
 8016050:	4b27      	ldr	r3, [pc, #156]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016052:	6a1b      	ldr	r3, [r3, #32]
 8016054:	4a26      	ldr	r2, [pc, #152]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016056:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801605a:	6213      	str	r3, [r2, #32]
		TIM4->CR1 	|= TIM_CR1_ARPE;	// Auto reload
 801605c:	4b24      	ldr	r3, [pc, #144]	; (80160f0 <MX_TIM4_Init+0x110>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	4a23      	ldr	r2, [pc, #140]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016066:	6013      	str	r3, [r2, #0]
		TIM4->EGR 	|= TIM_EGR_UG;		// Reinitialize the counter
 8016068:	4b21      	ldr	r3, [pc, #132]	; (80160f0 <MX_TIM4_Init+0x110>)
 801606a:	695b      	ldr	r3, [r3, #20]
 801606c:	4a20      	ldr	r2, [pc, #128]	; (80160f0 <MX_TIM4_Init+0x110>)
 801606e:	f043 0301 	orr.w	r3, r3, #1
 8016072:	6153      	str	r3, [r2, #20]
		TIM4->SR 	&= TIM_SR_UIF;		// Clear update interrupt flag
 8016074:	4b1e      	ldr	r3, [pc, #120]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016076:	691b      	ldr	r3, [r3, #16]
 8016078:	4a1d      	ldr	r2, [pc, #116]	; (80160f0 <MX_TIM4_Init+0x110>)
 801607a:	f003 0301 	and.w	r3, r3, #1
 801607e:	6113      	str	r3, [r2, #16]
		TIM4->BDTR 	|= TIM_BDTR_MOE;	// Main output Enable
 8016080:	4b1b      	ldr	r3, [pc, #108]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016084:	4a1a      	ldr	r2, [pc, #104]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801608a:	6453      	str	r3, [r2, #68]	; 0x44

		TIM4->CCR2 = 0; 	// Set duty cycle to 0%
 801608c:	4b18      	ldr	r3, [pc, #96]	; (80160f0 <MX_TIM4_Init+0x110>)
 801608e:	2200      	movs	r2, #0
 8016090:	639a      	str	r2, [r3, #56]	; 0x38

		// Init Timer 4 CH3
		TIM4->CCMR2 |= TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;	// PWM mode 1 upcounting
 8016092:	4b17      	ldr	r3, [pc, #92]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016094:	69db      	ldr	r3, [r3, #28]
 8016096:	4a16      	ldr	r2, [pc, #88]	; (80160f0 <MX_TIM4_Init+0x110>)
 8016098:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801609c:	61d3      	str	r3, [r2, #28]
		TIM4->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 801609e:	4b14      	ldr	r3, [pc, #80]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160a0:	69db      	ldr	r3, [r3, #28]
 80160a2:	4a13      	ldr	r2, [pc, #76]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160a4:	f023 0310 	bic.w	r3, r3, #16
 80160a8:	61d3      	str	r3, [r2, #28]

		TIM4->CCMR2 |= TIM_CCMR2_OC3PE;	// Preload Enable
 80160aa:	4b11      	ldr	r3, [pc, #68]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160ac:	69db      	ldr	r3, [r3, #28]
 80160ae:	4a10      	ldr	r2, [pc, #64]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160b0:	f043 0308 	orr.w	r3, r3, #8
 80160b4:	61d3      	str	r3, [r2, #28]
		TIM4->CCMR2 &= ~TIM_CCMR2_CC3S;	// Output
 80160b6:	4b0e      	ldr	r3, [pc, #56]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160b8:	69db      	ldr	r3, [r3, #28]
 80160ba:	4a0d      	ldr	r2, [pc, #52]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160bc:	f023 0303 	bic.w	r3, r3, #3
 80160c0:	61d3      	str	r3, [r2, #28]
		TIM4->CCER 	|= TIM_CCER_CC3E;	// Channel is ON
 80160c2:	4b0b      	ldr	r3, [pc, #44]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160c4:	6a1b      	ldr	r3, [r3, #32]
 80160c6:	4a0a      	ldr	r2, [pc, #40]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80160cc:	6213      	str	r3, [r2, #32]

		TIM4->CCR3 = 0; 	// Set duty cycle to 0%
 80160ce:	4b08      	ldr	r3, [pc, #32]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160d0:	2200      	movs	r2, #0
 80160d2:	63da      	str	r2, [r3, #60]	; 0x3c

		// Start Timer 4
		TIM4->CR1 |= TIM_CR1_CEN;
 80160d4:	4b06      	ldr	r3, [pc, #24]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	4a05      	ldr	r2, [pc, #20]	; (80160f0 <MX_TIM4_Init+0x110>)
 80160da:	f043 0301 	orr.w	r3, r3, #1
 80160de:	6013      	str	r3, [r2, #0]


}
 80160e0:	bf00      	nop
 80160e2:	3718      	adds	r7, #24
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	40020c00 	.word	0x40020c00
 80160ec:	40023800 	.word	0x40023800
 80160f0:	40000800 	.word	0x40000800

080160f4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 80160f8:	4b0e      	ldr	r3, [pc, #56]	; (8016134 <MX_TIM13_Init+0x40>)
 80160fa:	4a0f      	ldr	r2, [pc, #60]	; (8016138 <MX_TIM13_Init+0x44>)
 80160fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400;
 80160fe:	4b0d      	ldr	r3, [pc, #52]	; (8016134 <MX_TIM13_Init+0x40>)
 8016100:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8016104:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016106:	4b0b      	ldr	r3, [pc, #44]	; (8016134 <MX_TIM13_Init+0x40>)
 8016108:	2200      	movs	r2, #0
 801610a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 801610c:	4b09      	ldr	r3, [pc, #36]	; (8016134 <MX_TIM13_Init+0x40>)
 801610e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016112:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016114:	4b07      	ldr	r3, [pc, #28]	; (8016134 <MX_TIM13_Init+0x40>)
 8016116:	2200      	movs	r2, #0
 8016118:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801611a:	4b06      	ldr	r3, [pc, #24]	; (8016134 <MX_TIM13_Init+0x40>)
 801611c:	2280      	movs	r2, #128	; 0x80
 801611e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8016120:	4804      	ldr	r0, [pc, #16]	; (8016134 <MX_TIM13_Init+0x40>)
 8016122:	f7ee fad7 	bl	80046d4 <HAL_TIM_Base_Init>
 8016126:	4603      	mov	r3, r0
 8016128:	2b00      	cmp	r3, #0
 801612a:	d001      	beq.n	8016130 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 801612c:	f7ff face 	bl	80156cc <Error_Handler>
  }

}
 8016130:	bf00      	nop
 8016132:	bd80      	pop	{r7, pc}
 8016134:	20007804 	.word	0x20007804
 8016138:	40001c00 	.word	0x40001c00

0801613c <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM4_MspInit 1 */
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b084      	sub	sp, #16
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	4a0e      	ldr	r2, [pc, #56]	; (8016184 <HAL_TIM_Base_MspInit+0x48>)
 801614a:	4293      	cmp	r3, r2
 801614c:	d115      	bne.n	801617a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 801614e:	2300      	movs	r3, #0
 8016150:	60fb      	str	r3, [r7, #12]
 8016152:	4b0d      	ldr	r3, [pc, #52]	; (8016188 <HAL_TIM_Base_MspInit+0x4c>)
 8016154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016156:	4a0c      	ldr	r2, [pc, #48]	; (8016188 <HAL_TIM_Base_MspInit+0x4c>)
 8016158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801615c:	6413      	str	r3, [r2, #64]	; 0x40
 801615e:	4b0a      	ldr	r3, [pc, #40]	; (8016188 <HAL_TIM_Base_MspInit+0x4c>)
 8016160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016166:	60fb      	str	r3, [r7, #12]
 8016168:	68fb      	ldr	r3, [r7, #12]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 801616a:	2200      	movs	r2, #0
 801616c:	2105      	movs	r1, #5
 801616e:	202c      	movs	r0, #44	; 0x2c
 8016170:	f7eb f9c3 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8016174:	202c      	movs	r0, #44	; 0x2c
 8016176:	f7eb f9dc 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 801617a:	bf00      	nop
 801617c:	3710      	adds	r7, #16
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	40001c00 	.word	0x40001c00
 8016188:	40023800 	.word	0x40023800

0801618c <F_TIM4_CH3_SetDC>:
  }
} 

/* USER CODE BEGIN 1 */
// Fonction validée sur NUCLEO F429ZI le 18-09-2018
void F_TIM4_CH3_SetDC(int dc){
 801618c:	b590      	push	{r4, r7, lr}
 801618e:	b083      	sub	sp, #12
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
	TIM4->CCR3 = dc*22.5; 	// Set duty cycle to 0%
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7ea f9cd 	bl	8000534 <__aeabi_i2d>
 801619a:	f04f 0200 	mov.w	r2, #0
 801619e:	4b09      	ldr	r3, [pc, #36]	; (80161c4 <F_TIM4_CH3_SetDC+0x38>)
 80161a0:	f7ea fa32 	bl	8000608 <__aeabi_dmul>
 80161a4:	4603      	mov	r3, r0
 80161a6:	460c      	mov	r4, r1
 80161a8:	461a      	mov	r2, r3
 80161aa:	4623      	mov	r3, r4
 80161ac:	4c06      	ldr	r4, [pc, #24]	; (80161c8 <F_TIM4_CH3_SetDC+0x3c>)
 80161ae:	4610      	mov	r0, r2
 80161b0:	4619      	mov	r1, r3
 80161b2:	f7ea fc3b 	bl	8000a2c <__aeabi_d2uiz>
 80161b6:	4603      	mov	r3, r0
 80161b8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 80161ba:	bf00      	nop
 80161bc:	370c      	adds	r7, #12
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd90      	pop	{r4, r7, pc}
 80161c2:	bf00      	nop
 80161c4:	40368000 	.word	0x40368000
 80161c8:	40000800 	.word	0x40000800

080161cc <F_TIM4_CH4_SetDC>:
// Fonction validée sur NUCLEO F429ZI le 18-09-2018
void F_TIM4_CH4_SetDC(int dc){
 80161cc:	b590      	push	{r4, r7, lr}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
	TIM4->CCR4 = dc*22.5; 	// Set duty cycle to 0%
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7ea f9ad 	bl	8000534 <__aeabi_i2d>
 80161da:	f04f 0200 	mov.w	r2, #0
 80161de:	4b09      	ldr	r3, [pc, #36]	; (8016204 <F_TIM4_CH4_SetDC+0x38>)
 80161e0:	f7ea fa12 	bl	8000608 <__aeabi_dmul>
 80161e4:	4603      	mov	r3, r0
 80161e6:	460c      	mov	r4, r1
 80161e8:	461a      	mov	r2, r3
 80161ea:	4623      	mov	r3, r4
 80161ec:	4c06      	ldr	r4, [pc, #24]	; (8016208 <F_TIM4_CH4_SetDC+0x3c>)
 80161ee:	4610      	mov	r0, r2
 80161f0:	4619      	mov	r1, r3
 80161f2:	f7ea fc1b 	bl	8000a2c <__aeabi_d2uiz>
 80161f6:	4603      	mov	r3, r0
 80161f8:	6423      	str	r3, [r4, #64]	; 0x40
}
 80161fa:	bf00      	nop
 80161fc:	370c      	adds	r7, #12
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd90      	pop	{r4, r7, pc}
 8016202:	bf00      	nop
 8016204:	40368000 	.word	0x40368000
 8016208:	40000800 	.word	0x40000800

0801620c <Init_Timer9>:
 * Timer 9 : Interruption on overflow every 5 ms
 * The Timer 9 is clocked at 50 MHz
 *
 * Vérifié sur carte NUCLEO-F429ZI le 18-09-2018
 */
void Init_Timer9(){
 801620c:	b580      	push	{r7, lr}
 801620e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM9EN;
 8016210:	4b11      	ldr	r3, [pc, #68]	; (8016258 <Init_Timer9+0x4c>)
 8016212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016214:	4a10      	ldr	r2, [pc, #64]	; (8016258 <Init_Timer9+0x4c>)
 8016216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801621a:	6453      	str	r3, [r2, #68]	; 0x44

	TIM9->CR1 |= TIM_CR1_ARPE;
 801621c:	4b0f      	ldr	r3, [pc, #60]	; (801625c <Init_Timer9+0x50>)
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4a0e      	ldr	r2, [pc, #56]	; (801625c <Init_Timer9+0x50>)
 8016222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016226:	6013      	str	r3, [r2, #0]
	TIM9->PSC = 17995 - 1;	// Prescaler value =  2399+1 = 2400 ====> 24MHz /  2400 = 10 KHz
 8016228:	4b0c      	ldr	r3, [pc, #48]	; (801625c <Init_Timer9+0x50>)
 801622a:	f244 624a 	movw	r2, #17994	; 0x464a
 801622e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM9->ARR = 50-1;
 8016230:	4b0a      	ldr	r3, [pc, #40]	; (801625c <Init_Timer9+0x50>)
 8016232:	2231      	movs	r2, #49	; 0x31
 8016234:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM9->DIER |= TIM_DIER_UIE;	// Enable interrupt
 8016236:	4b09      	ldr	r3, [pc, #36]	; (801625c <Init_Timer9+0x50>)
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	4a08      	ldr	r2, [pc, #32]	; (801625c <Init_Timer9+0x50>)
 801623c:	f043 0301 	orr.w	r3, r3, #1
 8016240:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8016242:	2018      	movs	r0, #24
 8016244:	f7ff fe14 	bl	8015e70 <__NVIC_EnableIRQ>

	TIM9->CR1 |= TIM_CR1_CEN;
 8016248:	4b04      	ldr	r3, [pc, #16]	; (801625c <Init_Timer9+0x50>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	4a03      	ldr	r2, [pc, #12]	; (801625c <Init_Timer9+0x50>)
 801624e:	f043 0301 	orr.w	r3, r3, #1
 8016252:	6013      	str	r3, [r2, #0]
}
 8016254:	bf00      	nop
 8016256:	bd80      	pop	{r7, pc}
 8016258:	40023800 	.word	0x40023800
 801625c:	40014000 	.word	0x40014000

08016260 <Init_Timer10>:
 * The Timer 10 is clocked at 24 MHz
 *
 * Vérifié sur carte NUCLEO-F429ZI le 18-09-2018
 *
 */
void Init_Timer10(){
 8016260:	b580      	push	{r7, lr}
 8016262:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8016264:	4b11      	ldr	r3, [pc, #68]	; (80162ac <Init_Timer10+0x4c>)
 8016266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016268:	4a10      	ldr	r2, [pc, #64]	; (80162ac <Init_Timer10+0x4c>)
 801626a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801626e:	6453      	str	r3, [r2, #68]	; 0x44

	TIM10->CR1 |= TIM_CR1_ARPE;
 8016270:	4b0f      	ldr	r3, [pc, #60]	; (80162b0 <Init_Timer10+0x50>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	4a0e      	ldr	r2, [pc, #56]	; (80162b0 <Init_Timer10+0x50>)
 8016276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801627a:	6013      	str	r3, [r2, #0]
	TIM10->PSC = 17995-1;	// Prescaler value  24MHz / 4*2400 = 10 KHz / 4 = 50 Hz
 801627c:	4b0c      	ldr	r3, [pc, #48]	; (80162b0 <Init_Timer10+0x50>)
 801627e:	f244 624a 	movw	r2, #17994	; 0x464a
 8016282:	629a      	str	r2, [r3, #40]	; 0x28
	TIM10->ARR = 200-1;
 8016284:	4b0a      	ldr	r3, [pc, #40]	; (80162b0 <Init_Timer10+0x50>)
 8016286:	22c7      	movs	r2, #199	; 0xc7
 8016288:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM10->DIER |= TIM_DIER_UIE;	// Enable interrupt
 801628a:	4b09      	ldr	r3, [pc, #36]	; (80162b0 <Init_Timer10+0x50>)
 801628c:	68db      	ldr	r3, [r3, #12]
 801628e:	4a08      	ldr	r2, [pc, #32]	; (80162b0 <Init_Timer10+0x50>)
 8016290:	f043 0301 	orr.w	r3, r3, #1
 8016294:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8016296:	2019      	movs	r0, #25
 8016298:	f7ff fdea 	bl	8015e70 <__NVIC_EnableIRQ>

	TIM10->CR1 |= TIM_CR1_CEN;
 801629c:	4b04      	ldr	r3, [pc, #16]	; (80162b0 <Init_Timer10+0x50>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	4a03      	ldr	r2, [pc, #12]	; (80162b0 <Init_Timer10+0x50>)
 80162a2:	f043 0301 	orr.w	r3, r3, #1
 80162a6:	6013      	str	r3, [r2, #0]
}
 80162a8:	bf00      	nop
 80162aa:	bd80      	pop	{r7, pc}
 80162ac:	40023800 	.word	0x40023800
 80162b0:	40014400 	.word	0x40014400

080162b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80162b8:	4b11      	ldr	r3, [pc, #68]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162ba:	4a12      	ldr	r2, [pc, #72]	; (8016304 <MX_USART3_UART_Init+0x50>)
 80162bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80162be:	4b10      	ldr	r3, [pc, #64]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80162c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80162c6:	4b0e      	ldr	r3, [pc, #56]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162c8:	2200      	movs	r2, #0
 80162ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80162cc:	4b0c      	ldr	r3, [pc, #48]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162ce:	2200      	movs	r2, #0
 80162d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80162d2:	4b0b      	ldr	r3, [pc, #44]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162d4:	2200      	movs	r2, #0
 80162d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80162d8:	4b09      	ldr	r3, [pc, #36]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162da:	220c      	movs	r2, #12
 80162dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80162de:	4b08      	ldr	r3, [pc, #32]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162e0:	2200      	movs	r2, #0
 80162e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80162e4:	4b06      	ldr	r3, [pc, #24]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162e6:	2200      	movs	r2, #0
 80162e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80162ea:	4805      	ldr	r0, [pc, #20]	; (8016300 <MX_USART3_UART_Init+0x4c>)
 80162ec:	f7ee fc0c 	bl	8004b08 <HAL_UART_Init>
 80162f0:	4603      	mov	r3, r0
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80162f6:	f7ff f9e9 	bl	80156cc <Error_Handler>
  }

}
 80162fa:	bf00      	nop
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	20007884 	.word	0x20007884
 8016304:	40004800 	.word	0x40004800

08016308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08a      	sub	sp, #40	; 0x28
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016310:	f107 0314 	add.w	r3, r7, #20
 8016314:	2200      	movs	r2, #0
 8016316:	601a      	str	r2, [r3, #0]
 8016318:	605a      	str	r2, [r3, #4]
 801631a:	609a      	str	r2, [r3, #8]
 801631c:	60da      	str	r2, [r3, #12]
 801631e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a19      	ldr	r2, [pc, #100]	; (801638c <HAL_UART_MspInit+0x84>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d12c      	bne.n	8016384 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 801632a:	2300      	movs	r3, #0
 801632c:	613b      	str	r3, [r7, #16]
 801632e:	4b18      	ldr	r3, [pc, #96]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016332:	4a17      	ldr	r2, [pc, #92]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016338:	6413      	str	r3, [r2, #64]	; 0x40
 801633a:	4b15      	ldr	r3, [pc, #84]	; (8016390 <HAL_UART_MspInit+0x88>)
 801633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016342:	613b      	str	r3, [r7, #16]
 8016344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8016346:	2300      	movs	r3, #0
 8016348:	60fb      	str	r3, [r7, #12]
 801634a:	4b11      	ldr	r3, [pc, #68]	; (8016390 <HAL_UART_MspInit+0x88>)
 801634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801634e:	4a10      	ldr	r2, [pc, #64]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016350:	f043 0308 	orr.w	r3, r3, #8
 8016354:	6313      	str	r3, [r2, #48]	; 0x30
 8016356:	4b0e      	ldr	r3, [pc, #56]	; (8016390 <HAL_UART_MspInit+0x88>)
 8016358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801635a:	f003 0308 	and.w	r3, r3, #8
 801635e:	60fb      	str	r3, [r7, #12]
 8016360:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8016362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8016366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016368:	2302      	movs	r3, #2
 801636a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801636c:	2301      	movs	r3, #1
 801636e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016370:	2303      	movs	r3, #3
 8016372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8016374:	2307      	movs	r3, #7
 8016376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016378:	f107 0314 	add.w	r3, r7, #20
 801637c:	4619      	mov	r1, r3
 801637e:	4805      	ldr	r0, [pc, #20]	; (8016394 <HAL_UART_MspInit+0x8c>)
 8016380:	f7ec f886 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8016384:	bf00      	nop
 8016386:	3728      	adds	r7, #40	; 0x28
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	40004800 	.word	0x40004800
 8016390:	40023800 	.word	0x40023800
 8016394:	40020c00 	.word	0x40020c00

08016398 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801639c:	2200      	movs	r2, #0
 801639e:	4912      	ldr	r1, [pc, #72]	; (80163e8 <MX_USB_DEVICE_Init+0x50>)
 80163a0:	4812      	ldr	r0, [pc, #72]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163a2:	f7f0 fbbb 	bl	8006b1c <USBD_Init>
 80163a6:	4603      	mov	r3, r0
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d001      	beq.n	80163b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80163ac:	f7ff f98e 	bl	80156cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80163b0:	490f      	ldr	r1, [pc, #60]	; (80163f0 <MX_USB_DEVICE_Init+0x58>)
 80163b2:	480e      	ldr	r0, [pc, #56]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163b4:	f7f0 fbdd 	bl	8006b72 <USBD_RegisterClass>
 80163b8:	4603      	mov	r3, r0
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d001      	beq.n	80163c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163be:	f7ff f985 	bl	80156cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163c2:	490c      	ldr	r1, [pc, #48]	; (80163f4 <MX_USB_DEVICE_Init+0x5c>)
 80163c4:	4809      	ldr	r0, [pc, #36]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163c6:	f7f0 fb0b 	bl	80069e0 <USBD_CDC_RegisterInterface>
 80163ca:	4603      	mov	r3, r0
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d001      	beq.n	80163d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163d0:	f7ff f97c 	bl	80156cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163d4:	4805      	ldr	r0, [pc, #20]	; (80163ec <MX_USB_DEVICE_Init+0x54>)
 80163d6:	f7f0 fbe6 	bl	8006ba6 <USBD_Start>
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d001      	beq.n	80163e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163e0:	f7ff f974 	bl	80156cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80163e4:	bf00      	nop
 80163e6:	bd80      	pop	{r7, pc}
 80163e8:	2000013c 	.word	0x2000013c
 80163ec:	200078c4 	.word	0x200078c4
 80163f0:	20000014 	.word	0x20000014
 80163f4:	2000012c 	.word	0x2000012c

080163f8 <__io_getchar>:
	CDC_Transmit_FS((uint8_t *)&ch, 1);

	return(ch);
}

int __io_getchar(void){
 80163f8:	b480      	push	{r7}
 80163fa:	af00      	add	r7, sp, #0

  // Loop until the reception buffer is not empty
  while(!(USART6->SR & USART_SR_RXNE));
 80163fc:	bf00      	nop
 80163fe:	4b06      	ldr	r3, [pc, #24]	; (8016418 <__io_getchar+0x20>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f003 0320 	and.w	r3, r3, #32
 8016406:	2b00      	cmp	r3, #0
 8016408:	d0f9      	beq.n	80163fe <__io_getchar+0x6>

  return((int)USART6->DR);
 801640a:	4b03      	ldr	r3, [pc, #12]	; (8016418 <__io_getchar+0x20>)
 801640c:	685b      	ldr	r3, [r3, #4]
}
 801640e:	4618      	mov	r0, r3
 8016410:	46bd      	mov	sp, r7
 8016412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016416:	4770      	bx	lr
 8016418:	40011400 	.word	0x40011400

0801641c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016420:	2200      	movs	r2, #0
 8016422:	4905      	ldr	r1, [pc, #20]	; (8016438 <CDC_Init_FS+0x1c>)
 8016424:	4805      	ldr	r0, [pc, #20]	; (801643c <CDC_Init_FS+0x20>)
 8016426:	f7f0 faf2 	bl	8006a0e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801642a:	4905      	ldr	r1, [pc, #20]	; (8016440 <CDC_Init_FS+0x24>)
 801642c:	4803      	ldr	r0, [pc, #12]	; (801643c <CDC_Init_FS+0x20>)
 801642e:	f7f0 fb08 	bl	8006a42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016432:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016434:	4618      	mov	r0, r3
 8016436:	bd80      	pop	{r7, pc}
 8016438:	20008360 	.word	0x20008360
 801643c:	200078c4 	.word	0x200078c4
 8016440:	20007b60 	.word	0x20007b60

08016444 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016444:	b480      	push	{r7}
 8016446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016448:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801644a:	4618      	mov	r0, r3
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr

08016454 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	4603      	mov	r3, r0
 801645c:	6039      	str	r1, [r7, #0]
 801645e:	71fb      	strb	r3, [r7, #7]
 8016460:	4613      	mov	r3, r2
 8016462:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016464:	79fb      	ldrb	r3, [r7, #7]
 8016466:	2b23      	cmp	r3, #35	; 0x23
 8016468:	d84a      	bhi.n	8016500 <CDC_Control_FS+0xac>
 801646a:	a201      	add	r2, pc, #4	; (adr r2, 8016470 <CDC_Control_FS+0x1c>)
 801646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016470:	08016501 	.word	0x08016501
 8016474:	08016501 	.word	0x08016501
 8016478:	08016501 	.word	0x08016501
 801647c:	08016501 	.word	0x08016501
 8016480:	08016501 	.word	0x08016501
 8016484:	08016501 	.word	0x08016501
 8016488:	08016501 	.word	0x08016501
 801648c:	08016501 	.word	0x08016501
 8016490:	08016501 	.word	0x08016501
 8016494:	08016501 	.word	0x08016501
 8016498:	08016501 	.word	0x08016501
 801649c:	08016501 	.word	0x08016501
 80164a0:	08016501 	.word	0x08016501
 80164a4:	08016501 	.word	0x08016501
 80164a8:	08016501 	.word	0x08016501
 80164ac:	08016501 	.word	0x08016501
 80164b0:	08016501 	.word	0x08016501
 80164b4:	08016501 	.word	0x08016501
 80164b8:	08016501 	.word	0x08016501
 80164bc:	08016501 	.word	0x08016501
 80164c0:	08016501 	.word	0x08016501
 80164c4:	08016501 	.word	0x08016501
 80164c8:	08016501 	.word	0x08016501
 80164cc:	08016501 	.word	0x08016501
 80164d0:	08016501 	.word	0x08016501
 80164d4:	08016501 	.word	0x08016501
 80164d8:	08016501 	.word	0x08016501
 80164dc:	08016501 	.word	0x08016501
 80164e0:	08016501 	.word	0x08016501
 80164e4:	08016501 	.word	0x08016501
 80164e8:	08016501 	.word	0x08016501
 80164ec:	08016501 	.word	0x08016501
 80164f0:	08016501 	.word	0x08016501
 80164f4:	08016501 	.word	0x08016501
 80164f8:	08016501 	.word	0x08016501
 80164fc:	08016501 	.word	0x08016501
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016500:	bf00      	nop
  }

  return (USBD_OK);
 8016502:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016504:	4618      	mov	r0, r3
 8016506:	370c      	adds	r7, #12
 8016508:	46bd      	mov	sp, r7
 801650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650e:	4770      	bx	lr

08016510 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801651a:	6879      	ldr	r1, [r7, #4]
 801651c:	4805      	ldr	r0, [pc, #20]	; (8016534 <CDC_Receive_FS+0x24>)
 801651e:	f7f0 fa90 	bl	8006a42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016522:	4804      	ldr	r0, [pc, #16]	; (8016534 <CDC_Receive_FS+0x24>)
 8016524:	f7f0 fad0 	bl	8006ac8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016528:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801652a:	4618      	mov	r0, r3
 801652c:	3708      	adds	r7, #8
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	200078c4 	.word	0x200078c4

08016538 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b084      	sub	sp, #16
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
 8016540:	460b      	mov	r3, r1
 8016542:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016544:	2300      	movs	r3, #0
 8016546:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016548:	4b0d      	ldr	r3, [pc, #52]	; (8016580 <CDC_Transmit_FS+0x48>)
 801654a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801654e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016556:	2b00      	cmp	r3, #0
 8016558:	d001      	beq.n	801655e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801655a:	2301      	movs	r3, #1
 801655c:	e00b      	b.n	8016576 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801655e:	887b      	ldrh	r3, [r7, #2]
 8016560:	461a      	mov	r2, r3
 8016562:	6879      	ldr	r1, [r7, #4]
 8016564:	4806      	ldr	r0, [pc, #24]	; (8016580 <CDC_Transmit_FS+0x48>)
 8016566:	f7f0 fa52 	bl	8006a0e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801656a:	4805      	ldr	r0, [pc, #20]	; (8016580 <CDC_Transmit_FS+0x48>)
 801656c:	f7f0 fa7d 	bl	8006a6a <USBD_CDC_TransmitPacket>
 8016570:	4603      	mov	r3, r0
 8016572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016574:	7bfb      	ldrb	r3, [r7, #15]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3710      	adds	r7, #16
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	200078c4 	.word	0x200078c4

08016584 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b08a      	sub	sp, #40	; 0x28
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801658c:	f107 0314 	add.w	r3, r7, #20
 8016590:	2200      	movs	r2, #0
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	605a      	str	r2, [r3, #4]
 8016596:	609a      	str	r2, [r3, #8]
 8016598:	60da      	str	r2, [r3, #12]
 801659a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80165a4:	d147      	bne.n	8016636 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80165a6:	2300      	movs	r3, #0
 80165a8:	613b      	str	r3, [r7, #16]
 80165aa:	4b25      	ldr	r3, [pc, #148]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 80165ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ae:	4a24      	ldr	r2, [pc, #144]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 80165b0:	f043 0301 	orr.w	r3, r3, #1
 80165b4:	6313      	str	r3, [r2, #48]	; 0x30
 80165b6:	4b22      	ldr	r3, [pc, #136]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 80165b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165ba:	f003 0301 	and.w	r3, r3, #1
 80165be:	613b      	str	r3, [r7, #16]
 80165c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80165c2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80165c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165c8:	2302      	movs	r3, #2
 80165ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165cc:	2300      	movs	r3, #0
 80165ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80165d0:	2303      	movs	r3, #3
 80165d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80165d4:	230a      	movs	r3, #10
 80165d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80165d8:	f107 0314 	add.w	r3, r7, #20
 80165dc:	4619      	mov	r1, r3
 80165de:	4819      	ldr	r0, [pc, #100]	; (8016644 <HAL_PCD_MspInit+0xc0>)
 80165e0:	f7eb ff56 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80165e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80165e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80165ea:	2300      	movs	r3, #0
 80165ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165ee:	2300      	movs	r3, #0
 80165f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80165f2:	f107 0314 	add.w	r3, r7, #20
 80165f6:	4619      	mov	r1, r3
 80165f8:	4812      	ldr	r0, [pc, #72]	; (8016644 <HAL_PCD_MspInit+0xc0>)
 80165fa:	f7eb ff49 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80165fe:	4b10      	ldr	r3, [pc, #64]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016602:	4a0f      	ldr	r2, [pc, #60]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016608:	6353      	str	r3, [r2, #52]	; 0x34
 801660a:	2300      	movs	r3, #0
 801660c:	60fb      	str	r3, [r7, #12]
 801660e:	4b0c      	ldr	r3, [pc, #48]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016612:	4a0b      	ldr	r2, [pc, #44]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 8016614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016618:	6453      	str	r3, [r2, #68]	; 0x44
 801661a:	4b09      	ldr	r3, [pc, #36]	; (8016640 <HAL_PCD_MspInit+0xbc>)
 801661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801661e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016622:	60fb      	str	r3, [r7, #12]
 8016624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016626:	2200      	movs	r2, #0
 8016628:	2100      	movs	r1, #0
 801662a:	2043      	movs	r0, #67	; 0x43
 801662c:	f7ea ff65 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016630:	2043      	movs	r0, #67	; 0x43
 8016632:	f7ea ff7e 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016636:	bf00      	nop
 8016638:	3728      	adds	r7, #40	; 0x28
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	40023800 	.word	0x40023800
 8016644:	40020000 	.word	0x40020000

08016648 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801665c:	4619      	mov	r1, r3
 801665e:	4610      	mov	r0, r2
 8016660:	f7f0 faea 	bl	8006c38 <USBD_LL_SetupStage>
}
 8016664:	bf00      	nop
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
 8016674:	460b      	mov	r3, r1
 8016676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801667e:	78fa      	ldrb	r2, [r7, #3]
 8016680:	6879      	ldr	r1, [r7, #4]
 8016682:	4613      	mov	r3, r2
 8016684:	00db      	lsls	r3, r3, #3
 8016686:	1a9b      	subs	r3, r3, r2
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	440b      	add	r3, r1
 801668c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016690:	681a      	ldr	r2, [r3, #0]
 8016692:	78fb      	ldrb	r3, [r7, #3]
 8016694:	4619      	mov	r1, r3
 8016696:	f7f0 fb1a 	bl	8006cce <USBD_LL_DataOutStage>
}
 801669a:	bf00      	nop
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b082      	sub	sp, #8
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	460b      	mov	r3, r1
 80166ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80166b4:	78fa      	ldrb	r2, [r7, #3]
 80166b6:	6879      	ldr	r1, [r7, #4]
 80166b8:	4613      	mov	r3, r2
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	1a9b      	subs	r3, r3, r2
 80166be:	009b      	lsls	r3, r3, #2
 80166c0:	440b      	add	r3, r1
 80166c2:	3348      	adds	r3, #72	; 0x48
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	78fb      	ldrb	r3, [r7, #3]
 80166c8:	4619      	mov	r1, r3
 80166ca:	f7f0 fb71 	bl	8006db0 <USBD_LL_DataInStage>
}
 80166ce:	bf00      	nop
 80166d0:	3708      	adds	r7, #8
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}

080166d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b082      	sub	sp, #8
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7f0 fc7f 	bl	8006fe8 <USBD_LL_SOF>
}
 80166ea:	bf00      	nop
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}

080166f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80166f2:	b580      	push	{r7, lr}
 80166f4:	b084      	sub	sp, #16
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80166fa:	2301      	movs	r3, #1
 80166fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d102      	bne.n	801670c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016706:	2300      	movs	r3, #0
 8016708:	73fb      	strb	r3, [r7, #15]
 801670a:	e008      	b.n	801671e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	2b02      	cmp	r3, #2
 8016712:	d102      	bne.n	801671a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016714:	2301      	movs	r3, #1
 8016716:	73fb      	strb	r3, [r7, #15]
 8016718:	e001      	b.n	801671e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801671a:	f7fe ffd7 	bl	80156cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016724:	7bfa      	ldrb	r2, [r7, #15]
 8016726:	4611      	mov	r1, r2
 8016728:	4618      	mov	r0, r3
 801672a:	f7f0 fc27 	bl	8006f7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016734:	4618      	mov	r0, r3
 8016736:	f7f0 fbe0 	bl	8006efa <USBD_LL_Reset>
}
 801673a:	bf00      	nop
 801673c:	3710      	adds	r7, #16
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
	...

08016744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b082      	sub	sp, #8
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016752:	4618      	mov	r0, r3
 8016754:	f7f0 fc22 	bl	8006f9c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	687a      	ldr	r2, [r7, #4]
 8016764:	6812      	ldr	r2, [r2, #0]
 8016766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801676a:	f043 0301 	orr.w	r3, r3, #1
 801676e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	6a1b      	ldr	r3, [r3, #32]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d005      	beq.n	8016784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016778:	4b04      	ldr	r3, [pc, #16]	; (801678c <HAL_PCD_SuspendCallback+0x48>)
 801677a:	691b      	ldr	r3, [r3, #16]
 801677c:	4a03      	ldr	r2, [pc, #12]	; (801678c <HAL_PCD_SuspendCallback+0x48>)
 801677e:	f043 0306 	orr.w	r3, r3, #6
 8016782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016784:	bf00      	nop
 8016786:	3708      	adds	r7, #8
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	e000ed00 	.word	0xe000ed00

08016790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801679e:	4618      	mov	r0, r3
 80167a0:	f7f0 fc11 	bl	8006fc6 <USBD_LL_Resume>
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	460b      	mov	r3, r1
 80167b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167be:	78fa      	ldrb	r2, [r7, #3]
 80167c0:	4611      	mov	r1, r2
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7f0 fc37 	bl	8007036 <USBD_LL_IsoOUTIncomplete>
}
 80167c8:	bf00      	nop
 80167ca:	3708      	adds	r7, #8
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	460b      	mov	r3, r1
 80167da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80167e2:	78fa      	ldrb	r2, [r7, #3]
 80167e4:	4611      	mov	r1, r2
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7f0 fc18 	bl	800701c <USBD_LL_IsoINIncomplete>
}
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016802:	4618      	mov	r0, r3
 8016804:	f7f0 fc24 	bl	8007050 <USBD_LL_DevConnected>
}
 8016808:	bf00      	nop
 801680a:	3708      	adds	r7, #8
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801681e:	4618      	mov	r0, r3
 8016820:	f7f0 fc21 	bl	8007066 <USBD_LL_DevDisconnected>
}
 8016824:	bf00      	nop
 8016826:	3708      	adds	r7, #8
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	781b      	ldrb	r3, [r3, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d13c      	bne.n	80168b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801683c:	4a20      	ldr	r2, [pc, #128]	; (80168c0 <USBD_LL_Init+0x94>)
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	4a1e      	ldr	r2, [pc, #120]	; (80168c0 <USBD_LL_Init+0x94>)
 8016848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801684c:	4b1c      	ldr	r3, [pc, #112]	; (80168c0 <USBD_LL_Init+0x94>)
 801684e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016854:	4b1a      	ldr	r3, [pc, #104]	; (80168c0 <USBD_LL_Init+0x94>)
 8016856:	2204      	movs	r2, #4
 8016858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801685a:	4b19      	ldr	r3, [pc, #100]	; (80168c0 <USBD_LL_Init+0x94>)
 801685c:	2202      	movs	r2, #2
 801685e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016860:	4b17      	ldr	r3, [pc, #92]	; (80168c0 <USBD_LL_Init+0x94>)
 8016862:	2200      	movs	r2, #0
 8016864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016866:	4b16      	ldr	r3, [pc, #88]	; (80168c0 <USBD_LL_Init+0x94>)
 8016868:	2202      	movs	r2, #2
 801686a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801686c:	4b14      	ldr	r3, [pc, #80]	; (80168c0 <USBD_LL_Init+0x94>)
 801686e:	2201      	movs	r2, #1
 8016870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016872:	4b13      	ldr	r3, [pc, #76]	; (80168c0 <USBD_LL_Init+0x94>)
 8016874:	2200      	movs	r2, #0
 8016876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016878:	4b11      	ldr	r3, [pc, #68]	; (80168c0 <USBD_LL_Init+0x94>)
 801687a:	2200      	movs	r2, #0
 801687c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801687e:	4b10      	ldr	r3, [pc, #64]	; (80168c0 <USBD_LL_Init+0x94>)
 8016880:	2201      	movs	r2, #1
 8016882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016884:	4b0e      	ldr	r3, [pc, #56]	; (80168c0 <USBD_LL_Init+0x94>)
 8016886:	2200      	movs	r2, #0
 8016888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801688a:	480d      	ldr	r0, [pc, #52]	; (80168c0 <USBD_LL_Init+0x94>)
 801688c:	f7ec f967 	bl	8002b5e <HAL_PCD_Init>
 8016890:	4603      	mov	r3, r0
 8016892:	2b00      	cmp	r3, #0
 8016894:	d001      	beq.n	801689a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016896:	f7fe ff19 	bl	80156cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801689a:	2180      	movs	r1, #128	; 0x80
 801689c:	4808      	ldr	r0, [pc, #32]	; (80168c0 <USBD_LL_Init+0x94>)
 801689e:	f7ed facc 	bl	8003e3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80168a2:	2240      	movs	r2, #64	; 0x40
 80168a4:	2100      	movs	r1, #0
 80168a6:	4806      	ldr	r0, [pc, #24]	; (80168c0 <USBD_LL_Init+0x94>)
 80168a8:	f7ed fa80 	bl	8003dac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80168ac:	2280      	movs	r2, #128	; 0x80
 80168ae:	2101      	movs	r1, #1
 80168b0:	4803      	ldr	r0, [pc, #12]	; (80168c0 <USBD_LL_Init+0x94>)
 80168b2:	f7ed fa7b 	bl	8003dac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80168b6:	2300      	movs	r3, #0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	20008b60 	.word	0x20008b60

080168c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b084      	sub	sp, #16
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168cc:	2300      	movs	r3, #0
 80168ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168d0:	2300      	movs	r3, #0
 80168d2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80168da:	4618      	mov	r0, r3
 80168dc:	f7ec fa5c 	bl	8002d98 <HAL_PCD_Start>
 80168e0:	4603      	mov	r3, r0
 80168e2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80168e4:	7bfb      	ldrb	r3, [r7, #15]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f000 f92e 	bl	8016b48 <USBD_Get_USB_Status>
 80168ec:	4603      	mov	r3, r0
 80168ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80168f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3710      	adds	r7, #16
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}

080168fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b084      	sub	sp, #16
 80168fe:	af00      	add	r7, sp, #0
 8016900:	6078      	str	r0, [r7, #4]
 8016902:	4608      	mov	r0, r1
 8016904:	4611      	mov	r1, r2
 8016906:	461a      	mov	r2, r3
 8016908:	4603      	mov	r3, r0
 801690a:	70fb      	strb	r3, [r7, #3]
 801690c:	460b      	mov	r3, r1
 801690e:	70bb      	strb	r3, [r7, #2]
 8016910:	4613      	mov	r3, r2
 8016912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016914:	2300      	movs	r3, #0
 8016916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016918:	2300      	movs	r3, #0
 801691a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016922:	78bb      	ldrb	r3, [r7, #2]
 8016924:	883a      	ldrh	r2, [r7, #0]
 8016926:	78f9      	ldrb	r1, [r7, #3]
 8016928:	f7ec fe31 	bl	800358e <HAL_PCD_EP_Open>
 801692c:	4603      	mov	r3, r0
 801692e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016930:	7bfb      	ldrb	r3, [r7, #15]
 8016932:	4618      	mov	r0, r3
 8016934:	f000 f908 	bl	8016b48 <USBD_Get_USB_Status>
 8016938:	4603      	mov	r3, r0
 801693a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801693c:	7bbb      	ldrb	r3, [r7, #14]
}
 801693e:	4618      	mov	r0, r3
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b084      	sub	sp, #16
 801694a:	af00      	add	r7, sp, #0
 801694c:	6078      	str	r0, [r7, #4]
 801694e:	460b      	mov	r3, r1
 8016950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016952:	2300      	movs	r3, #0
 8016954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016956:	2300      	movs	r3, #0
 8016958:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016960:	78fa      	ldrb	r2, [r7, #3]
 8016962:	4611      	mov	r1, r2
 8016964:	4618      	mov	r0, r3
 8016966:	f7ec fe7a 	bl	800365e <HAL_PCD_EP_Close>
 801696a:	4603      	mov	r3, r0
 801696c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801696e:	7bfb      	ldrb	r3, [r7, #15]
 8016970:	4618      	mov	r0, r3
 8016972:	f000 f8e9 	bl	8016b48 <USBD_Get_USB_Status>
 8016976:	4603      	mov	r3, r0
 8016978:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801697a:	7bbb      	ldrb	r3, [r7, #14]
}
 801697c:	4618      	mov	r0, r3
 801697e:	3710      	adds	r7, #16
 8016980:	46bd      	mov	sp, r7
 8016982:	bd80      	pop	{r7, pc}

08016984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	460b      	mov	r3, r1
 801698e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016990:	2300      	movs	r3, #0
 8016992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016994:	2300      	movs	r3, #0
 8016996:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801699e:	78fa      	ldrb	r2, [r7, #3]
 80169a0:	4611      	mov	r1, r2
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7ec ff52 	bl	800384c <HAL_PCD_EP_SetStall>
 80169a8:	4603      	mov	r3, r0
 80169aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169ac:	7bfb      	ldrb	r3, [r7, #15]
 80169ae:	4618      	mov	r0, r3
 80169b0:	f000 f8ca 	bl	8016b48 <USBD_Get_USB_Status>
 80169b4:	4603      	mov	r3, r0
 80169b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80169b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3710      	adds	r7, #16
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}

080169c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169c2:	b580      	push	{r7, lr}
 80169c4:	b084      	sub	sp, #16
 80169c6:	af00      	add	r7, sp, #0
 80169c8:	6078      	str	r0, [r7, #4]
 80169ca:	460b      	mov	r3, r1
 80169cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169ce:	2300      	movs	r3, #0
 80169d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169d2:	2300      	movs	r3, #0
 80169d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80169dc:	78fa      	ldrb	r2, [r7, #3]
 80169de:	4611      	mov	r1, r2
 80169e0:	4618      	mov	r0, r3
 80169e2:	f7ec ff97 	bl	8003914 <HAL_PCD_EP_ClrStall>
 80169e6:	4603      	mov	r3, r0
 80169e8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80169ea:	7bfb      	ldrb	r3, [r7, #15]
 80169ec:	4618      	mov	r0, r3
 80169ee:	f000 f8ab 	bl	8016b48 <USBD_Get_USB_Status>
 80169f2:	4603      	mov	r3, r0
 80169f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80169f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	3710      	adds	r7, #16
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a00:	b480      	push	{r7}
 8016a02:	b085      	sub	sp, #20
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
 8016a08:	460b      	mov	r3, r1
 8016a0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a12:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8016a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	da0b      	bge.n	8016a34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8016a1c:	78fb      	ldrb	r3, [r7, #3]
 8016a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a22:	68f9      	ldr	r1, [r7, #12]
 8016a24:	4613      	mov	r3, r2
 8016a26:	00db      	lsls	r3, r3, #3
 8016a28:	1a9b      	subs	r3, r3, r2
 8016a2a:	009b      	lsls	r3, r3, #2
 8016a2c:	440b      	add	r3, r1
 8016a2e:	333e      	adds	r3, #62	; 0x3e
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	e00b      	b.n	8016a4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8016a34:	78fb      	ldrb	r3, [r7, #3]
 8016a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a3a:	68f9      	ldr	r1, [r7, #12]
 8016a3c:	4613      	mov	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	1a9b      	subs	r3, r3, r2
 8016a42:	009b      	lsls	r3, r3, #2
 8016a44:	440b      	add	r3, r1
 8016a46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016a4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3714      	adds	r7, #20
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr

08016a58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b084      	sub	sp, #16
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	460b      	mov	r3, r1
 8016a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a64:	2300      	movs	r3, #0
 8016a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016a72:	78fa      	ldrb	r2, [r7, #3]
 8016a74:	4611      	mov	r1, r2
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7ec fd64 	bl	8003544 <HAL_PCD_SetAddress>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a80:	7bfb      	ldrb	r3, [r7, #15]
 8016a82:	4618      	mov	r0, r3
 8016a84:	f000 f860 	bl	8016b48 <USBD_Get_USB_Status>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8016a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3710      	adds	r7, #16
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}

08016a96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016a96:	b580      	push	{r7, lr}
 8016a98:	b086      	sub	sp, #24
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	60f8      	str	r0, [r7, #12]
 8016a9e:	607a      	str	r2, [r7, #4]
 8016aa0:	461a      	mov	r2, r3
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	72fb      	strb	r3, [r7, #11]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016ab8:	893b      	ldrh	r3, [r7, #8]
 8016aba:	7af9      	ldrb	r1, [r7, #11]
 8016abc:	687a      	ldr	r2, [r7, #4]
 8016abe:	f7ec fe7b 	bl	80037b8 <HAL_PCD_EP_Transmit>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8016ac6:	7dfb      	ldrb	r3, [r7, #23]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f000 f83d 	bl	8016b48 <USBD_Get_USB_Status>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8016ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3718      	adds	r7, #24
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}

08016adc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b086      	sub	sp, #24
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	607a      	str	r2, [r7, #4]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	460b      	mov	r3, r1
 8016aea:	72fb      	strb	r3, [r7, #11]
 8016aec:	4613      	mov	r3, r2
 8016aee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016af0:	2300      	movs	r3, #0
 8016af2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016af4:	2300      	movs	r3, #0
 8016af6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8016afe:	893b      	ldrh	r3, [r7, #8]
 8016b00:	7af9      	ldrb	r1, [r7, #11]
 8016b02:	687a      	ldr	r2, [r7, #4]
 8016b04:	f7ec fdf5 	bl	80036f2 <HAL_PCD_EP_Receive>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8016b0c:	7dfb      	ldrb	r3, [r7, #23]
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f000 f81a 	bl	8016b48 <USBD_Get_USB_Status>
 8016b14:	4603      	mov	r3, r0
 8016b16:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8016b18:	7dbb      	ldrb	r3, [r7, #22]
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3718      	adds	r7, #24
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}

08016b22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b082      	sub	sp, #8
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	6078      	str	r0, [r7, #4]
 8016b2a:	460b      	mov	r3, r1
 8016b2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8016b34:	78fa      	ldrb	r2, [r7, #3]
 8016b36:	4611      	mov	r1, r2
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7ec fe25 	bl	8003788 <HAL_PCD_EP_GetRxCount>
 8016b3e:	4603      	mov	r3, r0
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3708      	adds	r7, #8
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd80      	pop	{r7, pc}

08016b48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b085      	sub	sp, #20
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	4603      	mov	r3, r0
 8016b50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b52:	2300      	movs	r3, #0
 8016b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016b56:	79fb      	ldrb	r3, [r7, #7]
 8016b58:	2b03      	cmp	r3, #3
 8016b5a:	d817      	bhi.n	8016b8c <USBD_Get_USB_Status+0x44>
 8016b5c:	a201      	add	r2, pc, #4	; (adr r2, 8016b64 <USBD_Get_USB_Status+0x1c>)
 8016b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b62:	bf00      	nop
 8016b64:	08016b75 	.word	0x08016b75
 8016b68:	08016b7b 	.word	0x08016b7b
 8016b6c:	08016b81 	.word	0x08016b81
 8016b70:	08016b87 	.word	0x08016b87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016b74:	2300      	movs	r3, #0
 8016b76:	73fb      	strb	r3, [r7, #15]
    break;
 8016b78:	e00b      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016b7a:	2302      	movs	r3, #2
 8016b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8016b7e:	e008      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016b80:	2301      	movs	r3, #1
 8016b82:	73fb      	strb	r3, [r7, #15]
    break;
 8016b84:	e005      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016b86:	2302      	movs	r3, #2
 8016b88:	73fb      	strb	r3, [r7, #15]
    break;
 8016b8a:	e002      	b.n	8016b92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016b8c:	2302      	movs	r3, #2
 8016b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8016b90:	bf00      	nop
  }
  return usb_status;
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b94:	4618      	mov	r0, r3
 8016b96:	3714      	adds	r7, #20
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9e:	4770      	bx	lr

08016ba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	6039      	str	r1, [r7, #0]
 8016baa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	2212      	movs	r2, #18
 8016bb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016bb2:	4b03      	ldr	r3, [pc, #12]	; (8016bc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	370c      	adds	r7, #12
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr
 8016bc0:	20000158 	.word	0x20000158

08016bc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016bc4:	b480      	push	{r7}
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	4603      	mov	r3, r0
 8016bcc:	6039      	str	r1, [r7, #0]
 8016bce:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	2204      	movs	r2, #4
 8016bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016bd6:	4b03      	ldr	r3, [pc, #12]	; (8016be4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016bd8:	4618      	mov	r0, r3
 8016bda:	370c      	adds	r7, #12
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be2:	4770      	bx	lr
 8016be4:	2000016c 	.word	0x2000016c

08016be8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	6039      	str	r1, [r7, #0]
 8016bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d105      	bne.n	8016c06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016bfa:	683a      	ldr	r2, [r7, #0]
 8016bfc:	4907      	ldr	r1, [pc, #28]	; (8016c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8016bfe:	4808      	ldr	r0, [pc, #32]	; (8016c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c00:	f7f0 ff08 	bl	8007a14 <USBD_GetString>
 8016c04:	e004      	b.n	8016c10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	4904      	ldr	r1, [pc, #16]	; (8016c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8016c0a:	4805      	ldr	r0, [pc, #20]	; (8016c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8016c0c:	f7f0 ff02 	bl	8007a14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c10:	4b02      	ldr	r3, [pc, #8]	; (8016c1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20008f68 	.word	0x20008f68
 8016c20:	0801b1c0 	.word	0x0801b1c0

08016c24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	6039      	str	r1, [r7, #0]
 8016c2e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016c30:	683a      	ldr	r2, [r7, #0]
 8016c32:	4904      	ldr	r1, [pc, #16]	; (8016c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016c34:	4804      	ldr	r0, [pc, #16]	; (8016c48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016c36:	f7f0 feed 	bl	8007a14 <USBD_GetString>
  return USBD_StrDesc;
 8016c3a:	4b02      	ldr	r3, [pc, #8]	; (8016c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3708      	adds	r7, #8
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}
 8016c44:	20008f68 	.word	0x20008f68
 8016c48:	0801b1d8 	.word	0x0801b1d8

08016c4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	4603      	mov	r3, r0
 8016c54:	6039      	str	r1, [r7, #0]
 8016c56:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	221a      	movs	r2, #26
 8016c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016c5e:	f000 f843 	bl	8016ce8 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8016c62:	4b02      	ldr	r3, [pc, #8]	; (8016c6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}
 8016c6c:	20000170 	.word	0x20000170

08016c70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	4603      	mov	r3, r0
 8016c78:	6039      	str	r1, [r7, #0]
 8016c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016c7c:	79fb      	ldrb	r3, [r7, #7]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d105      	bne.n	8016c8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016c82:	683a      	ldr	r2, [r7, #0]
 8016c84:	4907      	ldr	r1, [pc, #28]	; (8016ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016c86:	4808      	ldr	r0, [pc, #32]	; (8016ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016c88:	f7f0 fec4 	bl	8007a14 <USBD_GetString>
 8016c8c:	e004      	b.n	8016c98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016c8e:	683a      	ldr	r2, [r7, #0]
 8016c90:	4904      	ldr	r1, [pc, #16]	; (8016ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016c92:	4805      	ldr	r0, [pc, #20]	; (8016ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016c94:	f7f0 febe 	bl	8007a14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016c98:	4b02      	ldr	r3, [pc, #8]	; (8016ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}
 8016ca2:	bf00      	nop
 8016ca4:	20008f68 	.word	0x20008f68
 8016ca8:	0801b1e8 	.word	0x0801b1e8

08016cac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	6039      	str	r1, [r7, #0]
 8016cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016cb8:	79fb      	ldrb	r3, [r7, #7]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d105      	bne.n	8016cca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016cbe:	683a      	ldr	r2, [r7, #0]
 8016cc0:	4907      	ldr	r1, [pc, #28]	; (8016ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016cc2:	4808      	ldr	r0, [pc, #32]	; (8016ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016cc4:	f7f0 fea6 	bl	8007a14 <USBD_GetString>
 8016cc8:	e004      	b.n	8016cd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016cca:	683a      	ldr	r2, [r7, #0]
 8016ccc:	4904      	ldr	r1, [pc, #16]	; (8016ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016cce:	4805      	ldr	r0, [pc, #20]	; (8016ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016cd0:	f7f0 fea0 	bl	8007a14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cd4:	4b02      	ldr	r3, [pc, #8]	; (8016ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3708      	adds	r7, #8
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	20008f68 	.word	0x20008f68
 8016ce4:	0801b1f4 	.word	0x0801b1f4

08016ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b084      	sub	sp, #16
 8016cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016cee:	4b0f      	ldr	r3, [pc, #60]	; (8016d2c <Get_SerialNum+0x44>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016cf4:	4b0e      	ldr	r3, [pc, #56]	; (8016d30 <Get_SerialNum+0x48>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016cfa:	4b0e      	ldr	r3, [pc, #56]	; (8016d34 <Get_SerialNum+0x4c>)
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016d00:	68fa      	ldr	r2, [r7, #12]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4413      	add	r3, r2
 8016d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d009      	beq.n	8016d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016d0e:	2208      	movs	r2, #8
 8016d10:	4909      	ldr	r1, [pc, #36]	; (8016d38 <Get_SerialNum+0x50>)
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f000 f814 	bl	8016d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016d18:	2204      	movs	r2, #4
 8016d1a:	4908      	ldr	r1, [pc, #32]	; (8016d3c <Get_SerialNum+0x54>)
 8016d1c:	68b8      	ldr	r0, [r7, #8]
 8016d1e:	f000 f80f 	bl	8016d40 <IntToUnicode>
  }
}
 8016d22:	bf00      	nop
 8016d24:	3710      	adds	r7, #16
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	bf00      	nop
 8016d2c:	1fff7a10 	.word	0x1fff7a10
 8016d30:	1fff7a14 	.word	0x1fff7a14
 8016d34:	1fff7a18 	.word	0x1fff7a18
 8016d38:	20000172 	.word	0x20000172
 8016d3c:	20000182 	.word	0x20000182

08016d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016d40:	b480      	push	{r7}
 8016d42:	b087      	sub	sp, #28
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	60f8      	str	r0, [r7, #12]
 8016d48:	60b9      	str	r1, [r7, #8]
 8016d4a:	4613      	mov	r3, r2
 8016d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016d52:	2300      	movs	r3, #0
 8016d54:	75fb      	strb	r3, [r7, #23]
 8016d56:	e027      	b.n	8016da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	0f1b      	lsrs	r3, r3, #28
 8016d5c:	2b09      	cmp	r3, #9
 8016d5e:	d80b      	bhi.n	8016d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	0f1b      	lsrs	r3, r3, #28
 8016d64:	b2da      	uxtb	r2, r3
 8016d66:	7dfb      	ldrb	r3, [r7, #23]
 8016d68:	005b      	lsls	r3, r3, #1
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	440b      	add	r3, r1
 8016d70:	3230      	adds	r2, #48	; 0x30
 8016d72:	b2d2      	uxtb	r2, r2
 8016d74:	701a      	strb	r2, [r3, #0]
 8016d76:	e00a      	b.n	8016d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	0f1b      	lsrs	r3, r3, #28
 8016d7c:	b2da      	uxtb	r2, r3
 8016d7e:	7dfb      	ldrb	r3, [r7, #23]
 8016d80:	005b      	lsls	r3, r3, #1
 8016d82:	4619      	mov	r1, r3
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	440b      	add	r3, r1
 8016d88:	3237      	adds	r2, #55	; 0x37
 8016d8a:	b2d2      	uxtb	r2, r2
 8016d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	011b      	lsls	r3, r3, #4
 8016d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016d94:	7dfb      	ldrb	r3, [r7, #23]
 8016d96:	005b      	lsls	r3, r3, #1
 8016d98:	3301      	adds	r3, #1
 8016d9a:	68ba      	ldr	r2, [r7, #8]
 8016d9c:	4413      	add	r3, r2
 8016d9e:	2200      	movs	r2, #0
 8016da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016da2:	7dfb      	ldrb	r3, [r7, #23]
 8016da4:	3301      	adds	r3, #1
 8016da6:	75fb      	strb	r3, [r7, #23]
 8016da8:	7dfa      	ldrb	r2, [r7, #23]
 8016daa:	79fb      	ldrb	r3, [r7, #7]
 8016dac:	429a      	cmp	r2, r3
 8016dae:	d3d3      	bcc.n	8016d58 <IntToUnicode+0x18>
  }
}
 8016db0:	bf00      	nop
 8016db2:	371c      	adds	r7, #28
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr

08016dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8016dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016df4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8016dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8016dc2:	e003      	b.n	8016dcc <LoopCopyDataInit>

08016dc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016dc4:	4b0c      	ldr	r3, [pc, #48]	; (8016df8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8016dc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8016dc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8016dca:	3104      	adds	r1, #4

08016dcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016dcc:	480b      	ldr	r0, [pc, #44]	; (8016dfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8016dce:	4b0c      	ldr	r3, [pc, #48]	; (8016e00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8016dd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8016dd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016dd4:	d3f6      	bcc.n	8016dc4 <CopyDataInit>
  ldr  r2, =_sbss
 8016dd6:	4a0b      	ldr	r2, [pc, #44]	; (8016e04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8016dd8:	e002      	b.n	8016de0 <LoopFillZerobss>

08016dda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8016dda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016ddc:	f842 3b04 	str.w	r3, [r2], #4

08016de0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016de0:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016de2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016de4:	d3f9      	bcc.n	8016dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016de6:	f7fe fdeb 	bl	80159c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016dea:	f000 f811 	bl	8016e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016dee:	f7fe fbab 	bl	8015548 <main>
  bx  lr    
 8016df2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8016df4:	2002ffff 	.word	0x2002ffff
  ldr  r3, =_sidata
 8016df8:	0801b810 	.word	0x0801b810
  ldr  r0, =_sdata
 8016dfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016e00:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8016e04:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8016e08:	2000916c 	.word	0x2000916c

08016e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016e0c:	e7fe      	b.n	8016e0c <ADC_IRQHandler>
	...

08016e10 <__libc_init_array>:
 8016e10:	b570      	push	{r4, r5, r6, lr}
 8016e12:	4e0d      	ldr	r6, [pc, #52]	; (8016e48 <__libc_init_array+0x38>)
 8016e14:	4c0d      	ldr	r4, [pc, #52]	; (8016e4c <__libc_init_array+0x3c>)
 8016e16:	1ba4      	subs	r4, r4, r6
 8016e18:	10a4      	asrs	r4, r4, #2
 8016e1a:	2500      	movs	r5, #0
 8016e1c:	42a5      	cmp	r5, r4
 8016e1e:	d109      	bne.n	8016e34 <__libc_init_array+0x24>
 8016e20:	4e0b      	ldr	r6, [pc, #44]	; (8016e50 <__libc_init_array+0x40>)
 8016e22:	4c0c      	ldr	r4, [pc, #48]	; (8016e54 <__libc_init_array+0x44>)
 8016e24:	f002 f83e 	bl	8018ea4 <_init>
 8016e28:	1ba4      	subs	r4, r4, r6
 8016e2a:	10a4      	asrs	r4, r4, #2
 8016e2c:	2500      	movs	r5, #0
 8016e2e:	42a5      	cmp	r5, r4
 8016e30:	d105      	bne.n	8016e3e <__libc_init_array+0x2e>
 8016e32:	bd70      	pop	{r4, r5, r6, pc}
 8016e34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016e38:	4798      	blx	r3
 8016e3a:	3501      	adds	r5, #1
 8016e3c:	e7ee      	b.n	8016e1c <__libc_init_array+0xc>
 8016e3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016e42:	4798      	blx	r3
 8016e44:	3501      	adds	r5, #1
 8016e46:	e7f2      	b.n	8016e2e <__libc_init_array+0x1e>
 8016e48:	0801b808 	.word	0x0801b808
 8016e4c:	0801b808 	.word	0x0801b808
 8016e50:	0801b808 	.word	0x0801b808
 8016e54:	0801b80c 	.word	0x0801b80c

08016e58 <malloc>:
 8016e58:	4b02      	ldr	r3, [pc, #8]	; (8016e64 <malloc+0xc>)
 8016e5a:	4601      	mov	r1, r0
 8016e5c:	6818      	ldr	r0, [r3, #0]
 8016e5e:	f000 b87b 	b.w	8016f58 <_malloc_r>
 8016e62:	bf00      	nop
 8016e64:	2000018c 	.word	0x2000018c

08016e68 <free>:
 8016e68:	4b02      	ldr	r3, [pc, #8]	; (8016e74 <free+0xc>)
 8016e6a:	4601      	mov	r1, r0
 8016e6c:	6818      	ldr	r0, [r3, #0]
 8016e6e:	f000 b825 	b.w	8016ebc <_free_r>
 8016e72:	bf00      	nop
 8016e74:	2000018c 	.word	0x2000018c

08016e78 <memcmp>:
 8016e78:	b530      	push	{r4, r5, lr}
 8016e7a:	2400      	movs	r4, #0
 8016e7c:	42a2      	cmp	r2, r4
 8016e7e:	d101      	bne.n	8016e84 <memcmp+0xc>
 8016e80:	2000      	movs	r0, #0
 8016e82:	e007      	b.n	8016e94 <memcmp+0x1c>
 8016e84:	5d03      	ldrb	r3, [r0, r4]
 8016e86:	3401      	adds	r4, #1
 8016e88:	190d      	adds	r5, r1, r4
 8016e8a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016e8e:	42ab      	cmp	r3, r5
 8016e90:	d0f4      	beq.n	8016e7c <memcmp+0x4>
 8016e92:	1b58      	subs	r0, r3, r5
 8016e94:	bd30      	pop	{r4, r5, pc}

08016e96 <memcpy>:
 8016e96:	b510      	push	{r4, lr}
 8016e98:	1e43      	subs	r3, r0, #1
 8016e9a:	440a      	add	r2, r1
 8016e9c:	4291      	cmp	r1, r2
 8016e9e:	d100      	bne.n	8016ea2 <memcpy+0xc>
 8016ea0:	bd10      	pop	{r4, pc}
 8016ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016eaa:	e7f7      	b.n	8016e9c <memcpy+0x6>

08016eac <memset>:
 8016eac:	4402      	add	r2, r0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d100      	bne.n	8016eb6 <memset+0xa>
 8016eb4:	4770      	bx	lr
 8016eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8016eba:	e7f9      	b.n	8016eb0 <memset+0x4>

08016ebc <_free_r>:
 8016ebc:	b538      	push	{r3, r4, r5, lr}
 8016ebe:	4605      	mov	r5, r0
 8016ec0:	2900      	cmp	r1, #0
 8016ec2:	d045      	beq.n	8016f50 <_free_r+0x94>
 8016ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ec8:	1f0c      	subs	r4, r1, #4
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	bfb8      	it	lt
 8016ece:	18e4      	addlt	r4, r4, r3
 8016ed0:	f000 fbfa 	bl	80176c8 <__malloc_lock>
 8016ed4:	4a1f      	ldr	r2, [pc, #124]	; (8016f54 <_free_r+0x98>)
 8016ed6:	6813      	ldr	r3, [r2, #0]
 8016ed8:	4610      	mov	r0, r2
 8016eda:	b933      	cbnz	r3, 8016eea <_free_r+0x2e>
 8016edc:	6063      	str	r3, [r4, #4]
 8016ede:	6014      	str	r4, [r2, #0]
 8016ee0:	4628      	mov	r0, r5
 8016ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ee6:	f000 bbf0 	b.w	80176ca <__malloc_unlock>
 8016eea:	42a3      	cmp	r3, r4
 8016eec:	d90c      	bls.n	8016f08 <_free_r+0x4c>
 8016eee:	6821      	ldr	r1, [r4, #0]
 8016ef0:	1862      	adds	r2, r4, r1
 8016ef2:	4293      	cmp	r3, r2
 8016ef4:	bf04      	itt	eq
 8016ef6:	681a      	ldreq	r2, [r3, #0]
 8016ef8:	685b      	ldreq	r3, [r3, #4]
 8016efa:	6063      	str	r3, [r4, #4]
 8016efc:	bf04      	itt	eq
 8016efe:	1852      	addeq	r2, r2, r1
 8016f00:	6022      	streq	r2, [r4, #0]
 8016f02:	6004      	str	r4, [r0, #0]
 8016f04:	e7ec      	b.n	8016ee0 <_free_r+0x24>
 8016f06:	4613      	mov	r3, r2
 8016f08:	685a      	ldr	r2, [r3, #4]
 8016f0a:	b10a      	cbz	r2, 8016f10 <_free_r+0x54>
 8016f0c:	42a2      	cmp	r2, r4
 8016f0e:	d9fa      	bls.n	8016f06 <_free_r+0x4a>
 8016f10:	6819      	ldr	r1, [r3, #0]
 8016f12:	1858      	adds	r0, r3, r1
 8016f14:	42a0      	cmp	r0, r4
 8016f16:	d10b      	bne.n	8016f30 <_free_r+0x74>
 8016f18:	6820      	ldr	r0, [r4, #0]
 8016f1a:	4401      	add	r1, r0
 8016f1c:	1858      	adds	r0, r3, r1
 8016f1e:	4282      	cmp	r2, r0
 8016f20:	6019      	str	r1, [r3, #0]
 8016f22:	d1dd      	bne.n	8016ee0 <_free_r+0x24>
 8016f24:	6810      	ldr	r0, [r2, #0]
 8016f26:	6852      	ldr	r2, [r2, #4]
 8016f28:	605a      	str	r2, [r3, #4]
 8016f2a:	4401      	add	r1, r0
 8016f2c:	6019      	str	r1, [r3, #0]
 8016f2e:	e7d7      	b.n	8016ee0 <_free_r+0x24>
 8016f30:	d902      	bls.n	8016f38 <_free_r+0x7c>
 8016f32:	230c      	movs	r3, #12
 8016f34:	602b      	str	r3, [r5, #0]
 8016f36:	e7d3      	b.n	8016ee0 <_free_r+0x24>
 8016f38:	6820      	ldr	r0, [r4, #0]
 8016f3a:	1821      	adds	r1, r4, r0
 8016f3c:	428a      	cmp	r2, r1
 8016f3e:	bf04      	itt	eq
 8016f40:	6811      	ldreq	r1, [r2, #0]
 8016f42:	6852      	ldreq	r2, [r2, #4]
 8016f44:	6062      	str	r2, [r4, #4]
 8016f46:	bf04      	itt	eq
 8016f48:	1809      	addeq	r1, r1, r0
 8016f4a:	6021      	streq	r1, [r4, #0]
 8016f4c:	605c      	str	r4, [r3, #4]
 8016f4e:	e7c7      	b.n	8016ee0 <_free_r+0x24>
 8016f50:	bd38      	pop	{r3, r4, r5, pc}
 8016f52:	bf00      	nop
 8016f54:	200003f0 	.word	0x200003f0

08016f58 <_malloc_r>:
 8016f58:	b570      	push	{r4, r5, r6, lr}
 8016f5a:	1ccd      	adds	r5, r1, #3
 8016f5c:	f025 0503 	bic.w	r5, r5, #3
 8016f60:	3508      	adds	r5, #8
 8016f62:	2d0c      	cmp	r5, #12
 8016f64:	bf38      	it	cc
 8016f66:	250c      	movcc	r5, #12
 8016f68:	2d00      	cmp	r5, #0
 8016f6a:	4606      	mov	r6, r0
 8016f6c:	db01      	blt.n	8016f72 <_malloc_r+0x1a>
 8016f6e:	42a9      	cmp	r1, r5
 8016f70:	d903      	bls.n	8016f7a <_malloc_r+0x22>
 8016f72:	230c      	movs	r3, #12
 8016f74:	6033      	str	r3, [r6, #0]
 8016f76:	2000      	movs	r0, #0
 8016f78:	bd70      	pop	{r4, r5, r6, pc}
 8016f7a:	f000 fba5 	bl	80176c8 <__malloc_lock>
 8016f7e:	4a21      	ldr	r2, [pc, #132]	; (8017004 <_malloc_r+0xac>)
 8016f80:	6814      	ldr	r4, [r2, #0]
 8016f82:	4621      	mov	r1, r4
 8016f84:	b991      	cbnz	r1, 8016fac <_malloc_r+0x54>
 8016f86:	4c20      	ldr	r4, [pc, #128]	; (8017008 <_malloc_r+0xb0>)
 8016f88:	6823      	ldr	r3, [r4, #0]
 8016f8a:	b91b      	cbnz	r3, 8016f94 <_malloc_r+0x3c>
 8016f8c:	4630      	mov	r0, r6
 8016f8e:	f000 f8ed 	bl	801716c <_sbrk_r>
 8016f92:	6020      	str	r0, [r4, #0]
 8016f94:	4629      	mov	r1, r5
 8016f96:	4630      	mov	r0, r6
 8016f98:	f000 f8e8 	bl	801716c <_sbrk_r>
 8016f9c:	1c43      	adds	r3, r0, #1
 8016f9e:	d124      	bne.n	8016fea <_malloc_r+0x92>
 8016fa0:	230c      	movs	r3, #12
 8016fa2:	6033      	str	r3, [r6, #0]
 8016fa4:	4630      	mov	r0, r6
 8016fa6:	f000 fb90 	bl	80176ca <__malloc_unlock>
 8016faa:	e7e4      	b.n	8016f76 <_malloc_r+0x1e>
 8016fac:	680b      	ldr	r3, [r1, #0]
 8016fae:	1b5b      	subs	r3, r3, r5
 8016fb0:	d418      	bmi.n	8016fe4 <_malloc_r+0x8c>
 8016fb2:	2b0b      	cmp	r3, #11
 8016fb4:	d90f      	bls.n	8016fd6 <_malloc_r+0x7e>
 8016fb6:	600b      	str	r3, [r1, #0]
 8016fb8:	50cd      	str	r5, [r1, r3]
 8016fba:	18cc      	adds	r4, r1, r3
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	f000 fb84 	bl	80176ca <__malloc_unlock>
 8016fc2:	f104 000b 	add.w	r0, r4, #11
 8016fc6:	1d23      	adds	r3, r4, #4
 8016fc8:	f020 0007 	bic.w	r0, r0, #7
 8016fcc:	1ac3      	subs	r3, r0, r3
 8016fce:	d0d3      	beq.n	8016f78 <_malloc_r+0x20>
 8016fd0:	425a      	negs	r2, r3
 8016fd2:	50e2      	str	r2, [r4, r3]
 8016fd4:	e7d0      	b.n	8016f78 <_malloc_r+0x20>
 8016fd6:	428c      	cmp	r4, r1
 8016fd8:	684b      	ldr	r3, [r1, #4]
 8016fda:	bf16      	itet	ne
 8016fdc:	6063      	strne	r3, [r4, #4]
 8016fde:	6013      	streq	r3, [r2, #0]
 8016fe0:	460c      	movne	r4, r1
 8016fe2:	e7eb      	b.n	8016fbc <_malloc_r+0x64>
 8016fe4:	460c      	mov	r4, r1
 8016fe6:	6849      	ldr	r1, [r1, #4]
 8016fe8:	e7cc      	b.n	8016f84 <_malloc_r+0x2c>
 8016fea:	1cc4      	adds	r4, r0, #3
 8016fec:	f024 0403 	bic.w	r4, r4, #3
 8016ff0:	42a0      	cmp	r0, r4
 8016ff2:	d005      	beq.n	8017000 <_malloc_r+0xa8>
 8016ff4:	1a21      	subs	r1, r4, r0
 8016ff6:	4630      	mov	r0, r6
 8016ff8:	f000 f8b8 	bl	801716c <_sbrk_r>
 8016ffc:	3001      	adds	r0, #1
 8016ffe:	d0cf      	beq.n	8016fa0 <_malloc_r+0x48>
 8017000:	6025      	str	r5, [r4, #0]
 8017002:	e7db      	b.n	8016fbc <_malloc_r+0x64>
 8017004:	200003f0 	.word	0x200003f0
 8017008:	200003f4 	.word	0x200003f4

0801700c <iprintf>:
 801700c:	b40f      	push	{r0, r1, r2, r3}
 801700e:	4b0a      	ldr	r3, [pc, #40]	; (8017038 <iprintf+0x2c>)
 8017010:	b513      	push	{r0, r1, r4, lr}
 8017012:	681c      	ldr	r4, [r3, #0]
 8017014:	b124      	cbz	r4, 8017020 <iprintf+0x14>
 8017016:	69a3      	ldr	r3, [r4, #24]
 8017018:	b913      	cbnz	r3, 8017020 <iprintf+0x14>
 801701a:	4620      	mov	r0, r4
 801701c:	f000 fa66 	bl	80174ec <__sinit>
 8017020:	ab05      	add	r3, sp, #20
 8017022:	9a04      	ldr	r2, [sp, #16]
 8017024:	68a1      	ldr	r1, [r4, #8]
 8017026:	9301      	str	r3, [sp, #4]
 8017028:	4620      	mov	r0, r4
 801702a:	f000 fb79 	bl	8017720 <_vfiprintf_r>
 801702e:	b002      	add	sp, #8
 8017030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017034:	b004      	add	sp, #16
 8017036:	4770      	bx	lr
 8017038:	2000018c 	.word	0x2000018c

0801703c <_puts_r>:
 801703c:	b570      	push	{r4, r5, r6, lr}
 801703e:	460e      	mov	r6, r1
 8017040:	4605      	mov	r5, r0
 8017042:	b118      	cbz	r0, 801704c <_puts_r+0x10>
 8017044:	6983      	ldr	r3, [r0, #24]
 8017046:	b90b      	cbnz	r3, 801704c <_puts_r+0x10>
 8017048:	f000 fa50 	bl	80174ec <__sinit>
 801704c:	69ab      	ldr	r3, [r5, #24]
 801704e:	68ac      	ldr	r4, [r5, #8]
 8017050:	b913      	cbnz	r3, 8017058 <_puts_r+0x1c>
 8017052:	4628      	mov	r0, r5
 8017054:	f000 fa4a 	bl	80174ec <__sinit>
 8017058:	4b23      	ldr	r3, [pc, #140]	; (80170e8 <_puts_r+0xac>)
 801705a:	429c      	cmp	r4, r3
 801705c:	d117      	bne.n	801708e <_puts_r+0x52>
 801705e:	686c      	ldr	r4, [r5, #4]
 8017060:	89a3      	ldrh	r3, [r4, #12]
 8017062:	071b      	lsls	r3, r3, #28
 8017064:	d51d      	bpl.n	80170a2 <_puts_r+0x66>
 8017066:	6923      	ldr	r3, [r4, #16]
 8017068:	b1db      	cbz	r3, 80170a2 <_puts_r+0x66>
 801706a:	3e01      	subs	r6, #1
 801706c:	68a3      	ldr	r3, [r4, #8]
 801706e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017072:	3b01      	subs	r3, #1
 8017074:	60a3      	str	r3, [r4, #8]
 8017076:	b9e9      	cbnz	r1, 80170b4 <_puts_r+0x78>
 8017078:	2b00      	cmp	r3, #0
 801707a:	da2e      	bge.n	80170da <_puts_r+0x9e>
 801707c:	4622      	mov	r2, r4
 801707e:	210a      	movs	r1, #10
 8017080:	4628      	mov	r0, r5
 8017082:	f000 f883 	bl	801718c <__swbuf_r>
 8017086:	3001      	adds	r0, #1
 8017088:	d011      	beq.n	80170ae <_puts_r+0x72>
 801708a:	200a      	movs	r0, #10
 801708c:	e011      	b.n	80170b2 <_puts_r+0x76>
 801708e:	4b17      	ldr	r3, [pc, #92]	; (80170ec <_puts_r+0xb0>)
 8017090:	429c      	cmp	r4, r3
 8017092:	d101      	bne.n	8017098 <_puts_r+0x5c>
 8017094:	68ac      	ldr	r4, [r5, #8]
 8017096:	e7e3      	b.n	8017060 <_puts_r+0x24>
 8017098:	4b15      	ldr	r3, [pc, #84]	; (80170f0 <_puts_r+0xb4>)
 801709a:	429c      	cmp	r4, r3
 801709c:	bf08      	it	eq
 801709e:	68ec      	ldreq	r4, [r5, #12]
 80170a0:	e7de      	b.n	8017060 <_puts_r+0x24>
 80170a2:	4621      	mov	r1, r4
 80170a4:	4628      	mov	r0, r5
 80170a6:	f000 f8c3 	bl	8017230 <__swsetup_r>
 80170aa:	2800      	cmp	r0, #0
 80170ac:	d0dd      	beq.n	801706a <_puts_r+0x2e>
 80170ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170b2:	bd70      	pop	{r4, r5, r6, pc}
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	da04      	bge.n	80170c2 <_puts_r+0x86>
 80170b8:	69a2      	ldr	r2, [r4, #24]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	dc06      	bgt.n	80170cc <_puts_r+0x90>
 80170be:	290a      	cmp	r1, #10
 80170c0:	d004      	beq.n	80170cc <_puts_r+0x90>
 80170c2:	6823      	ldr	r3, [r4, #0]
 80170c4:	1c5a      	adds	r2, r3, #1
 80170c6:	6022      	str	r2, [r4, #0]
 80170c8:	7019      	strb	r1, [r3, #0]
 80170ca:	e7cf      	b.n	801706c <_puts_r+0x30>
 80170cc:	4622      	mov	r2, r4
 80170ce:	4628      	mov	r0, r5
 80170d0:	f000 f85c 	bl	801718c <__swbuf_r>
 80170d4:	3001      	adds	r0, #1
 80170d6:	d1c9      	bne.n	801706c <_puts_r+0x30>
 80170d8:	e7e9      	b.n	80170ae <_puts_r+0x72>
 80170da:	6823      	ldr	r3, [r4, #0]
 80170dc:	200a      	movs	r0, #10
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	6022      	str	r2, [r4, #0]
 80170e2:	7018      	strb	r0, [r3, #0]
 80170e4:	e7e5      	b.n	80170b2 <_puts_r+0x76>
 80170e6:	bf00      	nop
 80170e8:	0801b394 	.word	0x0801b394
 80170ec:	0801b3b4 	.word	0x0801b3b4
 80170f0:	0801b374 	.word	0x0801b374

080170f4 <puts>:
 80170f4:	4b02      	ldr	r3, [pc, #8]	; (8017100 <puts+0xc>)
 80170f6:	4601      	mov	r1, r0
 80170f8:	6818      	ldr	r0, [r3, #0]
 80170fa:	f7ff bf9f 	b.w	801703c <_puts_r>
 80170fe:	bf00      	nop
 8017100:	2000018c 	.word	0x2000018c

08017104 <rand>:
 8017104:	b538      	push	{r3, r4, r5, lr}
 8017106:	4b13      	ldr	r3, [pc, #76]	; (8017154 <rand+0x50>)
 8017108:	681c      	ldr	r4, [r3, #0]
 801710a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801710c:	b97b      	cbnz	r3, 801712e <rand+0x2a>
 801710e:	2018      	movs	r0, #24
 8017110:	f7ff fea2 	bl	8016e58 <malloc>
 8017114:	4a10      	ldr	r2, [pc, #64]	; (8017158 <rand+0x54>)
 8017116:	4b11      	ldr	r3, [pc, #68]	; (801715c <rand+0x58>)
 8017118:	63a0      	str	r0, [r4, #56]	; 0x38
 801711a:	e9c0 2300 	strd	r2, r3, [r0]
 801711e:	4b10      	ldr	r3, [pc, #64]	; (8017160 <rand+0x5c>)
 8017120:	6083      	str	r3, [r0, #8]
 8017122:	230b      	movs	r3, #11
 8017124:	8183      	strh	r3, [r0, #12]
 8017126:	2201      	movs	r2, #1
 8017128:	2300      	movs	r3, #0
 801712a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801712e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017130:	480c      	ldr	r0, [pc, #48]	; (8017164 <rand+0x60>)
 8017132:	690a      	ldr	r2, [r1, #16]
 8017134:	694b      	ldr	r3, [r1, #20]
 8017136:	4c0c      	ldr	r4, [pc, #48]	; (8017168 <rand+0x64>)
 8017138:	4350      	muls	r0, r2
 801713a:	fb04 0003 	mla	r0, r4, r3, r0
 801713e:	fba2 2304 	umull	r2, r3, r2, r4
 8017142:	4403      	add	r3, r0
 8017144:	1c54      	adds	r4, r2, #1
 8017146:	f143 0500 	adc.w	r5, r3, #0
 801714a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801714e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017152:	bd38      	pop	{r3, r4, r5, pc}
 8017154:	2000018c 	.word	0x2000018c
 8017158:	abcd330e 	.word	0xabcd330e
 801715c:	e66d1234 	.word	0xe66d1234
 8017160:	0005deec 	.word	0x0005deec
 8017164:	5851f42d 	.word	0x5851f42d
 8017168:	4c957f2d 	.word	0x4c957f2d

0801716c <_sbrk_r>:
 801716c:	b538      	push	{r3, r4, r5, lr}
 801716e:	4c06      	ldr	r4, [pc, #24]	; (8017188 <_sbrk_r+0x1c>)
 8017170:	2300      	movs	r3, #0
 8017172:	4605      	mov	r5, r0
 8017174:	4608      	mov	r0, r1
 8017176:	6023      	str	r3, [r4, #0]
 8017178:	f7fe fbf4 	bl	8015964 <_sbrk>
 801717c:	1c43      	adds	r3, r0, #1
 801717e:	d102      	bne.n	8017186 <_sbrk_r+0x1a>
 8017180:	6823      	ldr	r3, [r4, #0]
 8017182:	b103      	cbz	r3, 8017186 <_sbrk_r+0x1a>
 8017184:	602b      	str	r3, [r5, #0]
 8017186:	bd38      	pop	{r3, r4, r5, pc}
 8017188:	20009168 	.word	0x20009168

0801718c <__swbuf_r>:
 801718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801718e:	460e      	mov	r6, r1
 8017190:	4614      	mov	r4, r2
 8017192:	4605      	mov	r5, r0
 8017194:	b118      	cbz	r0, 801719e <__swbuf_r+0x12>
 8017196:	6983      	ldr	r3, [r0, #24]
 8017198:	b90b      	cbnz	r3, 801719e <__swbuf_r+0x12>
 801719a:	f000 f9a7 	bl	80174ec <__sinit>
 801719e:	4b21      	ldr	r3, [pc, #132]	; (8017224 <__swbuf_r+0x98>)
 80171a0:	429c      	cmp	r4, r3
 80171a2:	d12a      	bne.n	80171fa <__swbuf_r+0x6e>
 80171a4:	686c      	ldr	r4, [r5, #4]
 80171a6:	69a3      	ldr	r3, [r4, #24]
 80171a8:	60a3      	str	r3, [r4, #8]
 80171aa:	89a3      	ldrh	r3, [r4, #12]
 80171ac:	071a      	lsls	r2, r3, #28
 80171ae:	d52e      	bpl.n	801720e <__swbuf_r+0x82>
 80171b0:	6923      	ldr	r3, [r4, #16]
 80171b2:	b363      	cbz	r3, 801720e <__swbuf_r+0x82>
 80171b4:	6923      	ldr	r3, [r4, #16]
 80171b6:	6820      	ldr	r0, [r4, #0]
 80171b8:	1ac0      	subs	r0, r0, r3
 80171ba:	6963      	ldr	r3, [r4, #20]
 80171bc:	b2f6      	uxtb	r6, r6
 80171be:	4283      	cmp	r3, r0
 80171c0:	4637      	mov	r7, r6
 80171c2:	dc04      	bgt.n	80171ce <__swbuf_r+0x42>
 80171c4:	4621      	mov	r1, r4
 80171c6:	4628      	mov	r0, r5
 80171c8:	f000 f926 	bl	8017418 <_fflush_r>
 80171cc:	bb28      	cbnz	r0, 801721a <__swbuf_r+0x8e>
 80171ce:	68a3      	ldr	r3, [r4, #8]
 80171d0:	3b01      	subs	r3, #1
 80171d2:	60a3      	str	r3, [r4, #8]
 80171d4:	6823      	ldr	r3, [r4, #0]
 80171d6:	1c5a      	adds	r2, r3, #1
 80171d8:	6022      	str	r2, [r4, #0]
 80171da:	701e      	strb	r6, [r3, #0]
 80171dc:	6963      	ldr	r3, [r4, #20]
 80171de:	3001      	adds	r0, #1
 80171e0:	4283      	cmp	r3, r0
 80171e2:	d004      	beq.n	80171ee <__swbuf_r+0x62>
 80171e4:	89a3      	ldrh	r3, [r4, #12]
 80171e6:	07db      	lsls	r3, r3, #31
 80171e8:	d519      	bpl.n	801721e <__swbuf_r+0x92>
 80171ea:	2e0a      	cmp	r6, #10
 80171ec:	d117      	bne.n	801721e <__swbuf_r+0x92>
 80171ee:	4621      	mov	r1, r4
 80171f0:	4628      	mov	r0, r5
 80171f2:	f000 f911 	bl	8017418 <_fflush_r>
 80171f6:	b190      	cbz	r0, 801721e <__swbuf_r+0x92>
 80171f8:	e00f      	b.n	801721a <__swbuf_r+0x8e>
 80171fa:	4b0b      	ldr	r3, [pc, #44]	; (8017228 <__swbuf_r+0x9c>)
 80171fc:	429c      	cmp	r4, r3
 80171fe:	d101      	bne.n	8017204 <__swbuf_r+0x78>
 8017200:	68ac      	ldr	r4, [r5, #8]
 8017202:	e7d0      	b.n	80171a6 <__swbuf_r+0x1a>
 8017204:	4b09      	ldr	r3, [pc, #36]	; (801722c <__swbuf_r+0xa0>)
 8017206:	429c      	cmp	r4, r3
 8017208:	bf08      	it	eq
 801720a:	68ec      	ldreq	r4, [r5, #12]
 801720c:	e7cb      	b.n	80171a6 <__swbuf_r+0x1a>
 801720e:	4621      	mov	r1, r4
 8017210:	4628      	mov	r0, r5
 8017212:	f000 f80d 	bl	8017230 <__swsetup_r>
 8017216:	2800      	cmp	r0, #0
 8017218:	d0cc      	beq.n	80171b4 <__swbuf_r+0x28>
 801721a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801721e:	4638      	mov	r0, r7
 8017220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017222:	bf00      	nop
 8017224:	0801b394 	.word	0x0801b394
 8017228:	0801b3b4 	.word	0x0801b3b4
 801722c:	0801b374 	.word	0x0801b374

08017230 <__swsetup_r>:
 8017230:	4b32      	ldr	r3, [pc, #200]	; (80172fc <__swsetup_r+0xcc>)
 8017232:	b570      	push	{r4, r5, r6, lr}
 8017234:	681d      	ldr	r5, [r3, #0]
 8017236:	4606      	mov	r6, r0
 8017238:	460c      	mov	r4, r1
 801723a:	b125      	cbz	r5, 8017246 <__swsetup_r+0x16>
 801723c:	69ab      	ldr	r3, [r5, #24]
 801723e:	b913      	cbnz	r3, 8017246 <__swsetup_r+0x16>
 8017240:	4628      	mov	r0, r5
 8017242:	f000 f953 	bl	80174ec <__sinit>
 8017246:	4b2e      	ldr	r3, [pc, #184]	; (8017300 <__swsetup_r+0xd0>)
 8017248:	429c      	cmp	r4, r3
 801724a:	d10f      	bne.n	801726c <__swsetup_r+0x3c>
 801724c:	686c      	ldr	r4, [r5, #4]
 801724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017252:	b29a      	uxth	r2, r3
 8017254:	0715      	lsls	r5, r2, #28
 8017256:	d42c      	bmi.n	80172b2 <__swsetup_r+0x82>
 8017258:	06d0      	lsls	r0, r2, #27
 801725a:	d411      	bmi.n	8017280 <__swsetup_r+0x50>
 801725c:	2209      	movs	r2, #9
 801725e:	6032      	str	r2, [r6, #0]
 8017260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801726a:	e03e      	b.n	80172ea <__swsetup_r+0xba>
 801726c:	4b25      	ldr	r3, [pc, #148]	; (8017304 <__swsetup_r+0xd4>)
 801726e:	429c      	cmp	r4, r3
 8017270:	d101      	bne.n	8017276 <__swsetup_r+0x46>
 8017272:	68ac      	ldr	r4, [r5, #8]
 8017274:	e7eb      	b.n	801724e <__swsetup_r+0x1e>
 8017276:	4b24      	ldr	r3, [pc, #144]	; (8017308 <__swsetup_r+0xd8>)
 8017278:	429c      	cmp	r4, r3
 801727a:	bf08      	it	eq
 801727c:	68ec      	ldreq	r4, [r5, #12]
 801727e:	e7e6      	b.n	801724e <__swsetup_r+0x1e>
 8017280:	0751      	lsls	r1, r2, #29
 8017282:	d512      	bpl.n	80172aa <__swsetup_r+0x7a>
 8017284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017286:	b141      	cbz	r1, 801729a <__swsetup_r+0x6a>
 8017288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801728c:	4299      	cmp	r1, r3
 801728e:	d002      	beq.n	8017296 <__swsetup_r+0x66>
 8017290:	4630      	mov	r0, r6
 8017292:	f7ff fe13 	bl	8016ebc <_free_r>
 8017296:	2300      	movs	r3, #0
 8017298:	6363      	str	r3, [r4, #52]	; 0x34
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80172a0:	81a3      	strh	r3, [r4, #12]
 80172a2:	2300      	movs	r3, #0
 80172a4:	6063      	str	r3, [r4, #4]
 80172a6:	6923      	ldr	r3, [r4, #16]
 80172a8:	6023      	str	r3, [r4, #0]
 80172aa:	89a3      	ldrh	r3, [r4, #12]
 80172ac:	f043 0308 	orr.w	r3, r3, #8
 80172b0:	81a3      	strh	r3, [r4, #12]
 80172b2:	6923      	ldr	r3, [r4, #16]
 80172b4:	b94b      	cbnz	r3, 80172ca <__swsetup_r+0x9a>
 80172b6:	89a3      	ldrh	r3, [r4, #12]
 80172b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80172bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80172c0:	d003      	beq.n	80172ca <__swsetup_r+0x9a>
 80172c2:	4621      	mov	r1, r4
 80172c4:	4630      	mov	r0, r6
 80172c6:	f000 f9bf 	bl	8017648 <__smakebuf_r>
 80172ca:	89a2      	ldrh	r2, [r4, #12]
 80172cc:	f012 0301 	ands.w	r3, r2, #1
 80172d0:	d00c      	beq.n	80172ec <__swsetup_r+0xbc>
 80172d2:	2300      	movs	r3, #0
 80172d4:	60a3      	str	r3, [r4, #8]
 80172d6:	6963      	ldr	r3, [r4, #20]
 80172d8:	425b      	negs	r3, r3
 80172da:	61a3      	str	r3, [r4, #24]
 80172dc:	6923      	ldr	r3, [r4, #16]
 80172de:	b953      	cbnz	r3, 80172f6 <__swsetup_r+0xc6>
 80172e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80172e8:	d1ba      	bne.n	8017260 <__swsetup_r+0x30>
 80172ea:	bd70      	pop	{r4, r5, r6, pc}
 80172ec:	0792      	lsls	r2, r2, #30
 80172ee:	bf58      	it	pl
 80172f0:	6963      	ldrpl	r3, [r4, #20]
 80172f2:	60a3      	str	r3, [r4, #8]
 80172f4:	e7f2      	b.n	80172dc <__swsetup_r+0xac>
 80172f6:	2000      	movs	r0, #0
 80172f8:	e7f7      	b.n	80172ea <__swsetup_r+0xba>
 80172fa:	bf00      	nop
 80172fc:	2000018c 	.word	0x2000018c
 8017300:	0801b394 	.word	0x0801b394
 8017304:	0801b3b4 	.word	0x0801b3b4
 8017308:	0801b374 	.word	0x0801b374

0801730c <__sflush_r>:
 801730c:	898a      	ldrh	r2, [r1, #12]
 801730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017312:	4605      	mov	r5, r0
 8017314:	0710      	lsls	r0, r2, #28
 8017316:	460c      	mov	r4, r1
 8017318:	d458      	bmi.n	80173cc <__sflush_r+0xc0>
 801731a:	684b      	ldr	r3, [r1, #4]
 801731c:	2b00      	cmp	r3, #0
 801731e:	dc05      	bgt.n	801732c <__sflush_r+0x20>
 8017320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017322:	2b00      	cmp	r3, #0
 8017324:	dc02      	bgt.n	801732c <__sflush_r+0x20>
 8017326:	2000      	movs	r0, #0
 8017328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801732c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801732e:	2e00      	cmp	r6, #0
 8017330:	d0f9      	beq.n	8017326 <__sflush_r+0x1a>
 8017332:	2300      	movs	r3, #0
 8017334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017338:	682f      	ldr	r7, [r5, #0]
 801733a:	6a21      	ldr	r1, [r4, #32]
 801733c:	602b      	str	r3, [r5, #0]
 801733e:	d032      	beq.n	80173a6 <__sflush_r+0x9a>
 8017340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017342:	89a3      	ldrh	r3, [r4, #12]
 8017344:	075a      	lsls	r2, r3, #29
 8017346:	d505      	bpl.n	8017354 <__sflush_r+0x48>
 8017348:	6863      	ldr	r3, [r4, #4]
 801734a:	1ac0      	subs	r0, r0, r3
 801734c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801734e:	b10b      	cbz	r3, 8017354 <__sflush_r+0x48>
 8017350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017352:	1ac0      	subs	r0, r0, r3
 8017354:	2300      	movs	r3, #0
 8017356:	4602      	mov	r2, r0
 8017358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801735a:	6a21      	ldr	r1, [r4, #32]
 801735c:	4628      	mov	r0, r5
 801735e:	47b0      	blx	r6
 8017360:	1c43      	adds	r3, r0, #1
 8017362:	89a3      	ldrh	r3, [r4, #12]
 8017364:	d106      	bne.n	8017374 <__sflush_r+0x68>
 8017366:	6829      	ldr	r1, [r5, #0]
 8017368:	291d      	cmp	r1, #29
 801736a:	d848      	bhi.n	80173fe <__sflush_r+0xf2>
 801736c:	4a29      	ldr	r2, [pc, #164]	; (8017414 <__sflush_r+0x108>)
 801736e:	40ca      	lsrs	r2, r1
 8017370:	07d6      	lsls	r6, r2, #31
 8017372:	d544      	bpl.n	80173fe <__sflush_r+0xf2>
 8017374:	2200      	movs	r2, #0
 8017376:	6062      	str	r2, [r4, #4]
 8017378:	04d9      	lsls	r1, r3, #19
 801737a:	6922      	ldr	r2, [r4, #16]
 801737c:	6022      	str	r2, [r4, #0]
 801737e:	d504      	bpl.n	801738a <__sflush_r+0x7e>
 8017380:	1c42      	adds	r2, r0, #1
 8017382:	d101      	bne.n	8017388 <__sflush_r+0x7c>
 8017384:	682b      	ldr	r3, [r5, #0]
 8017386:	b903      	cbnz	r3, 801738a <__sflush_r+0x7e>
 8017388:	6560      	str	r0, [r4, #84]	; 0x54
 801738a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801738c:	602f      	str	r7, [r5, #0]
 801738e:	2900      	cmp	r1, #0
 8017390:	d0c9      	beq.n	8017326 <__sflush_r+0x1a>
 8017392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017396:	4299      	cmp	r1, r3
 8017398:	d002      	beq.n	80173a0 <__sflush_r+0x94>
 801739a:	4628      	mov	r0, r5
 801739c:	f7ff fd8e 	bl	8016ebc <_free_r>
 80173a0:	2000      	movs	r0, #0
 80173a2:	6360      	str	r0, [r4, #52]	; 0x34
 80173a4:	e7c0      	b.n	8017328 <__sflush_r+0x1c>
 80173a6:	2301      	movs	r3, #1
 80173a8:	4628      	mov	r0, r5
 80173aa:	47b0      	blx	r6
 80173ac:	1c41      	adds	r1, r0, #1
 80173ae:	d1c8      	bne.n	8017342 <__sflush_r+0x36>
 80173b0:	682b      	ldr	r3, [r5, #0]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d0c5      	beq.n	8017342 <__sflush_r+0x36>
 80173b6:	2b1d      	cmp	r3, #29
 80173b8:	d001      	beq.n	80173be <__sflush_r+0xb2>
 80173ba:	2b16      	cmp	r3, #22
 80173bc:	d101      	bne.n	80173c2 <__sflush_r+0xb6>
 80173be:	602f      	str	r7, [r5, #0]
 80173c0:	e7b1      	b.n	8017326 <__sflush_r+0x1a>
 80173c2:	89a3      	ldrh	r3, [r4, #12]
 80173c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173c8:	81a3      	strh	r3, [r4, #12]
 80173ca:	e7ad      	b.n	8017328 <__sflush_r+0x1c>
 80173cc:	690f      	ldr	r7, [r1, #16]
 80173ce:	2f00      	cmp	r7, #0
 80173d0:	d0a9      	beq.n	8017326 <__sflush_r+0x1a>
 80173d2:	0793      	lsls	r3, r2, #30
 80173d4:	680e      	ldr	r6, [r1, #0]
 80173d6:	bf08      	it	eq
 80173d8:	694b      	ldreq	r3, [r1, #20]
 80173da:	600f      	str	r7, [r1, #0]
 80173dc:	bf18      	it	ne
 80173de:	2300      	movne	r3, #0
 80173e0:	eba6 0807 	sub.w	r8, r6, r7
 80173e4:	608b      	str	r3, [r1, #8]
 80173e6:	f1b8 0f00 	cmp.w	r8, #0
 80173ea:	dd9c      	ble.n	8017326 <__sflush_r+0x1a>
 80173ec:	4643      	mov	r3, r8
 80173ee:	463a      	mov	r2, r7
 80173f0:	6a21      	ldr	r1, [r4, #32]
 80173f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80173f4:	4628      	mov	r0, r5
 80173f6:	47b0      	blx	r6
 80173f8:	2800      	cmp	r0, #0
 80173fa:	dc06      	bgt.n	801740a <__sflush_r+0xfe>
 80173fc:	89a3      	ldrh	r3, [r4, #12]
 80173fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017402:	81a3      	strh	r3, [r4, #12]
 8017404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017408:	e78e      	b.n	8017328 <__sflush_r+0x1c>
 801740a:	4407      	add	r7, r0
 801740c:	eba8 0800 	sub.w	r8, r8, r0
 8017410:	e7e9      	b.n	80173e6 <__sflush_r+0xda>
 8017412:	bf00      	nop
 8017414:	20400001 	.word	0x20400001

08017418 <_fflush_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	690b      	ldr	r3, [r1, #16]
 801741c:	4605      	mov	r5, r0
 801741e:	460c      	mov	r4, r1
 8017420:	b1db      	cbz	r3, 801745a <_fflush_r+0x42>
 8017422:	b118      	cbz	r0, 801742c <_fflush_r+0x14>
 8017424:	6983      	ldr	r3, [r0, #24]
 8017426:	b90b      	cbnz	r3, 801742c <_fflush_r+0x14>
 8017428:	f000 f860 	bl	80174ec <__sinit>
 801742c:	4b0c      	ldr	r3, [pc, #48]	; (8017460 <_fflush_r+0x48>)
 801742e:	429c      	cmp	r4, r3
 8017430:	d109      	bne.n	8017446 <_fflush_r+0x2e>
 8017432:	686c      	ldr	r4, [r5, #4]
 8017434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017438:	b17b      	cbz	r3, 801745a <_fflush_r+0x42>
 801743a:	4621      	mov	r1, r4
 801743c:	4628      	mov	r0, r5
 801743e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017442:	f7ff bf63 	b.w	801730c <__sflush_r>
 8017446:	4b07      	ldr	r3, [pc, #28]	; (8017464 <_fflush_r+0x4c>)
 8017448:	429c      	cmp	r4, r3
 801744a:	d101      	bne.n	8017450 <_fflush_r+0x38>
 801744c:	68ac      	ldr	r4, [r5, #8]
 801744e:	e7f1      	b.n	8017434 <_fflush_r+0x1c>
 8017450:	4b05      	ldr	r3, [pc, #20]	; (8017468 <_fflush_r+0x50>)
 8017452:	429c      	cmp	r4, r3
 8017454:	bf08      	it	eq
 8017456:	68ec      	ldreq	r4, [r5, #12]
 8017458:	e7ec      	b.n	8017434 <_fflush_r+0x1c>
 801745a:	2000      	movs	r0, #0
 801745c:	bd38      	pop	{r3, r4, r5, pc}
 801745e:	bf00      	nop
 8017460:	0801b394 	.word	0x0801b394
 8017464:	0801b3b4 	.word	0x0801b3b4
 8017468:	0801b374 	.word	0x0801b374

0801746c <std>:
 801746c:	2300      	movs	r3, #0
 801746e:	b510      	push	{r4, lr}
 8017470:	4604      	mov	r4, r0
 8017472:	e9c0 3300 	strd	r3, r3, [r0]
 8017476:	6083      	str	r3, [r0, #8]
 8017478:	8181      	strh	r1, [r0, #12]
 801747a:	6643      	str	r3, [r0, #100]	; 0x64
 801747c:	81c2      	strh	r2, [r0, #14]
 801747e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017482:	6183      	str	r3, [r0, #24]
 8017484:	4619      	mov	r1, r3
 8017486:	2208      	movs	r2, #8
 8017488:	305c      	adds	r0, #92	; 0x5c
 801748a:	f7ff fd0f 	bl	8016eac <memset>
 801748e:	4b05      	ldr	r3, [pc, #20]	; (80174a4 <std+0x38>)
 8017490:	6263      	str	r3, [r4, #36]	; 0x24
 8017492:	4b05      	ldr	r3, [pc, #20]	; (80174a8 <std+0x3c>)
 8017494:	62a3      	str	r3, [r4, #40]	; 0x28
 8017496:	4b05      	ldr	r3, [pc, #20]	; (80174ac <std+0x40>)
 8017498:	62e3      	str	r3, [r4, #44]	; 0x2c
 801749a:	4b05      	ldr	r3, [pc, #20]	; (80174b0 <std+0x44>)
 801749c:	6224      	str	r4, [r4, #32]
 801749e:	6323      	str	r3, [r4, #48]	; 0x30
 80174a0:	bd10      	pop	{r4, pc}
 80174a2:	bf00      	nop
 80174a4:	08017c5d 	.word	0x08017c5d
 80174a8:	08017c7f 	.word	0x08017c7f
 80174ac:	08017cb7 	.word	0x08017cb7
 80174b0:	08017cdb 	.word	0x08017cdb

080174b4 <_cleanup_r>:
 80174b4:	4901      	ldr	r1, [pc, #4]	; (80174bc <_cleanup_r+0x8>)
 80174b6:	f000 b885 	b.w	80175c4 <_fwalk_reent>
 80174ba:	bf00      	nop
 80174bc:	08017419 	.word	0x08017419

080174c0 <__sfmoreglue>:
 80174c0:	b570      	push	{r4, r5, r6, lr}
 80174c2:	1e4a      	subs	r2, r1, #1
 80174c4:	2568      	movs	r5, #104	; 0x68
 80174c6:	4355      	muls	r5, r2
 80174c8:	460e      	mov	r6, r1
 80174ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80174ce:	f7ff fd43 	bl	8016f58 <_malloc_r>
 80174d2:	4604      	mov	r4, r0
 80174d4:	b140      	cbz	r0, 80174e8 <__sfmoreglue+0x28>
 80174d6:	2100      	movs	r1, #0
 80174d8:	e9c0 1600 	strd	r1, r6, [r0]
 80174dc:	300c      	adds	r0, #12
 80174de:	60a0      	str	r0, [r4, #8]
 80174e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80174e4:	f7ff fce2 	bl	8016eac <memset>
 80174e8:	4620      	mov	r0, r4
 80174ea:	bd70      	pop	{r4, r5, r6, pc}

080174ec <__sinit>:
 80174ec:	6983      	ldr	r3, [r0, #24]
 80174ee:	b510      	push	{r4, lr}
 80174f0:	4604      	mov	r4, r0
 80174f2:	bb33      	cbnz	r3, 8017542 <__sinit+0x56>
 80174f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80174f8:	6503      	str	r3, [r0, #80]	; 0x50
 80174fa:	4b12      	ldr	r3, [pc, #72]	; (8017544 <__sinit+0x58>)
 80174fc:	4a12      	ldr	r2, [pc, #72]	; (8017548 <__sinit+0x5c>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	6282      	str	r2, [r0, #40]	; 0x28
 8017502:	4298      	cmp	r0, r3
 8017504:	bf04      	itt	eq
 8017506:	2301      	moveq	r3, #1
 8017508:	6183      	streq	r3, [r0, #24]
 801750a:	f000 f81f 	bl	801754c <__sfp>
 801750e:	6060      	str	r0, [r4, #4]
 8017510:	4620      	mov	r0, r4
 8017512:	f000 f81b 	bl	801754c <__sfp>
 8017516:	60a0      	str	r0, [r4, #8]
 8017518:	4620      	mov	r0, r4
 801751a:	f000 f817 	bl	801754c <__sfp>
 801751e:	2200      	movs	r2, #0
 8017520:	60e0      	str	r0, [r4, #12]
 8017522:	2104      	movs	r1, #4
 8017524:	6860      	ldr	r0, [r4, #4]
 8017526:	f7ff ffa1 	bl	801746c <std>
 801752a:	2201      	movs	r2, #1
 801752c:	2109      	movs	r1, #9
 801752e:	68a0      	ldr	r0, [r4, #8]
 8017530:	f7ff ff9c 	bl	801746c <std>
 8017534:	2202      	movs	r2, #2
 8017536:	2112      	movs	r1, #18
 8017538:	68e0      	ldr	r0, [r4, #12]
 801753a:	f7ff ff97 	bl	801746c <std>
 801753e:	2301      	movs	r3, #1
 8017540:	61a3      	str	r3, [r4, #24]
 8017542:	bd10      	pop	{r4, pc}
 8017544:	0801b370 	.word	0x0801b370
 8017548:	080174b5 	.word	0x080174b5

0801754c <__sfp>:
 801754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801754e:	4b1b      	ldr	r3, [pc, #108]	; (80175bc <__sfp+0x70>)
 8017550:	681e      	ldr	r6, [r3, #0]
 8017552:	69b3      	ldr	r3, [r6, #24]
 8017554:	4607      	mov	r7, r0
 8017556:	b913      	cbnz	r3, 801755e <__sfp+0x12>
 8017558:	4630      	mov	r0, r6
 801755a:	f7ff ffc7 	bl	80174ec <__sinit>
 801755e:	3648      	adds	r6, #72	; 0x48
 8017560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017564:	3b01      	subs	r3, #1
 8017566:	d503      	bpl.n	8017570 <__sfp+0x24>
 8017568:	6833      	ldr	r3, [r6, #0]
 801756a:	b133      	cbz	r3, 801757a <__sfp+0x2e>
 801756c:	6836      	ldr	r6, [r6, #0]
 801756e:	e7f7      	b.n	8017560 <__sfp+0x14>
 8017570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017574:	b16d      	cbz	r5, 8017592 <__sfp+0x46>
 8017576:	3468      	adds	r4, #104	; 0x68
 8017578:	e7f4      	b.n	8017564 <__sfp+0x18>
 801757a:	2104      	movs	r1, #4
 801757c:	4638      	mov	r0, r7
 801757e:	f7ff ff9f 	bl	80174c0 <__sfmoreglue>
 8017582:	6030      	str	r0, [r6, #0]
 8017584:	2800      	cmp	r0, #0
 8017586:	d1f1      	bne.n	801756c <__sfp+0x20>
 8017588:	230c      	movs	r3, #12
 801758a:	603b      	str	r3, [r7, #0]
 801758c:	4604      	mov	r4, r0
 801758e:	4620      	mov	r0, r4
 8017590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017592:	4b0b      	ldr	r3, [pc, #44]	; (80175c0 <__sfp+0x74>)
 8017594:	6665      	str	r5, [r4, #100]	; 0x64
 8017596:	e9c4 5500 	strd	r5, r5, [r4]
 801759a:	60a5      	str	r5, [r4, #8]
 801759c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80175a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80175a4:	2208      	movs	r2, #8
 80175a6:	4629      	mov	r1, r5
 80175a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80175ac:	f7ff fc7e 	bl	8016eac <memset>
 80175b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80175b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80175b8:	e7e9      	b.n	801758e <__sfp+0x42>
 80175ba:	bf00      	nop
 80175bc:	0801b370 	.word	0x0801b370
 80175c0:	ffff0001 	.word	0xffff0001

080175c4 <_fwalk_reent>:
 80175c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175c8:	4680      	mov	r8, r0
 80175ca:	4689      	mov	r9, r1
 80175cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80175d0:	2600      	movs	r6, #0
 80175d2:	b914      	cbnz	r4, 80175da <_fwalk_reent+0x16>
 80175d4:	4630      	mov	r0, r6
 80175d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80175de:	3f01      	subs	r7, #1
 80175e0:	d501      	bpl.n	80175e6 <_fwalk_reent+0x22>
 80175e2:	6824      	ldr	r4, [r4, #0]
 80175e4:	e7f5      	b.n	80175d2 <_fwalk_reent+0xe>
 80175e6:	89ab      	ldrh	r3, [r5, #12]
 80175e8:	2b01      	cmp	r3, #1
 80175ea:	d907      	bls.n	80175fc <_fwalk_reent+0x38>
 80175ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175f0:	3301      	adds	r3, #1
 80175f2:	d003      	beq.n	80175fc <_fwalk_reent+0x38>
 80175f4:	4629      	mov	r1, r5
 80175f6:	4640      	mov	r0, r8
 80175f8:	47c8      	blx	r9
 80175fa:	4306      	orrs	r6, r0
 80175fc:	3568      	adds	r5, #104	; 0x68
 80175fe:	e7ee      	b.n	80175de <_fwalk_reent+0x1a>

08017600 <__swhatbuf_r>:
 8017600:	b570      	push	{r4, r5, r6, lr}
 8017602:	460e      	mov	r6, r1
 8017604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017608:	2900      	cmp	r1, #0
 801760a:	b096      	sub	sp, #88	; 0x58
 801760c:	4614      	mov	r4, r2
 801760e:	461d      	mov	r5, r3
 8017610:	da07      	bge.n	8017622 <__swhatbuf_r+0x22>
 8017612:	2300      	movs	r3, #0
 8017614:	602b      	str	r3, [r5, #0]
 8017616:	89b3      	ldrh	r3, [r6, #12]
 8017618:	061a      	lsls	r2, r3, #24
 801761a:	d410      	bmi.n	801763e <__swhatbuf_r+0x3e>
 801761c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017620:	e00e      	b.n	8017640 <__swhatbuf_r+0x40>
 8017622:	466a      	mov	r2, sp
 8017624:	f000 fb80 	bl	8017d28 <_fstat_r>
 8017628:	2800      	cmp	r0, #0
 801762a:	dbf2      	blt.n	8017612 <__swhatbuf_r+0x12>
 801762c:	9a01      	ldr	r2, [sp, #4]
 801762e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017632:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017636:	425a      	negs	r2, r3
 8017638:	415a      	adcs	r2, r3
 801763a:	602a      	str	r2, [r5, #0]
 801763c:	e7ee      	b.n	801761c <__swhatbuf_r+0x1c>
 801763e:	2340      	movs	r3, #64	; 0x40
 8017640:	2000      	movs	r0, #0
 8017642:	6023      	str	r3, [r4, #0]
 8017644:	b016      	add	sp, #88	; 0x58
 8017646:	bd70      	pop	{r4, r5, r6, pc}

08017648 <__smakebuf_r>:
 8017648:	898b      	ldrh	r3, [r1, #12]
 801764a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801764c:	079d      	lsls	r5, r3, #30
 801764e:	4606      	mov	r6, r0
 8017650:	460c      	mov	r4, r1
 8017652:	d507      	bpl.n	8017664 <__smakebuf_r+0x1c>
 8017654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017658:	6023      	str	r3, [r4, #0]
 801765a:	6123      	str	r3, [r4, #16]
 801765c:	2301      	movs	r3, #1
 801765e:	6163      	str	r3, [r4, #20]
 8017660:	b002      	add	sp, #8
 8017662:	bd70      	pop	{r4, r5, r6, pc}
 8017664:	ab01      	add	r3, sp, #4
 8017666:	466a      	mov	r2, sp
 8017668:	f7ff ffca 	bl	8017600 <__swhatbuf_r>
 801766c:	9900      	ldr	r1, [sp, #0]
 801766e:	4605      	mov	r5, r0
 8017670:	4630      	mov	r0, r6
 8017672:	f7ff fc71 	bl	8016f58 <_malloc_r>
 8017676:	b948      	cbnz	r0, 801768c <__smakebuf_r+0x44>
 8017678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801767c:	059a      	lsls	r2, r3, #22
 801767e:	d4ef      	bmi.n	8017660 <__smakebuf_r+0x18>
 8017680:	f023 0303 	bic.w	r3, r3, #3
 8017684:	f043 0302 	orr.w	r3, r3, #2
 8017688:	81a3      	strh	r3, [r4, #12]
 801768a:	e7e3      	b.n	8017654 <__smakebuf_r+0xc>
 801768c:	4b0d      	ldr	r3, [pc, #52]	; (80176c4 <__smakebuf_r+0x7c>)
 801768e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017690:	89a3      	ldrh	r3, [r4, #12]
 8017692:	6020      	str	r0, [r4, #0]
 8017694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017698:	81a3      	strh	r3, [r4, #12]
 801769a:	9b00      	ldr	r3, [sp, #0]
 801769c:	6163      	str	r3, [r4, #20]
 801769e:	9b01      	ldr	r3, [sp, #4]
 80176a0:	6120      	str	r0, [r4, #16]
 80176a2:	b15b      	cbz	r3, 80176bc <__smakebuf_r+0x74>
 80176a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176a8:	4630      	mov	r0, r6
 80176aa:	f000 fb4f 	bl	8017d4c <_isatty_r>
 80176ae:	b128      	cbz	r0, 80176bc <__smakebuf_r+0x74>
 80176b0:	89a3      	ldrh	r3, [r4, #12]
 80176b2:	f023 0303 	bic.w	r3, r3, #3
 80176b6:	f043 0301 	orr.w	r3, r3, #1
 80176ba:	81a3      	strh	r3, [r4, #12]
 80176bc:	89a3      	ldrh	r3, [r4, #12]
 80176be:	431d      	orrs	r5, r3
 80176c0:	81a5      	strh	r5, [r4, #12]
 80176c2:	e7cd      	b.n	8017660 <__smakebuf_r+0x18>
 80176c4:	080174b5 	.word	0x080174b5

080176c8 <__malloc_lock>:
 80176c8:	4770      	bx	lr

080176ca <__malloc_unlock>:
 80176ca:	4770      	bx	lr

080176cc <__sfputc_r>:
 80176cc:	6893      	ldr	r3, [r2, #8]
 80176ce:	3b01      	subs	r3, #1
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	b410      	push	{r4}
 80176d4:	6093      	str	r3, [r2, #8]
 80176d6:	da08      	bge.n	80176ea <__sfputc_r+0x1e>
 80176d8:	6994      	ldr	r4, [r2, #24]
 80176da:	42a3      	cmp	r3, r4
 80176dc:	db01      	blt.n	80176e2 <__sfputc_r+0x16>
 80176de:	290a      	cmp	r1, #10
 80176e0:	d103      	bne.n	80176ea <__sfputc_r+0x1e>
 80176e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176e6:	f7ff bd51 	b.w	801718c <__swbuf_r>
 80176ea:	6813      	ldr	r3, [r2, #0]
 80176ec:	1c58      	adds	r0, r3, #1
 80176ee:	6010      	str	r0, [r2, #0]
 80176f0:	7019      	strb	r1, [r3, #0]
 80176f2:	4608      	mov	r0, r1
 80176f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176f8:	4770      	bx	lr

080176fa <__sfputs_r>:
 80176fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176fc:	4606      	mov	r6, r0
 80176fe:	460f      	mov	r7, r1
 8017700:	4614      	mov	r4, r2
 8017702:	18d5      	adds	r5, r2, r3
 8017704:	42ac      	cmp	r4, r5
 8017706:	d101      	bne.n	801770c <__sfputs_r+0x12>
 8017708:	2000      	movs	r0, #0
 801770a:	e007      	b.n	801771c <__sfputs_r+0x22>
 801770c:	463a      	mov	r2, r7
 801770e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017712:	4630      	mov	r0, r6
 8017714:	f7ff ffda 	bl	80176cc <__sfputc_r>
 8017718:	1c43      	adds	r3, r0, #1
 801771a:	d1f3      	bne.n	8017704 <__sfputs_r+0xa>
 801771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017720 <_vfiprintf_r>:
 8017720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017724:	460c      	mov	r4, r1
 8017726:	b09d      	sub	sp, #116	; 0x74
 8017728:	4617      	mov	r7, r2
 801772a:	461d      	mov	r5, r3
 801772c:	4606      	mov	r6, r0
 801772e:	b118      	cbz	r0, 8017738 <_vfiprintf_r+0x18>
 8017730:	6983      	ldr	r3, [r0, #24]
 8017732:	b90b      	cbnz	r3, 8017738 <_vfiprintf_r+0x18>
 8017734:	f7ff feda 	bl	80174ec <__sinit>
 8017738:	4b7c      	ldr	r3, [pc, #496]	; (801792c <_vfiprintf_r+0x20c>)
 801773a:	429c      	cmp	r4, r3
 801773c:	d158      	bne.n	80177f0 <_vfiprintf_r+0xd0>
 801773e:	6874      	ldr	r4, [r6, #4]
 8017740:	89a3      	ldrh	r3, [r4, #12]
 8017742:	0718      	lsls	r0, r3, #28
 8017744:	d55e      	bpl.n	8017804 <_vfiprintf_r+0xe4>
 8017746:	6923      	ldr	r3, [r4, #16]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d05b      	beq.n	8017804 <_vfiprintf_r+0xe4>
 801774c:	2300      	movs	r3, #0
 801774e:	9309      	str	r3, [sp, #36]	; 0x24
 8017750:	2320      	movs	r3, #32
 8017752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017756:	2330      	movs	r3, #48	; 0x30
 8017758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801775c:	9503      	str	r5, [sp, #12]
 801775e:	f04f 0b01 	mov.w	fp, #1
 8017762:	46b8      	mov	r8, r7
 8017764:	4645      	mov	r5, r8
 8017766:	f815 3b01 	ldrb.w	r3, [r5], #1
 801776a:	b10b      	cbz	r3, 8017770 <_vfiprintf_r+0x50>
 801776c:	2b25      	cmp	r3, #37	; 0x25
 801776e:	d154      	bne.n	801781a <_vfiprintf_r+0xfa>
 8017770:	ebb8 0a07 	subs.w	sl, r8, r7
 8017774:	d00b      	beq.n	801778e <_vfiprintf_r+0x6e>
 8017776:	4653      	mov	r3, sl
 8017778:	463a      	mov	r2, r7
 801777a:	4621      	mov	r1, r4
 801777c:	4630      	mov	r0, r6
 801777e:	f7ff ffbc 	bl	80176fa <__sfputs_r>
 8017782:	3001      	adds	r0, #1
 8017784:	f000 80c2 	beq.w	801790c <_vfiprintf_r+0x1ec>
 8017788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801778a:	4453      	add	r3, sl
 801778c:	9309      	str	r3, [sp, #36]	; 0x24
 801778e:	f898 3000 	ldrb.w	r3, [r8]
 8017792:	2b00      	cmp	r3, #0
 8017794:	f000 80ba 	beq.w	801790c <_vfiprintf_r+0x1ec>
 8017798:	2300      	movs	r3, #0
 801779a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801779e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177a2:	9304      	str	r3, [sp, #16]
 80177a4:	9307      	str	r3, [sp, #28]
 80177a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177aa:	931a      	str	r3, [sp, #104]	; 0x68
 80177ac:	46a8      	mov	r8, r5
 80177ae:	2205      	movs	r2, #5
 80177b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80177b4:	485e      	ldr	r0, [pc, #376]	; (8017930 <_vfiprintf_r+0x210>)
 80177b6:	f7e8 fd1b 	bl	80001f0 <memchr>
 80177ba:	9b04      	ldr	r3, [sp, #16]
 80177bc:	bb78      	cbnz	r0, 801781e <_vfiprintf_r+0xfe>
 80177be:	06d9      	lsls	r1, r3, #27
 80177c0:	bf44      	itt	mi
 80177c2:	2220      	movmi	r2, #32
 80177c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177c8:	071a      	lsls	r2, r3, #28
 80177ca:	bf44      	itt	mi
 80177cc:	222b      	movmi	r2, #43	; 0x2b
 80177ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177d2:	782a      	ldrb	r2, [r5, #0]
 80177d4:	2a2a      	cmp	r2, #42	; 0x2a
 80177d6:	d02a      	beq.n	801782e <_vfiprintf_r+0x10e>
 80177d8:	9a07      	ldr	r2, [sp, #28]
 80177da:	46a8      	mov	r8, r5
 80177dc:	2000      	movs	r0, #0
 80177de:	250a      	movs	r5, #10
 80177e0:	4641      	mov	r1, r8
 80177e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177e6:	3b30      	subs	r3, #48	; 0x30
 80177e8:	2b09      	cmp	r3, #9
 80177ea:	d969      	bls.n	80178c0 <_vfiprintf_r+0x1a0>
 80177ec:	b360      	cbz	r0, 8017848 <_vfiprintf_r+0x128>
 80177ee:	e024      	b.n	801783a <_vfiprintf_r+0x11a>
 80177f0:	4b50      	ldr	r3, [pc, #320]	; (8017934 <_vfiprintf_r+0x214>)
 80177f2:	429c      	cmp	r4, r3
 80177f4:	d101      	bne.n	80177fa <_vfiprintf_r+0xda>
 80177f6:	68b4      	ldr	r4, [r6, #8]
 80177f8:	e7a2      	b.n	8017740 <_vfiprintf_r+0x20>
 80177fa:	4b4f      	ldr	r3, [pc, #316]	; (8017938 <_vfiprintf_r+0x218>)
 80177fc:	429c      	cmp	r4, r3
 80177fe:	bf08      	it	eq
 8017800:	68f4      	ldreq	r4, [r6, #12]
 8017802:	e79d      	b.n	8017740 <_vfiprintf_r+0x20>
 8017804:	4621      	mov	r1, r4
 8017806:	4630      	mov	r0, r6
 8017808:	f7ff fd12 	bl	8017230 <__swsetup_r>
 801780c:	2800      	cmp	r0, #0
 801780e:	d09d      	beq.n	801774c <_vfiprintf_r+0x2c>
 8017810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017814:	b01d      	add	sp, #116	; 0x74
 8017816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801781a:	46a8      	mov	r8, r5
 801781c:	e7a2      	b.n	8017764 <_vfiprintf_r+0x44>
 801781e:	4a44      	ldr	r2, [pc, #272]	; (8017930 <_vfiprintf_r+0x210>)
 8017820:	1a80      	subs	r0, r0, r2
 8017822:	fa0b f000 	lsl.w	r0, fp, r0
 8017826:	4318      	orrs	r0, r3
 8017828:	9004      	str	r0, [sp, #16]
 801782a:	4645      	mov	r5, r8
 801782c:	e7be      	b.n	80177ac <_vfiprintf_r+0x8c>
 801782e:	9a03      	ldr	r2, [sp, #12]
 8017830:	1d11      	adds	r1, r2, #4
 8017832:	6812      	ldr	r2, [r2, #0]
 8017834:	9103      	str	r1, [sp, #12]
 8017836:	2a00      	cmp	r2, #0
 8017838:	db01      	blt.n	801783e <_vfiprintf_r+0x11e>
 801783a:	9207      	str	r2, [sp, #28]
 801783c:	e004      	b.n	8017848 <_vfiprintf_r+0x128>
 801783e:	4252      	negs	r2, r2
 8017840:	f043 0302 	orr.w	r3, r3, #2
 8017844:	9207      	str	r2, [sp, #28]
 8017846:	9304      	str	r3, [sp, #16]
 8017848:	f898 3000 	ldrb.w	r3, [r8]
 801784c:	2b2e      	cmp	r3, #46	; 0x2e
 801784e:	d10e      	bne.n	801786e <_vfiprintf_r+0x14e>
 8017850:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017854:	2b2a      	cmp	r3, #42	; 0x2a
 8017856:	d138      	bne.n	80178ca <_vfiprintf_r+0x1aa>
 8017858:	9b03      	ldr	r3, [sp, #12]
 801785a:	1d1a      	adds	r2, r3, #4
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	9203      	str	r2, [sp, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	bfb8      	it	lt
 8017864:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017868:	f108 0802 	add.w	r8, r8, #2
 801786c:	9305      	str	r3, [sp, #20]
 801786e:	4d33      	ldr	r5, [pc, #204]	; (801793c <_vfiprintf_r+0x21c>)
 8017870:	f898 1000 	ldrb.w	r1, [r8]
 8017874:	2203      	movs	r2, #3
 8017876:	4628      	mov	r0, r5
 8017878:	f7e8 fcba 	bl	80001f0 <memchr>
 801787c:	b140      	cbz	r0, 8017890 <_vfiprintf_r+0x170>
 801787e:	2340      	movs	r3, #64	; 0x40
 8017880:	1b40      	subs	r0, r0, r5
 8017882:	fa03 f000 	lsl.w	r0, r3, r0
 8017886:	9b04      	ldr	r3, [sp, #16]
 8017888:	4303      	orrs	r3, r0
 801788a:	f108 0801 	add.w	r8, r8, #1
 801788e:	9304      	str	r3, [sp, #16]
 8017890:	f898 1000 	ldrb.w	r1, [r8]
 8017894:	482a      	ldr	r0, [pc, #168]	; (8017940 <_vfiprintf_r+0x220>)
 8017896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801789a:	2206      	movs	r2, #6
 801789c:	f108 0701 	add.w	r7, r8, #1
 80178a0:	f7e8 fca6 	bl	80001f0 <memchr>
 80178a4:	2800      	cmp	r0, #0
 80178a6:	d037      	beq.n	8017918 <_vfiprintf_r+0x1f8>
 80178a8:	4b26      	ldr	r3, [pc, #152]	; (8017944 <_vfiprintf_r+0x224>)
 80178aa:	bb1b      	cbnz	r3, 80178f4 <_vfiprintf_r+0x1d4>
 80178ac:	9b03      	ldr	r3, [sp, #12]
 80178ae:	3307      	adds	r3, #7
 80178b0:	f023 0307 	bic.w	r3, r3, #7
 80178b4:	3308      	adds	r3, #8
 80178b6:	9303      	str	r3, [sp, #12]
 80178b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ba:	444b      	add	r3, r9
 80178bc:	9309      	str	r3, [sp, #36]	; 0x24
 80178be:	e750      	b.n	8017762 <_vfiprintf_r+0x42>
 80178c0:	fb05 3202 	mla	r2, r5, r2, r3
 80178c4:	2001      	movs	r0, #1
 80178c6:	4688      	mov	r8, r1
 80178c8:	e78a      	b.n	80177e0 <_vfiprintf_r+0xc0>
 80178ca:	2300      	movs	r3, #0
 80178cc:	f108 0801 	add.w	r8, r8, #1
 80178d0:	9305      	str	r3, [sp, #20]
 80178d2:	4619      	mov	r1, r3
 80178d4:	250a      	movs	r5, #10
 80178d6:	4640      	mov	r0, r8
 80178d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178dc:	3a30      	subs	r2, #48	; 0x30
 80178de:	2a09      	cmp	r2, #9
 80178e0:	d903      	bls.n	80178ea <_vfiprintf_r+0x1ca>
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d0c3      	beq.n	801786e <_vfiprintf_r+0x14e>
 80178e6:	9105      	str	r1, [sp, #20]
 80178e8:	e7c1      	b.n	801786e <_vfiprintf_r+0x14e>
 80178ea:	fb05 2101 	mla	r1, r5, r1, r2
 80178ee:	2301      	movs	r3, #1
 80178f0:	4680      	mov	r8, r0
 80178f2:	e7f0      	b.n	80178d6 <_vfiprintf_r+0x1b6>
 80178f4:	ab03      	add	r3, sp, #12
 80178f6:	9300      	str	r3, [sp, #0]
 80178f8:	4622      	mov	r2, r4
 80178fa:	4b13      	ldr	r3, [pc, #76]	; (8017948 <_vfiprintf_r+0x228>)
 80178fc:	a904      	add	r1, sp, #16
 80178fe:	4630      	mov	r0, r6
 8017900:	f3af 8000 	nop.w
 8017904:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8017908:	4681      	mov	r9, r0
 801790a:	d1d5      	bne.n	80178b8 <_vfiprintf_r+0x198>
 801790c:	89a3      	ldrh	r3, [r4, #12]
 801790e:	065b      	lsls	r3, r3, #25
 8017910:	f53f af7e 	bmi.w	8017810 <_vfiprintf_r+0xf0>
 8017914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017916:	e77d      	b.n	8017814 <_vfiprintf_r+0xf4>
 8017918:	ab03      	add	r3, sp, #12
 801791a:	9300      	str	r3, [sp, #0]
 801791c:	4622      	mov	r2, r4
 801791e:	4b0a      	ldr	r3, [pc, #40]	; (8017948 <_vfiprintf_r+0x228>)
 8017920:	a904      	add	r1, sp, #16
 8017922:	4630      	mov	r0, r6
 8017924:	f000 f888 	bl	8017a38 <_printf_i>
 8017928:	e7ec      	b.n	8017904 <_vfiprintf_r+0x1e4>
 801792a:	bf00      	nop
 801792c:	0801b394 	.word	0x0801b394
 8017930:	0801b3d4 	.word	0x0801b3d4
 8017934:	0801b3b4 	.word	0x0801b3b4
 8017938:	0801b374 	.word	0x0801b374
 801793c:	0801b3da 	.word	0x0801b3da
 8017940:	0801b3de 	.word	0x0801b3de
 8017944:	00000000 	.word	0x00000000
 8017948:	080176fb 	.word	0x080176fb

0801794c <_printf_common>:
 801794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017950:	4691      	mov	r9, r2
 8017952:	461f      	mov	r7, r3
 8017954:	688a      	ldr	r2, [r1, #8]
 8017956:	690b      	ldr	r3, [r1, #16]
 8017958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801795c:	4293      	cmp	r3, r2
 801795e:	bfb8      	it	lt
 8017960:	4613      	movlt	r3, r2
 8017962:	f8c9 3000 	str.w	r3, [r9]
 8017966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801796a:	4606      	mov	r6, r0
 801796c:	460c      	mov	r4, r1
 801796e:	b112      	cbz	r2, 8017976 <_printf_common+0x2a>
 8017970:	3301      	adds	r3, #1
 8017972:	f8c9 3000 	str.w	r3, [r9]
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	0699      	lsls	r1, r3, #26
 801797a:	bf42      	ittt	mi
 801797c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017980:	3302      	addmi	r3, #2
 8017982:	f8c9 3000 	strmi.w	r3, [r9]
 8017986:	6825      	ldr	r5, [r4, #0]
 8017988:	f015 0506 	ands.w	r5, r5, #6
 801798c:	d107      	bne.n	801799e <_printf_common+0x52>
 801798e:	f104 0a19 	add.w	sl, r4, #25
 8017992:	68e3      	ldr	r3, [r4, #12]
 8017994:	f8d9 2000 	ldr.w	r2, [r9]
 8017998:	1a9b      	subs	r3, r3, r2
 801799a:	42ab      	cmp	r3, r5
 801799c:	dc28      	bgt.n	80179f0 <_printf_common+0xa4>
 801799e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80179a2:	6822      	ldr	r2, [r4, #0]
 80179a4:	3300      	adds	r3, #0
 80179a6:	bf18      	it	ne
 80179a8:	2301      	movne	r3, #1
 80179aa:	0692      	lsls	r2, r2, #26
 80179ac:	d42d      	bmi.n	8017a0a <_printf_common+0xbe>
 80179ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179b2:	4639      	mov	r1, r7
 80179b4:	4630      	mov	r0, r6
 80179b6:	47c0      	blx	r8
 80179b8:	3001      	adds	r0, #1
 80179ba:	d020      	beq.n	80179fe <_printf_common+0xb2>
 80179bc:	6823      	ldr	r3, [r4, #0]
 80179be:	68e5      	ldr	r5, [r4, #12]
 80179c0:	f8d9 2000 	ldr.w	r2, [r9]
 80179c4:	f003 0306 	and.w	r3, r3, #6
 80179c8:	2b04      	cmp	r3, #4
 80179ca:	bf08      	it	eq
 80179cc:	1aad      	subeq	r5, r5, r2
 80179ce:	68a3      	ldr	r3, [r4, #8]
 80179d0:	6922      	ldr	r2, [r4, #16]
 80179d2:	bf0c      	ite	eq
 80179d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179d8:	2500      	movne	r5, #0
 80179da:	4293      	cmp	r3, r2
 80179dc:	bfc4      	itt	gt
 80179de:	1a9b      	subgt	r3, r3, r2
 80179e0:	18ed      	addgt	r5, r5, r3
 80179e2:	f04f 0900 	mov.w	r9, #0
 80179e6:	341a      	adds	r4, #26
 80179e8:	454d      	cmp	r5, r9
 80179ea:	d11a      	bne.n	8017a22 <_printf_common+0xd6>
 80179ec:	2000      	movs	r0, #0
 80179ee:	e008      	b.n	8017a02 <_printf_common+0xb6>
 80179f0:	2301      	movs	r3, #1
 80179f2:	4652      	mov	r2, sl
 80179f4:	4639      	mov	r1, r7
 80179f6:	4630      	mov	r0, r6
 80179f8:	47c0      	blx	r8
 80179fa:	3001      	adds	r0, #1
 80179fc:	d103      	bne.n	8017a06 <_printf_common+0xba>
 80179fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a06:	3501      	adds	r5, #1
 8017a08:	e7c3      	b.n	8017992 <_printf_common+0x46>
 8017a0a:	18e1      	adds	r1, r4, r3
 8017a0c:	1c5a      	adds	r2, r3, #1
 8017a0e:	2030      	movs	r0, #48	; 0x30
 8017a10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a14:	4422      	add	r2, r4
 8017a16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a1e:	3302      	adds	r3, #2
 8017a20:	e7c5      	b.n	80179ae <_printf_common+0x62>
 8017a22:	2301      	movs	r3, #1
 8017a24:	4622      	mov	r2, r4
 8017a26:	4639      	mov	r1, r7
 8017a28:	4630      	mov	r0, r6
 8017a2a:	47c0      	blx	r8
 8017a2c:	3001      	adds	r0, #1
 8017a2e:	d0e6      	beq.n	80179fe <_printf_common+0xb2>
 8017a30:	f109 0901 	add.w	r9, r9, #1
 8017a34:	e7d8      	b.n	80179e8 <_printf_common+0x9c>
	...

08017a38 <_printf_i>:
 8017a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017a40:	460c      	mov	r4, r1
 8017a42:	7e09      	ldrb	r1, [r1, #24]
 8017a44:	b085      	sub	sp, #20
 8017a46:	296e      	cmp	r1, #110	; 0x6e
 8017a48:	4617      	mov	r7, r2
 8017a4a:	4606      	mov	r6, r0
 8017a4c:	4698      	mov	r8, r3
 8017a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a50:	f000 80b3 	beq.w	8017bba <_printf_i+0x182>
 8017a54:	d822      	bhi.n	8017a9c <_printf_i+0x64>
 8017a56:	2963      	cmp	r1, #99	; 0x63
 8017a58:	d036      	beq.n	8017ac8 <_printf_i+0x90>
 8017a5a:	d80a      	bhi.n	8017a72 <_printf_i+0x3a>
 8017a5c:	2900      	cmp	r1, #0
 8017a5e:	f000 80b9 	beq.w	8017bd4 <_printf_i+0x19c>
 8017a62:	2958      	cmp	r1, #88	; 0x58
 8017a64:	f000 8083 	beq.w	8017b6e <_printf_i+0x136>
 8017a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017a70:	e032      	b.n	8017ad8 <_printf_i+0xa0>
 8017a72:	2964      	cmp	r1, #100	; 0x64
 8017a74:	d001      	beq.n	8017a7a <_printf_i+0x42>
 8017a76:	2969      	cmp	r1, #105	; 0x69
 8017a78:	d1f6      	bne.n	8017a68 <_printf_i+0x30>
 8017a7a:	6820      	ldr	r0, [r4, #0]
 8017a7c:	6813      	ldr	r3, [r2, #0]
 8017a7e:	0605      	lsls	r5, r0, #24
 8017a80:	f103 0104 	add.w	r1, r3, #4
 8017a84:	d52a      	bpl.n	8017adc <_printf_i+0xa4>
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	6011      	str	r1, [r2, #0]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	da03      	bge.n	8017a96 <_printf_i+0x5e>
 8017a8e:	222d      	movs	r2, #45	; 0x2d
 8017a90:	425b      	negs	r3, r3
 8017a92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017a96:	486f      	ldr	r0, [pc, #444]	; (8017c54 <_printf_i+0x21c>)
 8017a98:	220a      	movs	r2, #10
 8017a9a:	e039      	b.n	8017b10 <_printf_i+0xd8>
 8017a9c:	2973      	cmp	r1, #115	; 0x73
 8017a9e:	f000 809d 	beq.w	8017bdc <_printf_i+0x1a4>
 8017aa2:	d808      	bhi.n	8017ab6 <_printf_i+0x7e>
 8017aa4:	296f      	cmp	r1, #111	; 0x6f
 8017aa6:	d020      	beq.n	8017aea <_printf_i+0xb2>
 8017aa8:	2970      	cmp	r1, #112	; 0x70
 8017aaa:	d1dd      	bne.n	8017a68 <_printf_i+0x30>
 8017aac:	6823      	ldr	r3, [r4, #0]
 8017aae:	f043 0320 	orr.w	r3, r3, #32
 8017ab2:	6023      	str	r3, [r4, #0]
 8017ab4:	e003      	b.n	8017abe <_printf_i+0x86>
 8017ab6:	2975      	cmp	r1, #117	; 0x75
 8017ab8:	d017      	beq.n	8017aea <_printf_i+0xb2>
 8017aba:	2978      	cmp	r1, #120	; 0x78
 8017abc:	d1d4      	bne.n	8017a68 <_printf_i+0x30>
 8017abe:	2378      	movs	r3, #120	; 0x78
 8017ac0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017ac4:	4864      	ldr	r0, [pc, #400]	; (8017c58 <_printf_i+0x220>)
 8017ac6:	e055      	b.n	8017b74 <_printf_i+0x13c>
 8017ac8:	6813      	ldr	r3, [r2, #0]
 8017aca:	1d19      	adds	r1, r3, #4
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	6011      	str	r1, [r2, #0]
 8017ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e08c      	b.n	8017bf6 <_printf_i+0x1be>
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	6011      	str	r1, [r2, #0]
 8017ae0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017ae4:	bf18      	it	ne
 8017ae6:	b21b      	sxthne	r3, r3
 8017ae8:	e7cf      	b.n	8017a8a <_printf_i+0x52>
 8017aea:	6813      	ldr	r3, [r2, #0]
 8017aec:	6825      	ldr	r5, [r4, #0]
 8017aee:	1d18      	adds	r0, r3, #4
 8017af0:	6010      	str	r0, [r2, #0]
 8017af2:	0628      	lsls	r0, r5, #24
 8017af4:	d501      	bpl.n	8017afa <_printf_i+0xc2>
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	e002      	b.n	8017b00 <_printf_i+0xc8>
 8017afa:	0668      	lsls	r0, r5, #25
 8017afc:	d5fb      	bpl.n	8017af6 <_printf_i+0xbe>
 8017afe:	881b      	ldrh	r3, [r3, #0]
 8017b00:	4854      	ldr	r0, [pc, #336]	; (8017c54 <_printf_i+0x21c>)
 8017b02:	296f      	cmp	r1, #111	; 0x6f
 8017b04:	bf14      	ite	ne
 8017b06:	220a      	movne	r2, #10
 8017b08:	2208      	moveq	r2, #8
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b10:	6865      	ldr	r5, [r4, #4]
 8017b12:	60a5      	str	r5, [r4, #8]
 8017b14:	2d00      	cmp	r5, #0
 8017b16:	f2c0 8095 	blt.w	8017c44 <_printf_i+0x20c>
 8017b1a:	6821      	ldr	r1, [r4, #0]
 8017b1c:	f021 0104 	bic.w	r1, r1, #4
 8017b20:	6021      	str	r1, [r4, #0]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d13d      	bne.n	8017ba2 <_printf_i+0x16a>
 8017b26:	2d00      	cmp	r5, #0
 8017b28:	f040 808e 	bne.w	8017c48 <_printf_i+0x210>
 8017b2c:	4665      	mov	r5, ip
 8017b2e:	2a08      	cmp	r2, #8
 8017b30:	d10b      	bne.n	8017b4a <_printf_i+0x112>
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	07db      	lsls	r3, r3, #31
 8017b36:	d508      	bpl.n	8017b4a <_printf_i+0x112>
 8017b38:	6923      	ldr	r3, [r4, #16]
 8017b3a:	6862      	ldr	r2, [r4, #4]
 8017b3c:	429a      	cmp	r2, r3
 8017b3e:	bfde      	ittt	le
 8017b40:	2330      	movle	r3, #48	; 0x30
 8017b42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b46:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017b4a:	ebac 0305 	sub.w	r3, ip, r5
 8017b4e:	6123      	str	r3, [r4, #16]
 8017b50:	f8cd 8000 	str.w	r8, [sp]
 8017b54:	463b      	mov	r3, r7
 8017b56:	aa03      	add	r2, sp, #12
 8017b58:	4621      	mov	r1, r4
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7ff fef6 	bl	801794c <_printf_common>
 8017b60:	3001      	adds	r0, #1
 8017b62:	d14d      	bne.n	8017c00 <_printf_i+0x1c8>
 8017b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b68:	b005      	add	sp, #20
 8017b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b6e:	4839      	ldr	r0, [pc, #228]	; (8017c54 <_printf_i+0x21c>)
 8017b70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017b74:	6813      	ldr	r3, [r2, #0]
 8017b76:	6821      	ldr	r1, [r4, #0]
 8017b78:	1d1d      	adds	r5, r3, #4
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	6015      	str	r5, [r2, #0]
 8017b7e:	060a      	lsls	r2, r1, #24
 8017b80:	d50b      	bpl.n	8017b9a <_printf_i+0x162>
 8017b82:	07ca      	lsls	r2, r1, #31
 8017b84:	bf44      	itt	mi
 8017b86:	f041 0120 	orrmi.w	r1, r1, #32
 8017b8a:	6021      	strmi	r1, [r4, #0]
 8017b8c:	b91b      	cbnz	r3, 8017b96 <_printf_i+0x15e>
 8017b8e:	6822      	ldr	r2, [r4, #0]
 8017b90:	f022 0220 	bic.w	r2, r2, #32
 8017b94:	6022      	str	r2, [r4, #0]
 8017b96:	2210      	movs	r2, #16
 8017b98:	e7b7      	b.n	8017b0a <_printf_i+0xd2>
 8017b9a:	064d      	lsls	r5, r1, #25
 8017b9c:	bf48      	it	mi
 8017b9e:	b29b      	uxthmi	r3, r3
 8017ba0:	e7ef      	b.n	8017b82 <_printf_i+0x14a>
 8017ba2:	4665      	mov	r5, ip
 8017ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8017ba8:	fb02 3311 	mls	r3, r2, r1, r3
 8017bac:	5cc3      	ldrb	r3, [r0, r3]
 8017bae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017bb2:	460b      	mov	r3, r1
 8017bb4:	2900      	cmp	r1, #0
 8017bb6:	d1f5      	bne.n	8017ba4 <_printf_i+0x16c>
 8017bb8:	e7b9      	b.n	8017b2e <_printf_i+0xf6>
 8017bba:	6813      	ldr	r3, [r2, #0]
 8017bbc:	6825      	ldr	r5, [r4, #0]
 8017bbe:	6961      	ldr	r1, [r4, #20]
 8017bc0:	1d18      	adds	r0, r3, #4
 8017bc2:	6010      	str	r0, [r2, #0]
 8017bc4:	0628      	lsls	r0, r5, #24
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	d501      	bpl.n	8017bce <_printf_i+0x196>
 8017bca:	6019      	str	r1, [r3, #0]
 8017bcc:	e002      	b.n	8017bd4 <_printf_i+0x19c>
 8017bce:	066a      	lsls	r2, r5, #25
 8017bd0:	d5fb      	bpl.n	8017bca <_printf_i+0x192>
 8017bd2:	8019      	strh	r1, [r3, #0]
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	6123      	str	r3, [r4, #16]
 8017bd8:	4665      	mov	r5, ip
 8017bda:	e7b9      	b.n	8017b50 <_printf_i+0x118>
 8017bdc:	6813      	ldr	r3, [r2, #0]
 8017bde:	1d19      	adds	r1, r3, #4
 8017be0:	6011      	str	r1, [r2, #0]
 8017be2:	681d      	ldr	r5, [r3, #0]
 8017be4:	6862      	ldr	r2, [r4, #4]
 8017be6:	2100      	movs	r1, #0
 8017be8:	4628      	mov	r0, r5
 8017bea:	f7e8 fb01 	bl	80001f0 <memchr>
 8017bee:	b108      	cbz	r0, 8017bf4 <_printf_i+0x1bc>
 8017bf0:	1b40      	subs	r0, r0, r5
 8017bf2:	6060      	str	r0, [r4, #4]
 8017bf4:	6863      	ldr	r3, [r4, #4]
 8017bf6:	6123      	str	r3, [r4, #16]
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bfe:	e7a7      	b.n	8017b50 <_printf_i+0x118>
 8017c00:	6923      	ldr	r3, [r4, #16]
 8017c02:	462a      	mov	r2, r5
 8017c04:	4639      	mov	r1, r7
 8017c06:	4630      	mov	r0, r6
 8017c08:	47c0      	blx	r8
 8017c0a:	3001      	adds	r0, #1
 8017c0c:	d0aa      	beq.n	8017b64 <_printf_i+0x12c>
 8017c0e:	6823      	ldr	r3, [r4, #0]
 8017c10:	079b      	lsls	r3, r3, #30
 8017c12:	d413      	bmi.n	8017c3c <_printf_i+0x204>
 8017c14:	68e0      	ldr	r0, [r4, #12]
 8017c16:	9b03      	ldr	r3, [sp, #12]
 8017c18:	4298      	cmp	r0, r3
 8017c1a:	bfb8      	it	lt
 8017c1c:	4618      	movlt	r0, r3
 8017c1e:	e7a3      	b.n	8017b68 <_printf_i+0x130>
 8017c20:	2301      	movs	r3, #1
 8017c22:	464a      	mov	r2, r9
 8017c24:	4639      	mov	r1, r7
 8017c26:	4630      	mov	r0, r6
 8017c28:	47c0      	blx	r8
 8017c2a:	3001      	adds	r0, #1
 8017c2c:	d09a      	beq.n	8017b64 <_printf_i+0x12c>
 8017c2e:	3501      	adds	r5, #1
 8017c30:	68e3      	ldr	r3, [r4, #12]
 8017c32:	9a03      	ldr	r2, [sp, #12]
 8017c34:	1a9b      	subs	r3, r3, r2
 8017c36:	42ab      	cmp	r3, r5
 8017c38:	dcf2      	bgt.n	8017c20 <_printf_i+0x1e8>
 8017c3a:	e7eb      	b.n	8017c14 <_printf_i+0x1dc>
 8017c3c:	2500      	movs	r5, #0
 8017c3e:	f104 0919 	add.w	r9, r4, #25
 8017c42:	e7f5      	b.n	8017c30 <_printf_i+0x1f8>
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d1ac      	bne.n	8017ba2 <_printf_i+0x16a>
 8017c48:	7803      	ldrb	r3, [r0, #0]
 8017c4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c52:	e76c      	b.n	8017b2e <_printf_i+0xf6>
 8017c54:	0801b3e5 	.word	0x0801b3e5
 8017c58:	0801b3f6 	.word	0x0801b3f6

08017c5c <__sread>:
 8017c5c:	b510      	push	{r4, lr}
 8017c5e:	460c      	mov	r4, r1
 8017c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c64:	f000 f894 	bl	8017d90 <_read_r>
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	bfab      	itete	ge
 8017c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8017c70:	181b      	addge	r3, r3, r0
 8017c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c76:	bfac      	ite	ge
 8017c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c7a:	81a3      	strhlt	r3, [r4, #12]
 8017c7c:	bd10      	pop	{r4, pc}

08017c7e <__swrite>:
 8017c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c82:	461f      	mov	r7, r3
 8017c84:	898b      	ldrh	r3, [r1, #12]
 8017c86:	05db      	lsls	r3, r3, #23
 8017c88:	4605      	mov	r5, r0
 8017c8a:	460c      	mov	r4, r1
 8017c8c:	4616      	mov	r6, r2
 8017c8e:	d505      	bpl.n	8017c9c <__swrite+0x1e>
 8017c90:	2302      	movs	r3, #2
 8017c92:	2200      	movs	r2, #0
 8017c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c98:	f000 f868 	bl	8017d6c <_lseek_r>
 8017c9c:	89a3      	ldrh	r3, [r4, #12]
 8017c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ca6:	81a3      	strh	r3, [r4, #12]
 8017ca8:	4632      	mov	r2, r6
 8017caa:	463b      	mov	r3, r7
 8017cac:	4628      	mov	r0, r5
 8017cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb2:	f000 b817 	b.w	8017ce4 <_write_r>

08017cb6 <__sseek>:
 8017cb6:	b510      	push	{r4, lr}
 8017cb8:	460c      	mov	r4, r1
 8017cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cbe:	f000 f855 	bl	8017d6c <_lseek_r>
 8017cc2:	1c43      	adds	r3, r0, #1
 8017cc4:	89a3      	ldrh	r3, [r4, #12]
 8017cc6:	bf15      	itete	ne
 8017cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017cd2:	81a3      	strheq	r3, [r4, #12]
 8017cd4:	bf18      	it	ne
 8017cd6:	81a3      	strhne	r3, [r4, #12]
 8017cd8:	bd10      	pop	{r4, pc}

08017cda <__sclose>:
 8017cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cde:	f000 b813 	b.w	8017d08 <_close_r>
	...

08017ce4 <_write_r>:
 8017ce4:	b538      	push	{r3, r4, r5, lr}
 8017ce6:	4c07      	ldr	r4, [pc, #28]	; (8017d04 <_write_r+0x20>)
 8017ce8:	4605      	mov	r5, r0
 8017cea:	4608      	mov	r0, r1
 8017cec:	4611      	mov	r1, r2
 8017cee:	2200      	movs	r2, #0
 8017cf0:	6022      	str	r2, [r4, #0]
 8017cf2:	461a      	mov	r2, r3
 8017cf4:	f7fd fdf1 	bl	80158da <_write>
 8017cf8:	1c43      	adds	r3, r0, #1
 8017cfa:	d102      	bne.n	8017d02 <_write_r+0x1e>
 8017cfc:	6823      	ldr	r3, [r4, #0]
 8017cfe:	b103      	cbz	r3, 8017d02 <_write_r+0x1e>
 8017d00:	602b      	str	r3, [r5, #0]
 8017d02:	bd38      	pop	{r3, r4, r5, pc}
 8017d04:	20009168 	.word	0x20009168

08017d08 <_close_r>:
 8017d08:	b538      	push	{r3, r4, r5, lr}
 8017d0a:	4c06      	ldr	r4, [pc, #24]	; (8017d24 <_close_r+0x1c>)
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	4605      	mov	r5, r0
 8017d10:	4608      	mov	r0, r1
 8017d12:	6023      	str	r3, [r4, #0]
 8017d14:	f7fd fdf2 	bl	80158fc <_close>
 8017d18:	1c43      	adds	r3, r0, #1
 8017d1a:	d102      	bne.n	8017d22 <_close_r+0x1a>
 8017d1c:	6823      	ldr	r3, [r4, #0]
 8017d1e:	b103      	cbz	r3, 8017d22 <_close_r+0x1a>
 8017d20:	602b      	str	r3, [r5, #0]
 8017d22:	bd38      	pop	{r3, r4, r5, pc}
 8017d24:	20009168 	.word	0x20009168

08017d28 <_fstat_r>:
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4c07      	ldr	r4, [pc, #28]	; (8017d48 <_fstat_r+0x20>)
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	4605      	mov	r5, r0
 8017d30:	4608      	mov	r0, r1
 8017d32:	4611      	mov	r1, r2
 8017d34:	6023      	str	r3, [r4, #0]
 8017d36:	f7fd fded 	bl	8015914 <_fstat>
 8017d3a:	1c43      	adds	r3, r0, #1
 8017d3c:	d102      	bne.n	8017d44 <_fstat_r+0x1c>
 8017d3e:	6823      	ldr	r3, [r4, #0]
 8017d40:	b103      	cbz	r3, 8017d44 <_fstat_r+0x1c>
 8017d42:	602b      	str	r3, [r5, #0]
 8017d44:	bd38      	pop	{r3, r4, r5, pc}
 8017d46:	bf00      	nop
 8017d48:	20009168 	.word	0x20009168

08017d4c <_isatty_r>:
 8017d4c:	b538      	push	{r3, r4, r5, lr}
 8017d4e:	4c06      	ldr	r4, [pc, #24]	; (8017d68 <_isatty_r+0x1c>)
 8017d50:	2300      	movs	r3, #0
 8017d52:	4605      	mov	r5, r0
 8017d54:	4608      	mov	r0, r1
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	f7fd fdec 	bl	8015934 <_isatty>
 8017d5c:	1c43      	adds	r3, r0, #1
 8017d5e:	d102      	bne.n	8017d66 <_isatty_r+0x1a>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	b103      	cbz	r3, 8017d66 <_isatty_r+0x1a>
 8017d64:	602b      	str	r3, [r5, #0]
 8017d66:	bd38      	pop	{r3, r4, r5, pc}
 8017d68:	20009168 	.word	0x20009168

08017d6c <_lseek_r>:
 8017d6c:	b538      	push	{r3, r4, r5, lr}
 8017d6e:	4c07      	ldr	r4, [pc, #28]	; (8017d8c <_lseek_r+0x20>)
 8017d70:	4605      	mov	r5, r0
 8017d72:	4608      	mov	r0, r1
 8017d74:	4611      	mov	r1, r2
 8017d76:	2200      	movs	r2, #0
 8017d78:	6022      	str	r2, [r4, #0]
 8017d7a:	461a      	mov	r2, r3
 8017d7c:	f7fd fde5 	bl	801594a <_lseek>
 8017d80:	1c43      	adds	r3, r0, #1
 8017d82:	d102      	bne.n	8017d8a <_lseek_r+0x1e>
 8017d84:	6823      	ldr	r3, [r4, #0]
 8017d86:	b103      	cbz	r3, 8017d8a <_lseek_r+0x1e>
 8017d88:	602b      	str	r3, [r5, #0]
 8017d8a:	bd38      	pop	{r3, r4, r5, pc}
 8017d8c:	20009168 	.word	0x20009168

08017d90 <_read_r>:
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	4c07      	ldr	r4, [pc, #28]	; (8017db0 <_read_r+0x20>)
 8017d94:	4605      	mov	r5, r0
 8017d96:	4608      	mov	r0, r1
 8017d98:	4611      	mov	r1, r2
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	6022      	str	r2, [r4, #0]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	f7fd fd7e 	bl	80158a0 <_read>
 8017da4:	1c43      	adds	r3, r0, #1
 8017da6:	d102      	bne.n	8017dae <_read_r+0x1e>
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	b103      	cbz	r3, 8017dae <_read_r+0x1e>
 8017dac:	602b      	str	r3, [r5, #0]
 8017dae:	bd38      	pop	{r3, r4, r5, pc}
 8017db0:	20009168 	.word	0x20009168

08017db4 <atanf>:
 8017db4:	b538      	push	{r3, r4, r5, lr}
 8017db6:	ee10 5a10 	vmov	r5, s0
 8017dba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017dbe:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8017dc2:	eef0 7a40 	vmov.f32	s15, s0
 8017dc6:	db10      	blt.n	8017dea <atanf+0x36>
 8017dc8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017dcc:	dd04      	ble.n	8017dd8 <atanf+0x24>
 8017dce:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8017dd6:	bd38      	pop	{r3, r4, r5, pc}
 8017dd8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017f10 <atanf+0x15c>
 8017ddc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017f14 <atanf+0x160>
 8017de0:	2d00      	cmp	r5, #0
 8017de2:	bfd8      	it	le
 8017de4:	eef0 7a47 	vmovle.f32	s15, s14
 8017de8:	e7f3      	b.n	8017dd2 <atanf+0x1e>
 8017dea:	4b4b      	ldr	r3, [pc, #300]	; (8017f18 <atanf+0x164>)
 8017dec:	429c      	cmp	r4, r3
 8017dee:	dc10      	bgt.n	8017e12 <atanf+0x5e>
 8017df0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017df4:	da0a      	bge.n	8017e0c <atanf+0x58>
 8017df6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017f1c <atanf+0x168>
 8017dfa:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e02:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e0a:	dce2      	bgt.n	8017dd2 <atanf+0x1e>
 8017e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e10:	e013      	b.n	8017e3a <atanf+0x86>
 8017e12:	f000 f8e3 	bl	8017fdc <fabsf>
 8017e16:	4b42      	ldr	r3, [pc, #264]	; (8017f20 <atanf+0x16c>)
 8017e18:	429c      	cmp	r4, r3
 8017e1a:	dc4f      	bgt.n	8017ebc <atanf+0x108>
 8017e1c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017e20:	429c      	cmp	r4, r3
 8017e22:	dc41      	bgt.n	8017ea8 <atanf+0xf4>
 8017e24:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017e28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017e2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017e30:	2300      	movs	r3, #0
 8017e32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017e36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e3a:	1c5a      	adds	r2, r3, #1
 8017e3c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017e40:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017f24 <atanf+0x170>
 8017e44:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017f28 <atanf+0x174>
 8017e48:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017f2c <atanf+0x178>
 8017e4c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017e50:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017e54:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8017f30 <atanf+0x17c>
 8017e58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017e5c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8017f34 <atanf+0x180>
 8017e60:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017e64:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8017f38 <atanf+0x184>
 8017e68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017e6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8017f3c <atanf+0x188>
 8017e70:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017e74:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017f40 <atanf+0x18c>
 8017e78:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017e7c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017f44 <atanf+0x190>
 8017e80:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017e84:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8017f48 <atanf+0x194>
 8017e88:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017e8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017f4c <atanf+0x198>
 8017e90:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017e94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017e98:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017ea0:	d121      	bne.n	8017ee6 <atanf+0x132>
 8017ea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ea6:	e794      	b.n	8017dd2 <atanf+0x1e>
 8017ea8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017eac:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017eb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017eba:	e7be      	b.n	8017e3a <atanf+0x86>
 8017ebc:	4b24      	ldr	r3, [pc, #144]	; (8017f50 <atanf+0x19c>)
 8017ebe:	429c      	cmp	r4, r3
 8017ec0:	dc0b      	bgt.n	8017eda <atanf+0x126>
 8017ec2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017eca:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017ece:	2302      	movs	r3, #2
 8017ed0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017ed8:	e7af      	b.n	8017e3a <atanf+0x86>
 8017eda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017ede:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017ee2:	2303      	movs	r3, #3
 8017ee4:	e7a9      	b.n	8017e3a <atanf+0x86>
 8017ee6:	4a1b      	ldr	r2, [pc, #108]	; (8017f54 <atanf+0x1a0>)
 8017ee8:	491b      	ldr	r1, [pc, #108]	; (8017f58 <atanf+0x1a4>)
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	441a      	add	r2, r3
 8017eee:	440b      	add	r3, r1
 8017ef0:	edd3 6a00 	vldr	s13, [r3]
 8017ef4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017ef8:	2d00      	cmp	r5, #0
 8017efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017efe:	ed92 7a00 	vldr	s14, [r2]
 8017f02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017f06:	bfb8      	it	lt
 8017f08:	eef1 7a67 	vneglt.f32	s15, s15
 8017f0c:	e761      	b.n	8017dd2 <atanf+0x1e>
 8017f0e:	bf00      	nop
 8017f10:	bfc90fdb 	.word	0xbfc90fdb
 8017f14:	3fc90fdb 	.word	0x3fc90fdb
 8017f18:	3edfffff 	.word	0x3edfffff
 8017f1c:	7149f2ca 	.word	0x7149f2ca
 8017f20:	3f97ffff 	.word	0x3f97ffff
 8017f24:	3c8569d7 	.word	0x3c8569d7
 8017f28:	3d4bda59 	.word	0x3d4bda59
 8017f2c:	bd6ef16b 	.word	0xbd6ef16b
 8017f30:	3d886b35 	.word	0x3d886b35
 8017f34:	3dba2e6e 	.word	0x3dba2e6e
 8017f38:	3e124925 	.word	0x3e124925
 8017f3c:	3eaaaaab 	.word	0x3eaaaaab
 8017f40:	bd15a221 	.word	0xbd15a221
 8017f44:	bd9d8795 	.word	0xbd9d8795
 8017f48:	bde38e38 	.word	0xbde38e38
 8017f4c:	be4ccccd 	.word	0xbe4ccccd
 8017f50:	401bffff 	.word	0x401bffff
 8017f54:	0801b408 	.word	0x0801b408
 8017f58:	0801b418 	.word	0x0801b418

08017f5c <cosf>:
 8017f5c:	ee10 3a10 	vmov	r3, s0
 8017f60:	b507      	push	{r0, r1, r2, lr}
 8017f62:	4a1c      	ldr	r2, [pc, #112]	; (8017fd4 <cosf+0x78>)
 8017f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	dc04      	bgt.n	8017f76 <cosf+0x1a>
 8017f6c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8017fd8 <cosf+0x7c>
 8017f70:	f000 fad6 	bl	8018520 <__kernel_cosf>
 8017f74:	e004      	b.n	8017f80 <cosf+0x24>
 8017f76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017f7a:	db04      	blt.n	8017f86 <cosf+0x2a>
 8017f7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017f80:	b003      	add	sp, #12
 8017f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f86:	4668      	mov	r0, sp
 8017f88:	f000 f99a 	bl	80182c0 <__ieee754_rem_pio2f>
 8017f8c:	f000 0003 	and.w	r0, r0, #3
 8017f90:	2801      	cmp	r0, #1
 8017f92:	d007      	beq.n	8017fa4 <cosf+0x48>
 8017f94:	2802      	cmp	r0, #2
 8017f96:	d00e      	beq.n	8017fb6 <cosf+0x5a>
 8017f98:	b9a0      	cbnz	r0, 8017fc4 <cosf+0x68>
 8017f9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f9e:	ed9d 0a00 	vldr	s0, [sp]
 8017fa2:	e7e5      	b.n	8017f70 <cosf+0x14>
 8017fa4:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fa8:	ed9d 0a00 	vldr	s0, [sp]
 8017fac:	f000 fd98 	bl	8018ae0 <__kernel_sinf>
 8017fb0:	eeb1 0a40 	vneg.f32	s0, s0
 8017fb4:	e7e4      	b.n	8017f80 <cosf+0x24>
 8017fb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fba:	ed9d 0a00 	vldr	s0, [sp]
 8017fbe:	f000 faaf 	bl	8018520 <__kernel_cosf>
 8017fc2:	e7f5      	b.n	8017fb0 <cosf+0x54>
 8017fc4:	2001      	movs	r0, #1
 8017fc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fca:	ed9d 0a00 	vldr	s0, [sp]
 8017fce:	f000 fd87 	bl	8018ae0 <__kernel_sinf>
 8017fd2:	e7d5      	b.n	8017f80 <cosf+0x24>
 8017fd4:	3f490fd8 	.word	0x3f490fd8
 8017fd8:	00000000 	.word	0x00000000

08017fdc <fabsf>:
 8017fdc:	ee10 3a10 	vmov	r3, s0
 8017fe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fe4:	ee00 3a10 	vmov	s0, r3
 8017fe8:	4770      	bx	lr
	...

08017fec <sinf>:
 8017fec:	ee10 3a10 	vmov	r3, s0
 8017ff0:	b507      	push	{r0, r1, r2, lr}
 8017ff2:	4a1d      	ldr	r2, [pc, #116]	; (8018068 <sinf+0x7c>)
 8017ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	dc05      	bgt.n	8018008 <sinf+0x1c>
 8017ffc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801806c <sinf+0x80>
 8018000:	2000      	movs	r0, #0
 8018002:	f000 fd6d 	bl	8018ae0 <__kernel_sinf>
 8018006:	e004      	b.n	8018012 <sinf+0x26>
 8018008:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801800c:	db04      	blt.n	8018018 <sinf+0x2c>
 801800e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018012:	b003      	add	sp, #12
 8018014:	f85d fb04 	ldr.w	pc, [sp], #4
 8018018:	4668      	mov	r0, sp
 801801a:	f000 f951 	bl	80182c0 <__ieee754_rem_pio2f>
 801801e:	f000 0003 	and.w	r0, r0, #3
 8018022:	2801      	cmp	r0, #1
 8018024:	d008      	beq.n	8018038 <sinf+0x4c>
 8018026:	2802      	cmp	r0, #2
 8018028:	d00d      	beq.n	8018046 <sinf+0x5a>
 801802a:	b9b0      	cbnz	r0, 801805a <sinf+0x6e>
 801802c:	2001      	movs	r0, #1
 801802e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018032:	ed9d 0a00 	vldr	s0, [sp]
 8018036:	e7e4      	b.n	8018002 <sinf+0x16>
 8018038:	eddd 0a01 	vldr	s1, [sp, #4]
 801803c:	ed9d 0a00 	vldr	s0, [sp]
 8018040:	f000 fa6e 	bl	8018520 <__kernel_cosf>
 8018044:	e7e5      	b.n	8018012 <sinf+0x26>
 8018046:	2001      	movs	r0, #1
 8018048:	eddd 0a01 	vldr	s1, [sp, #4]
 801804c:	ed9d 0a00 	vldr	s0, [sp]
 8018050:	f000 fd46 	bl	8018ae0 <__kernel_sinf>
 8018054:	eeb1 0a40 	vneg.f32	s0, s0
 8018058:	e7db      	b.n	8018012 <sinf+0x26>
 801805a:	eddd 0a01 	vldr	s1, [sp, #4]
 801805e:	ed9d 0a00 	vldr	s0, [sp]
 8018062:	f000 fa5d 	bl	8018520 <__kernel_cosf>
 8018066:	e7f5      	b.n	8018054 <sinf+0x68>
 8018068:	3f490fd8 	.word	0x3f490fd8
 801806c:	00000000 	.word	0x00000000

08018070 <tanf>:
 8018070:	ee10 3a10 	vmov	r3, s0
 8018074:	b507      	push	{r0, r1, r2, lr}
 8018076:	4a10      	ldr	r2, [pc, #64]	; (80180b8 <tanf+0x48>)
 8018078:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801807c:	4293      	cmp	r3, r2
 801807e:	dc05      	bgt.n	801808c <tanf+0x1c>
 8018080:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80180bc <tanf+0x4c>
 8018084:	2001      	movs	r0, #1
 8018086:	f000 fd73 	bl	8018b70 <__kernel_tanf>
 801808a:	e004      	b.n	8018096 <tanf+0x26>
 801808c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018090:	db04      	blt.n	801809c <tanf+0x2c>
 8018092:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018096:	b003      	add	sp, #12
 8018098:	f85d fb04 	ldr.w	pc, [sp], #4
 801809c:	4668      	mov	r0, sp
 801809e:	f000 f90f 	bl	80182c0 <__ieee754_rem_pio2f>
 80180a2:	0040      	lsls	r0, r0, #1
 80180a4:	f000 0002 	and.w	r0, r0, #2
 80180a8:	f1c0 0001 	rsb	r0, r0, #1
 80180ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80180b0:	ed9d 0a00 	vldr	s0, [sp]
 80180b4:	e7e7      	b.n	8018086 <tanf+0x16>
 80180b6:	bf00      	nop
 80180b8:	3f490fda 	.word	0x3f490fda
 80180bc:	00000000 	.word	0x00000000

080180c0 <atan2f>:
 80180c0:	f000 b850 	b.w	8018164 <__ieee754_atan2f>

080180c4 <sqrtf>:
 80180c4:	b510      	push	{r4, lr}
 80180c6:	ed2d 8b02 	vpush	{d8}
 80180ca:	b08a      	sub	sp, #40	; 0x28
 80180cc:	eeb0 8a40 	vmov.f32	s16, s0
 80180d0:	f000 fa22 	bl	8018518 <__ieee754_sqrtf>
 80180d4:	4b21      	ldr	r3, [pc, #132]	; (801815c <sqrtf+0x98>)
 80180d6:	f993 4000 	ldrsb.w	r4, [r3]
 80180da:	1c63      	adds	r3, r4, #1
 80180dc:	d02c      	beq.n	8018138 <sqrtf+0x74>
 80180de:	eeb4 8a48 	vcmp.f32	s16, s16
 80180e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180e6:	d627      	bvs.n	8018138 <sqrtf+0x74>
 80180e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80180ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f0:	d522      	bpl.n	8018138 <sqrtf+0x74>
 80180f2:	2301      	movs	r3, #1
 80180f4:	9300      	str	r3, [sp, #0]
 80180f6:	4b1a      	ldr	r3, [pc, #104]	; (8018160 <sqrtf+0x9c>)
 80180f8:	9301      	str	r3, [sp, #4]
 80180fa:	ee18 0a10 	vmov	r0, s16
 80180fe:	2300      	movs	r3, #0
 8018100:	9308      	str	r3, [sp, #32]
 8018102:	f7e8 fa29 	bl	8000558 <__aeabi_f2d>
 8018106:	2200      	movs	r2, #0
 8018108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801810c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018110:	2300      	movs	r3, #0
 8018112:	b9ac      	cbnz	r4, 8018140 <sqrtf+0x7c>
 8018114:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018118:	4668      	mov	r0, sp
 801811a:	f000 fe0d 	bl	8018d38 <matherr>
 801811e:	b1b8      	cbz	r0, 8018150 <sqrtf+0x8c>
 8018120:	9b08      	ldr	r3, [sp, #32]
 8018122:	b11b      	cbz	r3, 801812c <sqrtf+0x68>
 8018124:	f000 feb8 	bl	8018e98 <__errno>
 8018128:	9b08      	ldr	r3, [sp, #32]
 801812a:	6003      	str	r3, [r0, #0]
 801812c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018130:	f7e8 fc9c 	bl	8000a6c <__aeabi_d2f>
 8018134:	ee00 0a10 	vmov	s0, r0
 8018138:	b00a      	add	sp, #40	; 0x28
 801813a:	ecbd 8b02 	vpop	{d8}
 801813e:	bd10      	pop	{r4, pc}
 8018140:	4610      	mov	r0, r2
 8018142:	4619      	mov	r1, r3
 8018144:	f7e8 fb8a 	bl	800085c <__aeabi_ddiv>
 8018148:	2c02      	cmp	r4, #2
 801814a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801814e:	d1e3      	bne.n	8018118 <sqrtf+0x54>
 8018150:	f000 fea2 	bl	8018e98 <__errno>
 8018154:	2321      	movs	r3, #33	; 0x21
 8018156:	6003      	str	r3, [r0, #0]
 8018158:	e7e2      	b.n	8018120 <sqrtf+0x5c>
 801815a:	bf00      	nop
 801815c:	200001f0 	.word	0x200001f0
 8018160:	0801b428 	.word	0x0801b428

08018164 <__ieee754_atan2f>:
 8018164:	ee10 2a90 	vmov	r2, s1
 8018168:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801816c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018170:	b510      	push	{r4, lr}
 8018172:	eef0 7a40 	vmov.f32	s15, s0
 8018176:	dc06      	bgt.n	8018186 <__ieee754_atan2f+0x22>
 8018178:	ee10 0a10 	vmov	r0, s0
 801817c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018184:	dd04      	ble.n	8018190 <__ieee754_atan2f+0x2c>
 8018186:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801818a:	eeb0 0a67 	vmov.f32	s0, s15
 801818e:	bd10      	pop	{r4, pc}
 8018190:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018194:	d103      	bne.n	801819e <__ieee754_atan2f+0x3a>
 8018196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801819a:	f7ff be0b 	b.w	8017db4 <atanf>
 801819e:	1794      	asrs	r4, r2, #30
 80181a0:	f004 0402 	and.w	r4, r4, #2
 80181a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80181a8:	b943      	cbnz	r3, 80181bc <__ieee754_atan2f+0x58>
 80181aa:	2c02      	cmp	r4, #2
 80181ac:	d06e      	beq.n	801828c <__ieee754_atan2f+0x128>
 80181ae:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8018294 <__ieee754_atan2f+0x130>
 80181b2:	2c03      	cmp	r4, #3
 80181b4:	bf08      	it	eq
 80181b6:	eef0 7a47 	vmoveq.f32	s15, s14
 80181ba:	e7e6      	b.n	801818a <__ieee754_atan2f+0x26>
 80181bc:	b941      	cbnz	r1, 80181d0 <__ieee754_atan2f+0x6c>
 80181be:	eddf 7a36 	vldr	s15, [pc, #216]	; 8018298 <__ieee754_atan2f+0x134>
 80181c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801829c <__ieee754_atan2f+0x138>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	bfb8      	it	lt
 80181ca:	eef0 7a47 	vmovlt.f32	s15, s14
 80181ce:	e7dc      	b.n	801818a <__ieee754_atan2f+0x26>
 80181d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80181d4:	d122      	bne.n	801821c <__ieee754_atan2f+0xb8>
 80181d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80181da:	d112      	bne.n	8018202 <__ieee754_atan2f+0x9e>
 80181dc:	2c02      	cmp	r4, #2
 80181de:	d00a      	beq.n	80181f6 <__ieee754_atan2f+0x92>
 80181e0:	2c03      	cmp	r4, #3
 80181e2:	d00b      	beq.n	80181fc <__ieee754_atan2f+0x98>
 80181e4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80182a0 <__ieee754_atan2f+0x13c>
 80181e8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80182a4 <__ieee754_atan2f+0x140>
 80181ec:	2c01      	cmp	r4, #1
 80181ee:	bf18      	it	ne
 80181f0:	eef0 7a47 	vmovne.f32	s15, s14
 80181f4:	e7c9      	b.n	801818a <__ieee754_atan2f+0x26>
 80181f6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80182a8 <__ieee754_atan2f+0x144>
 80181fa:	e7c6      	b.n	801818a <__ieee754_atan2f+0x26>
 80181fc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80182ac <__ieee754_atan2f+0x148>
 8018200:	e7c3      	b.n	801818a <__ieee754_atan2f+0x26>
 8018202:	2c02      	cmp	r4, #2
 8018204:	d042      	beq.n	801828c <__ieee754_atan2f+0x128>
 8018206:	2c03      	cmp	r4, #3
 8018208:	d005      	beq.n	8018216 <__ieee754_atan2f+0xb2>
 801820a:	2c01      	cmp	r4, #1
 801820c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80182b0 <__ieee754_atan2f+0x14c>
 8018210:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80182b4 <__ieee754_atan2f+0x150>
 8018214:	e7eb      	b.n	80181ee <__ieee754_atan2f+0x8a>
 8018216:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018294 <__ieee754_atan2f+0x130>
 801821a:	e7b6      	b.n	801818a <__ieee754_atan2f+0x26>
 801821c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018220:	d0cd      	beq.n	80181be <__ieee754_atan2f+0x5a>
 8018222:	1a5b      	subs	r3, r3, r1
 8018224:	15db      	asrs	r3, r3, #23
 8018226:	2b3c      	cmp	r3, #60	; 0x3c
 8018228:	dc1a      	bgt.n	8018260 <__ieee754_atan2f+0xfc>
 801822a:	2a00      	cmp	r2, #0
 801822c:	da01      	bge.n	8018232 <__ieee754_atan2f+0xce>
 801822e:	333c      	adds	r3, #60	; 0x3c
 8018230:	db19      	blt.n	8018266 <__ieee754_atan2f+0x102>
 8018232:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018236:	f7ff fed1 	bl	8017fdc <fabsf>
 801823a:	f7ff fdbb 	bl	8017db4 <atanf>
 801823e:	eef0 7a40 	vmov.f32	s15, s0
 8018242:	2c01      	cmp	r4, #1
 8018244:	d012      	beq.n	801826c <__ieee754_atan2f+0x108>
 8018246:	2c02      	cmp	r4, #2
 8018248:	d017      	beq.n	801827a <__ieee754_atan2f+0x116>
 801824a:	2c00      	cmp	r4, #0
 801824c:	d09d      	beq.n	801818a <__ieee754_atan2f+0x26>
 801824e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80182b8 <__ieee754_atan2f+0x154>
 8018252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018256:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80182bc <__ieee754_atan2f+0x158>
 801825a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801825e:	e794      	b.n	801818a <__ieee754_atan2f+0x26>
 8018260:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018298 <__ieee754_atan2f+0x134>
 8018264:	e7ed      	b.n	8018242 <__ieee754_atan2f+0xde>
 8018266:	eddf 7a13 	vldr	s15, [pc, #76]	; 80182b4 <__ieee754_atan2f+0x150>
 801826a:	e7ea      	b.n	8018242 <__ieee754_atan2f+0xde>
 801826c:	ee17 3a90 	vmov	r3, s15
 8018270:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018274:	ee07 3a90 	vmov	s15, r3
 8018278:	e787      	b.n	801818a <__ieee754_atan2f+0x26>
 801827a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80182b8 <__ieee754_atan2f+0x154>
 801827e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018282:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80182bc <__ieee754_atan2f+0x158>
 8018286:	ee77 7a67 	vsub.f32	s15, s14, s15
 801828a:	e77e      	b.n	801818a <__ieee754_atan2f+0x26>
 801828c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80182bc <__ieee754_atan2f+0x158>
 8018290:	e77b      	b.n	801818a <__ieee754_atan2f+0x26>
 8018292:	bf00      	nop
 8018294:	c0490fdb 	.word	0xc0490fdb
 8018298:	3fc90fdb 	.word	0x3fc90fdb
 801829c:	bfc90fdb 	.word	0xbfc90fdb
 80182a0:	bf490fdb 	.word	0xbf490fdb
 80182a4:	3f490fdb 	.word	0x3f490fdb
 80182a8:	4016cbe4 	.word	0x4016cbe4
 80182ac:	c016cbe4 	.word	0xc016cbe4
 80182b0:	80000000 	.word	0x80000000
 80182b4:	00000000 	.word	0x00000000
 80182b8:	33bbbd2e 	.word	0x33bbbd2e
 80182bc:	40490fdb 	.word	0x40490fdb

080182c0 <__ieee754_rem_pio2f>:
 80182c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182c2:	ee10 6a10 	vmov	r6, s0
 80182c6:	4b86      	ldr	r3, [pc, #536]	; (80184e0 <__ieee754_rem_pio2f+0x220>)
 80182c8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80182cc:	429c      	cmp	r4, r3
 80182ce:	b087      	sub	sp, #28
 80182d0:	4605      	mov	r5, r0
 80182d2:	dc05      	bgt.n	80182e0 <__ieee754_rem_pio2f+0x20>
 80182d4:	2300      	movs	r3, #0
 80182d6:	ed85 0a00 	vstr	s0, [r5]
 80182da:	6043      	str	r3, [r0, #4]
 80182dc:	2000      	movs	r0, #0
 80182de:	e020      	b.n	8018322 <__ieee754_rem_pio2f+0x62>
 80182e0:	4b80      	ldr	r3, [pc, #512]	; (80184e4 <__ieee754_rem_pio2f+0x224>)
 80182e2:	429c      	cmp	r4, r3
 80182e4:	dc38      	bgt.n	8018358 <__ieee754_rem_pio2f+0x98>
 80182e6:	2e00      	cmp	r6, #0
 80182e8:	f024 040f 	bic.w	r4, r4, #15
 80182ec:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80184e8 <__ieee754_rem_pio2f+0x228>
 80182f0:	4b7e      	ldr	r3, [pc, #504]	; (80184ec <__ieee754_rem_pio2f+0x22c>)
 80182f2:	dd18      	ble.n	8018326 <__ieee754_rem_pio2f+0x66>
 80182f4:	429c      	cmp	r4, r3
 80182f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80182fa:	bf09      	itett	eq
 80182fc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80184f0 <__ieee754_rem_pio2f+0x230>
 8018300:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80184f4 <__ieee754_rem_pio2f+0x234>
 8018304:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018308:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80184f8 <__ieee754_rem_pio2f+0x238>
 801830c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018314:	edc0 6a00 	vstr	s13, [r0]
 8018318:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801831c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018320:	2001      	movs	r0, #1
 8018322:	b007      	add	sp, #28
 8018324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018326:	429c      	cmp	r4, r3
 8018328:	ee70 7a07 	vadd.f32	s15, s0, s14
 801832c:	bf09      	itett	eq
 801832e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80184f0 <__ieee754_rem_pio2f+0x230>
 8018332:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80184f4 <__ieee754_rem_pio2f+0x234>
 8018336:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801833a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80184f8 <__ieee754_rem_pio2f+0x238>
 801833e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018346:	edc0 6a00 	vstr	s13, [r0]
 801834a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801834e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018356:	e7e4      	b.n	8018322 <__ieee754_rem_pio2f+0x62>
 8018358:	4b68      	ldr	r3, [pc, #416]	; (80184fc <__ieee754_rem_pio2f+0x23c>)
 801835a:	429c      	cmp	r4, r3
 801835c:	dc71      	bgt.n	8018442 <__ieee754_rem_pio2f+0x182>
 801835e:	f7ff fe3d 	bl	8017fdc <fabsf>
 8018362:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8018500 <__ieee754_rem_pio2f+0x240>
 8018366:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801836a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801836e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018372:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8018376:	ee17 0a90 	vmov	r0, s15
 801837a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80184e8 <__ieee754_rem_pio2f+0x228>
 801837e:	eeb1 7a46 	vneg.f32	s14, s12
 8018382:	eea7 0a27 	vfma.f32	s0, s14, s15
 8018386:	281f      	cmp	r0, #31
 8018388:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80184f4 <__ieee754_rem_pio2f+0x234>
 801838c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018390:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018394:	ee16 3a90 	vmov	r3, s13
 8018398:	dc1c      	bgt.n	80183d4 <__ieee754_rem_pio2f+0x114>
 801839a:	1e47      	subs	r7, r0, #1
 801839c:	4959      	ldr	r1, [pc, #356]	; (8018504 <__ieee754_rem_pio2f+0x244>)
 801839e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80183a2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80183a6:	428a      	cmp	r2, r1
 80183a8:	d014      	beq.n	80183d4 <__ieee754_rem_pio2f+0x114>
 80183aa:	602b      	str	r3, [r5, #0]
 80183ac:	ed95 7a00 	vldr	s14, [r5]
 80183b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80183b4:	2e00      	cmp	r6, #0
 80183b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80183ba:	ed85 0a01 	vstr	s0, [r5, #4]
 80183be:	dab0      	bge.n	8018322 <__ieee754_rem_pio2f+0x62>
 80183c0:	eeb1 7a47 	vneg.f32	s14, s14
 80183c4:	eeb1 0a40 	vneg.f32	s0, s0
 80183c8:	ed85 7a00 	vstr	s14, [r5]
 80183cc:	ed85 0a01 	vstr	s0, [r5, #4]
 80183d0:	4240      	negs	r0, r0
 80183d2:	e7a6      	b.n	8018322 <__ieee754_rem_pio2f+0x62>
 80183d4:	15e4      	asrs	r4, r4, #23
 80183d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80183da:	1aa2      	subs	r2, r4, r2
 80183dc:	2a08      	cmp	r2, #8
 80183de:	dde4      	ble.n	80183aa <__ieee754_rem_pio2f+0xea>
 80183e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80184f0 <__ieee754_rem_pio2f+0x230>
 80183e4:	eef0 6a40 	vmov.f32	s13, s0
 80183e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80183ec:	ee30 0a66 	vsub.f32	s0, s0, s13
 80183f0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80183f4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80184f8 <__ieee754_rem_pio2f+0x238>
 80183f8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80183fc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8018400:	eef0 7a40 	vmov.f32	s15, s0
 8018404:	ee15 3a90 	vmov	r3, s11
 8018408:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801840c:	1aa4      	subs	r4, r4, r2
 801840e:	2c19      	cmp	r4, #25
 8018410:	dc04      	bgt.n	801841c <__ieee754_rem_pio2f+0x15c>
 8018412:	edc5 5a00 	vstr	s11, [r5]
 8018416:	eeb0 0a66 	vmov.f32	s0, s13
 801841a:	e7c7      	b.n	80183ac <__ieee754_rem_pio2f+0xec>
 801841c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8018508 <__ieee754_rem_pio2f+0x248>
 8018420:	eeb0 0a66 	vmov.f32	s0, s13
 8018424:	eea7 0a25 	vfma.f32	s0, s14, s11
 8018428:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801842c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018430:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801850c <__ieee754_rem_pio2f+0x24c>
 8018434:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8018438:	ee30 7a67 	vsub.f32	s14, s0, s15
 801843c:	ed85 7a00 	vstr	s14, [r5]
 8018440:	e7b4      	b.n	80183ac <__ieee754_rem_pio2f+0xec>
 8018442:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018446:	db06      	blt.n	8018456 <__ieee754_rem_pio2f+0x196>
 8018448:	ee70 7a40 	vsub.f32	s15, s0, s0
 801844c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018450:	edc0 7a00 	vstr	s15, [r0]
 8018454:	e742      	b.n	80182dc <__ieee754_rem_pio2f+0x1c>
 8018456:	15e2      	asrs	r2, r4, #23
 8018458:	3a86      	subs	r2, #134	; 0x86
 801845a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 801845e:	ee07 3a90 	vmov	s15, r3
 8018462:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018466:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8018510 <__ieee754_rem_pio2f+0x250>
 801846a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801846e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018472:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018476:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801847a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801847e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018486:	ed8d 7a04 	vstr	s14, [sp, #16]
 801848a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801848e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018496:	edcd 7a05 	vstr	s15, [sp, #20]
 801849a:	d11e      	bne.n	80184da <__ieee754_rem_pio2f+0x21a>
 801849c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80184a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a4:	bf0c      	ite	eq
 80184a6:	2301      	moveq	r3, #1
 80184a8:	2302      	movne	r3, #2
 80184aa:	491a      	ldr	r1, [pc, #104]	; (8018514 <__ieee754_rem_pio2f+0x254>)
 80184ac:	9101      	str	r1, [sp, #4]
 80184ae:	2102      	movs	r1, #2
 80184b0:	9100      	str	r1, [sp, #0]
 80184b2:	a803      	add	r0, sp, #12
 80184b4:	4629      	mov	r1, r5
 80184b6:	f000 f891 	bl	80185dc <__kernel_rem_pio2f>
 80184ba:	2e00      	cmp	r6, #0
 80184bc:	f6bf af31 	bge.w	8018322 <__ieee754_rem_pio2f+0x62>
 80184c0:	edd5 7a00 	vldr	s15, [r5]
 80184c4:	eef1 7a67 	vneg.f32	s15, s15
 80184c8:	edc5 7a00 	vstr	s15, [r5]
 80184cc:	edd5 7a01 	vldr	s15, [r5, #4]
 80184d0:	eef1 7a67 	vneg.f32	s15, s15
 80184d4:	edc5 7a01 	vstr	s15, [r5, #4]
 80184d8:	e77a      	b.n	80183d0 <__ieee754_rem_pio2f+0x110>
 80184da:	2303      	movs	r3, #3
 80184dc:	e7e5      	b.n	80184aa <__ieee754_rem_pio2f+0x1ea>
 80184de:	bf00      	nop
 80184e0:	3f490fd8 	.word	0x3f490fd8
 80184e4:	4016cbe3 	.word	0x4016cbe3
 80184e8:	3fc90f80 	.word	0x3fc90f80
 80184ec:	3fc90fd0 	.word	0x3fc90fd0
 80184f0:	37354400 	.word	0x37354400
 80184f4:	37354443 	.word	0x37354443
 80184f8:	2e85a308 	.word	0x2e85a308
 80184fc:	43490f80 	.word	0x43490f80
 8018500:	3f22f984 	.word	0x3f22f984
 8018504:	0801b430 	.word	0x0801b430
 8018508:	2e85a300 	.word	0x2e85a300
 801850c:	248d3132 	.word	0x248d3132
 8018510:	43800000 	.word	0x43800000
 8018514:	0801b4b0 	.word	0x0801b4b0

08018518 <__ieee754_sqrtf>:
 8018518:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801851c:	4770      	bx	lr
	...

08018520 <__kernel_cosf>:
 8018520:	ee10 3a10 	vmov	r3, s0
 8018524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018528:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801852c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018530:	da05      	bge.n	801853e <__kernel_cosf+0x1e>
 8018532:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018536:	ee17 2a90 	vmov	r2, s15
 801853a:	2a00      	cmp	r2, #0
 801853c:	d03b      	beq.n	80185b6 <__kernel_cosf+0x96>
 801853e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018542:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018546:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80185bc <__kernel_cosf+0x9c>
 801854a:	4a1d      	ldr	r2, [pc, #116]	; (80185c0 <__kernel_cosf+0xa0>)
 801854c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8018550:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80185c4 <__kernel_cosf+0xa4>
 8018554:	eea6 7a25 	vfma.f32	s14, s12, s11
 8018558:	4293      	cmp	r3, r2
 801855a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80185c8 <__kernel_cosf+0xa8>
 801855e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018562:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80185cc <__kernel_cosf+0xac>
 8018566:	eea5 7a86 	vfma.f32	s14, s11, s12
 801856a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80185d0 <__kernel_cosf+0xb0>
 801856e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018572:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80185d4 <__kernel_cosf+0xb4>
 8018576:	eea5 7a86 	vfma.f32	s14, s11, s12
 801857a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801857e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018582:	eee6 0a07 	vfma.f32	s1, s12, s14
 8018586:	dc04      	bgt.n	8018592 <__kernel_cosf+0x72>
 8018588:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801858c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8018590:	4770      	bx	lr
 8018592:	4a11      	ldr	r2, [pc, #68]	; (80185d8 <__kernel_cosf+0xb8>)
 8018594:	4293      	cmp	r3, r2
 8018596:	bfda      	itte	le
 8018598:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801859c:	ee07 3a10 	vmovle	s14, r3
 80185a0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80185a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80185a8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80185ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80185b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80185b4:	4770      	bx	lr
 80185b6:	eeb0 0a66 	vmov.f32	s0, s13
 80185ba:	4770      	bx	lr
 80185bc:	ad47d74e 	.word	0xad47d74e
 80185c0:	3e999999 	.word	0x3e999999
 80185c4:	310f74f6 	.word	0x310f74f6
 80185c8:	b493f27c 	.word	0xb493f27c
 80185cc:	37d00d01 	.word	0x37d00d01
 80185d0:	bab60b61 	.word	0xbab60b61
 80185d4:	3d2aaaab 	.word	0x3d2aaaab
 80185d8:	3f480000 	.word	0x3f480000

080185dc <__kernel_rem_pio2f>:
 80185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e0:	ed2d 8b04 	vpush	{d8-d9}
 80185e4:	b0d7      	sub	sp, #348	; 0x15c
 80185e6:	469b      	mov	fp, r3
 80185e8:	460e      	mov	r6, r1
 80185ea:	4bbe      	ldr	r3, [pc, #760]	; (80188e4 <__kernel_rem_pio2f+0x308>)
 80185ec:	9964      	ldr	r1, [sp, #400]	; 0x190
 80185ee:	9002      	str	r0, [sp, #8]
 80185f0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80185f4:	9865      	ldr	r0, [sp, #404]	; 0x194
 80185f6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80185fa:	1ed1      	subs	r1, r2, #3
 80185fc:	2308      	movs	r3, #8
 80185fe:	fb91 f1f3 	sdiv	r1, r1, r3
 8018602:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018606:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 801860a:	1c4c      	adds	r4, r1, #1
 801860c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8018610:	eba1 050a 	sub.w	r5, r1, sl
 8018614:	aa1a      	add	r2, sp, #104	; 0x68
 8018616:	eb09 070a 	add.w	r7, r9, sl
 801861a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801861e:	4696      	mov	lr, r2
 8018620:	2300      	movs	r3, #0
 8018622:	42bb      	cmp	r3, r7
 8018624:	dd0f      	ble.n	8018646 <__kernel_rem_pio2f+0x6a>
 8018626:	af42      	add	r7, sp, #264	; 0x108
 8018628:	2200      	movs	r2, #0
 801862a:	454a      	cmp	r2, r9
 801862c:	dc27      	bgt.n	801867e <__kernel_rem_pio2f+0xa2>
 801862e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8018632:	eb0b 0302 	add.w	r3, fp, r2
 8018636:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 801863a:	9d02      	ldr	r5, [sp, #8]
 801863c:	eddf 7aad 	vldr	s15, [pc, #692]	; 80188f4 <__kernel_rem_pio2f+0x318>
 8018640:	f04f 0c00 	mov.w	ip, #0
 8018644:	e015      	b.n	8018672 <__kernel_rem_pio2f+0x96>
 8018646:	42dd      	cmn	r5, r3
 8018648:	bf5d      	ittte	pl
 801864a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 801864e:	ee07 2a90 	vmovpl	s15, r2
 8018652:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018656:	eef0 7a47 	vmovmi.f32	s15, s14
 801865a:	ecee 7a01 	vstmia	lr!, {s15}
 801865e:	3301      	adds	r3, #1
 8018660:	e7df      	b.n	8018622 <__kernel_rem_pio2f+0x46>
 8018662:	ecf5 6a01 	vldmia	r5!, {s13}
 8018666:	ed33 7a01 	vldmdb	r3!, {s14}
 801866a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801866e:	f10c 0c01 	add.w	ip, ip, #1
 8018672:	45d4      	cmp	ip, sl
 8018674:	ddf5      	ble.n	8018662 <__kernel_rem_pio2f+0x86>
 8018676:	ece7 7a01 	vstmia	r7!, {s15}
 801867a:	3201      	adds	r2, #1
 801867c:	e7d5      	b.n	801862a <__kernel_rem_pio2f+0x4e>
 801867e:	ab06      	add	r3, sp, #24
 8018680:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8018684:	9304      	str	r3, [sp, #16]
 8018686:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80188f0 <__kernel_rem_pio2f+0x314>
 801868a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80188ec <__kernel_rem_pio2f+0x310>
 801868e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8018692:	9303      	str	r3, [sp, #12]
 8018694:	464d      	mov	r5, r9
 8018696:	ab56      	add	r3, sp, #344	; 0x158
 8018698:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 801869c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80186a0:	3f01      	subs	r7, #1
 80186a2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80186a6:	00bf      	lsls	r7, r7, #2
 80186a8:	ab56      	add	r3, sp, #344	; 0x158
 80186aa:	19da      	adds	r2, r3, r7
 80186ac:	3a4c      	subs	r2, #76	; 0x4c
 80186ae:	2300      	movs	r3, #0
 80186b0:	1ae9      	subs	r1, r5, r3
 80186b2:	2900      	cmp	r1, #0
 80186b4:	dc4c      	bgt.n	8018750 <__kernel_rem_pio2f+0x174>
 80186b6:	4620      	mov	r0, r4
 80186b8:	f000 fb82 	bl	8018dc0 <scalbnf>
 80186bc:	eeb0 8a40 	vmov.f32	s16, s0
 80186c0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80186c4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80186c8:	f000 fb38 	bl	8018d3c <floorf>
 80186cc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80186d0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80186d4:	2c00      	cmp	r4, #0
 80186d6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80186da:	edcd 7a01 	vstr	s15, [sp, #4]
 80186de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80186e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80186e6:	dd48      	ble.n	801877a <__kernel_rem_pio2f+0x19e>
 80186e8:	1e69      	subs	r1, r5, #1
 80186ea:	ab06      	add	r3, sp, #24
 80186ec:	f1c4 0008 	rsb	r0, r4, #8
 80186f0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80186f4:	9a01      	ldr	r2, [sp, #4]
 80186f6:	fa4c f300 	asr.w	r3, ip, r0
 80186fa:	441a      	add	r2, r3
 80186fc:	4083      	lsls	r3, r0
 80186fe:	9201      	str	r2, [sp, #4]
 8018700:	ebac 0203 	sub.w	r2, ip, r3
 8018704:	ab06      	add	r3, sp, #24
 8018706:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801870a:	f1c4 0307 	rsb	r3, r4, #7
 801870e:	fa42 f803 	asr.w	r8, r2, r3
 8018712:	f1b8 0f00 	cmp.w	r8, #0
 8018716:	dd41      	ble.n	801879c <__kernel_rem_pio2f+0x1c0>
 8018718:	9b01      	ldr	r3, [sp, #4]
 801871a:	2000      	movs	r0, #0
 801871c:	3301      	adds	r3, #1
 801871e:	9301      	str	r3, [sp, #4]
 8018720:	4601      	mov	r1, r0
 8018722:	4285      	cmp	r5, r0
 8018724:	dc6d      	bgt.n	8018802 <__kernel_rem_pio2f+0x226>
 8018726:	2c00      	cmp	r4, #0
 8018728:	dd04      	ble.n	8018734 <__kernel_rem_pio2f+0x158>
 801872a:	2c01      	cmp	r4, #1
 801872c:	d07e      	beq.n	801882c <__kernel_rem_pio2f+0x250>
 801872e:	2c02      	cmp	r4, #2
 8018730:	f000 8086 	beq.w	8018840 <__kernel_rem_pio2f+0x264>
 8018734:	f1b8 0f02 	cmp.w	r8, #2
 8018738:	d130      	bne.n	801879c <__kernel_rem_pio2f+0x1c0>
 801873a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801873e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018742:	b359      	cbz	r1, 801879c <__kernel_rem_pio2f+0x1c0>
 8018744:	4620      	mov	r0, r4
 8018746:	f000 fb3b 	bl	8018dc0 <scalbnf>
 801874a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801874e:	e025      	b.n	801879c <__kernel_rem_pio2f+0x1c0>
 8018750:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018754:	a806      	add	r0, sp, #24
 8018756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801875a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801875e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018762:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018766:	ee10 1a10 	vmov	r1, s0
 801876a:	ed32 0a01 	vldmdb	r2!, {s0}
 801876e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8018772:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018776:	3301      	adds	r3, #1
 8018778:	e79a      	b.n	80186b0 <__kernel_rem_pio2f+0xd4>
 801877a:	d106      	bne.n	801878a <__kernel_rem_pio2f+0x1ae>
 801877c:	1e6b      	subs	r3, r5, #1
 801877e:	aa06      	add	r2, sp, #24
 8018780:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8018784:	ea4f 2822 	mov.w	r8, r2, asr #8
 8018788:	e7c3      	b.n	8018712 <__kernel_rem_pio2f+0x136>
 801878a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801878e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018796:	da31      	bge.n	80187fc <__kernel_rem_pio2f+0x220>
 8018798:	f04f 0800 	mov.w	r8, #0
 801879c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80187a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a4:	f040 80a8 	bne.w	80188f8 <__kernel_rem_pio2f+0x31c>
 80187a8:	1e6b      	subs	r3, r5, #1
 80187aa:	4618      	mov	r0, r3
 80187ac:	2200      	movs	r2, #0
 80187ae:	4548      	cmp	r0, r9
 80187b0:	da4d      	bge.n	801884e <__kernel_rem_pio2f+0x272>
 80187b2:	2a00      	cmp	r2, #0
 80187b4:	f000 8087 	beq.w	80188c6 <__kernel_rem_pio2f+0x2ea>
 80187b8:	aa06      	add	r2, sp, #24
 80187ba:	3c08      	subs	r4, #8
 80187bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80187c0:	2900      	cmp	r1, #0
 80187c2:	f000 808d 	beq.w	80188e0 <__kernel_rem_pio2f+0x304>
 80187c6:	4620      	mov	r0, r4
 80187c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80187cc:	9302      	str	r3, [sp, #8]
 80187ce:	f000 faf7 	bl	8018dc0 <scalbnf>
 80187d2:	9b02      	ldr	r3, [sp, #8]
 80187d4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80188f0 <__kernel_rem_pio2f+0x314>
 80187d8:	0099      	lsls	r1, r3, #2
 80187da:	aa42      	add	r2, sp, #264	; 0x108
 80187dc:	1850      	adds	r0, r2, r1
 80187de:	1d05      	adds	r5, r0, #4
 80187e0:	461c      	mov	r4, r3
 80187e2:	2c00      	cmp	r4, #0
 80187e4:	f280 80b8 	bge.w	8018958 <__kernel_rem_pio2f+0x37c>
 80187e8:	2500      	movs	r5, #0
 80187ea:	1b5c      	subs	r4, r3, r5
 80187ec:	2c00      	cmp	r4, #0
 80187ee:	f2c0 80d8 	blt.w	80189a2 <__kernel_rem_pio2f+0x3c6>
 80187f2:	4f3d      	ldr	r7, [pc, #244]	; (80188e8 <__kernel_rem_pio2f+0x30c>)
 80187f4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80187f8:	2400      	movs	r4, #0
 80187fa:	e0c6      	b.n	801898a <__kernel_rem_pio2f+0x3ae>
 80187fc:	f04f 0802 	mov.w	r8, #2
 8018800:	e78a      	b.n	8018718 <__kernel_rem_pio2f+0x13c>
 8018802:	ab06      	add	r3, sp, #24
 8018804:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018808:	b949      	cbnz	r1, 801881e <__kernel_rem_pio2f+0x242>
 801880a:	b12b      	cbz	r3, 8018818 <__kernel_rem_pio2f+0x23c>
 801880c:	aa06      	add	r2, sp, #24
 801880e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8018812:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8018816:	2301      	movs	r3, #1
 8018818:	3001      	adds	r0, #1
 801881a:	4619      	mov	r1, r3
 801881c:	e781      	b.n	8018722 <__kernel_rem_pio2f+0x146>
 801881e:	aa06      	add	r2, sp, #24
 8018820:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8018824:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8018828:	460b      	mov	r3, r1
 801882a:	e7f5      	b.n	8018818 <__kernel_rem_pio2f+0x23c>
 801882c:	1e68      	subs	r0, r5, #1
 801882e:	ab06      	add	r3, sp, #24
 8018830:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018838:	aa06      	add	r2, sp, #24
 801883a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801883e:	e779      	b.n	8018734 <__kernel_rem_pio2f+0x158>
 8018840:	1e68      	subs	r0, r5, #1
 8018842:	ab06      	add	r3, sp, #24
 8018844:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801884c:	e7f4      	b.n	8018838 <__kernel_rem_pio2f+0x25c>
 801884e:	a906      	add	r1, sp, #24
 8018850:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018854:	3801      	subs	r0, #1
 8018856:	430a      	orrs	r2, r1
 8018858:	e7a9      	b.n	80187ae <__kernel_rem_pio2f+0x1d2>
 801885a:	f10c 0c01 	add.w	ip, ip, #1
 801885e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018862:	2a00      	cmp	r2, #0
 8018864:	d0f9      	beq.n	801885a <__kernel_rem_pio2f+0x27e>
 8018866:	eb0b 0305 	add.w	r3, fp, r5
 801886a:	aa1a      	add	r2, sp, #104	; 0x68
 801886c:	009b      	lsls	r3, r3, #2
 801886e:	1898      	adds	r0, r3, r2
 8018870:	3004      	adds	r0, #4
 8018872:	1c69      	adds	r1, r5, #1
 8018874:	3704      	adds	r7, #4
 8018876:	2200      	movs	r2, #0
 8018878:	4465      	add	r5, ip
 801887a:	9005      	str	r0, [sp, #20]
 801887c:	428d      	cmp	r5, r1
 801887e:	f6ff af0a 	blt.w	8018696 <__kernel_rem_pio2f+0xba>
 8018882:	a81a      	add	r0, sp, #104	; 0x68
 8018884:	eb02 0c03 	add.w	ip, r2, r3
 8018888:	4484      	add	ip, r0
 801888a:	9803      	ldr	r0, [sp, #12]
 801888c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018890:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8018894:	9001      	str	r0, [sp, #4]
 8018896:	ee07 0a90 	vmov	s15, r0
 801889a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801889e:	9805      	ldr	r0, [sp, #20]
 80188a0:	edcc 7a00 	vstr	s15, [ip]
 80188a4:	eddf 7a13 	vldr	s15, [pc, #76]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80188a8:	eb00 0802 	add.w	r8, r0, r2
 80188ac:	f04f 0c00 	mov.w	ip, #0
 80188b0:	45d4      	cmp	ip, sl
 80188b2:	dd0c      	ble.n	80188ce <__kernel_rem_pio2f+0x2f2>
 80188b4:	eb02 0c07 	add.w	ip, r2, r7
 80188b8:	a842      	add	r0, sp, #264	; 0x108
 80188ba:	4484      	add	ip, r0
 80188bc:	edcc 7a01 	vstr	s15, [ip, #4]
 80188c0:	3101      	adds	r1, #1
 80188c2:	3204      	adds	r2, #4
 80188c4:	e7da      	b.n	801887c <__kernel_rem_pio2f+0x2a0>
 80188c6:	9b04      	ldr	r3, [sp, #16]
 80188c8:	f04f 0c01 	mov.w	ip, #1
 80188cc:	e7c7      	b.n	801885e <__kernel_rem_pio2f+0x282>
 80188ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80188d2:	ed38 7a01 	vldmdb	r8!, {s14}
 80188d6:	f10c 0c01 	add.w	ip, ip, #1
 80188da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80188de:	e7e7      	b.n	80188b0 <__kernel_rem_pio2f+0x2d4>
 80188e0:	3b01      	subs	r3, #1
 80188e2:	e769      	b.n	80187b8 <__kernel_rem_pio2f+0x1dc>
 80188e4:	0801b7f4 	.word	0x0801b7f4
 80188e8:	0801b7c8 	.word	0x0801b7c8
 80188ec:	43800000 	.word	0x43800000
 80188f0:	3b800000 	.word	0x3b800000
 80188f4:	00000000 	.word	0x00000000
 80188f8:	4260      	negs	r0, r4
 80188fa:	eeb0 0a48 	vmov.f32	s0, s16
 80188fe:	f000 fa5f 	bl	8018dc0 <scalbnf>
 8018902:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80188ec <__kernel_rem_pio2f+0x310>
 8018906:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890e:	db1a      	blt.n	8018946 <__kernel_rem_pio2f+0x36a>
 8018910:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80188f0 <__kernel_rem_pio2f+0x314>
 8018914:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018918:	aa06      	add	r2, sp, #24
 801891a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801891e:	a906      	add	r1, sp, #24
 8018920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018924:	3408      	adds	r4, #8
 8018926:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801892a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801892e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018932:	ee10 3a10 	vmov	r3, s0
 8018936:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801893a:	1c6b      	adds	r3, r5, #1
 801893c:	ee17 2a90 	vmov	r2, s15
 8018940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018944:	e73f      	b.n	80187c6 <__kernel_rem_pio2f+0x1ea>
 8018946:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801894a:	aa06      	add	r2, sp, #24
 801894c:	ee10 3a10 	vmov	r3, s0
 8018950:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8018954:	462b      	mov	r3, r5
 8018956:	e736      	b.n	80187c6 <__kernel_rem_pio2f+0x1ea>
 8018958:	aa06      	add	r2, sp, #24
 801895a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801895e:	9202      	str	r2, [sp, #8]
 8018960:	ee07 2a90 	vmov	s15, r2
 8018964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018968:	3c01      	subs	r4, #1
 801896a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801896e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018972:	ed65 7a01 	vstmdb	r5!, {s15}
 8018976:	e734      	b.n	80187e2 <__kernel_rem_pio2f+0x206>
 8018978:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801897c:	ecf7 6a01 	vldmia	r7!, {s13}
 8018980:	ed9c 7a00 	vldr	s14, [ip]
 8018984:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018988:	3401      	adds	r4, #1
 801898a:	454c      	cmp	r4, r9
 801898c:	dc01      	bgt.n	8018992 <__kernel_rem_pio2f+0x3b6>
 801898e:	42a5      	cmp	r5, r4
 8018990:	daf2      	bge.n	8018978 <__kernel_rem_pio2f+0x39c>
 8018992:	aa56      	add	r2, sp, #344	; 0x158
 8018994:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8018998:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 801899c:	3501      	adds	r5, #1
 801899e:	3804      	subs	r0, #4
 80189a0:	e723      	b.n	80187ea <__kernel_rem_pio2f+0x20e>
 80189a2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80189a4:	2a03      	cmp	r2, #3
 80189a6:	d84d      	bhi.n	8018a44 <__kernel_rem_pio2f+0x468>
 80189a8:	e8df f002 	tbb	[pc, r2]
 80189ac:	021f1f3e 	.word	0x021f1f3e
 80189b0:	aa56      	add	r2, sp, #344	; 0x158
 80189b2:	4411      	add	r1, r2
 80189b4:	399c      	subs	r1, #156	; 0x9c
 80189b6:	4608      	mov	r0, r1
 80189b8:	461c      	mov	r4, r3
 80189ba:	2c00      	cmp	r4, #0
 80189bc:	dc5f      	bgt.n	8018a7e <__kernel_rem_pio2f+0x4a2>
 80189be:	4608      	mov	r0, r1
 80189c0:	461c      	mov	r4, r3
 80189c2:	2c01      	cmp	r4, #1
 80189c4:	dc6b      	bgt.n	8018a9e <__kernel_rem_pio2f+0x4c2>
 80189c6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80189ca:	2b01      	cmp	r3, #1
 80189cc:	dc77      	bgt.n	8018abe <__kernel_rem_pio2f+0x4e2>
 80189ce:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80189d2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80189d6:	f1b8 0f00 	cmp.w	r8, #0
 80189da:	d176      	bne.n	8018aca <__kernel_rem_pio2f+0x4ee>
 80189dc:	edc6 6a00 	vstr	s13, [r6]
 80189e0:	ed86 7a01 	vstr	s14, [r6, #4]
 80189e4:	edc6 7a02 	vstr	s15, [r6, #8]
 80189e8:	e02c      	b.n	8018a44 <__kernel_rem_pio2f+0x468>
 80189ea:	aa56      	add	r2, sp, #344	; 0x158
 80189ec:	4411      	add	r1, r2
 80189ee:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80188f4 <__kernel_rem_pio2f+0x318>
 80189f2:	399c      	subs	r1, #156	; 0x9c
 80189f4:	4618      	mov	r0, r3
 80189f6:	2800      	cmp	r0, #0
 80189f8:	da32      	bge.n	8018a60 <__kernel_rem_pio2f+0x484>
 80189fa:	f1b8 0f00 	cmp.w	r8, #0
 80189fe:	d035      	beq.n	8018a6c <__kernel_rem_pio2f+0x490>
 8018a00:	eef1 7a47 	vneg.f32	s15, s14
 8018a04:	edc6 7a00 	vstr	s15, [r6]
 8018a08:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8018a0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a10:	a82f      	add	r0, sp, #188	; 0xbc
 8018a12:	2101      	movs	r1, #1
 8018a14:	428b      	cmp	r3, r1
 8018a16:	da2c      	bge.n	8018a72 <__kernel_rem_pio2f+0x496>
 8018a18:	f1b8 0f00 	cmp.w	r8, #0
 8018a1c:	d001      	beq.n	8018a22 <__kernel_rem_pio2f+0x446>
 8018a1e:	eef1 7a67 	vneg.f32	s15, s15
 8018a22:	edc6 7a01 	vstr	s15, [r6, #4]
 8018a26:	e00d      	b.n	8018a44 <__kernel_rem_pio2f+0x468>
 8018a28:	aa56      	add	r2, sp, #344	; 0x158
 8018a2a:	4411      	add	r1, r2
 8018a2c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80188f4 <__kernel_rem_pio2f+0x318>
 8018a30:	399c      	subs	r1, #156	; 0x9c
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	da0e      	bge.n	8018a54 <__kernel_rem_pio2f+0x478>
 8018a36:	f1b8 0f00 	cmp.w	r8, #0
 8018a3a:	d001      	beq.n	8018a40 <__kernel_rem_pio2f+0x464>
 8018a3c:	eef1 7a67 	vneg.f32	s15, s15
 8018a40:	edc6 7a00 	vstr	s15, [r6]
 8018a44:	9b01      	ldr	r3, [sp, #4]
 8018a46:	f003 0007 	and.w	r0, r3, #7
 8018a4a:	b057      	add	sp, #348	; 0x15c
 8018a4c:	ecbd 8b04 	vpop	{d8-d9}
 8018a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a54:	ed31 7a01 	vldmdb	r1!, {s14}
 8018a58:	3b01      	subs	r3, #1
 8018a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a5e:	e7e8      	b.n	8018a32 <__kernel_rem_pio2f+0x456>
 8018a60:	ed71 7a01 	vldmdb	r1!, {s15}
 8018a64:	3801      	subs	r0, #1
 8018a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a6a:	e7c4      	b.n	80189f6 <__kernel_rem_pio2f+0x41a>
 8018a6c:	eef0 7a47 	vmov.f32	s15, s14
 8018a70:	e7c8      	b.n	8018a04 <__kernel_rem_pio2f+0x428>
 8018a72:	ecb0 7a01 	vldmia	r0!, {s14}
 8018a76:	3101      	adds	r1, #1
 8018a78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a7c:	e7ca      	b.n	8018a14 <__kernel_rem_pio2f+0x438>
 8018a7e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8018a82:	ed70 6a01 	vldmdb	r0!, {s13}
 8018a86:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018a8a:	3c01      	subs	r4, #1
 8018a8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a90:	ed00 7a01 	vstr	s14, [r0, #-4]
 8018a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a98:	edc0 7a00 	vstr	s15, [r0]
 8018a9c:	e78d      	b.n	80189ba <__kernel_rem_pio2f+0x3de>
 8018a9e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8018aa2:	ed70 6a01 	vldmdb	r0!, {s13}
 8018aa6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018aaa:	3c01      	subs	r4, #1
 8018aac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ab0:	ed00 7a01 	vstr	s14, [r0, #-4]
 8018ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ab8:	edc0 7a00 	vstr	s15, [r0]
 8018abc:	e781      	b.n	80189c2 <__kernel_rem_pio2f+0x3e6>
 8018abe:	ed31 7a01 	vldmdb	r1!, {s14}
 8018ac2:	3b01      	subs	r3, #1
 8018ac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ac8:	e77f      	b.n	80189ca <__kernel_rem_pio2f+0x3ee>
 8018aca:	eef1 6a66 	vneg.f32	s13, s13
 8018ace:	eeb1 7a47 	vneg.f32	s14, s14
 8018ad2:	edc6 6a00 	vstr	s13, [r6]
 8018ad6:	ed86 7a01 	vstr	s14, [r6, #4]
 8018ada:	eef1 7a67 	vneg.f32	s15, s15
 8018ade:	e781      	b.n	80189e4 <__kernel_rem_pio2f+0x408>

08018ae0 <__kernel_sinf>:
 8018ae0:	ee10 3a10 	vmov	r3, s0
 8018ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ae8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018aec:	da04      	bge.n	8018af8 <__kernel_sinf+0x18>
 8018aee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018af2:	ee17 3a90 	vmov	r3, s15
 8018af6:	b35b      	cbz	r3, 8018b50 <__kernel_sinf+0x70>
 8018af8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018afc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018b54 <__kernel_sinf+0x74>
 8018b00:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8018b58 <__kernel_sinf+0x78>
 8018b04:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b08:	eddf 7a14 	vldr	s15, [pc, #80]	; 8018b5c <__kernel_sinf+0x7c>
 8018b0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b10:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8018b60 <__kernel_sinf+0x80>
 8018b14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018b18:	eddf 7a12 	vldr	s15, [pc, #72]	; 8018b64 <__kernel_sinf+0x84>
 8018b1c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018b20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b24:	b930      	cbnz	r0, 8018b34 <__kernel_sinf+0x54>
 8018b26:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018b68 <__kernel_sinf+0x88>
 8018b2a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b2e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018b32:	4770      	bx	lr
 8018b34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018b38:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018b3c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018b40:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018b44:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018b6c <__kernel_sinf+0x8c>
 8018b48:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018b4c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018b50:	4770      	bx	lr
 8018b52:	bf00      	nop
 8018b54:	2f2ec9d3 	.word	0x2f2ec9d3
 8018b58:	b2d72f34 	.word	0xb2d72f34
 8018b5c:	3638ef1b 	.word	0x3638ef1b
 8018b60:	b9500d01 	.word	0xb9500d01
 8018b64:	3c088889 	.word	0x3c088889
 8018b68:	be2aaaab 	.word	0xbe2aaaab
 8018b6c:	3e2aaaab 	.word	0x3e2aaaab

08018b70 <__kernel_tanf>:
 8018b70:	b508      	push	{r3, lr}
 8018b72:	ee10 3a10 	vmov	r3, s0
 8018b76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018b7a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8018b7e:	eef0 7a40 	vmov.f32	s15, s0
 8018b82:	da17      	bge.n	8018bb4 <__kernel_tanf+0x44>
 8018b84:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8018b88:	ee17 1a10 	vmov	r1, s14
 8018b8c:	bb41      	cbnz	r1, 8018be0 <__kernel_tanf+0x70>
 8018b8e:	1c43      	adds	r3, r0, #1
 8018b90:	4313      	orrs	r3, r2
 8018b92:	d108      	bne.n	8018ba6 <__kernel_tanf+0x36>
 8018b94:	f7ff fa22 	bl	8017fdc <fabsf>
 8018b98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8018ba4:	bd08      	pop	{r3, pc}
 8018ba6:	2801      	cmp	r0, #1
 8018ba8:	d0fa      	beq.n	8018ba0 <__kernel_tanf+0x30>
 8018baa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018bae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018bb2:	e7f5      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018bb4:	494e      	ldr	r1, [pc, #312]	; (8018cf0 <__kernel_tanf+0x180>)
 8018bb6:	428a      	cmp	r2, r1
 8018bb8:	dd12      	ble.n	8018be0 <__kernel_tanf+0x70>
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8018cf4 <__kernel_tanf+0x184>
 8018bc0:	bfb8      	it	lt
 8018bc2:	eef1 7a40 	vneglt.f32	s15, s0
 8018bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018bca:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018cf8 <__kernel_tanf+0x188>
 8018bce:	bfb8      	it	lt
 8018bd0:	eef1 0a60 	vneglt.f32	s1, s1
 8018bd4:	ee77 0a60 	vsub.f32	s1, s14, s1
 8018bd8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8018bdc:	eddf 0a47 	vldr	s1, [pc, #284]	; 8018cfc <__kernel_tanf+0x18c>
 8018be0:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8018d00 <__kernel_tanf+0x190>
 8018be4:	eddf 5a47 	vldr	s11, [pc, #284]	; 8018d04 <__kernel_tanf+0x194>
 8018be8:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8018d08 <__kernel_tanf+0x198>
 8018bec:	4940      	ldr	r1, [pc, #256]	; (8018cf0 <__kernel_tanf+0x180>)
 8018bee:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8018bf2:	428a      	cmp	r2, r1
 8018bf4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018bf8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8018bfc:	eee7 5a06 	vfma.f32	s11, s14, s12
 8018c00:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8018d0c <__kernel_tanf+0x19c>
 8018c04:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018c08:	eddf 5a41 	vldr	s11, [pc, #260]	; 8018d10 <__kernel_tanf+0x1a0>
 8018c0c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018c10:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8018d14 <__kernel_tanf+0x1a4>
 8018c14:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018c18:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8018d18 <__kernel_tanf+0x1a8>
 8018c1c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018c20:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8018d1c <__kernel_tanf+0x1ac>
 8018c24:	eea7 6a05 	vfma.f32	s12, s14, s10
 8018c28:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8018d20 <__kernel_tanf+0x1b0>
 8018c2c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8018c30:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8018d24 <__kernel_tanf+0x1b4>
 8018c34:	eea5 6a07 	vfma.f32	s12, s10, s14
 8018c38:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8018d28 <__kernel_tanf+0x1b8>
 8018c3c:	eea6 5a07 	vfma.f32	s10, s12, s14
 8018c40:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8018d2c <__kernel_tanf+0x1bc>
 8018c44:	eea5 6a07 	vfma.f32	s12, s10, s14
 8018c48:	eeb0 7a46 	vmov.f32	s14, s12
 8018c4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018c50:	eeb0 6a60 	vmov.f32	s12, s1
 8018c54:	eea7 6a24 	vfma.f32	s12, s14, s9
 8018c58:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8018d30 <__kernel_tanf+0x1c0>
 8018c5c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8018c60:	eee4 0a87 	vfma.f32	s1, s9, s14
 8018c64:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018c68:	dd1d      	ble.n	8018ca6 <__kernel_tanf+0x136>
 8018c6a:	ee07 0a10 	vmov	s14, r0
 8018c6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c72:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8018c76:	ee76 6a87 	vadd.f32	s13, s13, s14
 8018c7a:	179b      	asrs	r3, r3, #30
 8018c7c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8018c80:	f003 0302 	and.w	r3, r3, #2
 8018c84:	f1c3 0301 	rsb	r3, r3, #1
 8018c88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018c8c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8018c90:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018c94:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018c98:	ee07 3a90 	vmov	s15, r3
 8018c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018ca4:	e77c      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018ca6:	2801      	cmp	r0, #1
 8018ca8:	d01f      	beq.n	8018cea <__kernel_tanf+0x17a>
 8018caa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018cae:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8018cb2:	4b20      	ldr	r3, [pc, #128]	; (8018d34 <__kernel_tanf+0x1c4>)
 8018cb4:	ee16 2a90 	vmov	r2, s13
 8018cb8:	401a      	ands	r2, r3
 8018cba:	ee06 2a10 	vmov	s12, r2
 8018cbe:	ee15 2a90 	vmov	r2, s11
 8018cc2:	4013      	ands	r3, r2
 8018cc4:	ee07 3a10 	vmov	s14, r3
 8018cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018ccc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018cd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8018cd4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018cd8:	eef0 7a66 	vmov.f32	s15, s13
 8018cdc:	eee7 7a20 	vfma.f32	s15, s14, s1
 8018ce0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8018ce4:	eef0 7a47 	vmov.f32	s15, s14
 8018ce8:	e75a      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018cea:	eef0 7a66 	vmov.f32	s15, s13
 8018cee:	e757      	b.n	8018ba0 <__kernel_tanf+0x30>
 8018cf0:	3f2ca13f 	.word	0x3f2ca13f
 8018cf4:	3f490fda 	.word	0x3f490fda
 8018cf8:	33222168 	.word	0x33222168
 8018cfc:	00000000 	.word	0x00000000
 8018d00:	37d95384 	.word	0x37d95384
 8018d04:	3895c07a 	.word	0x3895c07a
 8018d08:	b79bae5f 	.word	0xb79bae5f
 8018d0c:	398137b9 	.word	0x398137b9
 8018d10:	3abede48 	.word	0x3abede48
 8018d14:	3c11371f 	.word	0x3c11371f
 8018d18:	3d5d0dd1 	.word	0x3d5d0dd1
 8018d1c:	38a3f445 	.word	0x38a3f445
 8018d20:	3a1a26c8 	.word	0x3a1a26c8
 8018d24:	3b6b6916 	.word	0x3b6b6916
 8018d28:	3cb327a4 	.word	0x3cb327a4
 8018d2c:	3e088889 	.word	0x3e088889
 8018d30:	3eaaaaab 	.word	0x3eaaaaab
 8018d34:	fffff000 	.word	0xfffff000

08018d38 <matherr>:
 8018d38:	2000      	movs	r0, #0
 8018d3a:	4770      	bx	lr

08018d3c <floorf>:
 8018d3c:	ee10 3a10 	vmov	r3, s0
 8018d40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018d44:	0dca      	lsrs	r2, r1, #23
 8018d46:	3a7f      	subs	r2, #127	; 0x7f
 8018d48:	2a16      	cmp	r2, #22
 8018d4a:	dc2a      	bgt.n	8018da2 <floorf+0x66>
 8018d4c:	2a00      	cmp	r2, #0
 8018d4e:	da11      	bge.n	8018d74 <floorf+0x38>
 8018d50:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018db4 <floorf+0x78>
 8018d54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018d58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d60:	dd05      	ble.n	8018d6e <floorf+0x32>
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	da23      	bge.n	8018dae <floorf+0x72>
 8018d66:	4a14      	ldr	r2, [pc, #80]	; (8018db8 <floorf+0x7c>)
 8018d68:	2900      	cmp	r1, #0
 8018d6a:	bf18      	it	ne
 8018d6c:	4613      	movne	r3, r2
 8018d6e:	ee00 3a10 	vmov	s0, r3
 8018d72:	4770      	bx	lr
 8018d74:	4911      	ldr	r1, [pc, #68]	; (8018dbc <floorf+0x80>)
 8018d76:	4111      	asrs	r1, r2
 8018d78:	420b      	tst	r3, r1
 8018d7a:	d0fa      	beq.n	8018d72 <floorf+0x36>
 8018d7c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018db4 <floorf+0x78>
 8018d80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018d84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8c:	ddef      	ble.n	8018d6e <floorf+0x32>
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	bfbe      	ittt	lt
 8018d92:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8018d96:	fa40 f202 	asrlt.w	r2, r0, r2
 8018d9a:	189b      	addlt	r3, r3, r2
 8018d9c:	ea23 0301 	bic.w	r3, r3, r1
 8018da0:	e7e5      	b.n	8018d6e <floorf+0x32>
 8018da2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018da6:	d3e4      	bcc.n	8018d72 <floorf+0x36>
 8018da8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018dac:	4770      	bx	lr
 8018dae:	2300      	movs	r3, #0
 8018db0:	e7dd      	b.n	8018d6e <floorf+0x32>
 8018db2:	bf00      	nop
 8018db4:	7149f2ca 	.word	0x7149f2ca
 8018db8:	bf800000 	.word	0xbf800000
 8018dbc:	007fffff 	.word	0x007fffff

08018dc0 <scalbnf>:
 8018dc0:	b508      	push	{r3, lr}
 8018dc2:	ee10 2a10 	vmov	r2, s0
 8018dc6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8018dca:	ed2d 8b02 	vpush	{d8}
 8018dce:	eef0 0a40 	vmov.f32	s1, s0
 8018dd2:	d004      	beq.n	8018dde <scalbnf+0x1e>
 8018dd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018dd8:	d306      	bcc.n	8018de8 <scalbnf+0x28>
 8018dda:	ee70 0a00 	vadd.f32	s1, s0, s0
 8018dde:	ecbd 8b02 	vpop	{d8}
 8018de2:	eeb0 0a60 	vmov.f32	s0, s1
 8018de6:	bd08      	pop	{r3, pc}
 8018de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8018dec:	d21c      	bcs.n	8018e28 <scalbnf+0x68>
 8018dee:	4b1f      	ldr	r3, [pc, #124]	; (8018e6c <scalbnf+0xac>)
 8018df0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018e70 <scalbnf+0xb0>
 8018df4:	4298      	cmp	r0, r3
 8018df6:	ee60 0a27 	vmul.f32	s1, s0, s15
 8018dfa:	db10      	blt.n	8018e1e <scalbnf+0x5e>
 8018dfc:	ee10 2a90 	vmov	r2, s1
 8018e00:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8018e04:	3b19      	subs	r3, #25
 8018e06:	4403      	add	r3, r0
 8018e08:	2bfe      	cmp	r3, #254	; 0xfe
 8018e0a:	dd0f      	ble.n	8018e2c <scalbnf+0x6c>
 8018e0c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8018e74 <scalbnf+0xb4>
 8018e10:	eeb0 0a48 	vmov.f32	s0, s16
 8018e14:	f000 f834 	bl	8018e80 <copysignf>
 8018e18:	ee60 0a08 	vmul.f32	s1, s0, s16
 8018e1c:	e7df      	b.n	8018dde <scalbnf+0x1e>
 8018e1e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8018e78 <scalbnf+0xb8>
 8018e22:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8018e26:	e7da      	b.n	8018dde <scalbnf+0x1e>
 8018e28:	0ddb      	lsrs	r3, r3, #23
 8018e2a:	e7ec      	b.n	8018e06 <scalbnf+0x46>
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	dd06      	ble.n	8018e3e <scalbnf+0x7e>
 8018e30:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8018e34:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018e38:	ee00 3a90 	vmov	s1, r3
 8018e3c:	e7cf      	b.n	8018dde <scalbnf+0x1e>
 8018e3e:	f113 0f16 	cmn.w	r3, #22
 8018e42:	da06      	bge.n	8018e52 <scalbnf+0x92>
 8018e44:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018e48:	4298      	cmp	r0, r3
 8018e4a:	dcdf      	bgt.n	8018e0c <scalbnf+0x4c>
 8018e4c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8018e78 <scalbnf+0xb8>
 8018e50:	e7de      	b.n	8018e10 <scalbnf+0x50>
 8018e52:	3319      	adds	r3, #25
 8018e54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8018e58:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018e5c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018e7c <scalbnf+0xbc>
 8018e60:	ee07 3a10 	vmov	s14, r3
 8018e64:	ee67 0a27 	vmul.f32	s1, s14, s15
 8018e68:	e7b9      	b.n	8018dde <scalbnf+0x1e>
 8018e6a:	bf00      	nop
 8018e6c:	ffff3cb0 	.word	0xffff3cb0
 8018e70:	4c000000 	.word	0x4c000000
 8018e74:	7149f2ca 	.word	0x7149f2ca
 8018e78:	0da24260 	.word	0x0da24260
 8018e7c:	33000000 	.word	0x33000000

08018e80 <copysignf>:
 8018e80:	ee10 3a10 	vmov	r3, s0
 8018e84:	ee10 2a90 	vmov	r2, s1
 8018e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e8c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8018e90:	4313      	orrs	r3, r2
 8018e92:	ee00 3a10 	vmov	s0, r3
 8018e96:	4770      	bx	lr

08018e98 <__errno>:
 8018e98:	4b01      	ldr	r3, [pc, #4]	; (8018ea0 <__errno+0x8>)
 8018e9a:	6818      	ldr	r0, [r3, #0]
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop
 8018ea0:	2000018c 	.word	0x2000018c

08018ea4 <_init>:
 8018ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ea6:	bf00      	nop
 8018ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eaa:	bc08      	pop	{r3}
 8018eac:	469e      	mov	lr, r3
 8018eae:	4770      	bx	lr

08018eb0 <_fini>:
 8018eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb2:	bf00      	nop
 8018eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb6:	bc08      	pop	{r3}
 8018eb8:	469e      	mov	lr, r3
 8018eba:	4770      	bx	lr
